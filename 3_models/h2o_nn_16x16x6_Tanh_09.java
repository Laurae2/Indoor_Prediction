/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:08:43.235+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_09

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_09 > h2o_nn_16x16x6_Tanh_09.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_09.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_09", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_09 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_09_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_09_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_09_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_09_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_09_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_09_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_09_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_09_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_09_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_09_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_09_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_09_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_09.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_09_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25961538461538464,0.11538461538461539,0.11538461538461539,0.125,0.25961538461538464,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_09() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(1262216715047602600L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_09_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_09_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_09_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_09_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_09_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_09_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_09_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_09_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_09_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_09_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_09_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_09_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_09_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_09_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_09_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_09_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0027331194327699453;
      sa[1] = 0.026998089564505997;
      sa[2] = 0.12773920210667974;
      sa[3] = -0.22020505498612525;
      sa[4] = 0.1075935523245834;
      sa[5] = -0.046018366126924025;
      sa[6] = -0.013980608592576665;
      sa[7] = 0.009516555328503658;
      sa[8] = -0.01834505456633437;
      sa[9] = 0.0286152752622075;
      sa[10] = 0.08463981027011946;
      sa[11] = -0.07067769943863861;
      sa[12] = 0.120584978004086;
      sa[13] = 0.09214137052229547;
      sa[14] = -0.07107857272233147;
      sa[15] = 0.025992248352738657;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_09_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_09_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_09_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0628968670578596;
      sa[1] = 0.001161728590947956;
      sa[2] = -0.10622368647133083;
      sa[3] = 0.14198395483147014;
      sa[4] = -0.01062440354000637;
      sa[5] = -0.11196631495074973;
      sa[6] = 0.009336127058354697;
      sa[7] = -0.01793315470516862;
      sa[8] = -0.0637907471725408;
      sa[9] = -0.08551536463070647;
      sa[10] = 0.14774240765814223;
      sa[11] = 0.2803256610514147;
      sa[12] = 0.011915193521302834;
      sa[13] = -0.06019856095273843;
      sa[14] = -0.07722282182683739;
      sa[15] = -0.23018618142415445;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_09_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_09_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_09_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.06127656357094984;
      sa[1] = -0.02594087894645451;
      sa[2] = -0.06312384222842839;
      sa[3] = 0.009977629704115563;
      sa[4] = 0.06471911772408422;
      sa[5] = -0.21438933433867943;
    }
  }
}
class h2o_nn_16x16x6_Tanh_09_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_09_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_09_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_09_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.015316172f;
      sa[1] = 0.26737848f;
      sa[2] = 0.3242119f;
      sa[3] = 0.0030579676f;
      sa[4] = -0.03252594f;
      sa[5] = -0.18775457f;
      sa[6] = 0.088874f;
      sa[7] = 0.5222363f;
      sa[8] = 0.062450208f;
      sa[9] = 0.034881625f;
      sa[10] = -0.28854167f;
      sa[11] = -0.23121835f;
      sa[12] = 0.19161181f;
      sa[13] = -0.27163577f;
      sa[14] = -0.06686603f;
      sa[15] = 0.22667164f;
      sa[16] = 0.27886912f;
      sa[17] = 0.32832545f;
      sa[18] = -0.123529494f;
      sa[19] = -0.06470461f;
      sa[20] = 0.42204723f;
      sa[21] = -0.12782767f;
      sa[22] = 0.4224157f;
      sa[23] = 0.15778713f;
      sa[24] = 0.4755858f;
      sa[25] = 0.13118036f;
      sa[26] = -0.24906692f;
      sa[27] = 0.3212684f;
      sa[28] = 0.35875905f;
      sa[29] = -0.16534014f;
      sa[30] = -0.15835741f;
      sa[31] = 0.3991774f;
      sa[32] = 0.23832566f;
      sa[33] = -0.23977122f;
      sa[34] = 0.03152658f;
      sa[35] = -0.068093926f;
      sa[36] = 0.0873273f;
      sa[37] = 0.2332383f;
      sa[38] = -0.16753332f;
      sa[39] = 0.22691843f;
      sa[40] = 0.030925427f;
      sa[41] = -0.13730478f;
      sa[42] = -0.18038636f;
      sa[43] = -0.041612666f;
      sa[44] = 0.22594689f;
      sa[45] = -0.25073674f;
      sa[46] = -0.010374023f;
      sa[47] = -0.19736326f;
      sa[48] = 0.20395268f;
      sa[49] = 0.21389501f;
      sa[50] = 0.16897056f;
      sa[51] = -0.40004137f;
      sa[52] = -0.11036138f;
      sa[53] = 0.2905072f;
      sa[54] = 0.40591177f;
      sa[55] = 0.07685909f;
      sa[56] = -0.23007418f;
      sa[57] = -0.33495808f;
      sa[58] = 0.25000945f;
      sa[59] = -0.26172638f;
      sa[60] = -0.43374157f;
      sa[61] = 0.14441508f;
      sa[62] = 0.27659547f;
      sa[63] = 0.04148992f;
      sa[64] = 0.10055829f;
      sa[65] = 0.107100554f;
      sa[66] = -0.04625903f;
      sa[67] = 0.06690853f;
      sa[68] = -0.16204187f;
      sa[69] = 0.031388156f;
      sa[70] = 0.04921531f;
      sa[71] = 0.43832847f;
      sa[72] = -0.09786429f;
      sa[73] = 0.18552768f;
      sa[74] = -0.18355772f;
      sa[75] = 0.0137497755f;
      sa[76] = -0.21757655f;
      sa[77] = -0.014265463f;
      sa[78] = -0.09748796f;
      sa[79] = 0.18342894f;
      sa[80] = -0.193088f;
      sa[81] = -0.1533715f;
      sa[82] = 0.08447832f;
      sa[83] = 0.047740772f;
      sa[84] = -0.0017776729f;
      sa[85] = -0.12947363f;
      sa[86] = 0.14608005f;
      sa[87] = 0.29370904f;
      sa[88] = 0.22965883f;
      sa[89] = 0.056290224f;
      sa[90] = -0.22968867f;
      sa[91] = 0.34113723f;
      sa[92] = 0.12163669f;
      sa[93] = -0.23540193f;
      sa[94] = -0.20399392f;
      sa[95] = -0.26161614f;
      sa[96] = 0.18306638f;
      sa[97] = 0.059156705f;
      sa[98] = 0.15598854f;
      sa[99] = 0.012797273f;
      sa[100] = 0.0041947784f;
      sa[101] = -0.14929569f;
      sa[102] = -0.18166219f;
      sa[103] = -0.011594334f;
      sa[104] = 0.07437156f;
      sa[105] = -0.13076928f;
      sa[106] = -0.35656866f;
      sa[107] = 0.019592246f;
      sa[108] = 0.16310711f;
      sa[109] = -0.16523929f;
      sa[110] = -0.23786993f;
      sa[111] = 0.058341138f;
      sa[112] = 0.06483377f;
      sa[113] = -0.023549497f;
      sa[114] = -0.20338449f;
      sa[115] = -0.02984599f;
      sa[116] = -0.25458932f;
      sa[117] = -0.024833847f;
      sa[118] = -0.2682742f;
      sa[119] = -0.030154964f;
      sa[120] = 0.25867575f;
      sa[121] = 0.26011264f;
      sa[122] = 0.3498722f;
      sa[123] = 0.34814677f;
      sa[124] = 0.29432577f;
      sa[125] = 0.2452858f;
      sa[126] = -0.3592521f;
      sa[127] = -0.3476408f;
      sa[128] = 0.092497826f;
      sa[129] = 0.15710844f;
      sa[130] = -0.10456119f;
      sa[131] = 0.3788102f;
      sa[132] = 0.216053f;
      sa[133] = -0.29246736f;
      sa[134] = 0.07312193f;
      sa[135] = -0.2591669f;
      sa[136] = -0.3063636f;
      sa[137] = -0.07387809f;
      sa[138] = 0.080788024f;
      sa[139] = -0.07615341f;
      sa[140] = -0.0996489f;
      sa[141] = -0.08739966f;
      sa[142] = 0.16915005f;
      sa[143] = -0.31712198f;
      sa[144] = 0.31823543f;
      sa[145] = -0.21031766f;
      sa[146] = -0.38712925f;
      sa[147] = 0.18987273f;
      sa[148] = 0.14710918f;
      sa[149] = 0.20848793f;
      sa[150] = 0.3008371f;
      sa[151] = -0.30518246f;
      sa[152] = 0.08423573f;
      sa[153] = 0.16105546f;
      sa[154] = 0.25916463f;
      sa[155] = -0.12691179f;
      sa[156] = 0.15863697f;
      sa[157] = -0.18120804f;
      sa[158] = 0.103299305f;
      sa[159] = 0.101368375f;
      sa[160] = -0.032090947f;
      sa[161] = 0.0858848f;
      sa[162] = -0.16241667f;
      sa[163] = -0.15721963f;
      sa[164] = 0.2499147f;
      sa[165] = -0.060167108f;
      sa[166] = -0.076939195f;
      sa[167] = -0.14460118f;
      sa[168] = 0.109416455f;
      sa[169] = 0.32477254f;
      sa[170] = 0.07867809f;
      sa[171] = -0.07994468f;
      sa[172] = -0.087121055f;
      sa[173] = -0.19936368f;
      sa[174] = -0.0378097f;
      sa[175] = -0.32609028f;
      sa[176] = -0.024011701f;
      sa[177] = -0.0276095f;
      sa[178] = -0.059432056f;
      sa[179] = 0.08254955f;
      sa[180] = -0.113600716f;
      sa[181] = -0.31302476f;
      sa[182] = -0.1189697f;
      sa[183] = 0.17774066f;
      sa[184] = 0.2885825f;
      sa[185] = 0.16959052f;
      sa[186] = -0.36448413f;
      sa[187] = 0.006425051f;
      sa[188] = -0.07473514f;
      sa[189] = 0.19030388f;
      sa[190] = 0.063348256f;
      sa[191] = -0.036844112f;
      sa[192] = -0.22664635f;
      sa[193] = 0.16767548f;
      sa[194] = 0.02993626f;
      sa[195] = 0.18198778f;
      sa[196] = 0.22597136f;
      sa[197] = -0.07340197f;
      sa[198] = 0.17113253f;
      sa[199] = -0.079735786f;
      sa[200] = -0.044453625f;
      sa[201] = -0.3885394f;
      sa[202] = 0.07951388f;
      sa[203] = -0.12852593f;
      sa[204] = -0.25077718f;
      sa[205] = 0.25205064f;
      sa[206] = 0.2888308f;
      sa[207] = 0.09264149f;
      sa[208] = -0.37385434f;
      sa[209] = -0.16224971f;
      sa[210] = -0.38349903f;
      sa[211] = -0.3895205f;
      sa[212] = 0.34607217f;
      sa[213] = -0.22017495f;
      sa[214] = -0.15239677f;
      sa[215] = -0.010099952f;
      sa[216] = 0.12701604f;
      sa[217] = 0.26974544f;
      sa[218] = -0.12929323f;
      sa[219] = 0.30877593f;
      sa[220] = -0.24290484f;
      sa[221] = 0.092513226f;
      sa[222] = 0.26409656f;
      sa[223] = 0.08526729f;
      sa[224] = 0.1540983f;
      sa[225] = 0.19560738f;
      sa[226] = -0.1986783f;
      sa[227] = 0.5022942f;
      sa[228] = 0.1485566f;
      sa[229] = 0.14080448f;
      sa[230] = 0.30538014f;
      sa[231] = -0.23804535f;
      sa[232] = -0.29384485f;
      sa[233] = -0.054756794f;
      sa[234] = 0.0026706557f;
      sa[235] = -0.34261504f;
      sa[236] = -0.037045013f;
      sa[237] = -0.2583522f;
      sa[238] = -0.2184505f;
      sa[239] = 0.13703203f;
      sa[240] = 0.045796946f;
      sa[241] = -0.18870413f;
      sa[242] = -0.25378653f;
      sa[243] = -0.35505918f;
      sa[244] = -0.22419506f;
      sa[245] = -0.15892406f;
      sa[246] = -0.25267154f;
      sa[247] = -0.08149708f;
      sa[248] = 0.27240476f;
      sa[249] = 0.33560026f;
      sa[250] = -0.32647854f;
      sa[251] = -0.20074381f;
      sa[252] = -0.24133553f;
      sa[253] = -0.3245928f;
      sa[254] = -0.38564354f;
      sa[255] = 0.1372958f;
      sa[256] = -0.2490552f;
      sa[257] = 0.27318087f;
      sa[258] = -0.2841764f;
      sa[259] = -0.1345036f;
      sa[260] = -0.18940261f;
      sa[261] = -0.1760264f;
      sa[262] = -0.17475496f;
      sa[263] = 0.32170048f;
      sa[264] = -0.15028416f;
      sa[265] = 0.08145858f;
      sa[266] = -0.2785202f;
      sa[267] = -0.21960244f;
      sa[268] = 0.103101104f;
      sa[269] = -0.25878868f;
      sa[270] = 0.015090514f;
      sa[271] = 0.105835155f;
      sa[272] = -0.09897965f;
      sa[273] = -0.14855407f;
      sa[274] = 0.14912622f;
      sa[275] = -0.0033463833f;
      sa[276] = 0.019346071f;
      sa[277] = -0.25854057f;
      sa[278] = -0.106236055f;
      sa[279] = 0.21538554f;
      sa[280] = -0.208543f;
      sa[281] = 0.25527403f;
      sa[282] = -0.1497152f;
      sa[283] = -0.071260646f;
      sa[284] = -0.07273878f;
      sa[285] = -0.2460469f;
      sa[286] = 0.4157183f;
      sa[287] = 0.24073505f;
      sa[288] = -0.2995768f;
      sa[289] = -0.17507891f;
      sa[290] = -0.032380212f;
      sa[291] = 0.10301173f;
      sa[292] = 0.1994744f;
      sa[293] = -0.11253187f;
      sa[294] = 0.11467407f;
      sa[295] = 0.10762281f;
      sa[296] = 0.15079422f;
      sa[297] = 0.31857085f;
      sa[298] = -0.052628327f;
      sa[299] = -0.11068902f;
      sa[300] = -0.034432683f;
      sa[301] = -0.13281992f;
      sa[302] = 0.1680894f;
      sa[303] = -0.032323897f;
      sa[304] = -0.18230243f;
      sa[305] = 0.08715968f;
      sa[306] = 0.31817114f;
      sa[307] = -0.1514595f;
      sa[308] = 0.091883615f;
      sa[309] = 0.19803564f;
      sa[310] = 0.29983044f;
      sa[311] = 0.32572937f;
      sa[312] = -0.16848433f;
      sa[313] = -0.18662357f;
      sa[314] = -0.09784643f;
      sa[315] = -0.032932747f;
      sa[316] = -0.034574207f;
      sa[317] = -0.07380665f;
      sa[318] = 0.07001496f;
      sa[319] = 0.27783728f;
      sa[320] = 0.026220994f;
      sa[321] = 0.21527986f;
      sa[322] = 0.15583138f;
      sa[323] = -0.20734227f;
      sa[324] = -0.03561122f;
      sa[325] = 0.27648276f;
      sa[326] = -0.37909278f;
      sa[327] = -0.08798026f;
      sa[328] = -0.082684375f;
      sa[329] = 0.2168208f;
      sa[330] = -0.2307957f;
      sa[331] = -0.04021294f;
      sa[332] = -0.3112326f;
      sa[333] = 0.13947886f;
      sa[334] = -0.13152014f;
      sa[335] = 0.18296924f;
      sa[336] = -0.17508318f;
      sa[337] = -0.20619552f;
      sa[338] = 0.2744808f;
      sa[339] = -0.26636055f;
      sa[340] = -0.37760958f;
      sa[341] = -0.29241624f;
      sa[342] = 0.30507365f;
      sa[343] = -0.14629678f;
      sa[344] = -0.18200664f;
      sa[345] = 0.21995561f;
      sa[346] = 0.20686944f;
      sa[347] = -0.1763979f;
      sa[348] = 0.24679077f;
      sa[349] = -0.33702657f;
      sa[350] = -0.14316331f;
      sa[351] = 0.2989787f;
      sa[352] = 0.21267517f;
      sa[353] = -0.044175047f;
      sa[354] = 0.049736895f;
      sa[355] = 0.14454181f;
      sa[356] = -0.18474412f;
      sa[357] = 0.21414551f;
      sa[358] = -0.21125789f;
      sa[359] = 0.14764291f;
      sa[360] = 0.043590162f;
      sa[361] = -0.12128725f;
      sa[362] = -0.24901603f;
      sa[363] = 0.23333198f;
      sa[364] = -0.19114664f;
      sa[365] = -0.24000622f;
      sa[366] = -0.040784996f;
      sa[367] = -0.34457314f;
      sa[368] = -0.19630228f;
      sa[369] = 0.12584928f;
      sa[370] = -0.18305342f;
      sa[371] = 0.2388981f;
      sa[372] = -0.04006318f;
      sa[373] = 0.31192416f;
      sa[374] = -0.17059158f;
      sa[375] = -0.3152814f;
      sa[376] = -0.5189455f;
      sa[377] = -0.4367858f;
      sa[378] = 0.35275352f;
      sa[379] = -0.0035412468f;
      sa[380] = -0.20327158f;
      sa[381] = -0.20548831f;
      sa[382] = -0.07292826f;
      sa[383] = -0.19312999f;
      sa[384] = -0.2731505f;
      sa[385] = 0.12594396f;
      sa[386] = -0.14439605f;
      sa[387] = -0.20076853f;
      sa[388] = 0.029058963f;
      sa[389] = -0.07900635f;
      sa[390] = -0.058662675f;
      sa[391] = -0.1869039f;
      sa[392] = 0.3747777f;
      sa[393] = 0.36515674f;
      sa[394] = -0.1420272f;
      sa[395] = 0.24032252f;
      sa[396] = 0.37331372f;
      sa[397] = -0.20856802f;
      sa[398] = 0.14316532f;
      sa[399] = 0.11219519f;
      sa[400] = 0.1315696f;
      sa[401] = 0.29394406f;
      sa[402] = -0.17532858f;
      sa[403] = 0.08219208f;
      sa[404] = 0.32003644f;
      sa[405] = -0.29529378f;
      sa[406] = -0.0061655804f;
      sa[407] = 0.27700663f;
      sa[408] = -0.2230976f;
      sa[409] = -0.20774636f;
      sa[410] = -0.12018917f;
      sa[411] = 0.24592164f;
      sa[412] = -0.09710747f;
      sa[413] = 0.07983921f;
      sa[414] = -0.038853638f;
      sa[415] = 0.42283773f;
      sa[416] = -0.21322423f;
      sa[417] = -0.021158962f;
      sa[418] = -0.008525281f;
      sa[419] = 0.2483011f;
      sa[420] = 0.26368326f;
      sa[421] = 0.32119036f;
      sa[422] = 0.08106572f;
      sa[423] = -0.117495686f;
      sa[424] = 0.12320115f;
      sa[425] = -0.099876136f;
      sa[426] = -0.26872927f;
      sa[427] = 0.2054022f;
      sa[428] = -0.061638925f;
      sa[429] = -0.13897818f;
      sa[430] = 0.12552881f;
      sa[431] = -0.102006845f;
      sa[432] = 0.041139703f;
      sa[433] = 0.12722646f;
      sa[434] = 0.18776244f;
      sa[435] = -0.034374833f;
      sa[436] = -0.33540708f;
      sa[437] = -0.23705071f;
      sa[438] = -0.014284914f;
      sa[439] = -9.994518E-4f;
      sa[440] = 0.43428758f;
      sa[441] = -0.47420204f;
      sa[442] = 0.13001694f;
      sa[443] = 0.088970855f;
      sa[444] = -0.20648195f;
      sa[445] = 0.15559901f;
      sa[446] = 0.26360247f;
      sa[447] = 0.12992592f;
      sa[448] = 0.15257618f;
      sa[449] = 0.120457254f;
      sa[450] = -0.16900477f;
      sa[451] = 0.08470794f;
      sa[452] = 0.20365341f;
      sa[453] = -0.06954309f;
      sa[454] = -0.16364208f;
      sa[455] = -0.06713099f;
      sa[456] = -0.12523961f;
      sa[457] = 0.106565505f;
      sa[458] = -0.27498826f;
      sa[459] = 0.31757712f;
      sa[460] = 0.2669368f;
      sa[461] = 0.3031657f;
      sa[462] = 0.11038463f;
      sa[463] = 0.2685619f;
      sa[464] = -0.3408355f;
      sa[465] = 0.20939969f;
      sa[466] = -0.0101047745f;
      sa[467] = 0.12073684f;
      sa[468] = 0.05147654f;
      sa[469] = 0.24133886f;
      sa[470] = 0.14473048f;
      sa[471] = -0.007963543f;
      sa[472] = 0.047225147f;
      sa[473] = -0.14978354f;
      sa[474] = -0.049430136f;
      sa[475] = 0.10971472f;
      sa[476] = 0.19399741f;
      sa[477] = -0.037007347f;
      sa[478] = 0.11059589f;
      sa[479] = -0.33636424f;
      sa[480] = -0.34318694f;
      sa[481] = -0.288799f;
      sa[482] = -0.32742494f;
      sa[483] = 0.19453634f;
      sa[484] = 0.26578397f;
      sa[485] = 0.30611697f;
      sa[486] = 0.08978855f;
      sa[487] = -0.121277526f;
      sa[488] = -0.19422518f;
      sa[489] = 0.14098744f;
      sa[490] = -0.023329398f;
      sa[491] = -0.19835241f;
      sa[492] = 0.21739976f;
      sa[493] = 0.22776134f;
      sa[494] = -0.09525908f;
      sa[495] = 0.40878478f;
      sa[496] = 0.04512109f;
      sa[497] = 0.15575714f;
      sa[498] = 0.21416028f;
      sa[499] = 0.27359593f;
      sa[500] = 0.042552143f;
      sa[501] = 0.1071611f;
      sa[502] = 0.24628353f;
      sa[503] = 0.081025936f;
      sa[504] = -0.19667535f;
      sa[505] = -0.15355538f;
      sa[506] = 0.32174265f;
      sa[507] = -0.034903012f;
      sa[508] = 0.16790213f;
      sa[509] = 0.2705362f;
      sa[510] = 0.2655012f;
      sa[511] = 0.095109195f;
      sa[512] = 0.060855746f;
      sa[513] = -0.035974354f;
      sa[514] = 0.24331973f;
      sa[515] = -0.07224979f;
      sa[516] = 0.08809492f;
      sa[517] = 0.15911148f;
      sa[518] = 0.25114268f;
      sa[519] = -0.009566399f;
      sa[520] = 0.32706815f;
      sa[521] = 0.16598512f;
      sa[522] = 0.017273732f;
      sa[523] = 0.09332123f;
      sa[524] = 0.2669482f;
      sa[525] = 0.24127798f;
      sa[526] = 0.08934523f;
      sa[527] = -0.006560065f;
      sa[528] = 0.101014175f;
      sa[529] = 0.13518244f;
      sa[530] = -0.31816593f;
      sa[531] = -0.10131058f;
      sa[532] = 0.20867278f;
      sa[533] = 0.16576657f;
      sa[534] = 0.17784058f;
      sa[535] = -0.050752703f;
      sa[536] = 0.10165795f;
      sa[537] = -0.07804653f;
      sa[538] = 0.1274615f;
      sa[539] = 0.22843216f;
      sa[540] = -0.2799469f;
      sa[541] = -0.22551562f;
      sa[542] = -0.23424041f;
      sa[543] = -0.4938322f;
      sa[544] = 0.10999523f;
      sa[545] = 0.05926156f;
      sa[546] = 0.0054121427f;
      sa[547] = 0.15146698f;
      sa[548] = 0.07146499f;
      sa[549] = 0.16247888f;
      sa[550] = 0.0048989537f;
      sa[551] = -0.19440734f;
      sa[552] = 0.028004847f;
      sa[553] = -0.09627074f;
      sa[554] = -0.21798746f;
      sa[555] = -0.19093518f;
      sa[556] = -0.27341315f;
      sa[557] = -0.29245788f;
      sa[558] = -0.15763268f;
      sa[559] = 0.11668051f;
      sa[560] = -0.3567326f;
      sa[561] = -0.1396675f;
      sa[562] = 0.16699575f;
      sa[563] = -0.10313722f;
      sa[564] = 0.21173567f;
      sa[565] = 0.03380922f;
      sa[566] = 0.40082288f;
      sa[567] = 0.25072876f;
      sa[568] = -0.10710665f;
      sa[569] = -0.0037561106f;
      sa[570] = -0.07122015f;
      sa[571] = -0.059521593f;
      sa[572] = -0.15511827f;
      sa[573] = 0.08385953f;
      sa[574] = 0.356315f;
      sa[575] = -0.16555896f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_09_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_09_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_09_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.41643783f;
      sa[1] = 0.042280998f;
      sa[2] = -0.25441942f;
      sa[3] = -0.027464274f;
      sa[4] = 0.14121024f;
      sa[5] = -0.13454375f;
      sa[6] = 0.06218652f;
      sa[7] = -0.017419573f;
      sa[8] = -0.3081486f;
      sa[9] = -0.03993522f;
      sa[10] = -0.26402828f;
      sa[11] = 0.320861f;
      sa[12] = 0.20091677f;
      sa[13] = 0.092757836f;
      sa[14] = -0.15440558f;
      sa[15] = 0.3552317f;
      sa[16] = 0.42352057f;
      sa[17] = -0.25980845f;
      sa[18] = 0.009830955f;
      sa[19] = -0.023594758f;
      sa[20] = 0.4073736f;
      sa[21] = -0.21284239f;
      sa[22] = -0.13147436f;
      sa[23] = 0.1497023f;
      sa[24] = -0.3933592f;
      sa[25] = 0.18835452f;
      sa[26] = -0.16794889f;
      sa[27] = 0.42359287f;
      sa[28] = -0.23755275f;
      sa[29] = -0.15665495f;
      sa[30] = 0.008737783f;
      sa[31] = -0.33098534f;
      sa[32] = -0.18294543f;
      sa[33] = -0.5939248f;
      sa[34] = 0.085536264f;
      sa[35] = 0.4068375f;
      sa[36] = -0.04878905f;
      sa[37] = -0.25048757f;
      sa[38] = 0.10160966f;
      sa[39] = 0.029529603f;
      sa[40] = -0.2598408f;
      sa[41] = -0.34776002f;
      sa[42] = -0.47511682f;
      sa[43] = -0.43960148f;
      sa[44] = 0.19926102f;
      sa[45] = -0.27002743f;
      sa[46] = 0.32767317f;
      sa[47] = 0.2604213f;
      sa[48] = -0.44738677f;
      sa[49] = -0.21139212f;
      sa[50] = 0.08103136f;
      sa[51] = -0.104968764f;
      sa[52] = 0.3212406f;
      sa[53] = 0.21819302f;
      sa[54] = -0.054153394f;
      sa[55] = 0.3480235f;
      sa[56] = -0.42050478f;
      sa[57] = -0.37044573f;
      sa[58] = 0.11443041f;
      sa[59] = 0.14469574f;
      sa[60] = 0.38379058f;
      sa[61] = -0.24632487f;
      sa[62] = -0.20775877f;
      sa[63] = 0.21730697f;
      sa[64] = 0.31753314f;
      sa[65] = -0.121412896f;
      sa[66] = 0.14725909f;
      sa[67] = 0.34559044f;
      sa[68] = 0.15138963f;
      sa[69] = -0.111589395f;
      sa[70] = -0.4387515f;
      sa[71] = -0.060222883f;
      sa[72] = -0.3132965f;
      sa[73] = 0.42917702f;
      sa[74] = 0.46258426f;
      sa[75] = -0.064461f;
      sa[76] = 0.20654584f;
      sa[77] = 0.12239197f;
      sa[78] = -0.39438266f;
      sa[79] = 0.41266328f;
      sa[80] = -0.05282651f;
      sa[81] = 0.008242438f;
      sa[82] = 0.2845223f;
      sa[83] = -0.18430208f;
      sa[84] = -0.42128503f;
      sa[85] = -0.37258542f;
      sa[86] = 0.03323199f;
      sa[87] = 0.26687807f;
      sa[88] = -0.48023692f;
      sa[89] = -0.25886655f;
      sa[90] = -0.43486878f;
      sa[91] = 0.40315065f;
      sa[92] = -0.013191944f;
      sa[93] = 0.17312664f;
      sa[94] = -0.300984f;
      sa[95] = -0.093465865f;
      sa[96] = -0.2358878f;
      sa[97] = -0.050509308f;
      sa[98] = -0.0031068427f;
      sa[99] = 0.163729f;
      sa[100] = -0.22396663f;
      sa[101] = -0.31650364f;
      sa[102] = 0.3681684f;
      sa[103] = -0.01753764f;
      sa[104] = -0.16609016f;
      sa[105] = -0.21330044f;
      sa[106] = 0.20169234f;
      sa[107] = 0.3992371f;
      sa[108] = 0.58156663f;
      sa[109] = 0.036352895f;
      sa[110] = 0.13334303f;
      sa[111] = -0.2973257f;
      sa[112] = -0.26893032f;
      sa[113] = 0.17664947f;
      sa[114] = 0.10860817f;
      sa[115] = -0.23755638f;
      sa[116] = 0.3634086f;
      sa[117] = 0.15001288f;
      sa[118] = -0.48733345f;
      sa[119] = -0.13883933f;
      sa[120] = -0.16364552f;
      sa[121] = 0.174116f;
      sa[122] = -0.015511371f;
      sa[123] = 0.19088416f;
      sa[124] = -0.19621864f;
      sa[125] = 0.23649317f;
      sa[126] = -0.21618545f;
      sa[127] = 0.24467766f;
      sa[128] = -0.26679766f;
      sa[129] = 0.1576239f;
      sa[130] = -0.0233068f;
      sa[131] = 0.046702344f;
      sa[132] = 0.044421304f;
      sa[133] = 0.26179066f;
      sa[134] = 0.41544458f;
      sa[135] = -0.42190883f;
      sa[136] = 0.10844019f;
      sa[137] = -0.058681633f;
      sa[138] = 0.14663847f;
      sa[139] = 0.2581129f;
      sa[140] = -0.19626954f;
      sa[141] = -0.053270966f;
      sa[142] = -0.071653716f;
      sa[143] = -0.26750234f;
      sa[144] = 0.3294389f;
      sa[145] = -0.29694402f;
      sa[146] = 0.07163154f;
      sa[147] = -0.08441937f;
      sa[148] = -0.25312835f;
      sa[149] = 0.32198077f;
      sa[150] = -0.18443902f;
      sa[151] = -0.52286655f;
      sa[152] = 0.4081676f;
      sa[153] = -0.18181276f;
      sa[154] = 0.38842675f;
      sa[155] = -0.45183372f;
      sa[156] = -0.3948781f;
      sa[157] = -0.28358272f;
      sa[158] = -0.027382653f;
      sa[159] = -0.2981248f;
      sa[160] = 0.3644731f;
      sa[161] = -0.34159324f;
      sa[162] = 0.4484076f;
      sa[163] = -0.31904945f;
      sa[164] = 0.23816217f;
      sa[165] = -0.10496994f;
      sa[166] = 0.49211165f;
      sa[167] = -0.55062735f;
      sa[168] = 0.2458995f;
      sa[169] = -0.36437458f;
      sa[170] = 0.38711813f;
      sa[171] = 0.2352291f;
      sa[172] = 0.38705602f;
      sa[173] = 0.34490135f;
      sa[174] = -0.10380869f;
      sa[175] = -0.023778273f;
      sa[176] = -0.3594706f;
      sa[177] = 0.24595656f;
      sa[178] = -0.37410814f;
      sa[179] = -0.07640139f;
      sa[180] = -0.3280062f;
      sa[181] = -0.09778822f;
      sa[182] = 0.016019203f;
      sa[183] = -0.1540244f;
      sa[184] = 0.4453707f;
      sa[185] = 0.27135035f;
      sa[186] = 0.10042613f;
      sa[187] = -0.17951736f;
      sa[188] = -0.26842496f;
      sa[189] = -0.29401752f;
      sa[190] = -0.38169965f;
      sa[191] = -0.18077485f;
      sa[192] = -0.1778998f;
      sa[193] = 0.16243957f;
      sa[194] = -0.31152144f;
      sa[195] = -0.35750285f;
      sa[196] = 0.086484514f;
      sa[197] = 0.05277755f;
      sa[198] = 0.047303587f;
      sa[199] = 0.43113992f;
      sa[200] = 0.06773692f;
      sa[201] = 0.3786502f;
      sa[202] = 0.36169636f;
      sa[203] = -0.465385f;
      sa[204] = -0.035265885f;
      sa[205] = 0.30870453f;
      sa[206] = -0.19899116f;
      sa[207] = 0.21853526f;
      sa[208] = 0.009091749f;
      sa[209] = 0.22914438f;
      sa[210] = -0.06958908f;
      sa[211] = -0.29780117f;
      sa[212] = -0.29888982f;
      sa[213] = 0.046242274f;
      sa[214] = -0.5128385f;
      sa[215] = 0.026832761f;
      sa[216] = 0.06626433f;
      sa[217] = 0.17640632f;
      sa[218] = -0.14453596f;
      sa[219] = 0.14435758f;
      sa[220] = 0.31846026f;
      sa[221] = 0.17455855f;
      sa[222] = -0.1517769f;
      sa[223] = -0.152505f;
      sa[224] = 0.4223072f;
      sa[225] = -0.002152776f;
      sa[226] = 0.0072606276f;
      sa[227] = 0.07373855f;
      sa[228] = -0.118975505f;
      sa[229] = -0.23523964f;
      sa[230] = -0.26459834f;
      sa[231] = -0.19719152f;
      sa[232] = 0.42149675f;
      sa[233] = -0.2558798f;
      sa[234] = -0.26830602f;
      sa[235] = -0.0043477425f;
      sa[236] = -0.3340338f;
      sa[237] = 0.50232166f;
      sa[238] = 0.27205098f;
      sa[239] = -0.15956897f;
      sa[240] = -0.0025796054f;
      sa[241] = -0.6070497f;
      sa[242] = -0.14784604f;
      sa[243] = 0.37810725f;
      sa[244] = 0.044624273f;
      sa[245] = 0.23610769f;
      sa[246] = 0.38638777f;
      sa[247] = -0.5433697f;
      sa[248] = -0.18315701f;
      sa[249] = 0.1923462f;
      sa[250] = 0.2201621f;
      sa[251] = 0.25116086f;
      sa[252] = 0.21337652f;
      sa[253] = -0.28996283f;
      sa[254] = 0.37876526f;
      sa[255] = -0.0156328f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_09_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_Tanh_09_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_09_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.15354486f;
      sa[1] = -1.500467f;
      sa[2] = -1.6560987f;
      sa[3] = 1.3512999f;
      sa[4] = 0.4135922f;
      sa[5] = -0.20472032f;
      sa[6] = -1.6344401f;
      sa[7] = 1.558357f;
      sa[8] = 1.7791897f;
      sa[9] = 0.25821903f;
      sa[10] = 1.6237578f;
      sa[11] = 1.4443898f;
      sa[12] = 1.9521415f;
      sa[13] = -0.54992867f;
      sa[14] = -1.9920849f;
      sa[15] = -0.65107536f;
      sa[16] = 0.72078323f;
      sa[17] = -0.75203544f;
      sa[18] = -1.4576285f;
      sa[19] = -0.9759846f;
      sa[20] = -1.9403918f;
      sa[21] = 0.24993554f;
      sa[22] = -1.8873785f;
      sa[23] = -0.81573796f;
      sa[24] = -0.51858854f;
      sa[25] = 1.923905f;
      sa[26] = -0.26183668f;
      sa[27] = 1.1757075f;
      sa[28] = 1.0371699f;
      sa[29] = -0.8094623f;
      sa[30] = 0.19261588f;
      sa[31] = 0.2220381f;
      sa[32] = 0.5486182f;
      sa[33] = 0.23316385f;
      sa[34] = -0.562852f;
      sa[35] = 0.98410857f;
      sa[36] = 0.58728606f;
      sa[37] = -1.3225114f;
      sa[38] = 0.79571354f;
      sa[39] = -0.4214037f;
      sa[40] = 0.3027338f;
      sa[41] = -0.6189682f;
      sa[42] = 0.7680976f;
      sa[43] = 0.01470727f;
      sa[44] = 0.998441f;
      sa[45] = -2.084669f;
      sa[46] = -2.3149555f;
      sa[47] = 0.31489918f;
      sa[48] = 1.6606904f;
      sa[49] = -0.025925154f;
      sa[50] = -0.35847393f;
      sa[51] = 1.9025568f;
      sa[52] = -1.5766227f;
      sa[53] = 1.108923f;
      sa[54] = 1.7364035f;
      sa[55] = 1.1470567f;
      sa[56] = -0.61037505f;
      sa[57] = -0.26852784f;
      sa[58] = 1.0235385f;
      sa[59] = 0.65501064f;
      sa[60] = -1.4778413f;
      sa[61] = 0.96006536f;
      sa[62] = -0.2572456f;
      sa[63] = -0.8913924f;
      sa[64] = 0.84981513f;
      sa[65] = -0.9774062f;
      sa[66] = -1.7920117f;
      sa[67] = -0.009590937f;
      sa[68] = 0.87264735f;
      sa[69] = -1.3207138f;
      sa[70] = -1.784049f;
      sa[71] = 0.25306875f;
      sa[72] = -1.0520055f;
      sa[73] = -1.3774596f;
      sa[74] = -1.2145545f;
      sa[75] = 1.2677349f;
      sa[76] = 2.0019631f;
      sa[77] = -0.4454496f;
      sa[78] = -1.3788059f;
      sa[79] = -0.61008054f;
      sa[80] = 0.7072872f;
      sa[81] = -1.5587955f;
      sa[82] = -0.12718783f;
      sa[83] = -1.4689652f;
      sa[84] = 1.6541339f;
      sa[85] = 1.0721446f;
      sa[86] = -1.9462352f;
      sa[87] = 0.94615865f;
      sa[88] = -1.6613529f;
      sa[89] = -0.82643396f;
      sa[90] = 0.39975572f;
      sa[91] = 0.14348409f;
      sa[92] = 1.3808482f;
      sa[93] = 1.9109229f;
      sa[94] = 1.6794192f;
      sa[95] = 0.6874821f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_09 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_09_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_09_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_09_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_Tanh_09_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_09_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


