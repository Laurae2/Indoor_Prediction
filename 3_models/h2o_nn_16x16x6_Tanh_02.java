/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:06:55.559+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_02

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_02 > h2o_nn_16x16x6_Tanh_02.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_02.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_02", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_02 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_02_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_02_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_02_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_02_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_02_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_02_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_02_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_02_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_02_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_02_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_02_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_02_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_02.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_02_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25,0.25,0.125,0.25,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_02() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-5004759282261384384L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_02_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_02_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_02_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_02_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_02_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_02_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_02_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_02_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_02_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_02_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_02_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_02_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_02_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_02_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_02_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_02_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.04411305645791101;
      sa[1] = -0.017860466702698655;
      sa[2] = 0.023346766754485812;
      sa[3] = -0.05316831111332895;
      sa[4] = -0.004866822577931608;
      sa[5] = 0.06463800980684532;
      sa[6] = 0.0687182714973516;
      sa[7] = 0.0025544551512917367;
      sa[8] = 0.009208844028781596;
      sa[9] = -0.024319709299516525;
      sa[10] = 0.05084269436264549;
      sa[11] = 0.02299829960760517;
      sa[12] = 0.009010077015587384;
      sa[13] = -0.03471297497381141;
      sa[14] = 0.008796039743006865;
      sa[15] = 0.01372856900017288;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_02_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_02_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_02_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.009046473444235701;
      sa[1] = -0.01147349660048245;
      sa[2] = -0.016645207835171077;
      sa[3] = 0.041565583890152816;
      sa[4] = -0.011675001894549107;
      sa[5] = 0.013769157534123616;
      sa[6] = 0.005092424289312423;
      sa[7] = 0.043798190284105774;
      sa[8] = -0.007380184851694518;
      sa[9] = 0.007077384805057638;
      sa[10] = 0.028470026779603745;
      sa[11] = -0.010969660175163062;
      sa[12] = -6.755299962997703E-4;
      sa[13] = 0.013075112713363451;
      sa[14] = -0.006021776800316633;
      sa[15] = -0.010864047160513673;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_02_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_02_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_02_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.022924795049323637;
      sa[1] = -0.02591294550244136;
      sa[2] = -0.014009882226820251;
      sa[3] = 0.009903515468111947;
      sa[4] = -0.05524649596537963;
    }
  }
}
class h2o_nn_16x16x6_Tanh_02_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_02_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_02_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_02_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.058433976f;
      sa[1] = 0.3411705f;
      sa[2] = 0.2767278f;
      sa[3] = 0.19772685f;
      sa[4] = -0.19604112f;
      sa[5] = -0.17358947f;
      sa[6] = -0.042077843f;
      sa[7] = 0.31074297f;
      sa[8] = 0.14108758f;
      sa[9] = -0.1363328f;
      sa[10] = -0.1782292f;
      sa[11] = -0.18729903f;
      sa[12] = 0.081426f;
      sa[13] = -0.27118242f;
      sa[14] = -0.18778826f;
      sa[15] = 0.021173751f;
      sa[16] = 0.16321619f;
      sa[17] = 0.2008549f;
      sa[18] = -0.25111073f;
      sa[19] = 0.10109014f;
      sa[20] = 0.23729114f;
      sa[21] = -0.3569836f;
      sa[22] = 0.2398892f;
      sa[23] = -0.20922941f;
      sa[24] = 0.3339913f;
      sa[25] = 0.22216566f;
      sa[26] = -0.29101855f;
      sa[27] = 0.35528407f;
      sa[28] = 0.24453689f;
      sa[29] = -0.31832585f;
      sa[30] = -0.1858009f;
      sa[31] = 0.17050572f;
      sa[32] = 0.18828784f;
      sa[33] = -0.29490012f;
      sa[34] = 0.041394573f;
      sa[35] = -0.04129263f;
      sa[36] = 0.07721685f;
      sa[37] = 0.3428216f;
      sa[38] = -0.06914138f;
      sa[39] = 0.17448385f;
      sa[40] = 0.029414667f;
      sa[41] = -0.06976013f;
      sa[42] = -0.1595649f;
      sa[43] = 0.07223353f;
      sa[44] = 0.25345808f;
      sa[45] = -0.25894406f;
      sa[46] = 0.052089717f;
      sa[47] = 0.011061834f;
      sa[48] = 0.23770286f;
      sa[49] = 0.28603113f;
      sa[50] = 0.2064268f;
      sa[51] = -0.30456823f;
      sa[52] = -0.048177272f;
      sa[53] = 0.29539195f;
      sa[54] = 0.23347257f;
      sa[55] = -0.0042926823f;
      sa[56] = -0.20008579f;
      sa[57] = -0.33251435f;
      sa[58] = 0.26682696f;
      sa[59] = -0.20861818f;
      sa[60] = -0.26183122f;
      sa[61] = 0.22575419f;
      sa[62] = 0.1499154f;
      sa[63] = 0.028794782f;
      sa[64] = 0.14078882f;
      sa[65] = 0.12791379f;
      sa[66] = 0.02229303f;
      sa[67] = 0.16474223f;
      sa[68] = -0.12208267f;
      sa[69] = 0.150472f;
      sa[70] = -0.1887994f;
      sa[71] = 0.35392097f;
      sa[72] = -0.14501092f;
      sa[73] = 0.15412751f;
      sa[74] = -0.29561397f;
      sa[75] = 0.07319739f;
      sa[76] = -0.2093274f;
      sa[77] = -0.09226047f;
      sa[78] = -0.07159945f;
      sa[79] = 0.12106531f;
      sa[80] = -0.23031208f;
      sa[81] = -0.15216058f;
      sa[82] = -0.035076603f;
      sa[83] = 0.09281154f;
      sa[84] = -2.425256E-4f;
      sa[85] = -0.20659336f;
      sa[86] = 0.1771676f;
      sa[87] = 0.25965977f;
      sa[88] = 0.2141287f;
      sa[89] = 0.037317082f;
      sa[90] = -0.1299773f;
      sa[91] = 0.21482977f;
      sa[92] = 0.14925684f;
      sa[93] = -0.19180945f;
      sa[94] = -0.15641068f;
      sa[95] = -0.23492265f;
      sa[96] = 0.0955382f;
      sa[97] = 0.0059596673f;
      sa[98] = 0.20578504f;
      sa[99] = -0.14397286f;
      sa[100] = -0.034962066f;
      sa[101] = -0.17867786f;
      sa[102] = -0.28068534f;
      sa[103] = -0.08104293f;
      sa[104] = 0.0199881f;
      sa[105] = -0.1470183f;
      sa[106] = -0.19186743f;
      sa[107] = 0.07621049f;
      sa[108] = 0.18623789f;
      sa[109] = -0.28724188f;
      sa[110] = -0.22933826f;
      sa[111] = 0.18041472f;
      sa[112] = 0.11731446f;
      sa[113] = 0.010111787f;
      sa[114] = -0.18649638f;
      sa[115] = -0.11168352f;
      sa[116] = -0.25645158f;
      sa[117] = -0.0272619f;
      sa[118] = -0.2964869f;
      sa[119] = -0.1681441f;
      sa[120] = 0.22957982f;
      sa[121] = 0.23139976f;
      sa[122] = 0.31809503f;
      sa[123] = 0.25706804f;
      sa[124] = 0.2729234f;
      sa[125] = 0.29711327f;
      sa[126] = -0.2873734f;
      sa[127] = -0.2293835f;
      sa[128] = 0.07509284f;
      sa[129] = 0.16142258f;
      sa[130] = -0.13408159f;
      sa[131] = 0.3172865f;
      sa[132] = 0.16184422f;
      sa[133] = -0.34323868f;
      sa[134] = 0.099759325f;
      sa[135] = -0.2808548f;
      sa[136] = -0.30601388f;
      sa[137] = -0.04910695f;
      sa[138] = 0.110212974f;
      sa[139] = -0.13301536f;
      sa[140] = -0.06366642f;
      sa[141] = -0.14510684f;
      sa[142] = 0.2227427f;
      sa[143] = -0.29469964f;
      sa[144] = 0.2922828f;
      sa[145] = -0.20715731f;
      sa[146] = -0.3307078f;
      sa[147] = 0.21666005f;
      sa[148] = 0.19954139f;
      sa[149] = 0.21848822f;
      sa[150] = 0.3441437f;
      sa[151] = -0.3152871f;
      sa[152] = 0.039208148f;
      sa[153] = 0.26525724f;
      sa[154] = 0.25035557f;
      sa[155] = -0.16571566f;
      sa[156] = 0.1525923f;
      sa[157] = -0.19732271f;
      sa[158] = 0.11097809f;
      sa[159] = 0.08285221f;
      sa[160] = 0.065263465f;
      sa[161] = 0.22935002f;
      sa[162] = -0.14714074f;
      sa[163] = -0.08415714f;
      sa[164] = 0.2599411f;
      sa[165] = -0.032192893f;
      sa[166] = -0.06211629f;
      sa[167] = -0.093241796f;
      sa[168] = 0.17952092f;
      sa[169] = 0.3301601f;
      sa[170] = 0.06070135f;
      sa[171] = -0.056980766f;
      sa[172] = -0.06921701f;
      sa[173] = -0.17238566f;
      sa[174] = -0.021994857f;
      sa[175] = -0.28878704f;
      sa[176] = -0.004232068f;
      sa[177] = -0.019975075f;
      sa[178] = -0.011998644f;
      sa[179] = 0.111111835f;
      sa[180] = -0.07688891f;
      sa[181] = -0.33073828f;
      sa[182] = -0.2022894f;
      sa[183] = 0.13115035f;
      sa[184] = 0.33472747f;
      sa[185] = 0.28337783f;
      sa[186] = -0.23697014f;
      sa[187] = 0.08818016f;
      sa[188] = -0.026291046f;
      sa[189] = 0.13771051f;
      sa[190] = 0.00926923f;
      sa[191] = 0.03400945f;
      sa[192] = -0.13196225f;
      sa[193] = 0.30422005f;
      sa[194] = 0.13345632f;
      sa[195] = 0.29944593f;
      sa[196] = 0.29686695f;
      sa[197] = -0.11813746f;
      sa[198] = 0.17883411f;
      sa[199] = -0.19299832f;
      sa[200] = 0.0031824105f;
      sa[201] = -0.3381707f;
      sa[202] = 0.14662133f;
      sa[203] = -0.071898796f;
      sa[204] = -0.22722319f;
      sa[205] = 0.20748705f;
      sa[206] = 0.29346284f;
      sa[207] = 0.11632198f;
      sa[208] = -0.30783457f;
      sa[209] = -0.12374639f;
      sa[210] = -0.29710075f;
      sa[211] = -0.32246852f;
      sa[212] = 0.3034336f;
      sa[213] = -0.18398096f;
      sa[214] = -0.1528902f;
      sa[215] = -0.021100365f;
      sa[216] = 0.1072403f;
      sa[217] = 0.20618433f;
      sa[218] = -0.21113989f;
      sa[219] = 0.22598144f;
      sa[220] = -0.21964785f;
      sa[221] = 0.049511448f;
      sa[222] = 0.25260293f;
      sa[223] = 0.079641335f;
      sa[224] = 0.115356326f;
      sa[225] = 0.36620858f;
      sa[226] = -0.25033194f;
      sa[227] = 0.27850154f;
      sa[228] = 0.14366937f;
      sa[229] = 0.10200288f;
      sa[230] = 0.2914353f;
      sa[231] = -0.25668076f;
      sa[232] = -0.27297944f;
      sa[233] = 0.10768325f;
      sa[234] = 0.1427155f;
      sa[235] = -0.26118746f;
      sa[236] = -0.017750777f;
      sa[237] = -0.21317014f;
      sa[238] = -0.21668938f;
      sa[239] = 0.17483139f;
      sa[240] = -0.013193592f;
      sa[241] = -0.26086813f;
      sa[242] = -0.112926245f;
      sa[243] = -0.30270705f;
      sa[244] = -0.20845567f;
      sa[245] = -0.11745741f;
      sa[246] = -0.2720833f;
      sa[247] = -0.03781568f;
      sa[248] = 0.2511856f;
      sa[249] = 0.2386941f;
      sa[250] = -0.18601729f;
      sa[251] = -0.08861636f;
      sa[252] = -0.28209025f;
      sa[253] = -0.30052695f;
      sa[254] = -0.28071076f;
      sa[255] = 0.18487275f;
      sa[256] = -0.18889017f;
      sa[257] = 0.26836312f;
      sa[258] = -0.2993681f;
      sa[259] = -0.1330341f;
      sa[260] = -0.23707598f;
      sa[261] = 0.0014770123f;
      sa[262] = -0.15607978f;
      sa[263] = 0.26492357f;
      sa[264] = -0.16680612f;
      sa[265] = 0.046342604f;
      sa[266] = -0.3237041f;
      sa[267] = -0.2584671f;
      sa[268] = 0.11208663f;
      sa[269] = -0.12324395f;
      sa[270] = -0.03122044f;
      sa[271] = 0.24132086f;
      sa[272] = -0.08968258f;
      sa[273] = -0.11337156f;
      sa[274] = 0.13856639f;
      sa[275] = 0.016688205f;
      sa[276] = 0.076436624f;
      sa[277] = -0.26178944f;
      sa[278] = -0.1589916f;
      sa[279] = 0.23857538f;
      sa[280] = -0.17751299f;
      sa[281] = 0.32086378f;
      sa[282] = -0.10175133f;
      sa[283] = -0.038269415f;
      sa[284] = 0.01909662f;
      sa[285] = -0.19825824f;
      sa[286] = 0.3198534f;
      sa[287] = 0.21615206f;
      sa[288] = -0.24423005f;
      sa[289] = -0.14913423f;
      sa[290] = -0.084901825f;
      sa[291] = 0.055540062f;
      sa[292] = 0.14058226f;
      sa[293] = -0.06526198f;
      sa[294] = 0.12210394f;
      sa[295] = 0.16389889f;
      sa[296] = 0.23882304f;
      sa[297] = 0.15731946f;
      sa[298] = -0.0325367f;
      sa[299] = 0.007248423f;
      sa[300] = -0.0102842515f;
      sa[301] = -0.04328724f;
      sa[302] = 0.20300275f;
      sa[303] = 0.04305702f;
      sa[304] = -0.19974546f;
      sa[305] = -0.08384894f;
      sa[306] = 0.24496986f;
      sa[307] = -0.25071582f;
      sa[308] = 0.07360502f;
      sa[309] = 0.13387349f;
      sa[310] = 0.30139905f;
      sa[311] = 0.29554898f;
      sa[312] = -0.20330632f;
      sa[313] = -0.1674858f;
      sa[314] = -0.14484923f;
      sa[315] = -0.043550994f;
      sa[316] = -0.04291704f;
      sa[317] = -0.11742246f;
      sa[318] = 0.098235264f;
      sa[319] = 0.29529735f;
      sa[320] = -0.03326704f;
      sa[321] = 0.24128616f;
      sa[322] = 0.13150631f;
      sa[323] = -0.2472101f;
      sa[324] = -0.015727304f;
      sa[325] = 0.31440595f;
      sa[326] = -0.2327992f;
      sa[327] = 0.0074949157f;
      sa[328] = -0.05257083f;
      sa[329] = 0.28802225f;
      sa[330] = -0.18148482f;
      sa[331] = 0.02297444f;
      sa[332] = -0.29899696f;
      sa[333] = 0.14308006f;
      sa[334] = -0.058863148f;
      sa[335] = 0.25822347f;
      sa[336] = -0.17961755f;
      sa[337] = -0.15870245f;
      sa[338] = 0.29425585f;
      sa[339] = -0.22099248f;
      sa[340] = -0.31383654f;
      sa[341] = -0.23481916f;
      sa[342] = 0.2280938f;
      sa[343] = -0.1201645f;
      sa[344] = -0.20150518f;
      sa[345] = 0.20956525f;
      sa[346] = 0.20430829f;
      sa[347] = -0.17964755f;
      sa[348] = 0.3667886f;
      sa[349] = -0.25153372f;
      sa[350] = -0.21320312f;
      sa[351] = 0.19302599f;
      sa[352] = 0.21125191f;
      sa[353] = -0.037671108f;
      sa[354] = 0.10665276f;
      sa[355] = 0.13743576f;
      sa[356] = -0.14512394f;
      sa[357] = 0.22907977f;
      sa[358] = -0.3213575f;
      sa[359] = 0.10300023f;
      sa[360] = 0.095831946f;
      sa[361] = -0.11841099f;
      sa[362] = -0.25390324f;
      sa[363] = 0.22989179f;
      sa[364] = -0.09426781f;
      sa[365] = -0.21277349f;
      sa[366] = 0.044590056f;
      sa[367] = -0.3735092f;
      sa[368] = -0.18874842f;
      sa[369] = 0.24439463f;
      sa[370] = -0.2411873f;
      sa[371] = 0.15821235f;
      sa[372] = 0.011496838f;
      sa[373] = 0.33443615f;
      sa[374] = -0.116743594f;
      sa[375] = -0.3126168f;
      sa[376] = -0.34663472f;
      sa[377] = -0.2445666f;
      sa[378] = 0.35682857f;
      sa[379] = 0.15659954f;
      sa[380] = -0.09425048f;
      sa[381] = -0.06475729f;
      sa[382] = -0.0026018445f;
      sa[383] = -0.09327276f;
      sa[384] = -0.19784594f;
      sa[385] = 0.08704288f;
      sa[386] = -0.23335424f;
      sa[387] = -0.2960278f;
      sa[388] = 0.117002234f;
      sa[389] = 0.012838227f;
      sa[390] = 0.013119125f;
      sa[391] = -0.12689014f;
      sa[392] = 0.3534195f;
      sa[393] = 0.27348816f;
      sa[394] = 0.0076514557f;
      sa[395] = 0.2926698f;
      sa[396] = 0.33727628f;
      sa[397] = -0.2924664f;
      sa[398] = 0.08882659f;
      sa[399] = 0.08422068f;
      sa[400] = 0.2010867f;
      sa[401] = 0.23943564f;
      sa[402] = -0.1618486f;
      sa[403] = 0.06187733f;
      sa[404] = 0.28247944f;
      sa[405] = -0.23794462f;
      sa[406] = -0.0932753f;
      sa[407] = 0.1408274f;
      sa[408] = -0.21966344f;
      sa[409] = -0.29195946f;
      sa[410] = -0.13001178f;
      sa[411] = 0.18088989f;
      sa[412] = -0.17680205f;
      sa[413] = 0.107785776f;
      sa[414] = 0.11865177f;
      sa[415] = 0.36306092f;
      sa[416] = -0.16064706f;
      sa[417] = 0.069270074f;
      sa[418] = 0.029445257f;
      sa[419] = 0.32430372f;
      sa[420] = 0.17796546f;
      sa[421] = 0.23465122f;
      sa[422] = 0.1912932f;
      sa[423] = -0.075318195f;
      sa[424] = 0.14102808f;
      sa[425] = -0.049531586f;
      sa[426] = -0.3090497f;
      sa[427] = 0.2302746f;
      sa[428] = -0.04216648f;
      sa[429] = -0.15628254f;
      sa[430] = 0.22508228f;
      sa[431] = -0.04329561f;
      sa[432] = -0.04470956f;
      sa[433] = 0.09414165f;
      sa[434] = 0.23797812f;
      sa[435] = 0.029125983f;
      sa[436] = -0.27488944f;
      sa[437] = -0.2951453f;
      sa[438] = -0.004069518f;
      sa[439] = -0.054045197f;
      sa[440] = 0.3291215f;
      sa[441] = -0.33461216f;
      sa[442] = 0.11592969f;
      sa[443] = -0.004086433f;
      sa[444] = -0.2306619f;
      sa[445] = 0.055429045f;
      sa[446] = 0.24356228f;
      sa[447] = 0.06444558f;
      sa[448] = 0.18412694f;
      sa[449] = 0.28352448f;
      sa[450] = -0.099882685f;
      sa[451] = 0.18075004f;
      sa[452] = 0.21861811f;
      sa[453] = -0.019643353f;
      sa[454] = -0.15616512f;
      sa[455] = -0.01722312f;
      sa[456] = -0.068429776f;
      sa[457] = 0.10096358f;
      sa[458] = -0.23485455f;
      sa[459] = 0.2972976f;
      sa[460] = 0.2617948f;
      sa[461] = 0.33598852f;
      sa[462] = 0.062592536f;
      sa[463] = 0.2457976f;
      sa[464] = -0.27241182f;
      sa[465] = 0.22099793f;
      sa[466] = 0.02805912f;
      sa[467] = 0.1421207f;
      sa[468] = 0.109134145f;
      sa[469] = 0.30167297f;
      sa[470] = 0.21821287f;
      sa[471] = 0.07026962f;
      sa[472] = 0.023849215f;
      sa[473] = -0.1067287f;
      sa[474] = -0.0010392268f;
      sa[475] = 0.09816567f;
      sa[476] = 0.27003503f;
      sa[477] = -0.21634947f;
      sa[478] = 0.13173643f;
      sa[479] = -0.16823037f;
      sa[480] = -0.33555624f;
      sa[481] = -0.2275529f;
      sa[482] = -0.27712834f;
      sa[483] = 0.21464106f;
      sa[484] = 0.255879f;
      sa[485] = 0.16459367f;
      sa[486] = 0.019508215f;
      sa[487] = -0.16882722f;
      sa[488] = -0.2282752f;
      sa[489] = 0.07888823f;
      sa[490] = -0.021563483f;
      sa[491] = -0.23825005f;
      sa[492] = 0.2609122f;
      sa[493] = 0.34348184f;
      sa[494] = -0.19645718f;
      sa[495] = 0.2522917f;
      sa[496] = -0.01523678f;
      sa[497] = 0.06822994f;
      sa[498] = 0.18229395f;
      sa[499] = 0.17847528f;
      sa[500] = -0.0022670552f;
      sa[501] = 0.09147483f;
      sa[502] = 0.27131724f;
      sa[503] = 0.03642809f;
      sa[504] = -0.17304529f;
      sa[505] = -0.2234918f;
      sa[506] = 0.17929131f;
      sa[507] = -0.08643377f;
      sa[508] = 0.07532154f;
      sa[509] = 0.21392016f;
      sa[510] = 0.15575178f;
      sa[511] = -0.0077570486f;
      sa[512] = 0.07242797f;
      sa[513] = -0.042223435f;
      sa[514] = 0.26573616f;
      sa[515] = -0.27143168f;
      sa[516] = 0.014543774f;
      sa[517] = 0.08200959f;
      sa[518] = 0.12868106f;
      sa[519] = -0.11668615f;
      sa[520] = 0.21900739f;
      sa[521] = 0.19177032f;
      sa[522] = 0.061637364f;
      sa[523] = 0.2338816f;
      sa[524] = 0.20040041f;
      sa[525] = 0.17377122f;
      sa[526] = -0.011953453f;
      sa[527] = -0.14084612f;
      sa[528] = -0.048311688f;
      sa[529] = 0.096412204f;
      sa[530] = -0.23359983f;
      sa[531] = 0.027338358f;
      sa[532] = 0.14294116f;
      sa[533] = 0.11483501f;
      sa[534] = 0.12600763f;
      sa[535] = -0.1204643f;
      sa[536] = 0.05041664f;
      sa[537] = -0.24526505f;
      sa[538] = 0.2263613f;
      sa[539] = 0.3656915f;
      sa[540] = -0.27442932f;
      sa[541] = -0.22802766f;
      sa[542] = -0.10749611f;
      sa[543] = -0.3251414f;
      sa[544] = 0.17679068f;
      sa[545] = 0.117875315f;
      sa[546] = 0.09546654f;
      sa[547] = 0.15882874f;
      sa[548] = 0.07236284f;
      sa[549] = 0.16840266f;
      sa[550] = 0.0063166586f;
      sa[551] = -0.13767856f;
      sa[552] = 0.050771024f;
      sa[553] = -0.062002137f;
      sa[554] = -0.16452917f;
      sa[555] = -0.17524427f;
      sa[556] = -0.2096867f;
      sa[557] = -0.23167998f;
      sa[558] = -0.22232224f;
      sa[559] = 0.20527692f;
      sa[560] = -0.32924443f;
      sa[561] = -0.095731646f;
      sa[562] = 0.2172706f;
      sa[563] = -0.07556802f;
      sa[564] = 0.29975915f;
      sa[565] = 0.048099395f;
      sa[566] = 0.2996118f;
      sa[567] = 0.045971353f;
      sa[568] = -0.08045069f;
      sa[569] = 0.026727028f;
      sa[570] = -0.022344694f;
      sa[571] = -0.08042093f;
      sa[572] = -0.14451556f;
      sa[573] = 0.06988258f;
      sa[574] = 0.37485147f;
      sa[575] = -0.1912408f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_02_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_02_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_02_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.428828f;
      sa[1] = -0.050300755f;
      sa[2] = -0.15864067f;
      sa[3] = -0.25982353f;
      sa[4] = 0.06686537f;
      sa[5] = -0.034376975f;
      sa[6] = 0.2405636f;
      sa[7] = -0.19889252f;
      sa[8] = -0.2775058f;
      sa[9] = 0.12947166f;
      sa[10] = -0.122844614f;
      sa[11] = 0.111142844f;
      sa[12] = 0.13566491f;
      sa[13] = 0.080093876f;
      sa[14] = -0.27322087f;
      sa[15] = 0.34853262f;
      sa[16] = 0.43167725f;
      sa[17] = -0.11304403f;
      sa[18] = 0.0012461112f;
      sa[19] = -0.11755736f;
      sa[20] = 0.30812022f;
      sa[21] = -0.11647461f;
      sa[22] = -0.2871668f;
      sa[23] = 0.21111979f;
      sa[24] = -0.34637943f;
      sa[25] = 0.1239238f;
      sa[26] = -0.063170925f;
      sa[27] = 0.36258858f;
      sa[28] = -0.3557797f;
      sa[29] = -0.12505345f;
      sa[30] = 0.12055552f;
      sa[31] = -0.2097509f;
      sa[32] = -0.32161614f;
      sa[33] = -0.4012897f;
      sa[34] = -0.0033359902f;
      sa[35] = 0.38877222f;
      sa[36] = -0.1009399f;
      sa[37] = -0.10404358f;
      sa[38] = 0.0303253f;
      sa[39] = 0.23409949f;
      sa[40] = -0.17699863f;
      sa[41] = -0.37479362f;
      sa[42] = -0.25925028f;
      sa[43] = -0.3945151f;
      sa[44] = 0.00844528f;
      sa[45] = -0.38706294f;
      sa[46] = 0.33461657f;
      sa[47] = 0.35477516f;
      sa[48] = -0.3884015f;
      sa[49] = -0.29615474f;
      sa[50] = 0.07200094f;
      sa[51] = -0.06194222f;
      sa[52] = 0.18477598f;
      sa[53] = 0.19238691f;
      sa[54] = -0.11281216f;
      sa[55] = 0.32513368f;
      sa[56] = -0.23428304f;
      sa[57] = -0.37890965f;
      sa[58] = 0.07240941f;
      sa[59] = 0.03283715f;
      sa[60] = 0.3323788f;
      sa[61] = -0.25479043f;
      sa[62] = -0.051127195f;
      sa[63] = 0.24637352f;
      sa[64] = 0.37573966f;
      sa[65] = -0.17952989f;
      sa[66] = 0.14734398f;
      sa[67] = 0.4100776f;
      sa[68] = 0.20189568f;
      sa[69] = -0.23668934f;
      sa[70] = -0.4291753f;
      sa[71] = -0.07668517f;
      sa[72] = -0.34200206f;
      sa[73] = 0.27312768f;
      sa[74] = 0.39795372f;
      sa[75] = 0.06450572f;
      sa[76] = 0.21648414f;
      sa[77] = 0.112060264f;
      sa[78] = -0.30976096f;
      sa[79] = 0.30463052f;
      sa[80] = -0.19326751f;
      sa[81] = 0.06612827f;
      sa[82] = 0.2253027f;
      sa[83] = -0.15115024f;
      sa[84] = -0.4394603f;
      sa[85] = -0.37028483f;
      sa[86] = 0.058507152f;
      sa[87] = 0.3151307f;
      sa[88] = -0.41665223f;
      sa[89] = -0.12514642f;
      sa[90] = -0.31244946f;
      sa[91] = 0.38767275f;
      sa[92] = -0.068623155f;
      sa[93] = 0.08668246f;
      sa[94] = -0.41861176f;
      sa[95] = -0.057309557f;
      sa[96] = -0.28066072f;
      sa[97] = 0.03128857f;
      sa[98] = -0.035687827f;
      sa[99] = 0.099215336f;
      sa[100] = -0.3499527f;
      sa[101] = -0.19968477f;
      sa[102] = 0.3062953f;
      sa[103] = 0.015409726f;
      sa[104] = -0.0285286f;
      sa[105] = -0.20638657f;
      sa[106] = 0.37842694f;
      sa[107] = 0.3224964f;
      sa[108] = 0.2225769f;
      sa[109] = 0.01748062f;
      sa[110] = 0.22319989f;
      sa[111] = -0.1667483f;
      sa[112] = -0.31151223f;
      sa[113] = -0.010757373f;
      sa[114] = 0.016969949f;
      sa[115] = -0.06682404f;
      sa[116] = 0.29340106f;
      sa[117] = 0.022549745f;
      sa[118] = -0.39773247f;
      sa[119] = -0.18712786f;
      sa[120] = -0.06907385f;
      sa[121] = 0.21216299f;
      sa[122] = -0.0043694535f;
      sa[123] = 0.22341177f;
      sa[124] = -0.22847912f;
      sa[125] = 0.15542829f;
      sa[126] = -0.20827697f;
      sa[127] = 0.21572874f;
      sa[128] = -0.30668905f;
      sa[129] = 0.198045f;
      sa[130] = -0.09726756f;
      sa[131] = 0.2802411f;
      sa[132] = 0.03497726f;
      sa[133] = 0.25435007f;
      sa[134] = 0.2541314f;
      sa[135] = -0.22474152f;
      sa[136] = 0.1765754f;
      sa[137] = -0.1400706f;
      sa[138] = 0.12392469f;
      sa[139] = 0.3541931f;
      sa[140] = -0.24595208f;
      sa[141] = -0.07631471f;
      sa[142] = 0.024253996f;
      sa[143] = -0.20743209f;
      sa[144] = 0.24160177f;
      sa[145] = -0.18550786f;
      sa[146] = 0.048337013f;
      sa[147] = -0.06441953f;
      sa[148] = -0.23706818f;
      sa[149] = 0.35955513f;
      sa[150] = -0.20175579f;
      sa[151] = -0.44072482f;
      sa[152] = 0.42582145f;
      sa[153] = -0.08361751f;
      sa[154] = 0.3567966f;
      sa[155] = -0.4983029f;
      sa[156] = -0.39999834f;
      sa[157] = -0.2927989f;
      sa[158] = -0.13468623f;
      sa[159] = -0.2765349f;
      sa[160] = 0.2715433f;
      sa[161] = -0.31993443f;
      sa[162] = 0.38804945f;
      sa[163] = -0.14485751f;
      sa[164] = 0.12212092f;
      sa[165] = -0.14476247f;
      sa[166] = 0.37621853f;
      sa[167] = -0.3365256f;
      sa[168] = 0.34313563f;
      sa[169] = -0.4347585f;
      sa[170] = 0.3680823f;
      sa[171] = 0.30284262f;
      sa[172] = 0.31239182f;
      sa[173] = 0.26196998f;
      sa[174] = -0.03695027f;
      sa[175] = 0.015639326f;
      sa[176] = -0.20400888f;
      sa[177] = 0.030049128f;
      sa[178] = -0.2668782f;
      sa[179] = -0.080956f;
      sa[180] = -0.37587664f;
      sa[181] = -0.17799988f;
      sa[182] = 0.09376427f;
      sa[183] = -0.27343488f;
      sa[184] = 0.3791259f;
      sa[185] = 0.32918116f;
      sa[186] = -0.1505577f;
      sa[187] = -0.23628801f;
      sa[188] = -0.13199964f;
      sa[189] = -0.18238267f;
      sa[190] = -0.407736f;
      sa[191] = -0.2553992f;
      sa[192] = -0.08904942f;
      sa[193] = 0.13297977f;
      sa[194] = -0.2776258f;
      sa[195] = -0.2502587f;
      sa[196] = 0.17512543f;
      sa[197] = -0.14866167f;
      sa[198] = 0.04403853f;
      sa[199] = 0.42458907f;
      sa[200] = -0.037979048f;
      sa[201] = 0.27541307f;
      sa[202] = 0.1909737f;
      sa[203] = -0.3850269f;
      sa[204] = 0.10109089f;
      sa[205] = 0.35359663f;
      sa[206] = -0.15706106f;
      sa[207] = 0.13174821f;
      sa[208] = -0.15336846f;
      sa[209] = 0.15285747f;
      sa[210] = -0.111531354f;
      sa[211] = -0.27266413f;
      sa[212] = -0.3463552f;
      sa[213] = -0.0075262226f;
      sa[214] = -0.3727538f;
      sa[215] = -0.07100771f;
      sa[216] = 0.1283117f;
      sa[217] = 0.30238298f;
      sa[218] = -0.010111102f;
      sa[219] = 0.14350939f;
      sa[220] = 0.19661973f;
      sa[221] = 0.0037524018f;
      sa[222] = -0.2553136f;
      sa[223] = -0.28279775f;
      sa[224] = 0.31359127f;
      sa[225] = 0.07363051f;
      sa[226] = -0.017632442f;
      sa[227] = 0.053059906f;
      sa[228] = -0.10731592f;
      sa[229] = -0.26266992f;
      sa[230] = -0.24059314f;
      sa[231] = -0.14951472f;
      sa[232] = 0.4114608f;
      sa[233] = -0.14927252f;
      sa[234] = -0.24544159f;
      sa[235] = -0.023689928f;
      sa[236] = -0.30105397f;
      sa[237] = 0.47151807f;
      sa[238] = 0.13780321f;
      sa[239] = -0.12915832f;
      sa[240] = -0.1596513f;
      sa[241] = -0.33703962f;
      sa[242] = -0.22628315f;
      sa[243] = 0.36764392f;
      sa[244] = 0.19386391f;
      sa[245] = 0.33602607f;
      sa[246] = 0.25705144f;
      sa[247] = -0.342739f;
      sa[248] = -0.18969479f;
      sa[249] = 0.09430076f;
      sa[250] = 0.256846f;
      sa[251] = 0.31343314f;
      sa[252] = 0.18097994f;
      sa[253] = -0.3386015f;
      sa[254] = 0.34463263f;
      sa[255] = 0.08020264f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_02_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_Tanh_02_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_02_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.14831965f;
      sa[1] = -1.5192423f;
      sa[2] = -1.5480508f;
      sa[3] = 1.4432f;
      sa[4] = 0.4245898f;
      sa[5] = -0.20799957f;
      sa[6] = -1.5402254f;
      sa[7] = 1.5391699f;
      sa[8] = 1.8400707f;
      sa[9] = 0.25365883f;
      sa[10] = 1.6305441f;
      sa[11] = 1.4885602f;
      sa[12] = 1.8896115f;
      sa[13] = -0.56524426f;
      sa[14] = -2.013059f;
      sa[15] = -0.62972796f;
      sa[16] = 0.81070143f;
      sa[17] = -0.79283416f;
      sa[18] = -1.5915596f;
      sa[19] = -0.94811535f;
      sa[20] = -1.9599136f;
      sa[21] = 0.33029956f;
      sa[22] = -2.037154f;
      sa[23] = -0.60731083f;
      sa[24] = -0.56181985f;
      sa[25] = 1.8739631f;
      sa[26] = -0.34059423f;
      sa[27] = 1.2325723f;
      sa[28] = 1.2689272f;
      sa[29] = -0.7094448f;
      sa[30] = 0.106184974f;
      sa[31] = 0.041345123f;
      sa[32] = 0.45507395f;
      sa[33] = 0.25406194f;
      sa[34] = -0.60988855f;
      sa[35] = 1.0387583f;
      sa[36] = 0.56330764f;
      sa[37] = -1.342907f;
      sa[38] = 0.63624173f;
      sa[39] = -0.22507386f;
      sa[40] = 0.24461634f;
      sa[41] = -0.7073269f;
      sa[42] = 0.47961563f;
      sa[43] = -0.016360315f;
      sa[44] = 1.0460738f;
      sa[45] = -2.0001485f;
      sa[46] = -2.146126f;
      sa[47] = 0.035805117f;
      sa[48] = 1.6339312f;
      sa[49] = -0.19349322f;
      sa[50] = -0.4704621f;
      sa[51] = 1.8009769f;
      sa[52] = -1.664938f;
      sa[53] = 0.93555456f;
      sa[54] = 1.7803025f;
      sa[55] = 1.0923872f;
      sa[56] = -0.6089654f;
      sa[57] = -0.0830453f;
      sa[58] = 1.0721834f;
      sa[59] = 0.82730067f;
      sa[60] = -1.412814f;
      sa[61] = 0.915557f;
      sa[62] = -0.34314787f;
      sa[63] = -0.8296819f;
      sa[64] = 1.0103208f;
      sa[65] = -0.79896873f;
      sa[66] = -1.7819993f;
      sa[67] = -0.082155935f;
      sa[68] = 0.9618559f;
      sa[69] = -1.3628306f;
      sa[70] = -1.7242963f;
      sa[71] = -0.01733131f;
      sa[72] = -1.1609515f;
      sa[73] = -1.3036376f;
      sa[74] = -0.9990477f;
      sa[75] = 1.1009138f;
      sa[76] = 1.8677784f;
      sa[77] = -0.70009995f;
      sa[78] = -1.3667251f;
      sa[79] = -0.3968261f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_02 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_02_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_02_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_02_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_Tanh_02_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_02_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


