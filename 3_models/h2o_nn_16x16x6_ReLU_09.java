/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:08:41.622+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_09

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_09 > h2o_nn_16x16x6_ReLU_09.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_09.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_09", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_09 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_09_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_09_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_09_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_09_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_09_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_09_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_09.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_09_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25961538461538464,0.11538461538461539,0.11538461538461539,0.125,0.25961538461538464,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_09() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(4323645865945658576L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_09_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_09_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_09_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_09_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_09_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_09_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_09_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_09_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.6848349187498876;
      sa[1] = 0.6420888445067671;
      sa[2] = 0.49332303967798385;
      sa[3] = 0.3899141076557745;
      sa[4] = 0.6007598097793383;
      sa[5] = 0.7153991697119911;
      sa[6] = 0.5957058147381558;
      sa[7] = 0.6451362914226413;
      sa[8] = 0.5214253009806085;
      sa[9] = 0.6024768244706626;
      sa[10] = 0.6360309503156087;
      sa[11] = 0.3862762514692524;
      sa[12] = 0.34158219797803124;
      sa[13] = 0.43737481120770405;
      sa[14] = 0.5824545888791334;
      sa[15] = 0.6305811417144636;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_09_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.162445467690524;
      sa[1] = 1.1062536507418705;
      sa[2] = 0.9361270584633948;
      sa[3] = 0.9702876936541794;
      sa[4] = 0.915251876895331;
      sa[5] = 0.9643252752864724;
      sa[6] = 0.9303423598904635;
      sa[7] = 0.9324672770635004;
      sa[8] = 0.8976643380115675;
      sa[9] = 1.0163126540996898;
      sa[10] = 0.9222021649785199;
      sa[11] = 1.1249832702051485;
      sa[12] = 1.0719257744695592;
      sa[13] = 0.8770083110685989;
      sa[14] = 0.9569274420275129;
      sa[15] = 0.9325175296118509;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_09_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_09_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.09025181632422125;
      sa[1] = 0.022186299100486785;
      sa[2] = -0.055159001158269334;
      sa[3] = -0.03016074437736082;
      sa[4] = 0.07848525760961336;
      sa[5] = -0.12987773544721173;
    }
  }
}
class h2o_nn_16x16x6_ReLU_09_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_09_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.020387573f;
      sa[1] = 0.25244424f;
      sa[2] = 0.2344409f;
      sa[3] = 0.061326608f;
      sa[4] = -0.04756972f;
      sa[5] = -0.14506525f;
      sa[6] = 0.059980467f;
      sa[7] = 0.4512737f;
      sa[8] = 0.06944707f;
      sa[9] = -0.07853257f;
      sa[10] = -0.25616276f;
      sa[11] = -0.27921888f;
      sa[12] = 0.18226516f;
      sa[13] = -0.22952986f;
      sa[14] = -0.08348323f;
      sa[15] = 0.11469603f;
      sa[16] = 0.18252951f;
      sa[17] = 0.24482428f;
      sa[18] = -0.17575213f;
      sa[19] = 0.0392808f;
      sa[20] = 0.36621094f;
      sa[21] = -0.21177937f;
      sa[22] = 0.36982167f;
      sa[23] = -0.032778226f;
      sa[24] = 0.349311f;
      sa[25] = 0.13017108f;
      sa[26] = -0.25712043f;
      sa[27] = 0.28756496f;
      sa[28] = 0.37415913f;
      sa[29] = -0.16256633f;
      sa[30] = -0.11173721f;
      sa[31] = 0.34778517f;
      sa[32] = 0.1468313f;
      sa[33] = -0.3400681f;
      sa[34] = 0.15415661f;
      sa[35] = -0.024322055f;
      sa[36] = 0.100998476f;
      sa[37] = 0.21283576f;
      sa[38] = -0.19800045f;
      sa[39] = 0.19101411f;
      sa[40] = 0.06489902f;
      sa[41] = -0.11084566f;
      sa[42] = -0.13012731f;
      sa[43] = -0.031529516f;
      sa[44] = 0.26921976f;
      sa[45] = -0.31846398f;
      sa[46] = -0.028877359f;
      sa[47] = -0.07251972f;
      sa[48] = 0.24791804f;
      sa[49] = 0.25538477f;
      sa[50] = 0.23061246f;
      sa[51] = -0.3790164f;
      sa[52] = -0.15757075f;
      sa[53] = 0.18738171f;
      sa[54] = 0.40052554f;
      sa[55] = 0.008581968f;
      sa[56] = -0.18139854f;
      sa[57] = -0.29690528f;
      sa[58] = 0.2867941f;
      sa[59] = -0.25169453f;
      sa[60] = -0.43319535f;
      sa[61] = 0.15185988f;
      sa[62] = 0.27155614f;
      sa[63] = -0.015001584f;
      sa[64] = 0.13269019f;
      sa[65] = 0.13163874f;
      sa[66] = -0.030029198f;
      sa[67] = 0.052410785f;
      sa[68] = -0.19159587f;
      sa[69] = 0.05255533f;
      sa[70] = 0.015561434f;
      sa[71] = 0.447526f;
      sa[72] = -0.095193915f;
      sa[73] = 0.21282475f;
      sa[74] = -0.18230669f;
      sa[75] = 0.07705181f;
      sa[76] = -0.22681291f;
      sa[77] = -0.05060088f;
      sa[78] = -0.09074709f;
      sa[79] = 0.14282058f;
      sa[80] = -0.17369364f;
      sa[81] = -0.17221405f;
      sa[82] = 0.016319076f;
      sa[83] = 0.10886097f;
      sa[84] = -0.016630461f;
      sa[85] = -0.16595869f;
      sa[86] = 0.14820662f;
      sa[87] = 0.26758182f;
      sa[88] = 0.2291633f;
      sa[89] = 0.027806135f;
      sa[90] = -0.17644222f;
      sa[91] = 0.24156873f;
      sa[92] = 0.11582744f;
      sa[93] = -0.2334826f;
      sa[94] = -0.19624008f;
      sa[95] = -0.2724277f;
      sa[96] = 0.15254727f;
      sa[97] = 0.05205786f;
      sa[98] = 0.20140865f;
      sa[99] = -0.08889362f;
      sa[100] = -0.03831573f;
      sa[101] = -0.19174685f;
      sa[102] = -0.24383384f;
      sa[103] = -0.07922899f;
      sa[104] = -0.005885414f;
      sa[105] = -0.15974367f;
      sa[106] = -0.25221854f;
      sa[107] = 0.094167955f;
      sa[108] = 0.09495065f;
      sa[109] = -0.13718888f;
      sa[110] = -0.20462859f;
      sa[111] = 0.059606396f;
      sa[112] = 0.10099726f;
      sa[113] = -0.010293914f;
      sa[114] = -0.21370822f;
      sa[115] = -0.008884665f;
      sa[116] = -0.32534617f;
      sa[117] = 0.08627708f;
      sa[118] = -0.24551967f;
      sa[119] = -0.09379152f;
      sa[120] = 0.2697423f;
      sa[121] = 0.2520551f;
      sa[122] = 0.3331299f;
      sa[123] = 0.36183357f;
      sa[124] = 0.31557947f;
      sa[125] = 0.32103395f;
      sa[126] = -0.35501403f;
      sa[127] = -0.34796005f;
      sa[128] = 0.12871045f;
      sa[129] = 0.21875319f;
      sa[130] = -0.095172696f;
      sa[131] = 0.45187718f;
      sa[132] = 0.2880666f;
      sa[133] = -0.2515669f;
      sa[134] = 0.09146612f;
      sa[135] = -0.20129454f;
      sa[136] = -0.26801077f;
      sa[137] = -0.0066854306f;
      sa[138] = 0.11031734f;
      sa[139] = 0.0040215463f;
      sa[140] = -0.037119735f;
      sa[141] = -0.028669842f;
      sa[142] = 0.12124752f;
      sa[143] = -0.32585904f;
      sa[144] = 0.26470643f;
      sa[145] = -0.21165296f;
      sa[146] = -0.37664592f;
      sa[147] = 0.17225935f;
      sa[148] = 0.1690369f;
      sa[149] = 0.19612387f;
      sa[150] = 0.29674757f;
      sa[151] = -0.30205405f;
      sa[152] = 0.03527458f;
      sa[153] = 0.23026074f;
      sa[154] = 0.2633695f;
      sa[155] = -0.19823463f;
      sa[156] = 0.14686309f;
      sa[157] = -0.21297833f;
      sa[158] = 0.08711946f;
      sa[159] = 0.08738547f;
      sa[160] = -0.043246776f;
      sa[161] = 0.13481203f;
      sa[162] = -0.10328632f;
      sa[163] = -0.15458903f;
      sa[164] = 0.25084773f;
      sa[165] = -0.06247252f;
      sa[166] = -0.08242583f;
      sa[167] = -0.11875348f;
      sa[168] = 0.107468076f;
      sa[169] = 0.3283347f;
      sa[170] = 0.12009226f;
      sa[171] = -0.008406946f;
      sa[172] = -0.0864544f;
      sa[173] = -0.18328656f;
      sa[174] = -0.0500525f;
      sa[175] = -0.2940401f;
      sa[176] = 0.027446745f;
      sa[177] = -0.008985438f;
      sa[178] = -0.0554753f;
      sa[179] = 0.09496105f;
      sa[180] = -0.046245884f;
      sa[181] = -0.35204944f;
      sa[182] = -0.028001683f;
      sa[183] = 0.32088858f;
      sa[184] = 0.46184638f;
      sa[185] = 0.3037587f;
      sa[186] = -0.19595863f;
      sa[187] = 0.124408826f;
      sa[188] = -0.030189667f;
      sa[189] = 0.19521217f;
      sa[190] = -0.018545771f;
      sa[191] = 0.05784736f;
      sa[192] = -0.11237008f;
      sa[193] = 0.29259306f;
      sa[194] = 0.17300422f;
      sa[195] = 0.2858103f;
      sa[196] = 0.21282132f;
      sa[197] = -0.07588561f;
      sa[198] = 0.17199662f;
      sa[199] = -0.16241471f;
      sa[200] = 0.039639585f;
      sa[201] = -0.23527284f;
      sa[202] = 0.19661832f;
      sa[203] = -0.049567655f;
      sa[204] = -0.12963891f;
      sa[205] = 0.18423192f;
      sa[206] = 0.25328404f;
      sa[207] = -0.029116975f;
      sa[208] = -0.29134744f;
      sa[209] = -0.0523807f;
      sa[210] = -0.28028437f;
      sa[211] = -0.39143077f;
      sa[212] = 0.35531542f;
      sa[213] = -0.23117708f;
      sa[214] = -0.22270238f;
      sa[215] = -0.09306994f;
      sa[216] = 0.12035963f;
      sa[217] = 0.25445077f;
      sa[218] = -0.18932432f;
      sa[219] = 0.25752234f;
      sa[220] = -0.20912576f;
      sa[221] = 0.10193383f;
      sa[222] = 0.2770004f;
      sa[223] = 0.11928179f;
      sa[224] = 0.16430041f;
      sa[225] = 0.26029736f;
      sa[226] = -0.2256443f;
      sa[227] = 0.4298912f;
      sa[228] = 0.18167801f;
      sa[229] = 0.16314185f;
      sa[230] = 0.31885806f;
      sa[231] = -0.2092052f;
      sa[232] = -0.29342484f;
      sa[233] = -0.0023282086f;
      sa[234] = 0.032961298f;
      sa[235] = -0.3681883f;
      sa[236] = 0.007958801f;
      sa[237] = -0.20627218f;
      sa[238] = -0.19459333f;
      sa[239] = 0.18751015f;
      sa[240] = 0.051848147f;
      sa[241] = -0.21888468f;
      sa[242] = -0.20456935f;
      sa[243] = -0.3195215f;
      sa[244] = -0.17175607f;
      sa[245] = -0.090608194f;
      sa[246] = -0.22403073f;
      sa[247] = -0.012816843f;
      sa[248] = 0.15492442f;
      sa[249] = 0.31194144f;
      sa[250] = -0.2933632f;
      sa[251] = -0.1721548f;
      sa[252] = -0.25417718f;
      sa[253] = -0.3923046f;
      sa[254] = -0.4020889f;
      sa[255] = 0.16957216f;
      sa[256] = -0.19761221f;
      sa[257] = 0.31776088f;
      sa[258] = -0.2326158f;
      sa[259] = -0.07263109f;
      sa[260] = -0.1698064f;
      sa[261] = -0.22047324f;
      sa[262] = -0.18737662f;
      sa[263] = 0.40704146f;
      sa[264] = -0.09617802f;
      sa[265] = 0.14879791f;
      sa[266] = -0.208784f;
      sa[267] = -0.15861116f;
      sa[268] = 0.050847154f;
      sa[269] = -0.32214805f;
      sa[270] = 0.008171428f;
      sa[271] = -0.015692912f;
      sa[272] = -0.06309687f;
      sa[273] = -0.10840197f;
      sa[274] = 0.20703799f;
      sa[275] = 0.021877086f;
      sa[276] = -0.003224166f;
      sa[277] = -0.27777544f;
      sa[278] = -0.1256426f;
      sa[279] = -0.010991858f;
      sa[280] = -0.17662434f;
      sa[281] = 0.28889528f;
      sa[282] = -0.12053746f;
      sa[283] = -0.04471752f;
      sa[284] = -0.11100011f;
      sa[285] = -0.2408496f;
      sa[286] = 0.40608934f;
      sa[287] = 0.20713335f;
      sa[288] = -0.32632706f;
      sa[289] = -0.17647159f;
      sa[290] = 0.005816439f;
      sa[291] = 0.08431338f;
      sa[292] = 0.2539387f;
      sa[293] = -0.08250731f;
      sa[294] = 0.14423573f;
      sa[295] = 0.11231355f;
      sa[296] = 0.10463591f;
      sa[297] = 0.35521108f;
      sa[298] = -0.07077353f;
      sa[299] = -0.17365555f;
      sa[300] = -0.048267826f;
      sa[301] = -0.12027347f;
      sa[302] = 0.17287055f;
      sa[303] = -0.028356f;
      sa[304] = -0.14722797f;
      sa[305] = 0.17048165f;
      sa[306] = 0.37962562f;
      sa[307] = -0.088873796f;
      sa[308] = 0.08479101f;
      sa[309] = 0.2236517f;
      sa[310] = 0.29557478f;
      sa[311] = 0.33331487f;
      sa[312] = -0.13598087f;
      sa[313] = -0.2126476f;
      sa[314] = -0.026043141f;
      sa[315] = 0.023293216f;
      sa[316] = -0.02963707f;
      sa[317] = -0.03716911f;
      sa[318] = 0.086272225f;
      sa[319] = 0.2784927f;
      sa[320] = 0.023343585f;
      sa[321] = 0.14506939f;
      sa[322] = 0.174251f;
      sa[323] = -0.19006199f;
      sa[324] = -0.07634182f;
      sa[325] = 0.22742835f;
      sa[326] = -0.35420004f;
      sa[327] = -0.07796571f;
      sa[328] = -0.037313156f;
      sa[329] = 0.23148547f;
      sa[330] = -0.18640032f;
      sa[331] = -0.006991406f;
      sa[332] = -0.34814307f;
      sa[333] = 0.15072826f;
      sa[334] = -0.15532005f;
      sa[335] = 0.19454676f;
      sa[336] = -0.14587286f;
      sa[337] = -0.19696331f;
      sa[338] = 0.31947893f;
      sa[339] = -0.2369065f;
      sa[340] = -0.39667028f;
      sa[341] = -0.30394107f;
      sa[342] = 0.3581354f;
      sa[343] = -0.24304493f;
      sa[344] = -0.15307589f;
      sa[345] = 0.25876337f;
      sa[346] = 0.24032813f;
      sa[347] = -0.13666548f;
      sa[348] = 0.2314418f;
      sa[349] = -0.33592257f;
      sa[350] = -0.093029924f;
      sa[351] = 0.22472925f;
      sa[352] = 0.22721973f;
      sa[353] = -0.017662857f;
      sa[354] = 0.03375498f;
      sa[355] = 0.15717447f;
      sa[356] = -0.15355594f;
      sa[357] = 0.22518548f;
      sa[358] = -0.21211159f;
      sa[359] = 0.15246373f;
      sa[360] = 0.14977036f;
      sa[361] = -0.17795211f;
      sa[362] = -0.20773233f;
      sa[363] = 0.1787751f;
      sa[364] = -0.160425f;
      sa[365] = -0.23269531f;
      sa[366] = -0.021380631f;
      sa[367] = -0.31108972f;
      sa[368] = -0.13273755f;
      sa[369] = 0.13699272f;
      sa[370] = -0.20084688f;
      sa[371] = 0.24160334f;
      sa[372] = 0.025228051f;
      sa[373] = 0.35671204f;
      sa[374] = -0.13664752f;
      sa[375] = -0.27235466f;
      sa[376] = -0.45616361f;
      sa[377] = -0.4391718f;
      sa[378] = 0.2959044f;
      sa[379] = 0.017379666f;
      sa[380] = -0.13123494f;
      sa[381] = -0.13631395f;
      sa[382] = -0.03460885f;
      sa[383] = -0.14184073f;
      sa[384] = -0.16636646f;
      sa[385] = 0.10112379f;
      sa[386] = -0.23236062f;
      sa[387] = -0.22782221f;
      sa[388] = 0.10264547f;
      sa[389] = -0.011859417f;
      sa[390] = 0.0161604f;
      sa[391] = -0.10931927f;
      sa[392] = 0.36340746f;
      sa[393] = 0.46395552f;
      sa[394] = -0.23065817f;
      sa[395] = 0.21132241f;
      sa[396] = 0.41495878f;
      sa[397] = -0.19021215f;
      sa[398] = 0.11184573f;
      sa[399] = 0.11492305f;
      sa[400] = 0.13633907f;
      sa[401] = 0.27888626f;
      sa[402] = -0.17361255f;
      sa[403] = 0.08090165f;
      sa[404] = 0.3662043f;
      sa[405] = -0.28478876f;
      sa[406] = -0.033168316f;
      sa[407] = 0.3181703f;
      sa[408] = -0.23436953f;
      sa[409] = -0.22517933f;
      sa[410] = -0.12663902f;
      sa[411] = 0.24295062f;
      sa[412] = -0.08653623f;
      sa[413] = 0.09774828f;
      sa[414] = -0.014213964f;
      sa[415] = 0.372448f;
      sa[416] = -0.20996663f;
      sa[417] = -0.007969897f;
      sa[418] = 1.7093158E-4f;
      sa[419] = 0.25556296f;
      sa[420] = 0.23478979f;
      sa[421] = 0.3175514f;
      sa[422] = 0.06654346f;
      sa[423] = -0.19389267f;
      sa[424] = 0.11031737f;
      sa[425] = -0.119444616f;
      sa[426] = -0.26513276f;
      sa[427] = 0.19137076f;
      sa[428] = -0.11353303f;
      sa[429] = -0.13152821f;
      sa[430] = 0.13910465f;
      sa[431] = -0.09117362f;
      sa[432] = -0.039975774f;
      sa[433] = 0.17938496f;
      sa[434] = 0.25991434f;
      sa[435] = 0.11017133f;
      sa[436] = -0.33259362f;
      sa[437] = -0.26306945f;
      sa[438] = -0.04108118f;
      sa[439] = -0.03356033f;
      sa[440] = 0.35414654f;
      sa[441] = -0.44717193f;
      sa[442] = 0.12951283f;
      sa[443] = 0.09407743f;
      sa[444] = -0.28424028f;
      sa[445] = 0.06488816f;
      sa[446] = 0.19978695f;
      sa[447] = 0.057622045f;
      sa[448] = 0.22562052f;
      sa[449] = 0.19351785f;
      sa[450] = -0.14957549f;
      sa[451] = 0.10719378f;
      sa[452] = 0.16201688f;
      sa[453] = -0.09093555f;
      sa[454] = -0.19811249f;
      sa[455] = -0.09844252f;
      sa[456] = -0.072144285f;
      sa[457] = 0.08512117f;
      sa[458] = -0.28152093f;
      sa[459] = 0.27881628f;
      sa[460] = 0.20417401f;
      sa[461] = 0.26769528f;
      sa[462] = 0.04084445f;
      sa[463] = 0.20261596f;
      sa[464] = -0.32852715f;
      sa[465] = 0.30372632f;
      sa[466] = -0.0039993934f;
      sa[467] = 0.11261185f;
      sa[468] = 0.023468181f;
      sa[469] = 0.38335374f;
      sa[470] = 0.20530291f;
      sa[471] = -0.034846783f;
      sa[472] = -0.0058006723f;
      sa[473] = -0.15908602f;
      sa[474] = -0.06481897f;
      sa[475] = 0.11338372f;
      sa[476] = 0.21474318f;
      sa[477] = -0.07253184f;
      sa[478] = 0.13098288f;
      sa[479] = -0.25004312f;
      sa[480] = -0.3330483f;
      sa[481] = -0.25377625f;
      sa[482] = -0.31714514f;
      sa[483] = 0.23770373f;
      sa[484] = 0.32913795f;
      sa[485] = 0.2833912f;
      sa[486] = 0.006748339f;
      sa[487] = -0.1621766f;
      sa[488] = -0.19433327f;
      sa[489] = 0.10304629f;
      sa[490] = -0.024122272f;
      sa[491] = -0.2048239f;
      sa[492] = 0.27204028f;
      sa[493] = 0.27858883f;
      sa[494] = -0.20130737f;
      sa[495] = 0.3484409f;
      sa[496] = 0.027490292f;
      sa[497] = 0.10479425f;
      sa[498] = 0.19376937f;
      sa[499] = 0.28487924f;
      sa[500] = -0.042104773f;
      sa[501] = 0.11745774f;
      sa[502] = 0.2787929f;
      sa[503] = 0.087118655f;
      sa[504] = -0.18736371f;
      sa[505] = -0.15417667f;
      sa[506] = 0.36401528f;
      sa[507] = -0.04248431f;
      sa[508] = 0.20230517f;
      sa[509] = 0.33864358f;
      sa[510] = 0.33550304f;
      sa[511] = 0.15139665f;
      sa[512] = 0.04533334f;
      sa[513] = 0.0730797f;
      sa[514] = 0.23748805f;
      sa[515] = -0.09309513f;
      sa[516] = 0.1210056f;
      sa[517] = 0.20203377f;
      sa[518] = 0.29842126f;
      sa[519] = 0.040330715f;
      sa[520] = 0.32536304f;
      sa[521] = 0.22865766f;
      sa[522] = -0.11577246f;
      sa[523] = 0.1251559f;
      sa[524] = 0.3271508f;
      sa[525] = 0.30593553f;
      sa[526] = 0.15537283f;
      sa[527] = 0.057633124f;
      sa[528] = 0.265654f;
      sa[529] = 0.11147257f;
      sa[530] = -0.3911371f;
      sa[531] = -0.11719613f;
      sa[532] = 0.23658617f;
      sa[533] = 0.21276148f;
      sa[534] = 0.22637007f;
      sa[535] = 0.004173187f;
      sa[536] = 0.09067349f;
      sa[537] = -0.03199112f;
      sa[538] = 0.08723218f;
      sa[539] = 0.22247191f;
      sa[540] = -0.29691976f;
      sa[541] = -0.27340424f;
      sa[542] = -0.22720632f;
      sa[543] = -0.5506091f;
      sa[544] = 0.14449711f;
      sa[545] = 0.084816635f;
      sa[546] = 0.030189058f;
      sa[547] = 0.18938641f;
      sa[548] = 0.06877171f;
      sa[549] = 0.16311169f;
      sa[550] = 0.014024088f;
      sa[551] = -0.24733603f;
      sa[552] = 0.066609085f;
      sa[553] = -0.072804905f;
      sa[554] = -0.19370948f;
      sa[555] = -0.15881087f;
      sa[556] = -0.2915782f;
      sa[557] = -0.2978847f;
      sa[558] = -0.066812545f;
      sa[559] = 0.0863191f;
      sa[560] = -0.29972988f;
      sa[561] = -0.07886637f;
      sa[562] = 0.21186432f;
      sa[563] = -0.022779938f;
      sa[564] = 0.21341382f;
      sa[565] = 0.05337022f;
      sa[566] = 0.47548023f;
      sa[567] = 0.31286982f;
      sa[568] = -0.05976209f;
      sa[569] = 0.053371966f;
      sa[570] = -0.048079267f;
      sa[571] = 1.6273957E-4f;
      sa[572] = -0.18743092f;
      sa[573] = 0.039588723f;
      sa[574] = 0.44256243f;
      sa[575] = -0.080737896f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_09_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.6921169f;
      sa[1] = 0.1371452f;
      sa[2] = -0.13205475f;
      sa[3] = -0.09144732f;
      sa[4] = 0.15151672f;
      sa[5] = 0.07802145f;
      sa[6] = 0.12280666f;
      sa[7] = 0.3529746f;
      sa[8] = -0.18629679f;
      sa[9] = 0.16414787f;
      sa[10] = -0.19484286f;
      sa[11] = 0.30699804f;
      sa[12] = 0.16035973f;
      sa[13] = 0.11336973f;
      sa[14] = -0.1349353f;
      sa[15] = 0.62693137f;
      sa[16] = 0.47221318f;
      sa[17] = -0.122033454f;
      sa[18] = 0.046695434f;
      sa[19] = -0.0053709806f;
      sa[20] = 0.38891095f;
      sa[21] = 0.0127811935f;
      sa[22] = -0.14337152f;
      sa[23] = 0.22559287f;
      sa[24] = -0.31461075f;
      sa[25] = 0.19568059f;
      sa[26] = -0.046038974f;
      sa[27] = 0.4493252f;
      sa[28] = -0.35699818f;
      sa[29] = -0.15668179f;
      sa[30] = 0.11179886f;
      sa[31] = -0.2441144f;
      sa[32] = -0.2605512f;
      sa[33] = -0.45612103f;
      sa[34] = 0.0229376f;
      sa[35] = 0.34200293f;
      sa[36] = -0.112072825f;
      sa[37] = -0.077981226f;
      sa[38] = 0.051036946f;
      sa[39] = 0.15632465f;
      sa[40] = -0.2474214f;
      sa[41] = -0.4123971f;
      sa[42] = -0.3206867f;
      sa[43] = -0.41528004f;
      sa[44] = 0.054755617f;
      sa[45] = -0.30162552f;
      sa[46] = 0.31255767f;
      sa[47] = 0.30806437f;
      sa[48] = -0.35784593f;
      sa[49] = -0.24226047f;
      sa[50] = 0.0845686f;
      sa[51] = -0.12785685f;
      sa[52] = 0.22441669f;
      sa[53] = 0.20194507f;
      sa[54] = -0.11491938f;
      sa[55] = 0.3474846f;
      sa[56] = -0.32672495f;
      sa[57] = -0.36816463f;
      sa[58] = 0.035184503f;
      sa[59] = 0.022009112f;
      sa[60] = 0.39079043f;
      sa[61] = -0.17730764f;
      sa[62] = -0.15373778f;
      sa[63] = 0.17409351f;
      sa[64] = 0.21736312f;
      sa[65] = -0.17473821f;
      sa[66] = 0.0684637f;
      sa[67] = 0.32288602f;
      sa[68] = 0.13718435f;
      sa[69] = -0.30556318f;
      sa[70] = -0.43823224f;
      sa[71] = -0.104250595f;
      sa[72] = -0.35959038f;
      sa[73] = 0.3346794f;
      sa[74] = 0.40889728f;
      sa[75] = -0.12424422f;
      sa[76] = 0.16939384f;
      sa[77] = 0.10682365f;
      sa[78] = -0.41646156f;
      sa[79] = 0.3320631f;
      sa[80] = -0.22114843f;
      sa[81] = 0.041552108f;
      sa[82] = 0.21483083f;
      sa[83] = -0.17945969f;
      sa[84] = -0.45061123f;
      sa[85] = -0.3742855f;
      sa[86] = 0.055960763f;
      sa[87] = 0.3003184f;
      sa[88] = -0.4374164f;
      sa[89] = -0.1727438f;
      sa[90] = -0.30173528f;
      sa[91] = 0.40181676f;
      sa[92] = -0.07618996f;
      sa[93] = 0.065458745f;
      sa[94] = -0.42471713f;
      sa[95] = -0.09457083f;
      sa[96] = -0.24622214f;
      sa[97] = -0.018795364f;
      sa[98] = -0.047425427f;
      sa[99] = 0.109427884f;
      sa[100] = -0.33915254f;
      sa[101] = -0.28583574f;
      sa[102] = 0.32852456f;
      sa[103] = -0.02095076f;
      sa[104] = -0.13652779f;
      sa[105] = -0.2391392f;
      sa[106] = 0.2885183f;
      sa[107] = 0.32769626f;
      sa[108] = 0.28040293f;
      sa[109] = 0.06286704f;
      sa[110] = 0.14663629f;
      sa[111] = -0.29801583f;
      sa[112] = -0.18862776f;
      sa[113] = 0.02439717f;
      sa[114] = 0.030419016f;
      sa[115] = -0.15641035f;
      sa[116] = 0.2915423f;
      sa[117] = -0.01977978f;
      sa[118] = -0.46295267f;
      sa[119] = -0.21077627f;
      sa[120] = -0.14623928f;
      sa[121] = 0.20814772f;
      sa[122] = -0.047999725f;
      sa[123] = 0.102678254f;
      sa[124] = -0.1423926f;
      sa[125] = 0.29912588f;
      sa[126] = -0.26175442f;
      sa[127] = 0.14422856f;
      sa[128] = -0.48488462f;
      sa[129] = 0.14188273f;
      sa[130] = -0.11873985f;
      sa[131] = 0.10796372f;
      sa[132] = 0.044779275f;
      sa[133] = 0.1334654f;
      sa[134] = 0.2057177f;
      sa[135] = -0.409882f;
      sa[136] = 0.08393313f;
      sa[137] = -0.19212724f;
      sa[138] = 0.05183187f;
      sa[139] = 0.25791085f;
      sa[140] = -0.19073322f;
      sa[141] = -0.06325714f;
      sa[142] = -0.046800215f;
      sa[143] = -0.2886193f;
      sa[144] = 0.3243598f;
      sa[145] = -0.2805311f;
      sa[146] = 0.123308234f;
      sa[147] = -0.038024493f;
      sa[148] = -0.236964f;
      sa[149] = 0.35296118f;
      sa[150] = -0.1428862f;
      sa[151] = -0.550734f;
      sa[152] = 0.44323435f;
      sa[153] = -0.13864295f;
      sa[154] = 0.41081405f;
      sa[155] = -0.42900956f;
      sa[156] = -0.3880751f;
      sa[157] = -0.3188535f;
      sa[158] = -0.03076069f;
      sa[159] = -0.27936712f;
      sa[160] = 0.3312166f;
      sa[161] = -0.33567694f;
      sa[162] = 0.39160925f;
      sa[163] = -0.28399447f;
      sa[164] = 0.14691842f;
      sa[165] = -0.20790254f;
      sa[166] = 0.27562308f;
      sa[167] = -0.41915393f;
      sa[168] = 0.21291237f;
      sa[169] = -0.4761368f;
      sa[170] = 0.2908855f;
      sa[171] = 0.2115543f;
      sa[172] = 0.42730388f;
      sa[173] = 0.42901918f;
      sa[174] = -0.08264051f;
      sa[175] = -0.0421391f;
      sa[176] = -0.14270024f;
      sa[177] = 0.23777933f;
      sa[178] = -0.24524796f;
      sa[179] = -0.09068993f;
      sa[180] = -0.3008974f;
      sa[181] = -0.12019368f;
      sa[182] = -0.021823749f;
      sa[183] = -0.09053387f;
      sa[184] = 0.45831433f;
      sa[185] = 0.35114276f;
      sa[186] = -0.10034255f;
      sa[187] = -0.12948772f;
      sa[188] = -0.16582555f;
      sa[189] = -0.24827679f;
      sa[190] = -0.32223588f;
      sa[191] = -0.12572631f;
      sa[192] = -0.15230404f;
      sa[193] = 0.16607554f;
      sa[194] = -0.2745855f;
      sa[195] = -0.24828188f;
      sa[196] = 0.16139947f;
      sa[197] = -0.048122805f;
      sa[198] = 0.12528023f;
      sa[199] = 0.44321427f;
      sa[200] = 0.060489118f;
      sa[201] = 0.40293384f;
      sa[202] = 0.3384798f;
      sa[203] = -0.42542407f;
      sa[204] = 0.03966845f;
      sa[205] = 0.30409843f;
      sa[206] = -0.14861886f;
      sa[207] = 0.22765148f;
      sa[208] = -0.25629953f;
      sa[209] = 0.096208274f;
      sa[210] = -0.14912313f;
      sa[211] = -0.3112254f;
      sa[212] = -0.4358657f;
      sa[213] = -0.07076398f;
      sa[214] = -0.40621752f;
      sa[215] = -0.102345906f;
      sa[216] = 0.078217335f;
      sa[217] = 0.26243913f;
      sa[218] = -0.028255923f;
      sa[219] = 0.05777125f;
      sa[220] = 0.1473482f;
      sa[221] = -0.04508357f;
      sa[222] = -0.3263489f;
      sa[223] = -0.39300048f;
      sa[224] = 0.3937764f;
      sa[225] = 0.011894611f;
      sa[226] = -0.03372559f;
      sa[227] = 0.05914799f;
      sa[228] = -0.13315912f;
      sa[229] = -0.2744874f;
      sa[230] = -0.33210167f;
      sa[231] = -0.18670346f;
      sa[232] = 0.4140242f;
      sa[233] = -0.26178184f;
      sa[234] = -0.24102212f;
      sa[235] = 0.015109695f;
      sa[236] = -0.31463286f;
      sa[237] = 0.5104354f;
      sa[238] = 0.22751483f;
      sa[239] = -0.116710685f;
      sa[240] = -0.18342058f;
      sa[241] = -0.6027077f;
      sa[242] = -0.24385151f;
      sa[243] = 0.42025897f;
      sa[244] = 0.08843051f;
      sa[245] = 0.29830667f;
      sa[246] = 0.45894116f;
      sa[247] = -0.5695454f;
      sa[248] = -0.16713221f;
      sa[249] = 0.08543605f;
      sa[250] = 0.2938311f;
      sa[251] = 0.23101602f;
      sa[252] = 0.16200033f;
      sa[253] = -0.33300823f;
      sa[254] = 0.3857209f;
      sa[255] = 0.017828044f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_09_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_ReLU_09_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.02326339f;
      sa[1] = -1.6180447f;
      sa[2] = -1.5854251f;
      sa[3] = 1.3173056f;
      sa[4] = 0.37754172f;
      sa[5] = -0.19791473f;
      sa[6] = -1.6675737f;
      sa[7] = 1.4769105f;
      sa[8] = 1.6945114f;
      sa[9] = 0.14501537f;
      sa[10] = 1.565675f;
      sa[11] = 1.3399239f;
      sa[12] = 1.7862853f;
      sa[13] = -0.5554337f;
      sa[14] = -2.0054936f;
      sa[15] = -0.7570081f;
      sa[16] = 0.74838525f;
      sa[17] = -0.7264379f;
      sa[18] = -1.471187f;
      sa[19] = -0.9053172f;
      sa[20] = -1.9190642f;
      sa[21] = 0.30902314f;
      sa[22] = -1.9100482f;
      sa[23] = -0.6654892f;
      sa[24] = -0.51703864f;
      sa[25] = 1.8887603f;
      sa[26] = -0.30149892f;
      sa[27] = 1.1860361f;
      sa[28] = 1.183748f;
      sa[29] = -0.7171148f;
      sa[30] = 0.17856814f;
      sa[31] = 0.18264608f;
      sa[32] = 0.34356427f;
      sa[33] = -0.074945316f;
      sa[34] = -0.6179181f;
      sa[35] = 0.81885487f;
      sa[36] = 0.52803844f;
      sa[37] = -1.3310738f;
      sa[38] = 0.62355334f;
      sa[39] = -0.29492489f;
      sa[40] = 0.24422118f;
      sa[41] = -0.62235004f;
      sa[42] = 0.5329695f;
      sa[43] = 0.012724245f;
      sa[44] = 0.9422488f;
      sa[45] = -1.9617136f;
      sa[46] = -2.2535257f;
      sa[47] = 0.10585623f;
      sa[48] = 1.5962533f;
      sa[49] = -0.21389724f;
      sa[50] = -0.4990877f;
      sa[51] = 1.7817203f;
      sa[52] = -1.6542625f;
      sa[53] = 0.950112f;
      sa[54] = 1.7135586f;
      sa[55] = 1.0737036f;
      sa[56] = -0.6084251f;
      sa[57] = -0.26512983f;
      sa[58] = 1.00882f;
      sa[59] = 0.66925f;
      sa[60] = -1.46045f;
      sa[61] = 0.8881125f;
      sa[62] = -0.33823612f;
      sa[63] = -0.8985472f;
      sa[64] = 1.0731434f;
      sa[65] = -0.8733882f;
      sa[66] = -1.7171258f;
      sa[67] = -0.06360899f;
      sa[68] = 0.9066611f;
      sa[69] = -1.3238195f;
      sa[70] = -1.6462833f;
      sa[71] = 0.04655137f;
      sa[72] = -0.951521f;
      sa[73] = -1.1762806f;
      sa[74] = -1.1534111f;
      sa[75] = 1.3689597f;
      sa[76] = 1.9322536f;
      sa[77] = -0.5879443f;
      sa[78] = -1.3336924f;
      sa[79] = -0.3969369f;
      sa[80] = 0.4465436f;
      sa[81] = -1.7167073f;
      sa[82] = -0.21318714f;
      sa[83] = -1.4382291f;
      sa[84] = 1.5304203f;
      sa[85] = 1.0250192f;
      sa[86] = -1.964454f;
      sa[87] = 0.97460437f;
      sa[88] = -1.6392404f;
      sa[89] = -1.033312f;
      sa[90] = 0.2407001f;
      sa[91] = 0.08960664f;
      sa[92] = 1.2624862f;
      sa[93] = 1.8699807f;
      sa[94] = 1.5441855f;
      sa[95] = 0.6018929f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_09 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_09_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_09_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_09_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_ReLU_09_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


