/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:08:58.738+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_10

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_10 > h2o_nn_16x16x6_ReLU_10.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_10.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_10", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_10 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_10_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_10_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_10_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_10_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_10_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_10_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_10_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_10_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_10_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_10_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_10_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_10_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_10.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_10_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.24761904761904763,0.18571428571428572,0.06190476190476191,0.12857142857142856,0.24761904761904763,0.12857142857142856};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_10() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(40458787674316636L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_10_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_10_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_10_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_10_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_10_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_10_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_10_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_10_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_10_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_10_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_10_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.7316446236257539;
      sa[1] = 0.7902478546333662;
      sa[2] = 0.4383571919487282;
      sa[3] = 0.3303182523932911;
      sa[4] = 0.49534772741731564;
      sa[5] = 0.7863775534718983;
      sa[6] = 0.8030687901936518;
      sa[7] = 0.6786502287871558;
      sa[8] = 0.5078579963610647;
      sa[9] = 0.6307636042847545;
      sa[10] = 0.5054774720320884;
      sa[11] = 0.3398846598388668;
      sa[12] = 0.30584801760354857;
      sa[13] = 0.375651721936102;
      sa[14] = 0.47937172240485976;
      sa[15] = 0.5839888655445366;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_10_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_10_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.1393293036247218;
      sa[1] = 1.0933609126160644;
      sa[2] = 0.9125738007212156;
      sa[3] = 1.0096139785563247;
      sa[4] = 0.9206863823853029;
      sa[5] = 0.9772268491548829;
      sa[6] = 0.9562444528040024;
      sa[7] = 0.8940650316882063;
      sa[8] = 0.9010516103074538;
      sa[9] = 1.0328052924505826;
      sa[10] = 0.8878620297817916;
      sa[11] = 1.0969356509112704;
      sa[12] = 1.0326023148705827;
      sa[13] = 0.9129300414015341;
      sa[14] = 0.9569601907488865;
      sa[15] = 0.9528783641212628;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_10_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_10_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.08677471931774097;
      sa[1] = 0.013759663537410332;
      sa[2] = -0.1195051026449397;
      sa[3] = -0.004793892959688675;
      sa[4] = 0.05959024905620502;
      sa[5] = -0.04980515661037229;
    }
  }
}
class h2o_nn_16x16x6_ReLU_10_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_10_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_10_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.22258228f;
      sa[1] = 0.31745777f;
      sa[2] = 0.16622709f;
      sa[3] = 0.15538082f;
      sa[4] = -0.11044574f;
      sa[5] = -0.13888313f;
      sa[6] = -0.0013391066f;
      sa[7] = 0.41184804f;
      sa[8] = 0.16934562f;
      sa[9] = -0.079807796f;
      sa[10] = -0.14279121f;
      sa[11] = -0.25154597f;
      sa[12] = 0.094751805f;
      sa[13] = -0.26626453f;
      sa[14] = -0.18063533f;
      sa[15] = 0.13380688f;
      sa[16] = 0.12237572f;
      sa[17] = 0.22157618f;
      sa[18] = -0.095958814f;
      sa[19] = -0.063674636f;
      sa[20] = 0.29124188f;
      sa[21] = -0.24794433f;
      sa[22] = 0.30294263f;
      sa[23] = -0.123490624f;
      sa[24] = 0.25540724f;
      sa[25] = 0.23901026f;
      sa[26] = -0.16431054f;
      sa[27] = 0.426786f;
      sa[28] = 0.31164822f;
      sa[29] = -0.2076224f;
      sa[30] = -0.120583415f;
      sa[31] = 0.30819157f;
      sa[32] = 0.053923845f;
      sa[33] = -0.31936088f;
      sa[34] = 0.082871325f;
      sa[35] = 0.024311716f;
      sa[36] = 0.15649301f;
      sa[37] = 0.29474115f;
      sa[38] = -0.12143809f;
      sa[39] = 0.1495334f;
      sa[40] = 0.09080319f;
      sa[41] = -0.018365432f;
      sa[42] = -0.084575936f;
      sa[43] = 0.1088515f;
      sa[44] = 0.30999485f;
      sa[45] = -0.2871906f;
      sa[46] = -0.0089123035f;
      sa[47] = -0.049164824f;
      sa[48] = 0.313423f;
      sa[49] = 0.35047066f;
      sa[50] = 0.28118873f;
      sa[51] = -0.2410306f;
      sa[52] = -0.0824311f;
      sa[53] = 0.2351122f;
      sa[54] = 0.27828044f;
      sa[55] = 0.028406322f;
      sa[56] = -0.10849496f;
      sa[57] = -0.24105369f;
      sa[58] = 0.35879514f;
      sa[59] = -0.15862916f;
      sa[60] = -0.34359282f;
      sa[61] = 0.091710754f;
      sa[62] = 0.20658123f;
      sa[63] = 0.004449975f;
      sa[64] = 0.22548744f;
      sa[65] = 0.20366919f;
      sa[66] = 0.088251434f;
      sa[67] = 0.21727222f;
      sa[68] = -0.20666917f;
      sa[69] = 0.009222327f;
      sa[70] = 0.025451608f;
      sa[71] = 0.41504565f;
      sa[72] = -0.12677829f;
      sa[73] = 0.19723965f;
      sa[74] = -0.20471136f;
      sa[75] = 0.08901445f;
      sa[76] = -0.23930082f;
      sa[77] = -0.09506237f;
      sa[78] = -0.102422245f;
      sa[79] = 0.09295329f;
      sa[80] = -0.20274949f;
      sa[81] = -0.12061092f;
      sa[82] = -0.037307534f;
      sa[83] = 0.11844043f;
      sa[84] = -0.027831947f;
      sa[85] = -0.20775624f;
      sa[86] = 0.14639105f;
      sa[87] = 0.2184692f;
      sa[88] = 0.24010943f;
      sa[89] = 0.08649927f;
      sa[90] = -0.1328536f;
      sa[91] = 0.22309387f;
      sa[92] = 0.11545719f;
      sa[93] = -0.23357058f;
      sa[94] = -0.20563193f;
      sa[95] = -0.27409446f;
      sa[96] = 0.1530576f;
      sa[97] = 0.026209934f;
      sa[98] = 0.21649475f;
      sa[99] = -0.10710302f;
      sa[100] = -0.056040302f;
      sa[101] = -0.20784253f;
      sa[102] = -0.2879303f;
      sa[103] = -0.11642603f;
      sa[104] = 0.016111465f;
      sa[105] = -0.18173994f;
      sa[106] = -0.19867925f;
      sa[107] = 0.11826902f;
      sa[108] = 0.2350394f;
      sa[109] = -0.33918908f;
      sa[110] = -0.2055761f;
      sa[111] = 0.20479898f;
      sa[112] = 0.10827807f;
      sa[113] = -0.018867409f;
      sa[114] = -0.21000594f;
      sa[115] = -0.092817046f;
      sa[116] = -0.2692257f;
      sa[117] = -0.019993752f;
      sa[118] = -0.16863167f;
      sa[119] = -0.12267808f;
      sa[120] = 0.16920927f;
      sa[121] = 0.18655242f;
      sa[122] = 0.28772035f;
      sa[123] = 0.21549486f;
      sa[124] = 0.17352308f;
      sa[125] = 0.25208068f;
      sa[126] = -0.15012072f;
      sa[127] = -0.362994f;
      sa[128] = 0.019123927f;
      sa[129] = 0.13147408f;
      sa[130] = -0.18900093f;
      sa[131] = 0.30920592f;
      sa[132] = 0.15823632f;
      sa[133] = -0.21031994f;
      sa[134] = 0.19382635f;
      sa[135] = -0.28299382f;
      sa[136] = -0.35064742f;
      sa[137] = -0.07092239f;
      sa[138] = 0.06150548f;
      sa[139] = -0.16615175f;
      sa[140] = -0.0031070479f;
      sa[141] = 3.3749637E-4f;
      sa[142] = -0.04302868f;
      sa[143] = -0.3854806f;
      sa[144] = 0.31087175f;
      sa[145] = -0.26935446f;
      sa[146] = -0.28367266f;
      sa[147] = 0.21124531f;
      sa[148] = 0.18598376f;
      sa[149] = 0.1877003f;
      sa[150] = 0.31973276f;
      sa[151] = -0.29166928f;
      sa[152] = 0.025285626f;
      sa[153] = 0.26048413f;
      sa[154] = 0.2667844f;
      sa[155] = -0.2085392f;
      sa[156] = 0.13350867f;
      sa[157] = -0.22633715f;
      sa[158] = 0.09792469f;
      sa[159] = 0.0785145f;
      sa[160] = 0.025839685f;
      sa[161] = 0.16966763f;
      sa[162] = -0.08796092f;
      sa[163] = -0.07697197f;
      sa[164] = 0.25766283f;
      sa[165] = -0.027494242f;
      sa[166] = -0.069033824f;
      sa[167] = -0.061447572f;
      sa[168] = 0.19454771f;
      sa[169] = 0.35316023f;
      sa[170] = 0.078266114f;
      sa[171] = -0.09213091f;
      sa[172] = -0.07796894f;
      sa[173] = -0.15724304f;
      sa[174] = -0.047073238f;
      sa[175] = -0.2779733f;
      sa[176] = 0.014621049f;
      sa[177] = -0.0036624002f;
      sa[178] = -0.050763916f;
      sa[179] = 0.072922364f;
      sa[180] = -0.07477265f;
      sa[181] = -0.25287655f;
      sa[182] = -0.10896908f;
      sa[183] = 0.06174012f;
      sa[184] = 0.3844985f;
      sa[185] = 0.32579085f;
      sa[186] = -0.20135675f;
      sa[187] = 0.17104955f;
      sa[188] = -0.012723808f;
      sa[189] = 0.1912603f;
      sa[190] = -0.011327231f;
      sa[191] = -0.017650316f;
      sa[192] = -0.022652527f;
      sa[193] = 0.39658186f;
      sa[194] = 0.22571898f;
      sa[195] = 0.5409169f;
      sa[196] = 0.35828257f;
      sa[197] = -0.067343436f;
      sa[198] = 0.07709869f;
      sa[199] = -0.30569375f;
      sa[200] = 0.094212905f;
      sa[201] = -0.26171327f;
      sa[202] = 0.2360816f;
      sa[203] = -0.020304436f;
      sa[204] = -0.16256437f;
      sa[205] = 0.2059854f;
      sa[206] = 0.27798346f;
      sa[207] = 0.1260615f;
      sa[208] = -0.20621747f;
      sa[209] = -0.025864905f;
      sa[210] = -0.20020339f;
      sa[211] = -0.18524058f;
      sa[212] = 0.22845092f;
      sa[213] = -0.26462197f;
      sa[214] = -0.18918589f;
      sa[215] = 0.008288883f;
      sa[216] = 0.12093898f;
      sa[217] = 0.1728791f;
      sa[218] = -0.19139712f;
      sa[219] = 0.14337307f;
      sa[220] = -0.1844265f;
      sa[221] = 0.09032362f;
      sa[222] = 0.28266087f;
      sa[223] = 0.07899958f;
      sa[224] = 0.14627925f;
      sa[225] = 0.32357994f;
      sa[226] = -0.25368112f;
      sa[227] = 0.3195091f;
      sa[228] = 0.23764709f;
      sa[229] = 0.15398023f;
      sa[230] = 0.33352214f;
      sa[231] = -0.21006218f;
      sa[232] = -0.3291997f;
      sa[233] = 0.077317916f;
      sa[234] = 0.11907103f;
      sa[235] = -0.21037386f;
      sa[236] = 0.06980763f;
      sa[237] = -0.14394106f;
      sa[238] = -0.16750717f;
      sa[239] = 0.2355484f;
      sa[240] = 0.03146865f;
      sa[241] = -0.25913733f;
      sa[242] = -0.11374186f;
      sa[243] = -0.31321007f;
      sa[244] = -0.08570719f;
      sa[245] = -0.028102871f;
      sa[246] = -0.19184428f;
      sa[247] = 0.025929159f;
      sa[248] = 0.23837487f;
      sa[249] = 0.25893924f;
      sa[250] = -0.2667668f;
      sa[251] = -0.12753823f;
      sa[252] = -0.22115973f;
      sa[253] = -0.32921878f;
      sa[254] = -0.30871323f;
      sa[255] = 0.14964202f;
      sa[256] = -0.16352701f;
      sa[257] = 0.30992746f;
      sa[258] = -0.24944435f;
      sa[259] = -0.09931149f;
      sa[260] = -0.16092287f;
      sa[261] = -0.08795038f;
      sa[262] = -0.21891043f;
      sa[263] = 0.26367483f;
      sa[264] = -0.13385251f;
      sa[265] = 0.07877136f;
      sa[266] = -0.27611417f;
      sa[267] = -0.22906317f;
      sa[268] = 0.08132211f;
      sa[269] = -0.2016368f;
      sa[270] = 0.089337185f;
      sa[271] = 0.2745659f;
      sa[272] = -0.041425128f;
      sa[273] = -0.07824924f;
      sa[274] = 0.17988336f;
      sa[275] = 0.04612784f;
      sa[276] = 0.046221044f;
      sa[277] = -0.36306146f;
      sa[278] = -0.13292444f;
      sa[279] = 0.1350052f;
      sa[280] = -0.13764973f;
      sa[281] = 0.35624877f;
      sa[282] = -0.079693444f;
      sa[283] = -0.00405806f;
      sa[284] = -0.024422139f;
      sa[285] = -0.26477018f;
      sa[286] = 0.3847497f;
      sa[287] = 0.199155f;
      sa[288] = -0.2976609f;
      sa[289] = -0.07708857f;
      sa[290] = -0.055309083f;
      sa[291] = 0.1355631f;
      sa[292] = 0.15657294f;
      sa[293] = -0.0050649676f;
      sa[294] = 0.15794624f;
      sa[295] = 0.19099368f;
      sa[296] = 0.17354463f;
      sa[297] = 0.15914546f;
      sa[298] = -0.044943683f;
      sa[299] = -0.051824003f;
      sa[300] = 8.696048E-4f;
      sa[301] = 0.004229188f;
      sa[302] = 0.2344799f;
      sa[303] = 0.09440832f;
      sa[304] = -0.068984054f;
      sa[305] = -0.038526297f;
      sa[306] = 0.1652719f;
      sa[307] = -0.3939632f;
      sa[308] = 0.051142033f;
      sa[309] = 0.105957426f;
      sa[310] = 0.2955796f;
      sa[311] = 0.25832504f;
      sa[312] = -0.18483561f;
      sa[313] = -0.15349056f;
      sa[314] = -0.15524955f;
      sa[315] = 0.054987106f;
      sa[316] = -0.061848015f;
      sa[317] = -0.116641976f;
      sa[318] = 0.13524418f;
      sa[319] = 0.3019233f;
      sa[320] = -0.029802307f;
      sa[321] = 0.19070314f;
      sa[322] = 0.1604695f;
      sa[323] = -0.22237895f;
      sa[324] = 0.0726444f;
      sa[325] = 0.27269134f;
      sa[326] = -0.30288446f;
      sa[327] = -0.014665942f;
      sa[328] = -0.024391782f;
      sa[329] = 0.28020394f;
      sa[330] = -0.17349063f;
      sa[331] = 0.049800053f;
      sa[332] = -0.28464898f;
      sa[333] = 0.12783723f;
      sa[334] = -0.08173153f;
      sa[335] = 0.18874077f;
      sa[336] = -0.16904464f;
      sa[337] = -0.17750801f;
      sa[338] = 0.30548218f;
      sa[339] = -0.19249733f;
      sa[340] = -0.37936774f;
      sa[341] = -0.33053887f;
      sa[342] = 0.39695862f;
      sa[343] = -0.10883077f;
      sa[344] = -0.14599074f;
      sa[345] = 0.27423647f;
      sa[346] = 0.25577676f;
      sa[347] = -0.12883927f;
      sa[348] = 0.27567104f;
      sa[349] = -0.29698807f;
      sa[350] = -0.13018447f;
      sa[351] = 0.16108717f;
      sa[352] = 0.24982439f;
      sa[353] = 0.020998418f;
      sa[354] = 0.11543839f;
      sa[355] = 0.19460034f;
      sa[356] = -0.18557133f;
      sa[357] = 0.20155053f;
      sa[358] = -0.14737633f;
      sa[359] = 0.12015009f;
      sa[360] = 0.11490377f;
      sa[361] = -0.17669956f;
      sa[362] = -0.1564398f;
      sa[363] = 0.24458282f;
      sa[364] = -0.14083673f;
      sa[365] = -0.2523338f;
      sa[366] = 0.0031461238f;
      sa[367] = -0.34841293f;
      sa[368] = -0.17853856f;
      sa[369] = 0.20227903f;
      sa[370] = -0.20778258f;
      sa[371] = 0.1676421f;
      sa[372] = -0.014662717f;
      sa[373] = 0.30054435f;
      sa[374] = -0.13519743f;
      sa[375] = -0.34373012f;
      sa[376] = -0.40058455f;
      sa[377] = -0.3007082f;
      sa[378] = 0.4117422f;
      sa[379] = 0.09730669f;
      sa[380] = -0.12665f;
      sa[381] = -0.11033115f;
      sa[382] = -0.038639266f;
      sa[383] = -0.109183535f;
      sa[384] = -0.14453766f;
      sa[385] = 0.14005005f;
      sa[386] = -0.20754853f;
      sa[387] = -0.28052756f;
      sa[388] = 0.08224889f;
      sa[389] = -0.014121411f;
      sa[390] = -0.03131055f;
      sa[391] = -0.13771403f;
      sa[392] = 0.3855392f;
      sa[393] = 0.30762273f;
      sa[394] = -0.10615277f;
      sa[395] = 0.21249586f;
      sa[396] = 0.32924187f;
      sa[397] = -0.20926394f;
      sa[398] = 0.15264748f;
      sa[399] = 0.09678218f;
      sa[400] = 0.1581709f;
      sa[401] = 0.23654008f;
      sa[402] = -0.18812156f;
      sa[403] = 0.01288151f;
      sa[404] = 0.31435168f;
      sa[405] = -0.21000427f;
      sa[406] = -0.04423181f;
      sa[407] = 0.24683557f;
      sa[408] = -0.24386725f;
      sa[409] = -0.28159687f;
      sa[410] = -0.14834611f;
      sa[411] = 0.1500392f;
      sa[412] = -0.11854835f;
      sa[413] = 0.17115347f;
      sa[414] = 0.03717909f;
      sa[415] = 0.40479967f;
      sa[416] = -0.2078793f;
      sa[417] = 0.0030591744f;
      sa[418] = -0.030296037f;
      sa[419] = 0.2690058f;
      sa[420] = 0.23300771f;
      sa[421] = 0.2988397f;
      sa[422] = 0.12371129f;
      sa[423] = -0.060729038f;
      sa[424] = 0.10711071f;
      sa[425] = -0.103001185f;
      sa[426] = -0.32858562f;
      sa[427] = 0.177536f;
      sa[428] = -0.027888233f;
      sa[429] = -0.11871082f;
      sa[430] = 0.121382944f;
      sa[431] = -0.05939651f;
      sa[432] = -0.056350145f;
      sa[433] = 0.081443325f;
      sa[434] = 0.28472552f;
      sa[435] = 0.026838848f;
      sa[436] = -0.36380115f;
      sa[437] = -0.34347308f;
      sa[438] = -0.057274465f;
      sa[439] = -0.10641594f;
      sa[440] = 0.3353284f;
      sa[441] = -0.30074245f;
      sa[442] = 0.1141693f;
      sa[443] = 0.060270436f;
      sa[444] = -0.27350092f;
      sa[445] = 0.019274155f;
      sa[446] = 0.2059116f;
      sa[447] = 0.022870554f;
      sa[448] = 0.061926447f;
      sa[449] = 0.29084012f;
      sa[450] = -0.08730161f;
      sa[451] = 0.19499671f;
      sa[452] = 0.179308f;
      sa[453] = -0.093135156f;
      sa[454] = -0.21419947f;
      sa[455] = -0.0779441f;
      sa[456] = -0.048481755f;
      sa[457] = 0.08981229f;
      sa[458] = -0.22754438f;
      sa[459] = 0.23800659f;
      sa[460] = 0.2178013f;
      sa[461] = 0.25910792f;
      sa[462] = 0.0015185642f;
      sa[463] = 0.18629442f;
      sa[464] = -0.25821713f;
      sa[465] = 0.24009942f;
      sa[466] = 0.018140877f;
      sa[467] = 0.11334766f;
      sa[468] = 0.13569297f;
      sa[469] = 0.30321148f;
      sa[470] = 0.19596265f;
      sa[471] = 0.08827605f;
      sa[472] = -2.6156745E-4f;
      sa[473] = -0.14680165f;
      sa[474] = -0.038548034f;
      sa[475] = 0.09092642f;
      sa[476] = 0.2655612f;
      sa[477] = -0.15997013f;
      sa[478] = 0.20229632f;
      sa[479] = -0.18057998f;
      sa[480] = -0.363137f;
      sa[481] = -0.26732203f;
      sa[482] = -0.3148819f;
      sa[483] = 0.18991049f;
      sa[484] = 0.21328f;
      sa[485] = 0.16925554f;
      sa[486] = -0.019426955f;
      sa[487] = -0.18921693f;
      sa[488] = -0.23805746f;
      sa[489] = 0.07719119f;
      sa[490] = -0.031161318f;
      sa[491] = -0.25196326f;
      sa[492] = 0.21467283f;
      sa[493] = 0.39806345f;
      sa[494] = -0.24702936f;
      sa[495] = 0.24270068f;
      sa[496] = -0.030669402f;
      sa[497] = 0.055107046f;
      sa[498] = 0.15939473f;
      sa[499] = 0.15838008f;
      sa[500] = -0.043814886f;
      sa[501] = 0.108823545f;
      sa[502] = 0.3110404f;
      sa[503] = 0.1263965f;
      sa[504] = -0.16683103f;
      sa[505] = -0.117017396f;
      sa[506] = 0.21701524f;
      sa[507] = -0.07423062f;
      sa[508] = 0.068639845f;
      sa[509] = 0.23440512f;
      sa[510] = 0.15296154f;
      sa[511] = 0.015805827f;
      sa[512] = 0.099646285f;
      sa[513] = 0.0017050647f;
      sa[514] = 0.29832804f;
      sa[515] = -0.12523368f;
      sa[516] = 0.019751968f;
      sa[517] = 0.10644766f;
      sa[518] = 0.13602148f;
      sa[519] = -0.089384586f;
      sa[520] = 0.30692527f;
      sa[521] = 0.23104003f;
      sa[522] = 0.051310007f;
      sa[523] = 0.09833889f;
      sa[524] = 0.19079474f;
      sa[525] = 0.14696868f;
      sa[526] = -0.034430247f;
      sa[527] = -0.1990877f;
      sa[528] = -0.018530069f;
      sa[529] = 0.16474734f;
      sa[530] = -0.2313659f;
      sa[531] = 0.032165263f;
      sa[532] = 0.15522672f;
      sa[533] = 0.10466055f;
      sa[534] = 0.15200047f;
      sa[535] = -0.115822226f;
      sa[536] = 0.06535795f;
      sa[537] = -0.083819404f;
      sa[538] = 0.09465626f;
      sa[539] = 0.2824541f;
      sa[540] = -0.14512695f;
      sa[541] = -0.2792696f;
      sa[542] = -0.10885687f;
      sa[543] = -0.3308296f;
      sa[544] = 0.18470196f;
      sa[545] = 0.07532723f;
      sa[546] = 0.06806281f;
      sa[547] = 0.22070506f;
      sa[548] = 0.09696648f;
      sa[549] = 0.17282014f;
      sa[550] = 0.05157294f;
      sa[551] = -0.21425442f;
      sa[552] = 0.0062551443f;
      sa[553] = -0.12805785f;
      sa[554] = -0.19868718f;
      sa[555] = -0.21196584f;
      sa[556] = -0.3391515f;
      sa[557] = -0.44759277f;
      sa[558] = -0.06801808f;
      sa[559] = 0.1969038f;
      sa[560] = -0.30145216f;
      sa[561] = -0.028132267f;
      sa[562] = 0.23012133f;
      sa[563] = -0.0041991603f;
      sa[564] = 0.2572143f;
      sa[565] = 0.10256488f;
      sa[566] = 0.38624346f;
      sa[567] = 0.052912664f;
      sa[568] = -0.08231649f;
      sa[569] = 0.073306374f;
      sa[570] = -0.05833577f;
      sa[571] = -0.038145564f;
      sa[572] = -0.1591207f;
      sa[573] = 0.063324824f;
      sa[574] = 0.40052477f;
      sa[575] = -0.16647221f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_10_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_10_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.47544158f;
      sa[1] = 0.14889373f;
      sa[2] = -0.10493689f;
      sa[3] = -0.21487741f;
      sa[4] = 0.14493592f;
      sa[5] = 0.13241391f;
      sa[6] = 0.27143174f;
      sa[7] = 0.036959004f;
      sa[8] = -0.18404873f;
      sa[9] = 0.21779762f;
      sa[10] = -0.101326056f;
      sa[11] = 0.15690099f;
      sa[12] = 0.16554108f;
      sa[13] = 0.08204971f;
      sa[14] = -0.21725793f;
      sa[15] = 0.4257924f;
      sa[16] = 0.43628997f;
      sa[17] = -0.052306835f;
      sa[18] = 0.032923184f;
      sa[19] = -0.080567464f;
      sa[20] = 0.348525f;
      sa[21] = 0.031742875f;
      sa[22] = -0.21450152f;
      sa[23] = 0.18596923f;
      sa[24] = -0.26301682f;
      sa[25] = 0.18955016f;
      sa[26] = -0.06421117f;
      sa[27] = 0.41169804f;
      sa[28] = -0.35110638f;
      sa[29] = -0.13077788f;
      sa[30] = 0.11921689f;
      sa[31] = -0.17059134f;
      sa[32] = -0.34989095f;
      sa[33] = -0.47489208f;
      sa[34] = -0.007867933f;
      sa[35] = 0.3242241f;
      sa[36] = -0.12560928f;
      sa[37] = -0.15141125f;
      sa[38] = 0.024312375f;
      sa[39] = 0.16773233f;
      sa[40] = -0.26123235f;
      sa[41] = -0.4016425f;
      sa[42] = -0.3048052f;
      sa[43] = -0.41985527f;
      sa[44] = -0.009563426f;
      sa[45] = -0.37034348f;
      sa[46] = 0.28578922f;
      sa[47] = 0.3134312f;
      sa[48] = -0.34864053f;
      sa[49] = -0.27563033f;
      sa[50] = 0.11072456f;
      sa[51] = -0.07357625f;
      sa[52] = 0.18904476f;
      sa[53] = 0.2063961f;
      sa[54] = -0.08101404f;
      sa[55] = 0.39708808f;
      sa[56] = -0.27960336f;
      sa[57] = -0.30889392f;
      sa[58] = 0.062546045f;
      sa[59] = -0.035599846f;
      sa[60] = 0.35754198f;
      sa[61] = -0.18741392f;
      sa[62] = -0.08132654f;
      sa[63] = 0.2135282f;
      sa[64] = 0.350518f;
      sa[65] = -0.20617567f;
      sa[66] = 0.11611848f;
      sa[67] = 0.3478971f;
      sa[68] = 0.16058493f;
      sa[69] = -0.31715548f;
      sa[70] = -0.43737853f;
      sa[71] = -0.1180384f;
      sa[72] = -0.38679543f;
      sa[73] = 0.27412853f;
      sa[74] = 0.4258948f;
      sa[75] = -0.0031034367f;
      sa[76] = 0.20477268f;
      sa[77] = 0.11441042f;
      sa[78] = -0.36685395f;
      sa[79] = 0.2756701f;
      sa[80] = -0.21717358f;
      sa[81] = 0.05052888f;
      sa[82] = 0.2194868f;
      sa[83] = -0.17460774f;
      sa[84] = -0.44288906f;
      sa[85] = -0.39457348f;
      sa[86] = 0.06548077f;
      sa[87] = 0.31967223f;
      sa[88] = -0.43197832f;
      sa[89] = -0.14736778f;
      sa[90] = -0.3030925f;
      sa[91] = 0.3966456f;
      sa[92] = -0.08581799f;
      sa[93] = 0.068653494f;
      sa[94] = -0.42271996f;
      sa[95] = -0.0748614f;
      sa[96] = -0.29877722f;
      sa[97] = 0.018193899f;
      sa[98] = -0.036279898f;
      sa[99] = 0.04070424f;
      sa[100] = -0.358621f;
      sa[101] = -0.22701542f;
      sa[102] = 0.31642848f;
      sa[103] = 0.018547624f;
      sa[104] = -0.099078014f;
      sa[105] = -0.18306051f;
      sa[106] = 0.35481903f;
      sa[107] = 0.29754275f;
      sa[108] = 0.22479293f;
      sa[109] = 0.014912221f;
      sa[110] = 0.18022273f;
      sa[111] = -0.22400966f;
      sa[112] = -0.31050006f;
      sa[113] = -0.030057264f;
      sa[114] = 0.032526486f;
      sa[115] = -0.14583245f;
      sa[116] = 0.26144046f;
      sa[117] = -0.08027492f;
      sa[118] = -0.42834738f;
      sa[119] = -0.1918431f;
      sa[120] = -0.16878423f;
      sa[121] = 0.22430372f;
      sa[122] = -0.08080015f;
      sa[123] = 0.06259893f;
      sa[124] = -0.21094051f;
      sa[125] = 0.20517f;
      sa[126] = -0.26588735f;
      sa[127] = 0.1058039f;
      sa[128] = -0.350374f;
      sa[129] = 0.08010433f;
      sa[130] = -0.12205875f;
      sa[131] = 0.23413652f;
      sa[132] = 0.013846688f;
      sa[133] = 0.094229676f;
      sa[134] = 0.18410721f;
      sa[135] = -0.3583786f;
      sa[136] = 0.09070927f;
      sa[137] = -0.1974156f;
      sa[138] = 0.0027674912f;
      sa[139] = 0.2901744f;
      sa[140] = -0.21930161f;
      sa[141] = -0.08290287f;
      sa[142] = 0.0060377275f;
      sa[143] = -0.25599065f;
      sa[144] = 0.27197537f;
      sa[145] = -0.2126296f;
      sa[146] = 0.09302015f;
      sa[147] = 0.052817985f;
      sa[148] = -0.2351061f;
      sa[149] = 0.34729147f;
      sa[150] = -0.22976714f;
      sa[151] = -0.5888814f;
      sa[152] = 0.4568604f;
      sa[153] = -0.09619176f;
      sa[154] = 0.3347953f;
      sa[155] = -0.51206475f;
      sa[156] = -0.36284003f;
      sa[157] = -0.2795003f;
      sa[158] = -0.115086384f;
      sa[159] = -0.27829412f;
      sa[160] = 0.2851532f;
      sa[161] = -0.3864124f;
      sa[162] = 0.3819919f;
      sa[163] = -0.25967187f;
      sa[164] = 0.12968308f;
      sa[165] = -0.27209637f;
      sa[166] = 0.31624833f;
      sa[167] = -0.4019267f;
      sa[168] = 0.18832019f;
      sa[169] = -0.47573906f;
      sa[170] = 0.304536f;
      sa[171] = 0.20139524f;
      sa[172] = 0.35827965f;
      sa[173] = 0.36264268f;
      sa[174] = -0.09169165f;
      sa[175] = -0.05246038f;
      sa[176] = -0.08994906f;
      sa[177] = 0.13572344f;
      sa[178] = -0.23519835f;
      sa[179] = -0.012444593f;
      sa[180] = -0.32890004f;
      sa[181] = -0.049376424f;
      sa[182] = 0.06703453f;
      sa[183] = -0.10055693f;
      sa[184] = 0.44148004f;
      sa[185] = 0.34847224f;
      sa[186] = -0.1281361f;
      sa[187] = -0.22561096f;
      sa[188] = -0.112707675f;
      sa[189] = -0.1903403f;
      sa[190] = -0.31864235f;
      sa[191] = -0.19573641f;
      sa[192] = -0.07474356f;
      sa[193] = 0.12527965f;
      sa[194] = -0.30260918f;
      sa[195] = -0.2019928f;
      sa[196] = 0.1505324f;
      sa[197] = -0.13899925f;
      sa[198] = 0.054434817f;
      sa[199] = 0.40171933f;
      sa[200] = 0.024371605f;
      sa[201] = 0.28121823f;
      sa[202] = 0.22118892f;
      sa[203] = -0.36630845f;
      sa[204] = 0.10331477f;
      sa[205] = 0.3476669f;
      sa[206] = -0.15035954f;
      sa[207] = 0.1727221f;
      sa[208] = -0.23605081f;
      sa[209] = 0.09752422f;
      sa[210] = -0.11972464f;
      sa[211] = -0.30959055f;
      sa[212] = -0.4221811f;
      sa[213] = -0.17914943f;
      sa[214] = -0.40103495f;
      sa[215] = -0.079935275f;
      sa[216] = 0.07364174f;
      sa[217] = 0.28955117f;
      sa[218] = -0.020026006f;
      sa[219] = 0.06339193f;
      sa[220] = 0.1418322f;
      sa[221] = -0.043882437f;
      sa[222] = -0.31555608f;
      sa[223] = -0.36408663f;
      sa[224] = 0.29111615f;
      sa[225] = 0.049510572f;
      sa[226] = -0.021206344f;
      sa[227] = 0.016504353f;
      sa[228] = -0.11000102f;
      sa[229] = -0.23995088f;
      sa[230] = -0.2734645f;
      sa[231] = -0.1842413f;
      sa[232] = 0.38661325f;
      sa[233] = -0.20061287f;
      sa[234] = -0.2167192f;
      sa[235] = 0.007381668f;
      sa[236] = -0.3613658f;
      sa[237] = 0.4517384f;
      sa[238] = 0.14970191f;
      sa[239] = -0.120026864f;
      sa[240] = -0.15374088f;
      sa[241] = -0.42801493f;
      sa[242] = -0.2677997f;
      sa[243] = 0.32393268f;
      sa[244] = 0.19249427f;
      sa[245] = 0.29504752f;
      sa[246] = 0.23823254f;
      sa[247] = -0.48984888f;
      sa[248] = -0.2239759f;
      sa[249] = 0.0031055375f;
      sa[250] = 0.23403887f;
      sa[251] = 0.3900102f;
      sa[252] = 0.19375844f;
      sa[253] = -0.32367724f;
      sa[254] = 0.3636914f;
      sa[255] = 0.11379822f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_10_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_ReLU_10_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.07620765f;
      sa[1] = -1.5745138f;
      sa[2] = -1.5422387f;
      sa[3] = 1.3050566f;
      sa[4] = 0.39794013f;
      sa[5] = -0.21888058f;
      sa[6] = -1.6421868f;
      sa[7] = 1.4324342f;
      sa[8] = 1.6979961f;
      sa[9] = 0.13969454f;
      sa[10] = 1.5620687f;
      sa[11] = 1.3637272f;
      sa[12] = 1.7893965f;
      sa[13] = -0.574559f;
      sa[14] = -1.9977654f;
      sa[15] = -0.7103215f;
      sa[16] = 0.7524151f;
      sa[17] = -0.76323706f;
      sa[18] = -1.4777228f;
      sa[19] = -0.8705769f;
      sa[20] = -1.9041939f;
      sa[21] = 0.31043616f;
      sa[22] = -1.9373934f;
      sa[23] = -0.58046955f;
      sa[24] = -0.5310676f;
      sa[25] = 1.8551003f;
      sa[26] = -0.31987184f;
      sa[27] = 1.1957806f;
      sa[28] = 1.1891974f;
      sa[29] = -0.70939094f;
      sa[30] = 0.16809443f;
      sa[31] = 0.14252065f;
      sa[32] = 0.3709579f;
      sa[33] = -0.10758301f;
      sa[34] = -0.7132944f;
      sa[35] = 0.8035618f;
      sa[36] = 0.38405097f;
      sa[37] = -1.3386872f;
      sa[38] = 0.56989974f;
      sa[39] = -0.2233099f;
      sa[40] = 0.22281948f;
      sa[41] = -0.68429595f;
      sa[42] = 0.48863703f;
      sa[43] = 0.009209037f;
      sa[44] = 0.8647286f;
      sa[45] = -1.9700329f;
      sa[46] = -2.3166378f;
      sa[47] = -0.00525793f;
      sa[48] = 1.5934238f;
      sa[49] = -0.2096359f;
      sa[50] = -0.46610683f;
      sa[51] = 1.7929665f;
      sa[52] = -1.6522067f;
      sa[53] = 0.9289667f;
      sa[54] = 1.7068546f;
      sa[55] = 1.0456061f;
      sa[56] = -0.60661477f;
      sa[57] = -0.20012434f;
      sa[58] = 1.0093052f;
      sa[59] = 0.7613291f;
      sa[60] = -1.3525807f;
      sa[61] = 0.8808332f;
      sa[62] = -0.34876f;
      sa[63] = -0.847919f;
      sa[64] = 0.9636137f;
      sa[65] = -0.8885514f;
      sa[66] = -1.7172011f;
      sa[67] = -0.10774875f;
      sa[68] = 0.88458604f;
      sa[69] = -1.3262749f;
      sa[70] = -1.5994267f;
      sa[71] = -0.013431513f;
      sa[72] = -0.9342405f;
      sa[73] = -1.1117984f;
      sa[74] = -1.0433787f;
      sa[75] = 1.2942413f;
      sa[76] = 1.8876166f;
      sa[77] = -0.5915387f;
      sa[78] = -1.3325183f;
      sa[79] = -0.3316925f;
      sa[80] = 0.5797174f;
      sa[81] = -1.6398178f;
      sa[82] = -0.21106727f;
      sa[83] = -1.3650309f;
      sa[84] = 1.5732987f;
      sa[85] = 1.068702f;
      sa[86] = -1.9119142f;
      sa[87] = 1.0263555f;
      sa[88] = -1.5895331f;
      sa[89] = -1.1354657f;
      sa[90] = 0.24928163f;
      sa[91] = 0.11627198f;
      sa[92] = 1.3600905f;
      sa[93] = 1.8826965f;
      sa[94] = 1.5491893f;
      sa[95] = 0.6554923f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_10 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_10_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_10_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_10_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_ReLU_10_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


