/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:09:17.547+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_11

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_11 > h2o_nn_16x16x6_Tanh_11.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_11.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_11", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_11 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_11_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_11_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_11_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_11_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_11_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_11_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_11_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_11_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_11_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_11_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_11_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_11_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_11.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_11_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.2548076923076923,0.18269230769230768,0.057692307692307696,0.125,0.2548076923076923,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_11() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(899036386981488644L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_11_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_11_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_11_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_11_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_11_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_11_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_11_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_11_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_11_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_11_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_11_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.029361102248805483;
      sa[1] = -0.007543926240056567;
      sa[2] = 0.05380980268156233;
      sa[3] = -0.07470015235133265;
      sa[4] = 0.02274649805032931;
      sa[5] = -0.028761390171749262;
      sa[6] = 0.06178090607202289;
      sa[7] = 0.004654181346188188;
      sa[8] = -0.00852652077990921;
      sa[9] = 0.005946079831330206;
      sa[10] = 0.04275881582132993;
      sa[11] = 2.930971710882785E-4;
      sa[12] = 0.0750485015842655;
      sa[13] = -0.059795130667764096;
      sa[14] = -0.18747822374521858;
      sa[15] = -0.016097676630410562;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_11_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_11_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.047794028246560795;
      sa[1] = 0.00926066805917974;
      sa[2] = -0.058726596749717676;
      sa[3] = 0.08452548643750239;
      sa[4] = -0.004500581408493513;
      sa[5] = -0.04961294126811394;
      sa[6] = 0.02355784347604391;
      sa[7] = -0.00230513247412929;
      sa[8] = -0.03968717383833695;
      sa[9] = -0.03815025672254145;
      sa[10] = 0.023551379762920766;
      sa[11] = 0.21580003283628305;
      sa[12] = -0.018368904398675657;
      sa[13] = -0.02761267296578544;
      sa[14] = -0.10582349348653518;
      sa[15] = -0.13511942621397496;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_11_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_11_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.02106475131505414;
      sa[1] = -0.07177014493029986;
      sa[2] = -0.08839778996542909;
      sa[3] = 0.027593504557357755;
      sa[4] = 0.11404907076168126;
      sa[5] = -0.2701339010826687;
    }
  }
}
class h2o_nn_16x16x6_Tanh_11_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_11_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_11_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.046000794f;
      sa[1] = 0.29039612f;
      sa[2] = 0.25261697f;
      sa[3] = 0.15935583f;
      sa[4] = -0.17958938f;
      sa[5] = -0.22753678f;
      sa[6] = -0.0755254f;
      sa[7] = 0.34948725f;
      sa[8] = 0.11886968f;
      sa[9] = -0.10424624f;
      sa[10] = -0.17628048f;
      sa[11] = -0.2459005f;
      sa[12] = 0.06990676f;
      sa[13] = -0.3192312f;
      sa[14] = -0.2166321f;
      sa[15] = 0.00406857f;
      sa[16] = 0.14383857f;
      sa[17] = 0.21091485f;
      sa[18] = -0.049760595f;
      sa[19] = -0.0865378f;
      sa[20] = 0.25721055f;
      sa[21] = -0.31217292f;
      sa[22] = 0.2360423f;
      sa[23] = -0.18556412f;
      sa[24] = 0.35899606f;
      sa[25] = 0.20497441f;
      sa[26] = -0.2053542f;
      sa[27] = 0.3404095f;
      sa[28] = 0.2679683f;
      sa[29] = -0.23501639f;
      sa[30] = -0.19333309f;
      sa[31] = 0.25894204f;
      sa[32] = 0.22249578f;
      sa[33] = -0.28212103f;
      sa[34] = -1.3245038E-4f;
      sa[35] = -0.06407209f;
      sa[36] = 0.065953836f;
      sa[37] = 0.31326708f;
      sa[38] = -0.08185827f;
      sa[39] = 0.121895336f;
      sa[40] = 0.0625956f;
      sa[41] = -0.07404912f;
      sa[42] = -0.13830099f;
      sa[43] = 0.07543815f;
      sa[44] = 0.25455433f;
      sa[45] = -0.28736183f;
      sa[46] = 0.017289134f;
      sa[47] = -0.21316154f;
      sa[48] = 0.23430116f;
      sa[49] = 0.27605605f;
      sa[50] = 0.21667567f;
      sa[51] = -0.3267812f;
      sa[52] = -0.046071455f;
      sa[53] = 0.27162492f;
      sa[54] = 0.36180982f;
      sa[55] = 0.11300355f;
      sa[56] = -0.18426068f;
      sa[57] = -0.30220068f;
      sa[58] = 0.27174678f;
      sa[59] = -0.19447586f;
      sa[60] = -0.36456463f;
      sa[61] = 0.19752601f;
      sa[62] = 0.19242851f;
      sa[63] = 0.026322119f;
      sa[64] = 0.1656173f;
      sa[65] = 0.19540687f;
      sa[66] = 0.040330395f;
      sa[67] = 0.23438409f;
      sa[68] = -0.21576534f;
      sa[69] = -0.016222559f;
      sa[70] = -0.025985602f;
      sa[71] = 0.41895851f;
      sa[72] = -0.1379636f;
      sa[73] = 0.16481587f;
      sa[74] = -0.22948802f;
      sa[75] = 0.12361318f;
      sa[76] = -0.19530465f;
      sa[77] = -0.026931204f;
      sa[78] = -0.054475956f;
      sa[79] = 0.09695106f;
      sa[80] = -0.23155192f;
      sa[81] = -0.105891645f;
      sa[82] = -0.0073027713f;
      sa[83] = 0.17598f;
      sa[84] = 0.0036236558f;
      sa[85] = -0.16598682f;
      sa[86] = 0.16800968f;
      sa[87] = 0.24759862f;
      sa[88] = 0.22959812f;
      sa[89] = 0.13593763f;
      sa[90] = -0.23652914f;
      sa[91] = 0.21313463f;
      sa[92] = 0.12742394f;
      sa[93] = -0.22257559f;
      sa[94] = -0.17526822f;
      sa[95] = -0.27196595f;
      sa[96] = 0.16628432f;
      sa[97] = 0.042024914f;
      sa[98] = 0.21990788f;
      sa[99] = -0.076981716f;
      sa[100] = -0.040950697f;
      sa[101] = -0.20861705f;
      sa[102] = -0.23449925f;
      sa[103] = -0.1368203f;
      sa[104] = 0.058967024f;
      sa[105] = -0.12027497f;
      sa[106] = -0.25438768f;
      sa[107] = 0.086002626f;
      sa[108] = 0.18906057f;
      sa[109] = -0.22779083f;
      sa[110] = -0.21124744f;
      sa[111] = 0.12657526f;
      sa[112] = 0.09904379f;
      sa[113] = -0.039355848f;
      sa[114] = -0.24691159f;
      sa[115] = -0.11608577f;
      sa[116] = -0.24620849f;
      sa[117] = -0.026165694f;
      sa[118] = -0.26178747f;
      sa[119] = -0.16810553f;
      sa[120] = 0.1766579f;
      sa[121] = 0.16655412f;
      sa[122] = 0.25288168f;
      sa[123] = 0.22872432f;
      sa[124] = 0.2641413f;
      sa[125] = 0.24259582f;
      sa[126] = -0.30028766f;
      sa[127] = -0.28431666f;
      sa[128] = 0.06403324f;
      sa[129] = 0.17068666f;
      sa[130] = -0.16269974f;
      sa[131] = 0.33645278f;
      sa[132] = 0.1902842f;
      sa[133] = -0.31003782f;
      sa[134] = 0.10373481f;
      sa[135] = -0.3014706f;
      sa[136] = -0.31735408f;
      sa[137] = -0.02726196f;
      sa[138] = 0.07510177f;
      sa[139] = -0.13805448f;
      sa[140] = -0.035506677f;
      sa[141] = -0.10529906f;
      sa[142] = 0.1247652f;
      sa[143] = -0.3748329f;
      sa[144] = 0.29049894f;
      sa[145] = -0.20637935f;
      sa[146] = -0.35214096f;
      sa[147] = 0.21346314f;
      sa[148] = 0.1683071f;
      sa[149] = 0.18254614f;
      sa[150] = 0.2883413f;
      sa[151] = -0.33916062f;
      sa[152] = 0.051197406f;
      sa[153] = 0.1915404f;
      sa[154] = 0.29612964f;
      sa[155] = -0.19030969f;
      sa[156] = 0.13259499f;
      sa[157] = -0.23332296f;
      sa[158] = 0.08363846f;
      sa[159] = 0.04992905f;
      sa[160] = 0.0051534185f;
      sa[161] = 0.06867279f;
      sa[162] = -0.07453325f;
      sa[163] = -0.050974f;
      sa[164] = 0.24361993f;
      sa[165] = -0.048352312f;
      sa[166] = -0.103990346f;
      sa[167] = -0.07935098f;
      sa[168] = 0.14744423f;
      sa[169] = 0.37347737f;
      sa[170] = 0.11617072f;
      sa[171] = -0.12737355f;
      sa[172] = -0.07197593f;
      sa[173] = -0.14533411f;
      sa[174] = -0.046574544f;
      sa[175] = -0.28101414f;
      sa[176] = 0.019302007f;
      sa[177] = 9.737711E-5f;
      sa[178] = -0.05404322f;
      sa[179] = 0.012309336f;
      sa[180] = -0.11382618f;
      sa[181] = -0.2901458f;
      sa[182] = -0.05449746f;
      sa[183] = 0.22846825f;
      sa[184] = 0.33414128f;
      sa[185] = 0.29996985f;
      sa[186] = -0.18510216f;
      sa[187] = 0.098326795f;
      sa[188] = -0.050588515f;
      sa[189] = 0.020985946f;
      sa[190] = 0.05008249f;
      sa[191] = 0.22747108f;
      sa[192] = -0.11157551f;
      sa[193] = 0.37324905f;
      sa[194] = 0.24533905f;
      sa[195] = 0.34577197f;
      sa[196] = 0.32671332f;
      sa[197] = -0.29433274f;
      sa[198] = 0.17798346f;
      sa[199] = -0.24165148f;
      sa[200] = -0.05428938f;
      sa[201] = -0.4193884f;
      sa[202] = 0.13574007f;
      sa[203] = -0.134178f;
      sa[204] = -0.19347718f;
      sa[205] = 0.261155f;
      sa[206] = 0.29029047f;
      sa[207] = 0.002255001f;
      sa[208] = -0.35653925f;
      sa[209] = -0.16370884f;
      sa[210] = -0.3044377f;
      sa[211] = -0.35780063f;
      sa[212] = 0.33602563f;
      sa[213] = -0.1383261f;
      sa[214] = -0.20402168f;
      sa[215] = -0.26389632f;
      sa[216] = 0.11669333f;
      sa[217] = 0.28397906f;
      sa[218] = -0.16310096f;
      sa[219] = 0.3024431f;
      sa[220] = -0.20517857f;
      sa[221] = 0.108900934f;
      sa[222] = 0.31164533f;
      sa[223] = 0.08996556f;
      sa[224] = 0.11012009f;
      sa[225] = 0.22873864f;
      sa[226] = -0.25146094f;
      sa[227] = 0.48090315f;
      sa[228] = 0.15709546f;
      sa[229] = 0.14337343f;
      sa[230] = 0.33849412f;
      sa[231] = -0.22727525f;
      sa[232] = -0.2540891f;
      sa[233] = -0.029162081f;
      sa[234] = -0.039620977f;
      sa[235] = -0.32553852f;
      sa[236] = -0.020832283f;
      sa[237] = -0.2362386f;
      sa[238] = -0.18650423f;
      sa[239] = 0.14472607f;
      sa[240] = 0.014668729f;
      sa[241] = -0.24367873f;
      sa[242] = -0.20756717f;
      sa[243] = -0.44850343f;
      sa[244] = -0.22976123f;
      sa[245] = -0.17494515f;
      sa[246] = -0.27985168f;
      sa[247] = -0.084239855f;
      sa[248] = 0.2667238f;
      sa[249] = 0.3331076f;
      sa[250] = -0.31998035f;
      sa[251] = -0.19629167f;
      sa[252] = -0.17338602f;
      sa[253] = -0.24441722f;
      sa[254] = -0.41457826f;
      sa[255] = 0.106124885f;
      sa[256] = -0.2806987f;
      sa[257] = 0.13929299f;
      sa[258] = -0.40092012f;
      sa[259] = -0.17250545f;
      sa[260] = -0.1342273f;
      sa[261] = -0.054852035f;
      sa[262] = -0.14815538f;
      sa[263] = 0.095970444f;
      sa[264] = -0.156328f;
      sa[265] = -0.0377346f;
      sa[266] = -0.35620627f;
      sa[267] = -0.24437924f;
      sa[268] = 0.056645848f;
      sa[269] = -0.2241637f;
      sa[270] = -0.041515667f;
      sa[271] = 0.39711812f;
      sa[272] = 7.641015E-5f;
      sa[273] = -0.07620782f;
      sa[274] = 0.17588158f;
      sa[275] = 0.120966315f;
      sa[276] = -0.08332078f;
      sa[277] = -0.28410578f;
      sa[278] = -0.19443633f;
      sa[279] = 0.15111259f;
      sa[280] = -0.12930024f;
      sa[281] = 0.3383951f;
      sa[282] = -0.1653793f;
      sa[283] = 0.02014195f;
      sa[284] = -0.109919734f;
      sa[285] = -0.37575474f;
      sa[286] = 0.448758f;
      sa[287] = 0.21188843f;
      sa[288] = -0.2755335f;
      sa[289] = -0.17119096f;
      sa[290] = -0.009850494f;
      sa[291] = 0.101969555f;
      sa[292] = 0.17642681f;
      sa[293] = -0.03101443f;
      sa[294] = 0.18223853f;
      sa[295] = 0.18446904f;
      sa[296] = 0.19725491f;
      sa[297] = 0.15059344f;
      sa[298] = -0.03836027f;
      sa[299] = 0.02390682f;
      sa[300] = -0.0031444961f;
      sa[301] = -0.01872845f;
      sa[302] = 0.23488717f;
      sa[303] = 0.053608473f;
      sa[304] = -0.16449952f;
      sa[305] = -0.0154613005f;
      sa[306] = 0.29079574f;
      sa[307] = -0.27778935f;
      sa[308] = 0.05608739f;
      sa[309] = 0.1318848f;
      sa[310] = 0.29093277f;
      sa[311] = 0.24460916f;
      sa[312] = -0.16249248f;
      sa[313] = -0.15766256f;
      sa[314] = -0.113212734f;
      sa[315] = -0.043133184f;
      sa[316] = -0.047613434f;
      sa[317] = -0.114549585f;
      sa[318] = 0.11638366f;
      sa[319] = 0.3131265f;
      sa[320] = 0.010835032f;
      sa[321] = 0.288957f;
      sa[322] = 0.1401642f;
      sa[323] = -0.20568344f;
      sa[324] = -0.018957224f;
      sa[325] = 0.28508556f;
      sa[326] = -0.3068497f;
      sa[327] = -0.03539716f;
      sa[328] = -0.0664886f;
      sa[329] = 0.21944809f;
      sa[330] = -0.2482221f;
      sa[331] = 0.0055462113f;
      sa[332] = -0.2863801f;
      sa[333] = 0.12688336f;
      sa[334] = -0.08254412f;
      sa[335] = 0.107133836f;
      sa[336] = -0.1907345f;
      sa[337] = -0.2224188f;
      sa[338] = 0.25712126f;
      sa[339] = -0.2482378f;
      sa[340] = -0.3400409f;
      sa[341] = -0.30844063f;
      sa[342] = 0.36512557f;
      sa[343] = -0.07084524f;
      sa[344] = -0.18198596f;
      sa[345] = 0.24307604f;
      sa[346] = 0.18406643f;
      sa[347] = -0.15150239f;
      sa[348] = 0.29009387f;
      sa[349] = -0.2813183f;
      sa[350] = -0.1556293f;
      sa[351] = 0.17822152f;
      sa[352] = 0.23520808f;
      sa[353] = 0.030355413f;
      sa[354] = 0.09164142f;
      sa[355] = 0.20403399f;
      sa[356] = -0.16940595f;
      sa[357] = 0.1950012f;
      sa[358] = -0.22446057f;
      sa[359] = 0.10801926f;
      sa[360] = 0.0834941f;
      sa[361] = -0.10643609f;
      sa[362] = -0.2338085f;
      sa[363] = 0.3293248f;
      sa[364] = -0.16309084f;
      sa[365] = -0.20811263f;
      sa[366] = 0.0019381684f;
      sa[367] = -0.46966466f;
      sa[368] = -0.18694426f;
      sa[369] = -0.06676263f;
      sa[370] = -0.10970453f;
      sa[371] = 0.2977089f;
      sa[372] = -0.038306534f;
      sa[373] = 0.32045996f;
      sa[374] = -0.13655941f;
      sa[375] = -0.37441704f;
      sa[376] = -0.43032116f;
      sa[377] = -0.51659256f;
      sa[378] = 0.3808841f;
      sa[379] = 0.08158349f;
      sa[380] = -0.17518361f;
      sa[381] = -0.15687904f;
      sa[382] = -0.078465365f;
      sa[383] = -0.16733702f;
      sa[384] = -0.16409317f;
      sa[385] = 0.23571394f;
      sa[386] = -0.16430657f;
      sa[387] = -0.3427728f;
      sa[388] = 0.055302836f;
      sa[389] = -0.032221932f;
      sa[390] = -0.029578298f;
      sa[391] = -0.21626134f;
      sa[392] = 0.65054077f;
      sa[393] = 0.52613163f;
      sa[394] = -0.11045821f;
      sa[395] = 0.11603326f;
      sa[396] = 0.34057784f;
      sa[397] = -0.2740105f;
      sa[398] = 0.09681133f;
      sa[399] = 0.116170466f;
      sa[400] = 0.19268845f;
      sa[401] = 0.272011f;
      sa[402] = -0.14867194f;
      sa[403] = 0.002260556f;
      sa[404] = 0.28071818f;
      sa[405] = -0.21280578f;
      sa[406] = -0.089420386f;
      sa[407] = 0.20628391f;
      sa[408] = -0.2135681f;
      sa[409] = -0.26170146f;
      sa[410] = -0.12726083f;
      sa[411] = 0.17751904f;
      sa[412] = -0.16593356f;
      sa[413] = 0.15579638f;
      sa[414] = 0.015844f;
      sa[415] = 0.39122477f;
      sa[416] = -0.17398246f;
      sa[417] = 0.039605822f;
      sa[418] = 0.022603745f;
      sa[419] = 0.29941538f;
      sa[420] = 0.2008227f;
      sa[421] = 0.25576034f;
      sa[422] = 0.1752025f;
      sa[423] = -0.041283086f;
      sa[424] = 0.12450192f;
      sa[425] = -0.102134116f;
      sa[426] = -0.30741876f;
      sa[427] = 0.16445445f;
      sa[428] = -0.03155263f;
      sa[429] = -0.14913014f;
      sa[430] = 0.22137453f;
      sa[431] = -0.039939784f;
      sa[432] = 0.012754771f;
      sa[433] = 0.11287953f;
      sa[434] = 0.15319192f;
      sa[435] = 0.04064211f;
      sa[436] = -0.3081256f;
      sa[437] = -0.30188984f;
      sa[438] = -0.027875919f;
      sa[439] = -0.06501289f;
      sa[440] = 0.37264538f;
      sa[441] = -0.35775405f;
      sa[442] = 0.12530506f;
      sa[443] = 0.011510921f;
      sa[444] = -0.22119461f;
      sa[445] = 0.053317722f;
      sa[446] = 0.23252635f;
      sa[447] = 0.056300804f;
      sa[448] = 0.115094654f;
      sa[449] = 0.18707483f;
      sa[450] = -0.13696545f;
      sa[451] = 0.20514818f;
      sa[452] = 0.23362657f;
      sa[453] = -0.031762954f;
      sa[454] = -0.1476599f;
      sa[455] = 0.0050882697f;
      sa[456] = -0.14365105f;
      sa[457] = 0.099110276f;
      sa[458] = -0.25141653f;
      sa[459] = 0.27828997f;
      sa[460] = 0.2641775f;
      sa[461] = 0.31135726f;
      sa[462] = 0.051979393f;
      sa[463] = 0.219078f;
      sa[464] = -0.30455193f;
      sa[465] = 0.13044438f;
      sa[466] = 0.06641303f;
      sa[467] = 0.120016254f;
      sa[468] = 0.06877199f;
      sa[469] = 0.29514632f;
      sa[470] = 0.18450202f;
      sa[471] = 0.06769954f;
      sa[472] = 0.01904898f;
      sa[473] = -0.16548939f;
      sa[474] = -0.1066518f;
      sa[475] = 0.052436918f;
      sa[476] = 0.22101301f;
      sa[477] = -0.13887183f;
      sa[478] = 0.12404071f;
      sa[479] = -0.23617877f;
      sa[480] = -0.4086319f;
      sa[481] = -0.30635923f;
      sa[482] = -0.3880567f;
      sa[483] = 0.1366621f;
      sa[484] = 0.25244397f;
      sa[485] = 0.2718163f;
      sa[486] = 0.20665427f;
      sa[487] = -0.20284483f;
      sa[488] = -0.26543248f;
      sa[489] = 0.08774373f;
      sa[490] = -0.15778436f;
      sa[491] = -0.28140095f;
      sa[492] = 0.26430038f;
      sa[493] = 0.32789505f;
      sa[494] = -0.036716845f;
      sa[495] = 0.38085517f;
      sa[496] = -0.006952306f;
      sa[497] = 0.11673849f;
      sa[498] = 0.18875909f;
      sa[499] = 0.18106338f;
      sa[500] = 0.049574982f;
      sa[501] = 0.11073285f;
      sa[502] = 0.23079878f;
      sa[503] = 0.14969794f;
      sa[504] = -0.14728409f;
      sa[505] = -0.115465f;
      sa[506] = 0.55118513f;
      sa[507] = 0.08995845f;
      sa[508] = 0.020804357f;
      sa[509] = 0.15323186f;
      sa[510] = 0.12707096f;
      sa[511] = 0.07108369f;
      sa[512] = 0.10308727f;
      sa[513] = 0.0046907435f;
      sa[514] = 0.048560016f;
      sa[515] = -0.06548611f;
      sa[516] = -0.03222348f;
      sa[517] = 0.028698215f;
      sa[518] = 0.083071135f;
      sa[519] = -0.02382075f;
      sa[520] = 0.28722587f;
      sa[521] = 0.15360528f;
      sa[522] = -0.02006873f;
      sa[523] = -0.1852003f;
      sa[524] = 0.18622565f;
      sa[525] = 0.1570593f;
      sa[526] = 0.008153905f;
      sa[527] = -0.28176948f;
      sa[528] = 0.20530169f;
      sa[529] = 0.015407785f;
      sa[530] = -0.3496458f;
      sa[531] = -0.12528004f;
      sa[532] = 0.06412292f;
      sa[533] = 0.015947033f;
      sa[534] = 0.0427106f;
      sa[535] = -0.16266225f;
      sa[536] = 0.058893215f;
      sa[537] = -0.06172229f;
      sa[538] = 0.017047789f;
      sa[539] = 0.2335315f;
      sa[540] = -0.2832232f;
      sa[541] = -0.2066127f;
      sa[542] = -0.15805537f;
      sa[543] = -0.36043483f;
      sa[544] = 0.10500705f;
      sa[545] = 0.03008178f;
      sa[546] = -0.037928347f;
      sa[547] = 0.06942697f;
      sa[548] = 0.08464408f;
      sa[549] = 0.112400964f;
      sa[550] = 0.05577559f;
      sa[551] = -0.23572803f;
      sa[552] = 0.008467132f;
      sa[553] = -0.12072179f;
      sa[554] = -0.25644898f;
      sa[555] = -0.2543552f;
      sa[556] = -0.28710938f;
      sa[557] = -0.39676297f;
      sa[558] = -0.09042997f;
      sa[559] = 0.25976518f;
      sa[560] = -0.353819f;
      sa[561] = -0.12648508f;
      sa[562] = 0.1258325f;
      sa[563] = -0.03882964f;
      sa[564] = 0.24401096f;
      sa[565] = 0.11832036f;
      sa[566] = 0.40619853f;
      sa[567] = 0.05993886f;
      sa[568] = -0.08535506f;
      sa[569] = 0.06507401f;
      sa[570] = -0.06367528f;
      sa[571] = -0.058292635f;
      sa[572] = -0.116834655f;
      sa[573] = 0.07255773f;
      sa[574] = 0.33547103f;
      sa[575] = -0.27345544f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_11_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_11_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.40467957f;
      sa[1] = -5.4368953E-4f;
      sa[2] = -0.19304112f;
      sa[3] = -0.19535148f;
      sa[4] = 0.063249476f;
      sa[5] = -0.15945116f;
      sa[6] = 0.17997439f;
      sa[7] = -0.09717012f;
      sa[8] = -0.24767551f;
      sa[9] = 0.13026981f;
      sa[10] = -0.22849713f;
      sa[11] = 0.11080164f;
      sa[12] = 0.18168291f;
      sa[13] = 0.033855148f;
      sa[14] = -0.2780023f;
      sa[15] = 0.34037775f;
      sa[16] = 0.45551473f;
      sa[17] = -0.1723974f;
      sa[18] = -0.01057521f;
      sa[19] = -0.056770958f;
      sa[20] = 0.31667733f;
      sa[21] = -0.15322001f;
      sa[22] = -0.21189418f;
      sa[23] = 0.18461698f;
      sa[24] = -0.32347548f;
      sa[25] = 0.15205362f;
      sa[26] = -0.16481456f;
      sa[27] = 0.28507203f;
      sa[28] = -0.31928644f;
      sa[29] = -0.1590492f;
      sa[30] = 0.07460401f;
      sa[31] = -0.331622f;
      sa[32] = -0.18873365f;
      sa[33] = -0.49304807f;
      sa[34] = 0.04531303f;
      sa[35] = 0.3847672f;
      sa[36] = -0.009542784f;
      sa[37] = -0.14125325f;
      sa[38] = 0.08762332f;
      sa[39] = 0.20667438f;
      sa[40] = -0.26926848f;
      sa[41] = -0.32978207f;
      sa[42] = -0.34141967f;
      sa[43] = -0.46779674f;
      sa[44] = 0.07261492f;
      sa[45] = -0.28973863f;
      sa[46] = 0.3448616f;
      sa[47] = 0.2623894f;
      sa[48] = -0.40079656f;
      sa[49] = -0.26476124f;
      sa[50] = 0.086325645f;
      sa[51] = -0.04805217f;
      sa[52] = 0.2295338f;
      sa[53] = 0.16293086f;
      sa[54] = -0.07379229f;
      sa[55] = 0.36393273f;
      sa[56] = -0.24265963f;
      sa[57] = -0.3496436f;
      sa[58] = 0.08221592f;
      sa[59] = -0.006720029f;
      sa[60] = 0.37145543f;
      sa[61] = -0.27803293f;
      sa[62] = -0.12583563f;
      sa[63] = 0.26731053f;
      sa[64] = 0.33769584f;
      sa[65] = -0.1612852f;
      sa[66] = 0.14729984f;
      sa[67] = 0.32442784f;
      sa[68] = 0.16076122f;
      sa[69] = -0.14936814f;
      sa[70] = -0.43929443f;
      sa[71] = -0.10197918f;
      sa[72] = -0.35545287f;
      sa[73] = 0.30335575f;
      sa[74] = 0.4645504f;
      sa[75] = 0.06025557f;
      sa[76] = 0.11206502f;
      sa[77] = 0.13213351f;
      sa[78] = -0.3849947f;
      sa[79] = 0.4242736f;
      sa[80] = -0.11705083f;
      sa[81] = 0.0359177f;
      sa[82] = 0.29078853f;
      sa[83] = -0.13794187f;
      sa[84] = -0.36013952f;
      sa[85] = -0.44765234f;
      sa[86] = 0.056249823f;
      sa[87] = 0.35098517f;
      sa[88] = -0.5172784f;
      sa[89] = -0.11493458f;
      sa[90] = -0.37069604f;
      sa[91] = 0.3466304f;
      sa[92] = -0.010905276f;
      sa[93] = 0.14566518f;
      sa[94] = -0.30853686f;
      sa[95] = -0.11453307f;
      sa[96] = -0.2692535f;
      sa[97] = 0.012673722f;
      sa[98] = -0.027552327f;
      sa[99] = 0.13195348f;
      sa[100] = -0.30082858f;
      sa[101] = -0.22187535f;
      sa[102] = 0.3576912f;
      sa[103] = 0.03822481f;
      sa[104] = -0.039788436f;
      sa[105] = -0.17020266f;
      sa[106] = 0.32689333f;
      sa[107] = 0.27627933f;
      sa[108] = 0.25053504f;
      sa[109] = -0.0013382309f;
      sa[110] = 0.17165369f;
      sa[111] = -0.22744559f;
      sa[112] = -0.28944498f;
      sa[113] = 0.05555043f;
      sa[114] = 0.07453817f;
      sa[115] = -0.108405024f;
      sa[116] = 0.3766272f;
      sa[117] = 0.015290237f;
      sa[118] = -0.44765553f;
      sa[119] = -0.09914652f;
      sa[120] = -0.12753214f;
      sa[121] = 0.2184103f;
      sa[122] = 0.015672147f;
      sa[123] = 0.1901912f;
      sa[124] = -0.22303f;
      sa[125] = 0.18363915f;
      sa[126] = -0.21758138f;
      sa[127] = 0.26692364f;
      sa[128] = -0.3010791f;
      sa[129] = 0.14438145f;
      sa[130] = -0.014933281f;
      sa[131] = 0.21993826f;
      sa[132] = 0.046328697f;
      sa[133] = 0.35129407f;
      sa[134] = 0.40070215f;
      sa[135] = -0.33814543f;
      sa[136] = 0.11450835f;
      sa[137] = -0.09859629f;
      sa[138] = 0.33909595f;
      sa[139] = 0.30547956f;
      sa[140] = -0.24492422f;
      sa[141] = -0.06776897f;
      sa[142] = 0.0052773156f;
      sa[143] = -0.19896387f;
      sa[144] = 0.27470496f;
      sa[145] = -0.25423217f;
      sa[146] = 0.09228048f;
      sa[147] = -0.021939114f;
      sa[148] = -0.25293177f;
      sa[149] = 0.50694585f;
      sa[150] = -0.12716258f;
      sa[151] = -0.5343906f;
      sa[152] = 0.4258332f;
      sa[153] = -0.070017144f;
      sa[154] = 0.3640561f;
      sa[155] = -0.5894113f;
      sa[156] = -0.37358636f;
      sa[157] = -0.26836753f;
      sa[158] = -0.04078612f;
      sa[159] = -0.35856098f;
      sa[160] = 0.35838696f;
      sa[161] = -0.31470165f;
      sa[162] = 0.45793495f;
      sa[163] = -0.21373408f;
      sa[164] = 0.2638032f;
      sa[165] = 0.012071812f;
      sa[166] = 0.41398877f;
      sa[167] = -0.3604798f;
      sa[168] = 0.23053661f;
      sa[169] = -0.3897425f;
      sa[170] = 0.38636824f;
      sa[171] = 0.2528463f;
      sa[172] = 0.31127527f;
      sa[173] = 0.35306472f;
      sa[174] = -0.09009685f;
      sa[175] = 0.030892203f;
      sa[176] = -0.33439988f;
      sa[177] = 0.16274215f;
      sa[178] = -0.3485034f;
      sa[179] = -0.024754213f;
      sa[180] = -0.44070297f;
      sa[181] = -0.21059488f;
      sa[182] = -0.005165114f;
      sa[183] = -0.21245478f;
      sa[184] = 0.49633843f;
      sa[185] = 0.24492921f;
      sa[186] = -0.13425395f;
      sa[187] = -0.16215874f;
      sa[188] = -0.12281761f;
      sa[189] = -0.3375443f;
      sa[190] = -0.37577292f;
      sa[191] = -0.16500597f;
      sa[192] = -0.094007686f;
      sa[193] = 0.12355198f;
      sa[194] = -0.27825165f;
      sa[195] = -0.282797f;
      sa[196] = 0.114767775f;
      sa[197] = -0.06827702f;
      sa[198] = 0.04089207f;
      sa[199] = 0.38090926f;
      sa[200] = -0.03198279f;
      sa[201] = 0.26166332f;
      sa[202] = 0.29960907f;
      sa[203] = -0.3521966f;
      sa[204] = 0.060679123f;
      sa[205] = 0.37249976f;
      sa[206] = -0.1564917f;
      sa[207] = 0.18339926f;
      sa[208] = -0.11911344f;
      sa[209] = 0.2121581f;
      sa[210] = -0.10591561f;
      sa[211] = -0.27329224f;
      sa[212] = -0.27717918f;
      sa[213] = -0.08381967f;
      sa[214] = -0.51242447f;
      sa[215] = 0.06899692f;
      sa[216] = 0.08188368f;
      sa[217] = 0.26022395f;
      sa[218] = -0.09334075f;
      sa[219] = 0.14966889f;
      sa[220] = 0.23175235f;
      sa[221] = 0.04436581f;
      sa[222] = -0.19264457f;
      sa[223] = -0.22550109f;
      sa[224] = 0.36785045f;
      sa[225] = 0.03321761f;
      sa[226] = 0.048315927f;
      sa[227] = 0.054937873f;
      sa[228] = 0.023066852f;
      sa[229] = -0.21224962f;
      sa[230] = -0.24218124f;
      sa[231] = -0.16967358f;
      sa[232] = 0.33770207f;
      sa[233] = -0.09297327f;
      sa[234] = -0.23360522f;
      sa[235] = -0.07746877f;
      sa[236] = -0.3089609f;
      sa[237] = 0.5994895f;
      sa[238] = 0.24513611f;
      sa[239] = -0.20604867f;
      sa[240] = -0.068315625f;
      sa[241] = -0.47692117f;
      sa[242] = -0.17934875f;
      sa[243] = 0.32573265f;
      sa[244] = 0.17346784f;
      sa[245] = 0.5556674f;
      sa[246] = 0.33527306f;
      sa[247] = -0.4841408f;
      sa[248] = -0.2297501f;
      sa[249] = 0.10056823f;
      sa[250] = 0.2908957f;
      sa[251] = 0.30818588f;
      sa[252] = 0.1126713f;
      sa[253] = -0.23904987f;
      sa[254] = 0.39035448f;
      sa[255] = -0.01805422f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_11_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_Tanh_11_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.14769025f;
      sa[1] = -1.497848f;
      sa[2] = -1.5631635f;
      sa[3] = 1.4263499f;
      sa[4] = 0.43855333f;
      sa[5] = -0.20680098f;
      sa[6] = -1.4311091f;
      sa[7] = 1.523498f;
      sa[8] = 1.8027815f;
      sa[9] = 0.26542115f;
      sa[10] = 1.6295155f;
      sa[11] = 1.4289135f;
      sa[12] = 1.8740667f;
      sa[13] = -0.5786338f;
      sa[14] = -2.0065267f;
      sa[15] = -0.563052f;
      sa[16] = 0.74802554f;
      sa[17] = -0.7841515f;
      sa[18] = -1.5203177f;
      sa[19] = -1.0105648f;
      sa[20] = -1.9460465f;
      sa[21] = 0.25985408f;
      sa[22] = -1.9168196f;
      sa[23] = -0.67141515f;
      sa[24] = -0.50945526f;
      sa[25] = 1.9661634f;
      sa[26] = -0.24142651f;
      sa[27] = 1.180947f;
      sa[28] = 1.1383177f;
      sa[29] = -0.74209476f;
      sa[30] = 0.17376502f;
      sa[31] = 0.16679236f;
      sa[32] = 0.5701782f;
      sa[33] = 0.20485504f;
      sa[34] = -0.63861144f;
      sa[35] = 0.9549366f;
      sa[36] = 0.5589275f;
      sa[37] = -1.348645f;
      sa[38] = 0.6428518f;
      sa[39] = -0.26572448f;
      sa[40] = 0.28284553f;
      sa[41] = -0.59781075f;
      sa[42] = 0.7088921f;
      sa[43] = -0.01755074f;
      sa[44] = 1.0109981f;
      sa[45] = -2.0180643f;
      sa[46] = -2.148271f;
      sa[47] = 0.1277047f;
      sa[48] = 1.5853907f;
      sa[49] = -0.1877263f;
      sa[50] = -0.40861663f;
      sa[51] = 1.8077549f;
      sa[52] = -1.6464229f;
      sa[53] = 0.9623749f;
      sa[54] = 1.6292089f;
      sa[55] = 1.041057f;
      sa[56] = -0.6197181f;
      sa[57] = -0.15361509f;
      sa[58] = 0.9757506f;
      sa[59] = 0.82948995f;
      sa[60] = -1.3516034f;
      sa[61] = 0.9185014f;
      sa[62] = -0.34417883f;
      sa[63] = -0.8970052f;
      sa[64] = 0.84558946f;
      sa[65] = -0.88871956f;
      sa[66] = -1.7270263f;
      sa[67] = 0.1739511f;
      sa[68] = 0.8564656f;
      sa[69] = -1.1213624f;
      sa[70] = -1.6722014f;
      sa[71] = 0.0792089f;
      sa[72] = -1.0155929f;
      sa[73] = -1.6601627f;
      sa[74] = -1.1495994f;
      sa[75] = 1.2520504f;
      sa[76] = 1.8437461f;
      sa[77] = -0.43464002f;
      sa[78] = -1.3460857f;
      sa[79] = -0.55154574f;
      sa[80] = 0.74014556f;
      sa[81] = -1.4613397f;
      sa[82] = -0.23314703f;
      sa[83] = -1.4213046f;
      sa[84] = 1.6695817f;
      sa[85] = 1.110637f;
      sa[86] = -1.909255f;
      sa[87] = 1.0753481f;
      sa[88] = -1.6065457f;
      sa[89] = -0.9331302f;
      sa[90] = 0.35495982f;
      sa[91] = 0.120378286f;
      sa[92] = 1.462709f;
      sa[93] = 1.8272153f;
      sa[94] = 1.657246f;
      sa[95] = 0.70014083f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_11 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_11_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_11_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_11_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_Tanh_11_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


