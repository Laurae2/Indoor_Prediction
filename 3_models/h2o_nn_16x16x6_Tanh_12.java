/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:09:33.344+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_12

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_12 > h2o_nn_16x16x6_Tanh_12.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_12.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_12", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_12 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_12_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_12_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_12_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_12_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_12_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_12_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_12_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_12_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_12_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_12_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_12_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_12_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_12.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_12_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.2864864864864865,0.13513513513513514,0.14594594594594595,0.2864864864864865,0.14594594594594595};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_12() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(5056576328078577408L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_12_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_12_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_12_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_12_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_12_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_12_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_12_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_12_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_12_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_12_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_12_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.004435123929873614;
      sa[1] = -0.016069475582791433;
      sa[2] = 0.09649150973780517;
      sa[3] = -0.0030506331671720436;
      sa[4] = 0.05927153457100552;
      sa[5] = -0.005794199572741767;
      sa[6] = 0.17662762225560685;
      sa[7] = 0.011275768197198152;
      sa[8] = -0.07365713213679133;
      sa[9] = 0.019211742103778826;
      sa[10] = 0.023557318540789705;
      sa[11] = -0.03314259871828052;
      sa[12] = 0.053849009388933826;
      sa[13] = 0.0242906893002351;
      sa[14] = -0.052877309866420336;
      sa[15] = 0.08497159894765993;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_12_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_12_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.06902104760872588;
      sa[1] = -0.0647133182563162;
      sa[2] = -0.0806545447769293;
      sa[3] = 0.07491660477066087;
      sa[4] = 0.0877096487169121;
      sa[5] = -0.04770898639943415;
      sa[6] = -0.03297258937356503;
      sa[7] = 0.04870936798765136;
      sa[8] = 0.04783248184946357;
      sa[9] = -0.045538796865705826;
      sa[10] = 0.02932750813358681;
      sa[11] = 0.02444626070544479;
      sa[12] = 0.03648376749648847;
      sa[13] = 0.01532749271715461;
      sa[14] = -0.04961628702616452;
      sa[15] = -0.07830757006777597;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_12_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_12_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.052135571017698536;
      sa[1] = -0.05992542271342411;
      sa[2] = -0.07278039308668707;
      sa[3] = -0.0341681166197329;
      sa[4] = 0.02032651257533932;
    }
  }
}
class h2o_nn_16x16x6_Tanh_12_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_12_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_12_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.085662045f;
      sa[1] = 0.30148983f;
      sa[2] = 0.30220836f;
      sa[3] = 0.16592924f;
      sa[4] = -0.14854471f;
      sa[5] = -0.13350949f;
      sa[6] = 0.009509409f;
      sa[7] = 0.3795598f;
      sa[8] = 0.15631117f;
      sa[9] = -0.13443232f;
      sa[10] = -0.14855403f;
      sa[11] = -0.19886245f;
      sa[12] = 0.12031434f;
      sa[13] = -0.22205402f;
      sa[14] = -0.14018977f;
      sa[15] = 0.11022809f;
      sa[16] = 0.19108164f;
      sa[17] = 0.23424487f;
      sa[18] = -0.3111397f;
      sa[19] = 0.1781319f;
      sa[20] = 0.2692645f;
      sa[21] = -0.31636506f;
      sa[22] = 0.2763229f;
      sa[23] = -0.15635802f;
      sa[24] = 0.35412338f;
      sa[25] = 0.21592064f;
      sa[26] = -0.33465263f;
      sa[27] = 0.39170417f;
      sa[28] = 0.29237002f;
      sa[29] = -0.25790483f;
      sa[30] = -0.123461135f;
      sa[31] = 0.2529265f;
      sa[32] = 0.19023384f;
      sa[33] = -0.27506033f;
      sa[34] = 0.07586581f;
      sa[35] = -0.14172423f;
      sa[36] = 0.0842256f;
      sa[37] = 0.29097623f;
      sa[38] = -0.022470884f;
      sa[39] = 0.12797093f;
      sa[40] = 0.10645791f;
      sa[41] = -0.09619455f;
      sa[42] = -0.13313156f;
      sa[43] = 0.11287261f;
      sa[44] = 0.23557933f;
      sa[45] = -0.08983264f;
      sa[46] = 0.046251025f;
      sa[47] = -0.035150286f;
      sa[48] = 0.23222966f;
      sa[49] = 0.23639384f;
      sa[50] = 0.19924827f;
      sa[51] = -0.24688861f;
      sa[52] = -0.06655593f;
      sa[53] = 0.34780443f;
      sa[54] = 0.26749244f;
      sa[55] = -0.06287847f;
      sa[56] = -0.16247414f;
      sa[57] = -0.26051325f;
      sa[58] = 0.32084367f;
      sa[59] = -0.137362f;
      sa[60] = -0.29992506f;
      sa[61] = 0.21793829f;
      sa[62] = 0.16104424f;
      sa[63] = 0.069834f;
      sa[64] = 0.15414335f;
      sa[65] = 0.16712786f;
      sa[66] = 0.009546781f;
      sa[67] = 0.24101453f;
      sa[68] = -0.10124156f;
      sa[69] = 0.21722673f;
      sa[70] = -0.11037367f;
      sa[71] = 0.37849107f;
      sa[72] = -0.112200156f;
      sa[73] = 0.17990932f;
      sa[74] = -0.35447338f;
      sa[75] = 0.11407561f;
      sa[76] = -0.26534763f;
      sa[77] = -0.100912824f;
      sa[78] = -0.10493079f;
      sa[79] = -0.023113905f;
      sa[80] = -0.17369264f;
      sa[81] = -0.22101285f;
      sa[82] = -0.049240306f;
      sa[83] = 0.11094171f;
      sa[84] = -0.0039015561f;
      sa[85] = -0.1931449f;
      sa[86] = 0.17312446f;
      sa[87] = 0.12369873f;
      sa[88] = 0.14674841f;
      sa[89] = -0.02691277f;
      sa[90] = -0.068498954f;
      sa[91] = 0.1847916f;
      sa[92] = 0.123609774f;
      sa[93] = -0.241919f;
      sa[94] = -0.18520464f;
      sa[95] = -0.3211018f;
      sa[96] = 0.09920286f;
      sa[97] = 0.021313263f;
      sa[98] = 0.24840926f;
      sa[99] = -0.22453259f;
      sa[100] = -0.06572558f;
      sa[101] = -0.246518f;
      sa[102] = -0.31458554f;
      sa[103] = -0.1775163f;
      sa[104] = -0.003322403f;
      sa[105] = -0.23437211f;
      sa[106] = -0.22556219f;
      sa[107] = 0.15049486f;
      sa[108] = 0.20082529f;
      sa[109] = -0.1785549f;
      sa[110] = -0.12105692f;
      sa[111] = 0.17921184f;
      sa[112] = 0.11629518f;
      sa[113] = 0.069625966f;
      sa[114] = -0.16443872f;
      sa[115] = -0.0928135f;
      sa[116] = -0.21817939f;
      sa[117] = -0.020185806f;
      sa[118] = -0.24445407f;
      sa[119] = -0.109676465f;
      sa[120] = 0.2567043f;
      sa[121] = 0.3109851f;
      sa[122] = 0.35252696f;
      sa[123] = 0.29751033f;
      sa[124] = 0.37441093f;
      sa[125] = 0.33166927f;
      sa[126] = -0.35697445f;
      sa[127] = -0.11127784f;
      sa[128] = 0.06985746f;
      sa[129] = 0.13537125f;
      sa[130] = -0.15000926f;
      sa[131] = 0.25306976f;
      sa[132] = 0.25216052f;
      sa[133] = -0.30765003f;
      sa[134] = 0.07608635f;
      sa[135] = -0.39521405f;
      sa[136] = -0.2737364f;
      sa[137] = -0.025292793f;
      sa[138] = 0.17946406f;
      sa[139] = -0.12530817f;
      sa[140] = -0.08820651f;
      sa[141] = -0.18707444f;
      sa[142] = 0.1464584f;
      sa[143] = -0.42253813f;
      sa[144] = 0.2905904f;
      sa[145] = -0.15214626f;
      sa[146] = -0.25122795f;
      sa[147] = 0.17631873f;
      sa[148] = 0.17035905f;
      sa[149] = 0.24524893f;
      sa[150] = 0.3208029f;
      sa[151] = -0.30324563f;
      sa[152] = 0.05678595f;
      sa[153] = 0.2661445f;
      sa[154] = 0.28854907f;
      sa[155] = -0.20204586f;
      sa[156] = 0.16375557f;
      sa[157] = -0.1483072f;
      sa[158] = 0.118681885f;
      sa[159] = 0.08595852f;
      sa[160] = 0.102599315f;
      sa[161] = 0.23115812f;
      sa[162] = -0.22275616f;
      sa[163] = 0.03038737f;
      sa[164] = 0.24799033f;
      sa[165] = -0.06779413f;
      sa[166] = -0.09630405f;
      sa[167] = -0.12719713f;
      sa[168] = 0.23705465f;
      sa[169] = 0.35341996f;
      sa[170] = 0.03925158f;
      sa[171] = -0.077504754f;
      sa[172] = -0.052679207f;
      sa[173] = -0.15998578f;
      sa[174] = 0.012420266f;
      sa[175] = -0.29792246f;
      sa[176] = 0.0072494154f;
      sa[177] = -0.04978354f;
      sa[178] = -0.12305398f;
      sa[179] = -0.017890755f;
      sa[180] = -0.049725603f;
      sa[181] = -0.2895292f;
      sa[182] = -0.12122375f;
      sa[183] = 0.13553798f;
      sa[184] = 0.31008124f;
      sa[185] = 0.20843795f;
      sa[186] = -0.3128642f;
      sa[187] = 0.07188222f;
      sa[188] = -7.7690266E-4f;
      sa[189] = 0.23360972f;
      sa[190] = 0.020274367f;
      sa[191] = 0.0020179318f;
      sa[192] = -0.13214114f;
      sa[193] = 0.27792755f;
      sa[194] = 0.10972429f;
      sa[195] = 0.2966373f;
      sa[196] = 0.3099775f;
      sa[197] = -0.037479784f;
      sa[198] = 0.08281706f;
      sa[199] = -0.10520668f;
      sa[200] = 0.010619251f;
      sa[201] = -0.32583067f;
      sa[202] = 0.13510382f;
      sa[203] = -0.06916041f;
      sa[204] = -0.20914817f;
      sa[205] = 0.22388613f;
      sa[206] = 0.21993764f;
      sa[207] = 0.11963244f;
      sa[208] = -0.29242578f;
      sa[209] = -0.10017528f;
      sa[210] = -0.30105397f;
      sa[211] = -0.3029498f;
      sa[212] = 0.27003992f;
      sa[213] = -0.2523519f;
      sa[214] = -0.12568459f;
      sa[215] = 0.02367467f;
      sa[216] = 0.113913395f;
      sa[217] = 0.21730934f;
      sa[218] = -0.20033531f;
      sa[219] = 0.32184273f;
      sa[220] = -0.22919154f;
      sa[221] = 0.1395722f;
      sa[222] = 0.28163353f;
      sa[223] = 0.043138668f;
      sa[224] = 0.14456905f;
      sa[225] = 0.20626393f;
      sa[226] = -0.24324726f;
      sa[227] = 0.3683659f;
      sa[228] = 0.2017988f;
      sa[229] = 0.20792936f;
      sa[230] = 0.3478687f;
      sa[231] = -0.26960436f;
      sa[232] = -0.27107778f;
      sa[233] = 0.0436818f;
      sa[234] = 0.14166026f;
      sa[235] = -0.30623206f;
      sa[236] = -0.024864644f;
      sa[237] = -0.25208464f;
      sa[238] = -0.22361961f;
      sa[239] = 0.11259195f;
      sa[240] = 0.0052516675f;
      sa[241] = -0.23314804f;
      sa[242] = -0.10877258f;
      sa[243] = -0.3859846f;
      sa[244] = -0.19628106f;
      sa[245] = -0.13379803f;
      sa[246] = -0.22593512f;
      sa[247] = -0.07639727f;
      sa[248] = 0.2266834f;
      sa[249] = 0.21698882f;
      sa[250] = -0.2600152f;
      sa[251] = -0.1376045f;
      sa[252] = -0.22053042f;
      sa[253] = -0.2781827f;
      sa[254] = -0.4163216f;
      sa[255] = 0.16044019f;
      sa[256] = -0.2134096f;
      sa[257] = 0.26744094f;
      sa[258] = -0.29622075f;
      sa[259] = -0.1503462f;
      sa[260] = -0.1578566f;
      sa[261] = -0.09389837f;
      sa[262] = -0.14596161f;
      sa[263] = 0.25675988f;
      sa[264] = -0.17220718f;
      sa[265] = 0.04399686f;
      sa[266] = -0.32002756f;
      sa[267] = -0.2817605f;
      sa[268] = 0.12100305f;
      sa[269] = -0.19511954f;
      sa[270] = -0.013824365f;
      sa[271] = 0.22569916f;
      sa[272] = -0.07412392f;
      sa[273] = -0.107378215f;
      sa[274] = 0.15085465f;
      sa[275] = 0.020578982f;
      sa[276] = 0.03788473f;
      sa[277] = -0.2693093f;
      sa[278] = -0.17409565f;
      sa[279] = 0.2514873f;
      sa[280] = -0.18220411f;
      sa[281] = 0.3069158f;
      sa[282] = -0.12648642f;
      sa[283] = -0.057681218f;
      sa[284] = -0.08590581f;
      sa[285] = -0.318247f;
      sa[286] = 0.4330387f;
      sa[287] = 0.27783024f;
      sa[288] = -0.26092383f;
      sa[289] = -0.20370321f;
      sa[290] = -0.056577545f;
      sa[291] = 0.06642089f;
      sa[292] = 0.15693088f;
      sa[293] = -0.10847866f;
      sa[294] = 0.10326297f;
      sa[295] = 0.17103013f;
      sa[296] = 0.19107732f;
      sa[297] = 0.22448504f;
      sa[298] = -0.04402374f;
      sa[299] = -0.019317748f;
      sa[300] = -0.026857253f;
      sa[301] = -0.09905946f;
      sa[302] = 0.17847255f;
      sa[303] = 0.05673905f;
      sa[304] = -0.22216028f;
      sa[305] = -0.023384918f;
      sa[306] = 0.2370399f;
      sa[307] = -0.24788707f;
      sa[308] = 0.0722598f;
      sa[309] = 0.15746692f;
      sa[310] = 0.30472627f;
      sa[311] = 0.32918808f;
      sa[312] = -0.21814944f;
      sa[313] = -0.1691331f;
      sa[314] = -0.14765696f;
      sa[315] = -0.026465943f;
      sa[316] = -0.05404131f;
      sa[317] = -0.106318146f;
      sa[318] = 0.07360875f;
      sa[319] = 0.32170045f;
      sa[320] = -9.107084E-4f;
      sa[321] = 0.27391982f;
      sa[322] = 0.13971895f;
      sa[323] = -0.28466988f;
      sa[324] = -0.034396943f;
      sa[325] = 0.29606897f;
      sa[326] = -0.20066081f;
      sa[327] = -0.06786939f;
      sa[328] = -0.036212645f;
      sa[329] = 0.2734147f;
      sa[330] = -0.19501857f;
      sa[331] = 0.050425738f;
      sa[332] = -0.34145364f;
      sa[333] = 0.16028923f;
      sa[334] = -0.022921719f;
      sa[335] = 0.19754237f;
      sa[336] = -0.17808466f;
      sa[337] = -0.18452473f;
      sa[338] = 0.28056952f;
      sa[339] = -0.19984975f;
      sa[340] = -0.3149072f;
      sa[341] = -0.24045852f;
      sa[342] = 0.19986004f;
      sa[343] = -0.06292352f;
      sa[344] = -0.17688979f;
      sa[345] = 0.24689724f;
      sa[346] = 0.22452083f;
      sa[347] = -0.11941114f;
      sa[348] = 0.35785997f;
      sa[349] = -0.2519072f;
      sa[350] = -0.220604f;
      sa[351] = 0.22096272f;
      sa[352] = 0.23557834f;
      sa[353] = -1.8364185E-4f;
      sa[354] = 0.11468499f;
      sa[355] = 0.18567213f;
      sa[356] = -0.1252798f;
      sa[357] = 0.30549052f;
      sa[358] = -0.31073418f;
      sa[359] = 0.052053627f;
      sa[360] = 0.0954331f;
      sa[361] = -0.06442804f;
      sa[362] = -0.21233338f;
      sa[363] = 0.22278884f;
      sa[364] = -0.1991292f;
      sa[365] = -0.24270241f;
      sa[366] = -0.05805611f;
      sa[367] = -0.46827182f;
      sa[368] = -0.17849132f;
      sa[369] = 0.22441189f;
      sa[370] = -0.18275091f;
      sa[371] = 0.115434244f;
      sa[372] = -0.010255523f;
      sa[373] = 0.33116174f;
      sa[374] = -0.1661894f;
      sa[375] = -0.44734526f;
      sa[376] = -0.37874937f;
      sa[377] = -0.30930945f;
      sa[378] = 0.32108095f;
      sa[379] = 0.19704773f;
      sa[380] = -0.14261322f;
      sa[381] = -0.14784423f;
      sa[382] = -0.09464005f;
      sa[383] = -0.25403762f;
      sa[384] = -0.15919036f;
      sa[385] = 0.13007723f;
      sa[386] = -0.24848789f;
      sa[387] = -0.3090229f;
      sa[388] = 0.089003384f;
      sa[389] = -0.02819519f;
      sa[390] = -0.005289094f;
      sa[391] = -0.18486118f;
      sa[392] = 0.3325877f;
      sa[393] = 0.18645023f;
      sa[394] = -0.12416222f;
      sa[395] = 0.20383799f;
      sa[396] = 0.35907146f;
      sa[397] = -0.2745444f;
      sa[398] = 0.025767718f;
      sa[399] = 0.13646291f;
      sa[400] = 0.14761266f;
      sa[401] = 0.21914838f;
      sa[402] = -0.18688309f;
      sa[403] = -0.057559397f;
      sa[404] = 0.32675853f;
      sa[405] = -0.28351587f;
      sa[406] = -0.105571f;
      sa[407] = 0.20419933f;
      sa[408] = -0.24879353f;
      sa[409] = -0.3046983f;
      sa[410] = -0.15046225f;
      sa[411] = 0.06857288f;
      sa[412] = -0.20647606f;
      sa[413] = 0.07868535f;
      sa[414] = 0.17330451f;
      sa[415] = 0.30065876f;
      sa[416] = -0.19316444f;
      sa[417] = 0.011583251f;
      sa[418] = -0.002876612f;
      sa[419] = 0.24398232f;
      sa[420] = 0.13209921f;
      sa[421] = 0.23520134f;
      sa[422] = 0.2073185f;
      sa[423] = -0.14506176f;
      sa[424] = 0.0822451f;
      sa[425] = -0.1276698f;
      sa[426] = -0.3701135f;
      sa[427] = 0.10525025f;
      sa[428] = -0.08776407f;
      sa[429] = -0.22211763f;
      sa[430] = 0.24797252f;
      sa[431] = 0.058391362f;
      sa[432] = -0.043049913f;
      sa[433] = 0.15248907f;
      sa[434] = 0.26074058f;
      sa[435] = 0.012552164f;
      sa[436] = -0.30302364f;
      sa[437] = -0.27276406f;
      sa[438] = -0.014280711f;
      sa[439] = -0.046076033f;
      sa[440] = 0.35258874f;
      sa[441] = -0.34616986f;
      sa[442] = 0.13055667f;
      sa[443] = 0.018634114f;
      sa[444] = -0.23353755f;
      sa[445] = 0.07913217f;
      sa[446] = 0.24116093f;
      sa[447] = 0.048771095f;
      sa[448] = 0.19168313f;
      sa[449] = 0.25087783f;
      sa[450] = -0.09760921f;
      sa[451] = 0.15825012f;
      sa[452] = 0.20225984f;
      sa[453] = -0.05968696f;
      sa[454] = -0.18010122f;
      sa[455] = -0.067723796f;
      sa[456] = -0.040090892f;
      sa[457] = 0.1151842f;
      sa[458] = -0.22165315f;
      sa[459] = 0.2919583f;
      sa[460] = 0.25357452f;
      sa[461] = 0.31233814f;
      sa[462] = 0.06693417f;
      sa[463] = 0.22670412f;
      sa[464] = -0.29572004f;
      sa[465] = 0.19864634f;
      sa[466] = -0.007989032f;
      sa[467] = 0.15202986f;
      sa[468] = 0.043950014f;
      sa[469] = 0.28800094f;
      sa[470] = 0.2384348f;
      sa[471] = 0.017968051f;
      sa[472] = 0.021369474f;
      sa[473] = -0.1208096f;
      sa[474] = -0.019266045f;
      sa[475] = 0.14259547f;
      sa[476] = 0.22826535f;
      sa[477] = -0.20479925f;
      sa[478] = 0.14435433f;
      sa[479] = -0.23513728f;
      sa[480] = -0.33539847f;
      sa[481] = -0.2468957f;
      sa[482] = -0.29543486f;
      sa[483] = 0.22873278f;
      sa[484] = 0.2266977f;
      sa[485] = 0.14233208f;
      sa[486] = 0.02150103f;
      sa[487] = -0.15906091f;
      sa[488] = -0.22019833f;
      sa[489] = 0.089438476f;
      sa[490] = -0.01599804f;
      sa[491] = -0.19827373f;
      sa[492] = 0.25280818f;
      sa[493] = 0.29848507f;
      sa[494] = -0.14214085f;
      sa[495] = 0.2686695f;
      sa[496] = -0.003033992f;
      sa[497] = 0.080301136f;
      sa[498] = 0.18495917f;
      sa[499] = 0.20340508f;
      sa[500] = 0.024615986f;
      sa[501] = 0.19111463f;
      sa[502] = 0.19891855f;
      sa[503] = 0.009377552f;
      sa[504] = -0.14642818f;
      sa[505] = -0.18551233f;
      sa[506] = 0.21085826f;
      sa[507] = -0.031941306f;
      sa[508] = 0.082247466f;
      sa[509] = 0.24495158f;
      sa[510] = 0.1855798f;
      sa[511] = -0.014333182f;
      sa[512] = 0.11069066f;
      sa[513] = -0.0679913f;
      sa[514] = 0.2733187f;
      sa[515] = -0.17598902f;
      sa[516] = 0.023238584f;
      sa[517] = 0.12221334f;
      sa[518] = 0.16240837f;
      sa[519] = -0.09391682f;
      sa[520] = 0.29914874f;
      sa[521] = 0.20786561f;
      sa[522] = 0.025968734f;
      sa[523] = 0.23757666f;
      sa[524] = 0.20055582f;
      sa[525] = 0.16641004f;
      sa[526] = -0.009270886f;
      sa[527] = -0.16115573f;
      sa[528] = -0.02352044f;
      sa[529] = 0.13066678f;
      sa[530] = -0.28867754f;
      sa[531] = 0.013592529f;
      sa[532] = 0.14628614f;
      sa[533] = 0.11243757f;
      sa[534] = 0.14346087f;
      sa[535] = -0.13045014f;
      sa[536] = -0.023657156f;
      sa[537] = -0.26067248f;
      sa[538] = 0.2991786f;
      sa[539] = 0.37092912f;
      sa[540] = -0.2545514f;
      sa[541] = -0.16202451f;
      sa[542] = -0.06893792f;
      sa[543] = -0.39849836f;
      sa[544] = 0.13065387f;
      sa[545] = 0.1253134f;
      sa[546] = 0.061797608f;
      sa[547] = 0.18020181f;
      sa[548] = 0.10897119f;
      sa[549] = 0.16000251f;
      sa[550] = 0.052671228f;
      sa[551] = -0.19519055f;
      sa[552] = 0.056385916f;
      sa[553] = -0.029169621f;
      sa[554] = -0.17114049f;
      sa[555] = -0.17846507f;
      sa[556] = -0.1815933f;
      sa[557] = -0.26029566f;
      sa[558] = -0.25741887f;
      sa[559] = 0.27528912f;
      sa[560] = -0.3318598f;
      sa[561] = -0.12520422f;
      sa[562] = 0.19207324f;
      sa[563] = -0.077192046f;
      sa[564] = 0.34831688f;
      sa[565] = 0.072248325f;
      sa[566] = 0.29540083f;
      sa[567] = 0.10353047f;
      sa[568] = -0.06381268f;
      sa[569] = 0.03153951f;
      sa[570] = 0.002746941f;
      sa[571] = -0.0770029f;
      sa[572] = -0.15764304f;
      sa[573] = 0.03167954f;
      sa[574] = 0.30686432f;
      sa[575] = -0.23652463f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_12_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_12_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.35191986f;
      sa[1] = 0.018481951f;
      sa[2] = -0.2003076f;
      sa[3] = -0.261907f;
      sa[4] = 0.04963458f;
      sa[5] = 0.060813412f;
      sa[6] = 0.1039673f;
      sa[7] = 0.061551046f;
      sa[8] = -0.21931224f;
      sa[9] = 0.14080901f;
      sa[10] = -0.15946674f;
      sa[11] = 0.1264583f;
      sa[12] = 0.09025392f;
      sa[13] = 0.05861168f;
      sa[14] = -0.111503616f;
      sa[15] = 0.34035987f;
      sa[16] = 0.48006395f;
      sa[17] = -0.06132538f;
      sa[18] = 0.040045213f;
      sa[19] = -0.04693678f;
      sa[20] = 0.35119843f;
      sa[21] = -0.06925886f;
      sa[22] = -0.33029532f;
      sa[23] = 0.35637718f;
      sa[24] = -0.4059337f;
      sa[25] = 0.065527186f;
      sa[26] = -0.14194827f;
      sa[27] = 0.4290859f;
      sa[28] = -0.31810275f;
      sa[29] = -0.10843393f;
      sa[30] = 0.19291f;
      sa[31] = -0.22032844f;
      sa[32] = -0.32638565f;
      sa[33] = -0.36227158f;
      sa[34] = 0.056667287f;
      sa[35] = 0.4225874f;
      sa[36] = -0.09572459f;
      sa[37] = -0.091754325f;
      sa[38] = 0.026142698f;
      sa[39] = 0.450802f;
      sa[40] = -0.218409f;
      sa[41] = -0.3881466f;
      sa[42] = -0.25786278f;
      sa[43] = -0.3271533f;
      sa[44] = -0.024604844f;
      sa[45] = -0.40531465f;
      sa[46] = 0.34935394f;
      sa[47] = 0.3206263f;
      sa[48] = -0.41014057f;
      sa[49] = -0.2656579f;
      sa[50] = 0.13401535f;
      sa[51] = -0.11293434f;
      sa[52] = 0.15396759f;
      sa[53] = 0.23828968f;
      sa[54] = -0.087115094f;
      sa[55] = 0.42717183f;
      sa[56] = -0.26349708f;
      sa[57] = -0.29928753f;
      sa[58] = 0.15126629f;
      sa[59] = 0.055692483f;
      sa[60] = 0.27319515f;
      sa[61] = -0.22540317f;
      sa[62] = -0.09241942f;
      sa[63] = 0.22905171f;
      sa[64] = 0.43919486f;
      sa[65] = -0.180302f;
      sa[66] = 0.18267608f;
      sa[67] = 0.3860698f;
      sa[68] = 0.18961096f;
      sa[69] = -0.27073297f;
      sa[70] = -0.46915433f;
      sa[71] = -0.10990322f;
      sa[72] = -0.3929647f;
      sa[73] = 0.25847277f;
      sa[74] = 0.33385766f;
      sa[75] = 0.05896895f;
      sa[76] = 0.27385613f;
      sa[77] = 0.13474137f;
      sa[78] = -0.24995452f;
      sa[79] = 0.36537212f;
      sa[80] = -0.31215867f;
      sa[81] = 0.08718039f;
      sa[82] = 0.20623095f;
      sa[83] = -0.16623008f;
      sa[84] = -0.4805841f;
      sa[85] = -0.33434644f;
      sa[86] = 0.13230573f;
      sa[87] = 0.40064436f;
      sa[88] = -0.3107603f;
      sa[89] = -0.068481654f;
      sa[90] = -0.20502655f;
      sa[91] = 0.38292602f;
      sa[92] = -0.24023871f;
      sa[93] = 0.014574767f;
      sa[94] = -0.5244262f;
      sa[95] = -0.11718184f;
      sa[96] = -0.3061401f;
      sa[97] = 0.09012928f;
      sa[98] = 0.004463343f;
      sa[99] = 0.09185269f;
      sa[100] = -0.34881383f;
      sa[101] = -0.13947925f;
      sa[102] = 0.2838657f;
      sa[103] = 0.22307141f;
      sa[104] = -0.05190303f;
      sa[105] = -0.19184603f;
      sa[106] = 0.39973065f;
      sa[107] = 0.3949826f;
      sa[108] = 0.1679016f;
      sa[109] = 0.006020538f;
      sa[110] = 0.28180847f;
      sa[111] = -0.18197708f;
      sa[112] = -0.37406757f;
      sa[113] = 0.022774784f;
      sa[114] = 0.071022026f;
      sa[115] = -0.15649547f;
      sa[116] = 0.24312088f;
      sa[117] = 0.035892073f;
      sa[118] = -0.37622422f;
      sa[119] = -0.115633845f;
      sa[120] = -0.073318526f;
      sa[121] = 0.31488448f;
      sa[122] = 0.09308674f;
      sa[123] = 0.17140533f;
      sa[124] = -0.29174381f;
      sa[125] = 0.15263379f;
      sa[126] = -0.27305868f;
      sa[127] = 0.20322172f;
      sa[128] = -0.27874017f;
      sa[129] = 0.15694109f;
      sa[130] = -0.060546163f;
      sa[131] = 0.2354177f;
      sa[132] = 0.06475209f;
      sa[133] = 0.1592343f;
      sa[134] = 0.305385f;
      sa[135] = -0.35983738f;
      sa[136] = 0.14760083f;
      sa[137] = -0.111821406f;
      sa[138] = 0.11390988f;
      sa[139] = 0.3267863f;
      sa[140] = -0.18723395f;
      sa[141] = -0.06286516f;
      sa[142] = -0.072827496f;
      sa[143] = -0.23771474f;
      sa[144] = 0.21897796f;
      sa[145] = -0.2068078f;
      sa[146] = 0.020243598f;
      sa[147] = -0.042175315f;
      sa[148] = -0.22467203f;
      sa[149] = 0.30127242f;
      sa[150] = -0.20274445f;
      sa[151] = -0.51808095f;
      sa[152] = 0.46687788f;
      sa[153] = -0.09865472f;
      sa[154] = 0.39664203f;
      sa[155] = -0.4876313f;
      sa[156] = -0.40402997f;
      sa[157] = -0.31047058f;
      sa[158] = -0.18522024f;
      sa[159] = -0.29415837f;
      sa[160] = 0.2628513f;
      sa[161] = -0.31934077f;
      sa[162] = 0.4766606f;
      sa[163] = -0.23043463f;
      sa[164] = 0.12166917f;
      sa[165] = -0.16273144f;
      sa[166] = 0.43929493f;
      sa[167] = -0.31879222f;
      sa[168] = 0.27957594f;
      sa[169] = -0.3503569f;
      sa[170] = 0.46258268f;
      sa[171] = 0.294476f;
      sa[172] = 0.26868364f;
      sa[173] = 0.2868016f;
      sa[174] = -0.11739768f;
      sa[175] = -0.006422437f;
      sa[176] = -0.2702991f;
      sa[177] = 0.014030006f;
      sa[178] = -0.31180334f;
      sa[179] = -0.11122895f;
      sa[180] = -0.40963838f;
      sa[181] = -0.20341168f;
      sa[182] = 0.11493324f;
      sa[183] = -0.3013159f;
      sa[184] = 0.4572953f;
      sa[185] = 0.3632888f;
      sa[186] = -0.101398624f;
      sa[187] = -0.28024352f;
      sa[188] = -0.19863495f;
      sa[189] = -0.21148422f;
      sa[190] = -0.43329406f;
      sa[191] = -0.24094093f;
      sa[192] = -0.02312754f;
      sa[193] = 0.06434928f;
      sa[194] = -0.2878285f;
      sa[195] = -0.24414133f;
      sa[196] = 0.1697004f;
      sa[197] = -0.19801874f;
      sa[198] = 0.068323374f;
      sa[199] = 0.24647889f;
      sa[200] = -0.052773375f;
      sa[201] = 0.2547492f;
      sa[202] = 0.13131449f;
      sa[203] = -0.43121383f;
      sa[204] = 0.1604642f;
      sa[205] = 0.3807392f;
      sa[206] = -0.21829526f;
      sa[207] = 0.16132407f;
      sa[208] = -0.27342948f;
      sa[209] = 0.20275858f;
      sa[210] = -0.14612283f;
      sa[211] = -0.332181f;
      sa[212] = -0.39952525f;
      sa[213] = 0.0705803f;
      sa[214] = -0.4021361f;
      sa[215] = 0.14836864f;
      sa[216] = 0.21154921f;
      sa[217] = 0.36320624f;
      sa[218] = 0.0760307f;
      sa[219] = 0.12762381f;
      sa[220] = 0.03727668f;
      sa[221] = -0.05407432f;
      sa[222] = -0.2176039f;
      sa[223] = -0.21637459f;
      sa[224] = 0.25004292f;
      sa[225] = 0.087770075f;
      sa[226] = -0.08748685f;
      sa[227] = 0.099692695f;
      sa[228] = -0.09983688f;
      sa[229] = -0.21597719f;
      sa[230] = -0.20038861f;
      sa[231] = -0.13393167f;
      sa[232] = 0.47365692f;
      sa[233] = -0.1450499f;
      sa[234] = -0.16773103f;
      sa[235] = -0.03596359f;
      sa[236] = -0.35771295f;
      sa[237] = 0.44766f;
      sa[238] = 0.110130064f;
      sa[239] = -0.14757042f;
      sa[240] = -0.035480376f;
      sa[241] = -0.38944694f;
      sa[242] = -0.24099094f;
      sa[243] = 0.44018432f;
      sa[244] = 0.257596f;
      sa[245] = 0.28043142f;
      sa[246] = 0.25352848f;
      sa[247] = -0.5082388f;
      sa[248] = -0.24317633f;
      sa[249] = -0.0072713103f;
      sa[250] = 0.17277732f;
      sa[251] = 0.29435703f;
      sa[252] = 0.29208356f;
      sa[253] = -0.28038284f;
      sa[254] = 0.25695914f;
      sa[255] = 0.03683808f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_12_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_Tanh_12_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.18163879f;
      sa[1] = -1.5595307f;
      sa[2] = -1.5962089f;
      sa[3] = 1.3759817f;
      sa[4] = 0.4220249f;
      sa[5] = -0.14408748f;
      sa[6] = -1.5759854f;
      sa[7] = 1.6006811f;
      sa[8] = 1.8413634f;
      sa[9] = 0.2581861f;
      sa[10] = 1.6610682f;
      sa[11] = 1.5213166f;
      sa[12] = 1.8836673f;
      sa[13] = -0.4939977f;
      sa[14] = -2.0858939f;
      sa[15] = -0.6558783f;
      sa[16] = 0.7523511f;
      sa[17] = -0.82127285f;
      sa[18] = -1.5830522f;
      sa[19] = -0.94539034f;
      sa[20] = -1.9504266f;
      sa[21] = 0.2480546f;
      sa[22] = -2.0210638f;
      sa[23] = -0.6476585f;
      sa[24] = -0.5230475f;
      sa[25] = 1.8790483f;
      sa[26] = -0.31009182f;
      sa[27] = 1.2299019f;
      sa[28] = 1.2694267f;
      sa[29] = -0.7706249f;
      sa[30] = 0.15557066f;
      sa[31] = 0.14510137f;
      sa[32] = 0.49884915f;
      sa[33] = 0.34184662f;
      sa[34] = -0.601015f;
      sa[35] = 1.0334815f;
      sa[36] = 0.7009643f;
      sa[37] = -1.319467f;
      sa[38] = 0.5852405f;
      sa[39] = -0.32469743f;
      sa[40] = 0.2234506f;
      sa[41] = -0.79309076f;
      sa[42] = 0.61946297f;
      sa[43] = -0.12538566f;
      sa[44] = 0.9948436f;
      sa[45] = -2.1232119f;
      sa[46] = -2.1307294f;
      sa[47] = 0.07880793f;
      sa[48] = 1.5965725f;
      sa[49] = -0.18859865f;
      sa[50] = -0.45523462f;
      sa[51] = 1.8499299f;
      sa[52] = -1.7734746f;
      sa[53] = 1.0281794f;
      sa[54] = 1.874081f;
      sa[55] = 1.1233977f;
      sa[56] = -0.5604042f;
      sa[57] = -0.0752618f;
      sa[58] = 1.0148278f;
      sa[59] = 0.87211025f;
      sa[60] = -1.3672142f;
      sa[61] = 0.989266f;
      sa[62] = -0.35640478f;
      sa[63] = -0.8822994f;
      sa[64] = 0.9547255f;
      sa[65] = -0.9159525f;
      sa[66] = -1.7562817f;
      sa[67] = -0.111841425f;
      sa[68] = 0.9312444f;
      sa[69] = -1.4219937f;
      sa[70] = -1.7345672f;
      sa[71] = -0.036692828f;
      sa[72] = -1.1700466f;
      sa[73] = -1.2864535f;
      sa[74] = -1.1249869f;
      sa[75] = 1.2090774f;
      sa[76] = 1.8969003f;
      sa[77] = -0.6365215f;
      sa[78] = -1.3761413f;
      sa[79] = -0.41689846f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_12 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_12_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_12_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_12_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_Tanh_12_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


