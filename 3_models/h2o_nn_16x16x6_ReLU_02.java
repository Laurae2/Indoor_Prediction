/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:06:54.921+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_02

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_02 > h2o_nn_16x16x6_ReLU_02.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_02.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_02", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_02 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_02_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_02_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_02_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_02_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_02_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_02_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_02_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_02_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_02_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_02_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_02_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_02_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_02.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_02_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25,0.25,0.125,0.25,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_02() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(2836303525991676448L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_02_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_02_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_02_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_02_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_02_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_02_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_02_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_02_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_02_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_02_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_02_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_02_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_02_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_02_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_02_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_02_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.6628168919425176;
      sa[1] = 0.5674503723074832;
      sa[2] = 0.2861219201587429;
      sa[3] = 0.4633313932952896;
      sa[4] = 0.4125715543984618;
      sa[5] = 0.6149946660790719;
      sa[6] = 0.5621803146282771;
      sa[7] = 0.6001175988913688;
      sa[8] = 0.5131832875851655;
      sa[9] = 0.6115046235706818;
      sa[10] = 0.6260289149071809;
      sa[11] = 0.4775703676054899;
      sa[12] = 0.2578235591241266;
      sa[13] = 0.36633650781508187;
      sa[14] = 0.5211540415611792;
      sa[15] = 0.5930274948876563;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_02_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_02_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_02_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.0690719576987648;
      sa[1] = 0.9911640721592676;
      sa[2] = 0.9785411813059872;
      sa[3] = 0.9694652302587107;
      sa[4] = 0.9738855334658928;
      sa[5] = 1.0110306148291905;
      sa[6] = 0.960352672558724;
      sa[7] = 0.9483408354430798;
      sa[8] = 0.8784542558605625;
      sa[9] = 1.0451579072646278;
      sa[10] = 0.8316473125310127;
      sa[11] = 0.9991357246577307;
      sa[12] = 1.0033735368065821;
      sa[13] = 0.9719916627351969;
      sa[14] = 1.0936019724822923;
      sa[15] = 1.0128487910490234;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_02_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_02_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_02_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.051489941194218805;
      sa[1] = 0.011581533396750205;
      sa[2] = -0.027846141082758555;
      sa[3] = 0.0034970654382350344;
      sa[4] = 0.034318252203949115;
    }
  }
}
class h2o_nn_16x16x6_ReLU_02_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_02_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_02_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_02_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.08203696f;
      sa[1] = 0.32671636f;
      sa[2] = 0.21126398f;
      sa[3] = 0.1533983f;
      sa[4] = -0.100733556f;
      sa[5] = -0.08202376f;
      sa[6] = 0.035989013f;
      sa[7] = 0.41790357f;
      sa[8] = 0.15138353f;
      sa[9] = -0.124677315f;
      sa[10] = -0.16293962f;
      sa[11] = -0.21107835f;
      sa[12] = 0.11954542f;
      sa[13] = -0.22014779f;
      sa[14] = -0.14364353f;
      sa[15] = 0.06097908f;
      sa[16] = 0.12899102f;
      sa[17] = 0.30294567f;
      sa[18] = -0.26096976f;
      sa[19] = 0.05912396f;
      sa[20] = 0.27752352f;
      sa[21] = -0.30089307f;
      sa[22] = 0.28982577f;
      sa[23] = -0.17862721f;
      sa[24] = 0.3211154f;
      sa[25] = 0.22848924f;
      sa[26] = -0.29154477f;
      sa[27] = 0.38951153f;
      sa[28] = 0.2914033f;
      sa[29] = -0.26058877f;
      sa[30] = -0.11458293f;
      sa[31] = 0.2265701f;
      sa[32] = 0.13770916f;
      sa[33] = -0.34408522f;
      sa[34] = 0.019859426f;
      sa[35] = 0.042383194f;
      sa[36] = 0.07105406f;
      sa[37] = 0.311774f;
      sa[38] = -0.030055286f;
      sa[39] = 0.14143555f;
      sa[40] = 0.079458095f;
      sa[41] = -0.012365075f;
      sa[42] = -0.119680226f;
      sa[43] = 0.14090532f;
      sa[44] = 0.24818707f;
      sa[45] = -0.30346498f;
      sa[46] = 0.06714418f;
      sa[47] = -0.0263934f;
      sa[48] = 0.24795371f;
      sa[49] = 0.31649372f;
      sa[50] = 0.22843997f;
      sa[51] = -0.2769034f;
      sa[52] = -0.04633735f;
      sa[53] = 0.30452883f;
      sa[54] = 0.25718665f;
      sa[55] = 0.010785231f;
      sa[56] = -0.18846434f;
      sa[57] = -0.3035785f;
      sa[58] = 0.28535607f;
      sa[59] = -0.18739998f;
      sa[60] = -0.24016482f;
      sa[61] = 0.25391912f;
      sa[62] = 0.18262923f;
      sa[63] = 0.07695397f;
      sa[64] = 0.15784487f;
      sa[65] = 0.16586185f;
      sa[66] = 0.054620937f;
      sa[67] = 0.19049948f;
      sa[68] = -0.1367669f;
      sa[69] = 0.09324674f;
      sa[70] = -0.20458005f;
      sa[71] = 0.40407082f;
      sa[72] = -0.16220061f;
      sa[73] = 0.18920031f;
      sa[74] = -0.22581534f;
      sa[75] = 0.058371387f;
      sa[76] = -0.2686959f;
      sa[77] = -0.14303021f;
      sa[78] = -0.12524898f;
      sa[79] = 0.10174825f;
      sa[80] = -0.25109047f;
      sa[81] = -0.10742387f;
      sa[82] = -0.030811798f;
      sa[83] = 0.08187999f;
      sa[84] = -0.07502875f;
      sa[85] = -0.25256577f;
      sa[86] = 0.11021638f;
      sa[87] = 0.22466645f;
      sa[88] = 0.23710991f;
      sa[89] = 0.09941102f;
      sa[90] = -0.1796092f;
      sa[91] = 0.23065433f;
      sa[92] = 0.09516285f;
      sa[93] = -0.24896479f;
      sa[94] = -0.21712548f;
      sa[95] = -0.25438437f;
      sa[96] = 0.107887566f;
      sa[97] = 0.0010302864f;
      sa[98] = 0.1853528f;
      sa[99] = -0.07819198f;
      sa[100] = -0.09574676f;
      sa[101] = -0.24037239f;
      sa[102] = -0.33686706f;
      sa[103] = -0.12584454f;
      sa[104] = 0.0016751385f;
      sa[105] = -0.165933f;
      sa[106] = -0.15603025f;
      sa[107] = 0.13816929f;
      sa[108] = 0.18293446f;
      sa[109] = -0.2471135f;
      sa[110] = -0.23412165f;
      sa[111] = 0.17740177f;
      sa[112] = 0.13814619f;
      sa[113] = 0.03583851f;
      sa[114] = -0.17013484f;
      sa[115] = -0.08818567f;
      sa[116] = -0.26013127f;
      sa[117] = 0.026913079f;
      sa[118] = -0.35353488f;
      sa[119] = -0.16364355f;
      sa[120] = 0.23467374f;
      sa[121] = 0.24639657f;
      sa[122] = 0.3231138f;
      sa[123] = 0.26629877f;
      sa[124] = 0.27665168f;
      sa[125] = 0.3458601f;
      sa[126] = -0.29236138f;
      sa[127] = -0.23064099f;
      sa[128] = 0.07588046f;
      sa[129] = 0.16755395f;
      sa[130] = -0.1265301f;
      sa[131] = 0.31696185f;
      sa[132] = 0.1510042f;
      sa[133] = -0.36076915f;
      sa[134] = 0.099704675f;
      sa[135] = -0.25829792f;
      sa[136] = -0.3043763f;
      sa[137] = -0.045489658f;
      sa[138] = 0.12290689f;
      sa[139] = -0.13083307f;
      sa[140] = -0.06562972f;
      sa[141] = -0.1463477f;
      sa[142] = 0.21382181f;
      sa[143] = -0.26228118f;
      sa[144] = 0.28154948f;
      sa[145] = -0.21031685f;
      sa[146] = -0.36731377f;
      sa[147] = 0.25108275f;
      sa[148] = 0.17829324f;
      sa[149] = 0.20903975f;
      sa[150] = 0.33895615f;
      sa[151] = -0.35041752f;
      sa[152] = 0.036858995f;
      sa[153] = 0.24757089f;
      sa[154] = 0.2613775f;
      sa[155] = -0.1213053f;
      sa[156] = 0.13869004f;
      sa[157] = -0.20629694f;
      sa[158] = 0.10291572f;
      sa[159] = 0.04994459f;
      sa[160] = 0.050072268f;
      sa[161] = 0.2345508f;
      sa[162] = -0.1288429f;
      sa[163] = -0.09225754f;
      sa[164] = 0.23329094f;
      sa[165] = -0.07320225f;
      sa[166] = -0.0842899f;
      sa[167] = -0.117157884f;
      sa[168] = 0.1785465f;
      sa[169] = 0.35410172f;
      sa[170] = 0.076051876f;
      sa[171] = -0.057000153f;
      sa[172] = -0.09566711f;
      sa[173] = -0.20131066f;
      sa[174] = -0.042581465f;
      sa[175] = -0.32166758f;
      sa[176] = 0.044991318f;
      sa[177] = 0.021292247f;
      sa[178] = -0.023369843f;
      sa[179] = 0.08020195f;
      sa[180] = -0.07529341f;
      sa[181] = -0.10569257f;
      sa[182] = -0.097529754f;
      sa[183] = 0.12353596f;
      sa[184] = 0.3636869f;
      sa[185] = 0.35826242f;
      sa[186] = -0.24756612f;
      sa[187] = 0.17789407f;
      sa[188] = -0.04245616f;
      sa[189] = 0.26731426f;
      sa[190] = -0.100174814f;
      sa[191] = 0.024912769f;
      sa[192] = -0.14273046f;
      sa[193] = 0.37860766f;
      sa[194] = 0.11790397f;
      sa[195] = 0.34767798f;
      sa[196] = 0.4927049f;
      sa[197] = -0.025319416f;
      sa[198] = 0.100735225f;
      sa[199] = -0.25164434f;
      sa[200] = -0.020389512f;
      sa[201] = -0.34055954f;
      sa[202] = 0.09398146f;
      sa[203] = -0.09994194f;
      sa[204] = -0.19740649f;
      sa[205] = 0.19330195f;
      sa[206] = 0.2604284f;
      sa[207] = 0.12825696f;
      sa[208] = -0.29932886f;
      sa[209] = -0.090040974f;
      sa[210] = -0.25350204f;
      sa[211] = -0.2603168f;
      sa[212] = 0.18715236f;
      sa[213] = -0.23422952f;
      sa[214] = -0.23605351f;
      sa[215] = 0.014190114f;
      sa[216] = 0.101684004f;
      sa[217] = 0.23097667f;
      sa[218] = -0.21955039f;
      sa[219] = 0.20420004f;
      sa[220] = -0.23450261f;
      sa[221] = 0.045726463f;
      sa[222] = 0.23785985f;
      sa[223] = 0.09667284f;
      sa[224] = 0.11995516f;
      sa[225] = 0.39423007f;
      sa[226] = -0.25105128f;
      sa[227] = 0.28427693f;
      sa[228] = 0.1473688f;
      sa[229] = 0.10750719f;
      sa[230] = 0.28138182f;
      sa[231] = -0.23939283f;
      sa[232] = -0.2694663f;
      sa[233] = 0.16082814f;
      sa[234] = 0.1239215f;
      sa[235] = -0.29419968f;
      sa[236] = -0.013250616f;
      sa[237] = -0.21378891f;
      sa[238] = -0.21693909f;
      sa[239] = 0.16981073f;
      sa[240] = -0.028741011f;
      sa[241] = -0.27536893f;
      sa[242] = -0.10983292f;
      sa[243] = -0.16268158f;
      sa[244] = -0.20253232f;
      sa[245] = -0.12147512f;
      sa[246] = -0.2674247f;
      sa[247] = -0.019445479f;
      sa[248] = 0.20969652f;
      sa[249] = 0.21635017f;
      sa[250] = -0.18900499f;
      sa[251] = 0.016783739f;
      sa[252] = -0.28131184f;
      sa[253] = -0.28083214f;
      sa[254] = -0.2594602f;
      sa[255] = 0.16490723f;
      sa[256] = -0.14792363f;
      sa[257] = 0.3123238f;
      sa[258] = -0.2543452f;
      sa[259] = -0.09799736f;
      sa[260] = -0.22718735f;
      sa[261] = 0.0062665064f;
      sa[262] = -0.18078275f;
      sa[263] = 0.2525193f;
      sa[264] = -0.119090654f;
      sa[265] = 0.08437251f;
      sa[266] = -0.28592718f;
      sa[267] = -0.22144985f;
      sa[268] = 0.09445816f;
      sa[269] = -0.11019657f;
      sa[270] = -0.05588377f;
      sa[271] = 0.24085794f;
      sa[272] = -0.054932207f;
      sa[273] = -0.072451524f;
      sa[274] = 0.19435945f;
      sa[275] = 0.04577306f;
      sa[276] = 0.09419216f;
      sa[277] = -0.26588047f;
      sa[278] = -0.17358212f;
      sa[279] = 0.2560763f;
      sa[280] = -0.15132034f;
      sa[281] = 0.3391759f;
      sa[282] = -0.075999364f;
      sa[283] = -0.021859886f;
      sa[284] = 0.005682521f;
      sa[285] = -0.21233808f;
      sa[286] = 0.33316568f;
      sa[287] = 0.28474036f;
      sa[288] = -0.249244f;
      sa[289] = -0.13372181f;
      sa[290] = -0.079559915f;
      sa[291] = 0.053731125f;
      sa[292] = 0.14934266f;
      sa[293] = -0.026585137f;
      sa[294] = 0.12957253f;
      sa[295] = 0.191726f;
      sa[296] = 0.2313138f;
      sa[297] = 0.14278662f;
      sa[298] = -0.041524634f;
      sa[299] = 0.007951114f;
      sa[300] = -0.019448012f;
      sa[301] = -0.037031855f;
      sa[302] = 0.19739735f;
      sa[303] = 0.04397904f;
      sa[304] = -0.18370338f;
      sa[305] = -0.094763756f;
      sa[306] = 0.24970405f;
      sa[307] = -0.28700745f;
      sa[308] = 0.06176149f;
      sa[309] = 0.12565528f;
      sa[310] = 0.28813925f;
      sa[311] = 0.2800463f;
      sa[312] = -0.1973025f;
      sa[313] = -0.16744629f;
      sa[314] = -0.12486696f;
      sa[315] = -0.050029024f;
      sa[316] = -0.047942646f;
      sa[317] = -0.11231931f;
      sa[318] = 0.10629095f;
      sa[319] = 0.30188262f;
      sa[320] = -0.047841225f;
      sa[321] = 0.23760979f;
      sa[322] = 0.0580935f;
      sa[323] = -0.28515837f;
      sa[324] = -0.017249892f;
      sa[325] = 0.30301017f;
      sa[326] = -0.17657657f;
      sa[327] = -0.01133846f;
      sa[328] = 0.04562824f;
      sa[329] = 0.41148987f;
      sa[330] = -0.13227817f;
      sa[331] = 0.10614394f;
      sa[332] = -0.30361006f;
      sa[333] = 0.11924652f;
      sa[334] = -0.04001824f;
      sa[335] = 0.24859856f;
      sa[336] = -0.15936245f;
      sa[337] = -0.095121324f;
      sa[338] = 0.32560122f;
      sa[339] = -0.18240835f;
      sa[340] = -0.30263436f;
      sa[341] = -0.19892913f;
      sa[342] = 0.2681504f;
      sa[343] = -0.17334037f;
      sa[344] = -0.18560623f;
      sa[345] = 0.24240434f;
      sa[346] = 0.2273586f;
      sa[347] = -0.16441217f;
      sa[348] = 0.4274289f;
      sa[349] = -0.21680643f;
      sa[350] = -0.14643908f;
      sa[351] = 0.23492971f;
      sa[352] = 0.23250979f;
      sa[353] = 0.0066408645f;
      sa[354] = 0.17366882f;
      sa[355] = 0.16084556f;
      sa[356] = -0.15570344f;
      sa[357] = 0.2045641f;
      sa[358] = -0.38785884f;
      sa[359] = 0.18566996f;
      sa[360] = 0.09881306f;
      sa[361] = -0.15359113f;
      sa[362] = -0.34251997f;
      sa[363] = 0.24974236f;
      sa[364] = -0.07581241f;
      sa[365] = -0.18725689f;
      sa[366] = 0.083099246f;
      sa[367] = -0.36694425f;
      sa[368] = -0.1712292f;
      sa[369] = 0.23416582f;
      sa[370] = -0.255337f;
      sa[371] = 0.25499123f;
      sa[372] = 0.037218507f;
      sa[373] = 0.36962646f;
      sa[374] = -0.0724802f;
      sa[375] = -0.31033224f;
      sa[376] = -0.3948309f;
      sa[377] = -0.21261674f;
      sa[378] = 0.37773976f;
      sa[379] = 0.2058887f;
      sa[380] = -0.067063086f;
      sa[381] = -0.048227698f;
      sa[382] = 0.038526807f;
      sa[383] = -0.060515977f;
      sa[384] = -0.22553425f;
      sa[385] = 0.05190768f;
      sa[386] = -0.21718936f;
      sa[387] = -0.25689635f;
      sa[388] = 0.13096647f;
      sa[389] = -0.0011850109f;
      sa[390] = 0.018454755f;
      sa[391] = -0.14904255f;
      sa[392] = 0.4571772f;
      sa[393] = 0.27842396f;
      sa[394] = 0.028837606f;
      sa[395] = 0.20331058f;
      sa[396] = 0.345437f;
      sa[397] = -0.26664686f;
      sa[398] = 0.10002646f;
      sa[399] = 0.07136269f;
      sa[400] = 0.15507545f;
      sa[401] = 0.18178624f;
      sa[402] = -0.20048046f;
      sa[403] = 0.017393861f;
      sa[404] = 0.29110804f;
      sa[405] = -0.19279534f;
      sa[406] = -0.09714345f;
      sa[407] = 0.08136514f;
      sa[408] = -0.21872242f;
      sa[409] = -0.33002314f;
      sa[410] = -0.14914261f;
      sa[411] = 0.1751224f;
      sa[412] = -0.19805874f;
      sa[413] = 0.10179143f;
      sa[414] = 0.08604635f;
      sa[415] = 0.43878508f;
      sa[416] = -0.11729065f;
      sa[417] = 0.081796244f;
      sa[418] = 0.03439712f;
      sa[419] = 0.34674928f;
      sa[420] = 0.12634286f;
      sa[421] = 0.18982802f;
      sa[422] = 0.157007f;
      sa[423] = -0.11451192f;
      sa[424] = 0.1515111f;
      sa[425] = -0.04488709f;
      sa[426] = -0.34018707f;
      sa[427] = 0.23970313f;
      sa[428] = -0.09718918f;
      sa[429] = -0.2147408f;
      sa[430] = 0.2716106f;
      sa[431] = -0.05004002f;
      sa[432] = -0.044538658f;
      sa[433] = 0.09319132f;
      sa[434] = 0.24195024f;
      sa[435] = 0.0535679f;
      sa[436] = -0.36953217f;
      sa[437] = -0.35676676f;
      sa[438] = -0.08016299f;
      sa[439] = -0.14446972f;
      sa[440] = 0.33095813f;
      sa[441] = -0.3191335f;
      sa[442] = 0.12636149f;
      sa[443] = 0.0476197f;
      sa[444] = -0.2717874f;
      sa[445] = -0.0048540025f;
      sa[446] = 0.17523685f;
      sa[447] = 0.0064449366f;
      sa[448] = 0.14172347f;
      sa[449] = 0.27235985f;
      sa[450] = -0.11392684f;
      sa[451] = 0.15825777f;
      sa[452] = 0.17844056f;
      sa[453] = -0.09202754f;
      sa[454] = -0.2177334f;
      sa[455] = -0.0745243f;
      sa[456] = -0.09057296f;
      sa[457] = 0.08721801f;
      sa[458] = -0.25637227f;
      sa[459] = 0.2797969f;
      sa[460] = 0.2158358f;
      sa[461] = 0.26093367f;
      sa[462] = 0.0055752085f;
      sa[463] = 0.18097341f;
      sa[464] = -0.2468994f;
      sa[465] = 0.26049787f;
      sa[466] = 0.058659963f;
      sa[467] = 0.1392583f;
      sa[468] = 0.105004266f;
      sa[469] = 0.34340578f;
      sa[470] = 0.22837053f;
      sa[471] = 0.03405235f;
      sa[472] = -0.014407923f;
      sa[473] = -0.16208027f;
      sa[474] = -0.07121949f;
      sa[475] = 0.057889145f;
      sa[476] = 0.26771367f;
      sa[477] = -0.15743151f;
      sa[478] = 0.13276608f;
      sa[479] = -0.23204415f;
      sa[480] = -0.35431045f;
      sa[481] = -0.2670614f;
      sa[482] = -0.32742614f;
      sa[483] = 0.18865572f;
      sa[484] = 0.26384917f;
      sa[485] = 0.2546623f;
      sa[486] = -0.043671805f;
      sa[487] = -0.08712434f;
      sa[488] = -0.23014824f;
      sa[489] = 0.07569535f;
      sa[490] = -0.050263464f;
      sa[491] = -0.23085612f;
      sa[492] = 0.25564054f;
      sa[493] = 0.33864728f;
      sa[494] = -0.24316786f;
      sa[495] = 0.3152743f;
      sa[496] = -0.018945012f;
      sa[497] = 0.06226854f;
      sa[498] = 0.15914167f;
      sa[499] = 0.18173388f;
      sa[500] = -0.04914827f;
      sa[501] = 0.019713948f;
      sa[502] = 0.32549334f;
      sa[503] = 0.1145336f;
      sa[504] = -0.15211901f;
      sa[505] = -0.17529751f;
      sa[506] = 0.17878053f;
      sa[507] = -0.07563701f;
      sa[508] = 0.06770618f;
      sa[509] = 0.20655097f;
      sa[510] = 0.14274897f;
      sa[511] = 0.017915938f;
      sa[512] = 0.08206338f;
      sa[513] = 0.007930233f;
      sa[514] = 0.24909204f;
      sa[515] = -0.24523409f;
      sa[516] = 0.020893946f;
      sa[517] = 0.087705866f;
      sa[518] = 0.13312544f;
      sa[519] = -0.103259996f;
      sa[520] = 0.21925706f;
      sa[521] = 0.2209535f;
      sa[522] = 0.0568305f;
      sa[523] = 0.1786634f;
      sa[524] = 0.20855097f;
      sa[525] = 0.1773988f;
      sa[526] = -0.009865247f;
      sa[527] = -0.15881026f;
      sa[528] = -0.07017973f;
      sa[529] = 0.06172771f;
      sa[530] = -0.2517782f;
      sa[531] = -0.036110513f;
      sa[532] = 0.1505996f;
      sa[533] = 0.114163615f;
      sa[534] = 0.12869793f;
      sa[535] = -0.1147758f;
      sa[536] = 0.019804431f;
      sa[537] = -0.20816085f;
      sa[538] = 0.17827314f;
      sa[539] = 0.4022529f;
      sa[540] = -0.27747637f;
      sa[541] = -0.18613893f;
      sa[542] = -0.06631902f;
      sa[543] = -0.35224703f;
      sa[544] = 0.2295247f;
      sa[545] = 0.17020193f;
      sa[546] = 0.13622156f;
      sa[547] = 0.23404948f;
      sa[548] = 0.07421765f;
      sa[549] = 0.22255032f;
      sa[550] = 0.017740013f;
      sa[551] = -0.16026747f;
      sa[552] = 0.06750504f;
      sa[553] = -0.031437147f;
      sa[554] = -0.14535388f;
      sa[555] = -0.14306815f;
      sa[556] = -0.20856394f;
      sa[557] = -0.17052576f;
      sa[558] = -0.23037824f;
      sa[559] = 0.1985647f;
      sa[560] = -0.31361693f;
      sa[561] = -0.06921329f;
      sa[562] = 0.24009119f;
      sa[563] = -0.044054974f;
      sa[564] = 0.32122052f;
      sa[565] = 0.07567989f;
      sa[566] = 0.2967466f;
      sa[567] = 0.11471367f;
      sa[568] = -0.06508481f;
      sa[569] = 0.048740152f;
      sa[570] = 0.009552628f;
      sa[571] = -0.051697925f;
      sa[572] = -0.18312177f;
      sa[573] = 0.037137724f;
      sa[574] = 0.37115458f;
      sa[575] = -0.10730833f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_02_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_02_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_02_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.4771056f;
      sa[1] = 0.0014346216f;
      sa[2] = -0.11931368f;
      sa[3] = -0.2269837f;
      sa[4] = 0.07584567f;
      sa[5] = 0.024678472f;
      sa[6] = 0.24397951f;
      sa[7] = -0.17038037f;
      sa[8] = -0.23843268f;
      sa[9] = 0.22341667f;
      sa[10] = -0.16963159f;
      sa[11] = 0.15821506f;
      sa[12] = 0.12783137f;
      sa[13] = 0.104160555f;
      sa[14] = -0.245495f;
      sa[15] = 0.40661734f;
      sa[16] = 0.39210182f;
      sa[17] = -0.11396588f;
      sa[18] = 0.012859415f;
      sa[19] = -0.11177971f;
      sa[20] = 0.2998249f;
      sa[21] = -0.0517087f;
      sa[22] = -0.2654208f;
      sa[23] = 0.1750779f;
      sa[24] = -0.34516644f;
      sa[25] = 0.1427138f;
      sa[26] = -0.07513643f;
      sa[27] = 0.3733852f;
      sa[28] = -0.389181f;
      sa[29] = -0.17173289f;
      sa[30] = 0.09446842f;
      sa[31] = -0.22837375f;
      sa[32] = -0.32455152f;
      sa[33] = -0.40814903f;
      sa[34] = -0.010047911f;
      sa[35] = 0.37442607f;
      sa[36] = -0.11185418f;
      sa[37] = -0.07776604f;
      sa[38] = 0.0053204675f;
      sa[39] = 0.22267127f;
      sa[40] = -0.19600545f;
      sa[41] = -0.3941573f;
      sa[42] = -0.29016498f;
      sa[43] = -0.39082155f;
      sa[44] = -0.005960663f;
      sa[45] = -0.4123946f;
      sa[46] = 0.31813097f;
      sa[47] = 0.34681726f;
      sa[48] = -0.38212544f;
      sa[49] = -0.30104268f;
      sa[50] = 0.076166674f;
      sa[51] = -0.07202035f;
      sa[52] = 0.17557344f;
      sa[53] = 0.168531f;
      sa[54] = -0.111382425f;
      sa[55] = 0.44485477f;
      sa[56] = -0.2654377f;
      sa[57] = -0.3387054f;
      sa[58] = 0.06660959f;
      sa[59] = -0.03271825f;
      sa[60] = 0.32379377f;
      sa[61] = -0.25262186f;
      sa[62] = -0.105467f;
      sa[63] = 0.2035973f;
      sa[64] = 0.37836808f;
      sa[65] = -0.1808129f;
      sa[66] = 0.12618229f;
      sa[67] = 0.3929653f;
      sa[68] = 0.21303624f;
      sa[69] = -0.2730304f;
      sa[70] = -0.44720677f;
      sa[71] = -0.045079187f;
      sa[72] = -0.35343564f;
      sa[73] = 0.23353879f;
      sa[74] = 0.46386585f;
      sa[75] = 0.008283492f;
      sa[76] = 0.22973415f;
      sa[77] = 0.14334154f;
      sa[78] = -0.3237586f;
      sa[79] = 0.28130946f;
      sa[80] = -0.18307693f;
      sa[81] = 0.06306912f;
      sa[82] = 0.24461363f;
      sa[83] = -0.15956531f;
      sa[84] = -0.4395014f;
      sa[85] = -0.37362498f;
      sa[86] = 0.026227169f;
      sa[87] = 0.3390253f;
      sa[88] = -0.41912547f;
      sa[89] = -0.15431619f;
      sa[90] = -0.34547675f;
      sa[91] = 0.42909214f;
      sa[92] = -0.06984957f;
      sa[93] = 0.08512337f;
      sa[94] = -0.3895868f;
      sa[95] = -0.017780064f;
      sa[96] = -0.28458908f;
      sa[97] = 0.00803778f;
      sa[98] = -0.05524572f;
      sa[99] = 0.06998015f;
      sa[100] = -0.3702209f;
      sa[101] = -0.22153547f;
      sa[102] = 0.2022395f;
      sa[103] = 0.01333703f;
      sa[104] = -0.051206186f;
      sa[105] = -0.2797747f;
      sa[106] = 0.34546286f;
      sa[107] = 0.32135f;
      sa[108] = 0.19745146f;
      sa[109] = 0.003852287f;
      sa[110] = 0.19159153f;
      sa[111] = -0.19115089f;
      sa[112] = -0.31309658f;
      sa[113] = -3.152751E-4f;
      sa[114] = 9.692009E-4f;
      sa[115] = -0.14123847f;
      sa[116] = 0.29547662f;
      sa[117] = -0.046230458f;
      sa[118] = -0.41706902f;
      sa[119] = -0.13693908f;
      sa[120] = -0.11383338f;
      sa[121] = 0.21490708f;
      sa[122] = -0.00629958f;
      sa[123] = 0.13770649f;
      sa[124] = -0.20670915f;
      sa[125] = 0.1786417f;
      sa[126] = -0.25136307f;
      sa[127] = 0.17687242f;
      sa[128] = -0.37009394f;
      sa[129] = 0.14246604f;
      sa[130] = -0.14758682f;
      sa[131] = 0.19854079f;
      sa[132] = 0.04705193f;
      sa[133] = 0.13345282f;
      sa[134] = 0.15630028f;
      sa[135] = -0.25420737f;
      sa[136] = 0.11205827f;
      sa[137] = -0.27076384f;
      sa[138] = 0.061112914f;
      sa[139] = 0.29927254f;
      sa[140] = -0.19102928f;
      sa[141] = -0.09174143f;
      sa[142] = -0.013373568f;
      sa[143] = -0.2988724f;
      sa[144] = 0.22022177f;
      sa[145] = -0.17139336f;
      sa[146] = 0.06749343f;
      sa[147] = -0.024962578f;
      sa[148] = -0.22610578f;
      sa[149] = 0.39040977f;
      sa[150] = -0.20169224f;
      sa[151] = -0.5139076f;
      sa[152] = 0.44055232f;
      sa[153] = -0.07094962f;
      sa[154] = 0.32587647f;
      sa[155] = -0.4769009f;
      sa[156] = -0.38626206f;
      sa[157] = -0.31594917f;
      sa[158] = -0.13106798f;
      sa[159] = -0.2385776f;
      sa[160] = 0.16877387f;
      sa[161] = -0.38348964f;
      sa[162] = 0.34673893f;
      sa[163] = -0.28605404f;
      sa[164] = 0.13159281f;
      sa[165] = -0.24188457f;
      sa[166] = 0.31724864f;
      sa[167] = -0.42434776f;
      sa[168] = 0.23723657f;
      sa[169] = -0.51288533f;
      sa[170] = 0.35237643f;
      sa[171] = 0.20076737f;
      sa[172] = 0.30575582f;
      sa[173] = 0.21321847f;
      sa[174] = -0.14128213f;
      sa[175] = -0.12574108f;
      sa[176] = -0.26213774f;
      sa[177] = 0.031919412f;
      sa[178] = -0.28307024f;
      sa[179] = -0.073040195f;
      sa[180] = -0.38011125f;
      sa[181] = -0.20250173f;
      sa[182] = 0.10895653f;
      sa[183] = -0.2738123f;
      sa[184] = 0.39205417f;
      sa[185] = 0.33860028f;
      sa[186] = -0.12998137f;
      sa[187] = -0.26891783f;
      sa[188] = -0.14018312f;
      sa[189] = -0.20270993f;
      sa[190] = -0.41591454f;
      sa[191] = -0.27411136f;
      sa[192] = -0.09555956f;
      sa[193] = 0.13736583f;
      sa[194] = -0.29073432f;
      sa[195] = -0.24098353f;
      sa[196] = 0.17314458f;
      sa[197] = -0.095456444f;
      sa[198] = 0.112574995f;
      sa[199] = 0.42783457f;
      sa[200] = -0.026035715f;
      sa[201] = 0.29846793f;
      sa[202] = 0.25921872f;
      sa[203] = -0.40903053f;
      sa[204] = 0.1163253f;
      sa[205] = 0.36417088f;
      sa[206] = -0.1553762f;
      sa[207] = 0.11963896f;
      sa[208] = -0.19162741f;
      sa[209] = 0.15638334f;
      sa[210] = -0.14008108f;
      sa[211] = -0.29228684f;
      sa[212] = -0.3653155f;
      sa[213] = -0.015007663f;
      sa[214] = -0.47458336f;
      sa[215] = -0.101238005f;
      sa[216] = 0.12666929f;
      sa[217] = 0.27000394f;
      sa[218] = -0.018585116f;
      sa[219] = 0.10918788f;
      sa[220] = 0.16008992f;
      sa[221] = -0.012926389f;
      sa[222] = -0.29060245f;
      sa[223] = -0.3217071f;
      sa[224] = 0.35412923f;
      sa[225] = 0.109828494f;
      sa[226] = 0.019901685f;
      sa[227] = 0.09962671f;
      sa[228] = -0.088790655f;
      sa[229] = -0.17310363f;
      sa[230] = -0.19751072f;
      sa[231] = -0.19200112f;
      sa[232] = 0.4520861f;
      sa[233] = -0.06413201f;
      sa[234] = -0.2685294f;
      sa[235] = 0.043506388f;
      sa[236] = -0.3258356f;
      sa[237] = 0.49318007f;
      sa[238] = 0.19294798f;
      sa[239] = -0.056223102f;
      sa[240] = -0.19710417f;
      sa[241] = -0.3607376f;
      sa[242] = -0.22821283f;
      sa[243] = 0.38056684f;
      sa[244] = 0.1993623f;
      sa[245] = 0.35649356f;
      sa[246] = 0.26013365f;
      sa[247] = -0.41436666f;
      sa[248] = -0.18869527f;
      sa[249] = 0.07455111f;
      sa[250] = 0.24262576f;
      sa[251] = 0.34956393f;
      sa[252] = 0.18504271f;
      sa[253] = -0.4311427f;
      sa[254] = 0.354349f;
      sa[255] = 0.1085969f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_02_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_ReLU_02_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_02_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.091824204f;
      sa[1] = -1.5658853f;
      sa[2] = -1.5847436f;
      sa[3] = 1.3758459f;
      sa[4] = 0.38280812f;
      sa[5] = -0.21485034f;
      sa[6] = -1.6636657f;
      sa[7] = 1.4872351f;
      sa[8] = 1.7828503f;
      sa[9] = 0.17308803f;
      sa[10] = 1.6273075f;
      sa[11] = 1.426207f;
      sa[12] = 1.8584938f;
      sa[13] = -0.5859642f;
      sa[14] = -2.021001f;
      sa[15] = -0.7057779f;
      sa[16] = 0.7697552f;
      sa[17] = -0.78047186f;
      sa[18] = -1.5350254f;
      sa[19] = -0.8822427f;
      sa[20] = -1.9660077f;
      sa[21] = 0.31018925f;
      sa[22] = -1.9958439f;
      sa[23] = -0.5927784f;
      sa[24] = -0.5464645f;
      sa[25] = 1.8993936f;
      sa[26] = -0.35895336f;
      sa[27] = 1.250825f;
      sa[28] = 1.2251799f;
      sa[29] = -0.6979798f;
      sa[30] = 0.14427777f;
      sa[31] = 0.1322913f;
      sa[32] = 0.39330676f;
      sa[33] = 0.22020462f;
      sa[34] = -0.6258f;
      sa[35] = 1.0451977f;
      sa[36] = 0.52412546f;
      sa[37] = -1.4423214f;
      sa[38] = 0.57022566f;
      sa[39] = -0.21912418f;
      sa[40] = 0.22132184f;
      sa[41] = -0.73747885f;
      sa[42] = 0.49332824f;
      sa[43] = -0.044262104f;
      sa[44] = 1.0008657f;
      sa[45] = -2.008245f;
      sa[46] = -2.1676755f;
      sa[47] = 0.0012837274f;
      sa[48] = 1.6585023f;
      sa[49] = -0.22781293f;
      sa[50] = -0.4778582f;
      sa[51] = 1.778575f;
      sa[52] = -1.6705745f;
      sa[53] = 0.9657521f;
      sa[54] = 1.7973601f;
      sa[55] = 1.0877069f;
      sa[56] = -0.57188386f;
      sa[57] = -0.11074655f;
      sa[58] = 1.068629f;
      sa[59] = 0.7370283f;
      sa[60] = -1.4105197f;
      sa[61] = 0.90237784f;
      sa[62] = -0.34940752f;
      sa[63] = -0.82588774f;
      sa[64] = 0.9618298f;
      sa[65] = -0.9524502f;
      sa[66] = -1.7834998f;
      sa[67] = -0.16801247f;
      sa[68] = 0.9201373f;
      sa[69] = -1.3361912f;
      sa[70] = -1.6512843f;
      sa[71] = -0.01511624f;
      sa[72] = -0.9956107f;
      sa[73] = -1.1986878f;
      sa[74] = -1.0616295f;
      sa[75] = -0.09373995f;
      sa[76] = 1.9266138f;
      sa[77] = -0.6729324f;
      sa[78] = -1.3611312f;
      sa[79] = -0.3590021f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_02 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_02_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_02_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_02_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_ReLU_02_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_02_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


