/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:09:15.840+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_11

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_11 > h2o_nn_16x16x6_ReLU_11.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_11.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_11", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_11 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_11_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_11_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_11_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_11_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_11_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_11_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_11.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_11_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.2548076923076923,0.18269230769230768,0.057692307692307696,0.125,0.2548076923076923,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_11() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(1137644425396364832L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_11_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_11_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_11_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_11_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_11_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_11_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_11_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_11_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.7693012051367609;
      sa[1] = 0.7025626865238752;
      sa[2] = 0.4231922557550425;
      sa[3] = 0.4468438873324739;
      sa[4] = 0.5139967441740415;
      sa[5] = 0.642543613111158;
      sa[6] = 0.6116083685977707;
      sa[7] = 0.8698728556613763;
      sa[8] = 0.5870045171593593;
      sa[9] = 0.5726412542925859;
      sa[10] = 0.5835650436092181;
      sa[11] = 0.4062260621006;
      sa[12] = 0.286015280876563;
      sa[13] = 0.45414386479817104;
      sa[14] = 0.549150892490133;
      sa[15] = 0.5701245619552326;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_11_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.0912140648300053;
      sa[1] = 1.049292102157359;
      sa[2] = 0.9179276857041462;
      sa[3] = 0.9935729821836288;
      sa[4] = 0.9464522775617045;
      sa[5] = 0.9669362042559314;
      sa[6] = 0.9795598165528481;
      sa[7] = 0.8733388940985044;
      sa[8] = 0.9368390769448114;
      sa[9] = 1.0515589146495323;
      sa[10] = 0.8489678427933325;
      sa[11] = 1.165995720040877;
      sa[12] = 1.0165234416817215;
      sa[13] = 0.8480706088735314;
      sa[14] = 0.9447483506367902;
      sa[15] = 0.951910832376491;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_11_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_11_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.06621671227034508;
      sa[1] = 0.005001345420577343;
      sa[2] = -0.08844819617082882;
      sa[3] = 0.002539693418836495;
      sa[4] = 0.07386432998627805;
      sa[5] = -0.11805836008681754;
    }
  }
}
class h2o_nn_16x16x6_ReLU_11_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_11_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.071006685f;
      sa[1] = 0.33078665f;
      sa[2] = 0.26174518f;
      sa[3] = 0.025981795f;
      sa[4] = -0.09518164f;
      sa[5] = -0.18403997f;
      sa[6] = -0.034071285f;
      sa[7] = 0.47369707f;
      sa[8] = 0.13014525f;
      sa[9] = -0.057797953f;
      sa[10] = -0.208012f;
      sa[11] = -0.4245071f;
      sa[12] = 0.11913574f;
      sa[13] = -0.27071372f;
      sa[14] = -0.16143441f;
      sa[15] = 0.10418349f;
      sa[16] = 0.16857925f;
      sa[17] = 0.23335624f;
      sa[18] = -0.083077386f;
      sa[19] = -0.025273448f;
      sa[20] = 0.32686388f;
      sa[21] = -0.18330997f;
      sa[22] = 0.3019412f;
      sa[23] = -0.04828854f;
      sa[24] = 0.31748897f;
      sa[25] = 0.2134217f;
      sa[26] = -0.19487083f;
      sa[27] = 0.42209056f;
      sa[28] = 0.34077734f;
      sa[29] = -0.118103065f;
      sa[30] = -0.13255909f;
      sa[31] = 0.39862916f;
      sa[32] = 0.06466642f;
      sa[33] = -0.37806985f;
      sa[34] = 0.10913106f;
      sa[35] = 0.073972024f;
      sa[36] = 0.10961327f;
      sa[37] = 0.17647296f;
      sa[38] = -0.11068754f;
      sa[39] = 0.11433966f;
      sa[40] = 0.10532216f;
      sa[41] = -0.035083737f;
      sa[42] = -0.07255954f;
      sa[43] = 0.12951164f;
      sa[44] = 0.2916967f;
      sa[45] = -0.2981994f;
      sa[46] = 0.025009532f;
      sa[47] = -0.12578852f;
      sa[48] = 0.29762033f;
      sa[49] = 0.3402992f;
      sa[50] = 0.2957483f;
      sa[51] = -0.26394635f;
      sa[52] = -0.086300924f;
      sa[53] = 0.26627067f;
      sa[54] = 0.32184446f;
      sa[55] = 0.07587968f;
      sa[56] = -0.1386963f;
      sa[57] = -0.2603534f;
      sa[58] = 0.34305513f;
      sa[59] = -0.14735638f;
      sa[60] = -0.37061724f;
      sa[61] = 0.20175014f;
      sa[62] = 0.15949662f;
      sa[63] = 0.029020414f;
      sa[64] = 0.21091282f;
      sa[65] = 0.2066824f;
      sa[66] = 0.080167376f;
      sa[67] = 0.25429994f;
      sa[68] = -0.18784936f;
      sa[69] = 0.043868687f;
      sa[70] = -0.008229627f;
      sa[71] = 0.4190791f;
      sa[72] = -0.11508705f;
      sa[73] = 0.21254516f;
      sa[74] = -0.21533841f;
      sa[75] = 0.10779843f;
      sa[76] = -0.23350641f;
      sa[77] = -0.08495991f;
      sa[78] = -0.1089372f;
      sa[79] = 0.10530423f;
      sa[80] = -0.20531055f;
      sa[81] = -0.1345393f;
      sa[82] = 0.008851113f;
      sa[83] = 0.114173636f;
      sa[84] = -0.053459905f;
      sa[85] = -0.21666138f;
      sa[86] = 0.11691791f;
      sa[87] = 0.22387105f;
      sa[88] = 0.21902283f;
      sa[89] = 0.0503573f;
      sa[90] = -0.13646972f;
      sa[91] = 0.20209429f;
      sa[92] = 0.09645267f;
      sa[93] = -0.24124469f;
      sa[94] = -0.22225167f;
      sa[95] = -0.2891183f;
      sa[96] = 0.1427957f;
      sa[97] = 0.054348f;
      sa[98] = 0.24436286f;
      sa[99] = -0.10501475f;
      sa[100] = -0.06644354f;
      sa[101] = -0.20648691f;
      sa[102] = -0.289017f;
      sa[103] = -0.11959742f;
      sa[104] = 0.019088775f;
      sa[105] = -0.15841591f;
      sa[106] = -0.2031091f;
      sa[107] = 0.111574806f;
      sa[108] = 0.16100629f;
      sa[109] = -0.23134056f;
      sa[110] = -0.18908061f;
      sa[111] = 0.15713438f;
      sa[112] = 0.11402398f;
      sa[113] = -0.0072583132f;
      sa[114] = -0.23069231f;
      sa[115] = -0.09514512f;
      sa[116] = -0.2781453f;
      sa[117] = 0.01926696f;
      sa[118] = -0.24109925f;
      sa[119] = -0.14013316f;
      sa[120] = 0.21071638f;
      sa[121] = 0.2094101f;
      sa[122] = 0.28691202f;
      sa[123] = 0.24335232f;
      sa[124] = 0.26675707f;
      sa[125] = 0.27754176f;
      sa[126] = -0.29997548f;
      sa[127] = -0.296585f;
      sa[128] = 0.07711782f;
      sa[129] = 0.1764018f;
      sa[130] = -0.14942555f;
      sa[131] = 0.33637452f;
      sa[132] = 0.21958247f;
      sa[133] = -0.26622203f;
      sa[134] = 0.11581573f;
      sa[135] = -0.24686325f;
      sa[136] = -0.294857f;
      sa[137] = -0.012240981f;
      sa[138] = 0.1115448f;
      sa[139] = -0.11735027f;
      sa[140] = -0.029448062f;
      sa[141] = -0.0887141f;
      sa[142] = 0.14283048f;
      sa[143] = -0.35771984f;
      sa[144] = 0.27246726f;
      sa[145] = -0.20932473f;
      sa[146] = -0.31250083f;
      sa[147] = 0.21086578f;
      sa[148] = 0.1768178f;
      sa[149] = 0.18606281f;
      sa[150] = 0.29586178f;
      sa[151] = -0.31584182f;
      sa[152] = 0.034448855f;
      sa[153] = 0.1890947f;
      sa[154] = 0.2892591f;
      sa[155] = -0.19242139f;
      sa[156] = 0.12693667f;
      sa[157] = -0.22654553f;
      sa[158] = 0.083680406f;
      sa[159] = 0.05853301f;
      sa[160] = 0.025777286f;
      sa[161] = 0.07745872f;
      sa[162] = -0.032279484f;
      sa[163] = -0.10746547f;
      sa[164] = 0.24303016f;
      sa[165] = -0.051406972f;
      sa[166] = -0.10905355f;
      sa[167] = -0.09003185f;
      sa[168] = 0.1892251f;
      sa[169] = 0.38188374f;
      sa[170] = 0.14066471f;
      sa[171] = -0.09332804f;
      sa[172] = -0.07709844f;
      sa[173] = -0.15169829f;
      sa[174] = -0.051344037f;
      sa[175] = -0.28009906f;
      sa[176] = 0.047807887f;
      sa[177] = 0.033767182f;
      sa[178] = -0.07871968f;
      sa[179] = 0.023467313f;
      sa[180] = -0.07100057f;
      sa[181] = -0.2864008f;
      sa[182] = -0.04789834f;
      sa[183] = 0.13802993f;
      sa[184] = 0.41412428f;
      sa[185] = 0.34897542f;
      sa[186] = -0.122975074f;
      sa[187] = 0.29029176f;
      sa[188] = -0.040417973f;
      sa[189] = 0.13441518f;
      sa[190] = 0.0047365883f;
      sa[191] = 0.15927988f;
      sa[192] = -0.08116601f;
      sa[193] = 0.4046677f;
      sa[194] = 0.28545147f;
      sa[195] = 0.42741916f;
      sa[196] = 0.33837396f;
      sa[197] = -0.09657834f;
      sa[198] = 0.02031128f;
      sa[199] = -0.31842148f;
      sa[200] = 0.040157553f;
      sa[201] = -0.28666115f;
      sa[202] = 0.2210892f;
      sa[203] = -0.048278205f;
      sa[204] = -0.17817421f;
      sa[205] = 0.21647142f;
      sa[206] = 0.12401242f;
      sa[207] = -0.10672037f;
      sa[208] = -0.2819854f;
      sa[209] = -0.09037812f;
      sa[210] = -0.24645275f;
      sa[211] = -0.27110758f;
      sa[212] = 0.298019f;
      sa[213] = -0.103359014f;
      sa[214] = -0.23858456f;
      sa[215] = -0.09577014f;
      sa[216] = 0.15505862f;
      sa[217] = 0.209867f;
      sa[218] = -0.23145561f;
      sa[219] = 0.21983194f;
      sa[220] = -0.21203522f;
      sa[221] = 0.08123386f;
      sa[222] = 0.28078413f;
      sa[223] = 0.09016961f;
      sa[224] = 0.13278966f;
      sa[225] = 0.32643777f;
      sa[226] = -0.25560704f;
      sa[227] = 0.32360736f;
      sa[228] = 0.18298854f;
      sa[229] = 0.13711405f;
      sa[230] = 0.32485592f;
      sa[231] = -0.23056112f;
      sa[232] = -0.28208274f;
      sa[233] = 0.07855264f;
      sa[234] = -0.029110884f;
      sa[235] = -0.2299927f;
      sa[236] = 0.011726459f;
      sa[237] = -0.2041655f;
      sa[238] = -0.18888153f;
      sa[239] = 0.19571355f;
      sa[240] = -0.01446707f;
      sa[241] = -0.2698933f;
      sa[242] = -0.19509462f;
      sa[243] = -0.30290607f;
      sa[244] = -0.1864169f;
      sa[245] = -0.11103855f;
      sa[246] = -0.25725868f;
      sa[247] = -0.036972445f;
      sa[248] = 0.26018012f;
      sa[249] = 0.23305207f;
      sa[250] = -0.22254707f;
      sa[251] = -0.10489907f;
      sa[252] = -0.137504f;
      sa[253] = -0.37116987f;
      sa[254] = -0.6839139f;
      sa[255] = 0.043616746f;
      sa[256] = -0.16362494f;
      sa[257] = 0.26686615f;
      sa[258] = -0.21018532f;
      sa[259] = -0.056534875f;
      sa[260] = -0.079639606f;
      sa[261] = -0.068348944f;
      sa[262] = -0.16683969f;
      sa[263] = 0.23828779f;
      sa[264] = 0.03743285f;
      sa[265] = 0.12878461f;
      sa[266] = -0.13560887f;
      sa[267] = -0.1298206f;
      sa[268] = -0.060854997f;
      sa[269] = -0.27409926f;
      sa[270] = -0.2520263f;
      sa[271] = 0.308779f;
      sa[272] = 0.18223113f;
      sa[273] = 0.081334054f;
      sa[274] = 0.41994765f;
      sa[275] = 0.2571722f;
      sa[276] = -0.2480393f;
      sa[277] = -0.37072435f;
      sa[278] = -0.36152777f;
      sa[279] = -0.04218673f;
      sa[280] = -0.05485668f;
      sa[281] = 0.40965414f;
      sa[282] = -0.061821565f;
      sa[283] = 0.050798673f;
      sa[284] = -0.16533902f;
      sa[285] = -0.21943073f;
      sa[286] = 0.47028816f;
      sa[287] = 0.087577455f;
      sa[288] = -0.28705284f;
      sa[289] = -0.12556173f;
      sa[290] = -0.0056099854f;
      sa[291] = 0.045449175f;
      sa[292] = 0.22529916f;
      sa[293] = 0.012392922f;
      sa[294] = 0.2280621f;
      sa[295] = 0.22429842f;
      sa[296] = 0.14832422f;
      sa[297] = 0.19030406f;
      sa[298] = -0.083741106f;
      sa[299] = -0.03949675f;
      sa[300] = 0.011684808f;
      sa[301] = 0.010199943f;
      sa[302] = 0.27983785f;
      sa[303] = 0.0895924f;
      sa[304] = -0.10998483f;
      sa[305] = 0.03515519f;
      sa[306] = 0.35644352f;
      sa[307] = -0.3387009f;
      sa[308] = 0.058778122f;
      sa[309] = 0.13499773f;
      sa[310] = 0.28522494f;
      sa[311] = 0.20873663f;
      sa[312] = -0.07777232f;
      sa[313] = -0.15070418f;
      sa[314] = -0.03619383f;
      sa[315] = 0.06912314f;
      sa[316] = -0.042344216f;
      sa[317] = -0.0821335f;
      sa[318] = 0.16543552f;
      sa[319] = 0.3483749f;
      sa[320] = -0.04099814f;
      sa[321] = 0.16645586f;
      sa[322] = 0.1702868f;
      sa[323] = -0.1326444f;
      sa[324] = -0.024129068f;
      sa[325] = 0.22438559f;
      sa[326] = -0.27813256f;
      sa[327] = -0.03143128f;
      sa[328] = -0.04201917f;
      sa[329] = 0.2550601f;
      sa[330] = -0.2027052f;
      sa[331] = 0.05198121f;
      sa[332] = -0.2889707f;
      sa[333] = 0.13268976f;
      sa[334] = -0.08152512f;
      sa[335] = 0.13615873f;
      sa[336] = -0.17788847f;
      sa[337] = -0.18431208f;
      sa[338] = 0.30331945f;
      sa[339] = -0.21557099f;
      sa[340] = -0.35405874f;
      sa[341] = -0.31186724f;
      sa[342] = 0.3285046f;
      sa[343] = -0.14611676f;
      sa[344] = -0.17531587f;
      sa[345] = 0.24858244f;
      sa[346] = 0.21758495f;
      sa[347] = -0.13583493f;
      sa[348] = 0.28859198f;
      sa[349] = -0.27435103f;
      sa[350] = -0.19214705f;
      sa[351] = 0.15356031f;
      sa[352] = 0.23857813f;
      sa[353] = 0.036235355f;
      sa[354] = 0.10093805f;
      sa[355] = 0.21824501f;
      sa[356] = -0.17096435f;
      sa[357] = 0.19645703f;
      sa[358] = -0.24367267f;
      sa[359] = 0.07123127f;
      sa[360] = 0.14910147f;
      sa[361] = -0.10227049f;
      sa[362] = -0.19238186f;
      sa[363] = 0.2671491f;
      sa[364] = -0.14563218f;
      sa[365] = -0.22816196f;
      sa[366] = 0.010343027f;
      sa[367] = -0.36151773f;
      sa[368] = -0.14127795f;
      sa[369] = 0.08460872f;
      sa[370] = -0.15609077f;
      sa[371] = 0.17681304f;
      sa[372] = -0.02046011f;
      sa[373] = 0.3194491f;
      sa[374] = -0.11758177f;
      sa[375] = -0.34486905f;
      sa[376] = -0.43416446f;
      sa[377] = -0.43993303f;
      sa[378] = 0.4656366f;
      sa[379] = 0.047204453f;
      sa[380] = -0.15523311f;
      sa[381] = -0.14058791f;
      sa[382] = -0.060948502f;
      sa[383] = -0.1620553f;
      sa[384] = -0.12461743f;
      sa[385] = 0.20549317f;
      sa[386] = -0.11966783f;
      sa[387] = -0.2254429f;
      sa[388] = 0.06335525f;
      sa[389] = -0.016472049f;
      sa[390] = -0.021026965f;
      sa[391] = -0.16390564f;
      sa[392] = 0.4291689f;
      sa[393] = 0.31729594f;
      sa[394] = -0.11408316f;
      sa[395] = 0.18823245f;
      sa[396] = 0.3818491f;
      sa[397] = -0.21303864f;
      sa[398] = 0.11644016f;
      sa[399] = 0.13303797f;
      sa[400] = 0.1528796f;
      sa[401] = 0.24702379f;
      sa[402] = -0.18836816f;
      sa[403] = 0.039927576f;
      sa[404] = 0.30158353f;
      sa[405] = -0.18959782f;
      sa[406] = -0.06739351f;
      sa[407] = 0.26320794f;
      sa[408] = -0.22554007f;
      sa[409] = -0.2763871f;
      sa[410] = -0.15052456f;
      sa[411] = 0.18717678f;
      sa[412] = -0.13761315f;
      sa[413] = 0.16608681f;
      sa[414] = -0.028533887f;
      sa[415] = 0.35770103f;
      sa[416] = -0.18221624f;
      sa[417] = 0.022280434f;
      sa[418] = 0.020420223f;
      sa[419] = 0.28794655f;
      sa[420] = 0.22714448f;
      sa[421] = 0.25376973f;
      sa[422] = 0.14257799f;
      sa[423] = -0.06162595f;
      sa[424] = 0.11671555f;
      sa[425] = -0.11642693f;
      sa[426] = -0.31990167f;
      sa[427] = 0.18177463f;
      sa[428] = -0.041000895f;
      sa[429] = -0.1095857f;
      sa[430] = 0.12574662f;
      sa[431] = -0.07358017f;
      sa[432] = -0.06278075f;
      sa[433] = 0.1285006f;
      sa[434] = 0.2527919f;
      sa[435] = 0.035215233f;
      sa[436] = -0.34980798f;
      sa[437] = -0.33020404f;
      sa[438] = -0.09126542f;
      sa[439] = -0.09175247f;
      sa[440] = 0.32012185f;
      sa[441] = -0.3326982f;
      sa[442] = 0.1582053f;
      sa[443] = 0.024829548f;
      sa[444] = -0.29069147f;
      sa[445] = 0.008329764f;
      sa[446] = 0.15224649f;
      sa[447] = 0.026516147f;
      sa[448] = 0.13072717f;
      sa[449] = 0.26782838f;
      sa[450] = -0.105159506f;
      sa[451] = 0.18136829f;
      sa[452] = 0.16341373f;
      sa[453] = -0.095555805f;
      sa[454] = -0.23074323f;
      sa[455] = -0.07750554f;
      sa[456] = -0.0971602f;
      sa[457] = 0.13252465f;
      sa[458] = -0.22889997f;
      sa[459] = 0.29907164f;
      sa[460] = 0.19942607f;
      sa[461] = 0.26694515f;
      sa[462] = 0.012673871f;
      sa[463] = 0.20548004f;
      sa[464] = -0.2687308f;
      sa[465] = 0.24986f;
      sa[466] = 0.09176734f;
      sa[467] = 0.1165882f;
      sa[468] = 0.08008182f;
      sa[469] = 0.3278975f;
      sa[470] = 0.18817098f;
      sa[471] = 0.05073736f;
      sa[472] = -0.002793949f;
      sa[473] = -0.16724376f;
      sa[474] = -0.10766547f;
      sa[475] = 0.054724846f;
      sa[476] = 0.25534707f;
      sa[477] = -0.10912674f;
      sa[478] = 0.11225003f;
      sa[479] = -0.25079316f;
      sa[480] = -0.350049f;
      sa[481] = -0.28078705f;
      sa[482] = -0.34993625f;
      sa[483] = 0.17458193f;
      sa[484] = 0.2561898f;
      sa[485] = 0.25041318f;
      sa[486] = 0.066173255f;
      sa[487] = -0.1930607f;
      sa[488] = -0.2210674f;
      sa[489] = 0.106848694f;
      sa[490] = -0.04938557f;
      sa[491] = -0.25304005f;
      sa[492] = 0.24076849f;
      sa[493] = 0.3081308f;
      sa[494] = -0.14435802f;
      sa[495] = 0.45206803f;
      sa[496] = -0.0017838364f;
      sa[497] = 0.10394257f;
      sa[498] = 0.1707388f;
      sa[499] = 0.1828366f;
      sa[500] = -0.03300485f;
      sa[501] = 0.08046123f;
      sa[502] = 0.28586623f;
      sa[503] = 0.19706534f;
      sa[504] = -0.18908805f;
      sa[505] = -0.18065235f;
      sa[506] = 0.2997051f;
      sa[507] = -0.052146703f;
      sa[508] = 0.1117352f;
      sa[509] = 0.25292984f;
      sa[510] = 0.21343113f;
      sa[511] = 0.10405385f;
      sa[512] = 0.052012417f;
      sa[513] = 0.05662741f;
      sa[514] = 0.21980281f;
      sa[515] = -0.017328523f;
      sa[516] = 0.042671233f;
      sa[517] = 0.1232542f;
      sa[518] = 0.18133946f;
      sa[519] = -0.043103352f;
      sa[520] = 0.27168062f;
      sa[521] = 0.2079456f;
      sa[522] = -0.014403825f;
      sa[523] = 0.0773105f;
      sa[524] = 0.23091517f;
      sa[525] = 0.20311378f;
      sa[526] = 0.04264196f;
      sa[527] = -0.11282005f;
      sa[528] = 0.0274024f;
      sa[529] = 0.07269266f;
      sa[530] = -0.29867733f;
      sa[531] = -0.05673883f;
      sa[532] = 0.15870161f;
      sa[533] = 0.12042285f;
      sa[534] = 0.15082836f;
      sa[535] = -0.10728538f;
      sa[536] = 0.09227216f;
      sa[537] = -0.11522056f;
      sa[538] = 0.12961134f;
      sa[539] = 0.28314596f;
      sa[540] = -0.2644737f;
      sa[541] = -0.198023f;
      sa[542] = -0.10517004f;
      sa[543] = -0.35684103f;
      sa[544] = 0.14611146f;
      sa[545] = 0.08129374f;
      sa[546] = 0.008907812f;
      sa[547] = 0.18060082f;
      sa[548] = 0.09316462f;
      sa[549] = 0.14199573f;
      sa[550] = 0.06270412f;
      sa[551] = -0.24911045f;
      sa[552] = 0.022787446f;
      sa[553] = -0.09839778f;
      sa[554] = -0.19976734f;
      sa[555] = -0.20529479f;
      sa[556] = -0.23772547f;
      sa[557] = -0.34784776f;
      sa[558] = -0.08023748f;
      sa[559] = 0.20643917f;
      sa[560] = -0.33833298f;
      sa[561] = -0.09464797f;
      sa[562] = 0.17779967f;
      sa[563] = -0.037544012f;
      sa[564] = 0.28624818f;
      sa[565] = 0.11894167f;
      sa[566] = 0.40499917f;
      sa[567] = 0.06810637f;
      sa[568] = -0.0744053f;
      sa[569] = 0.09015172f;
      sa[570] = -0.038405526f;
      sa[571] = -0.026550371f;
      sa[572] = -0.16749273f;
      sa[573] = 0.03505699f;
      sa[574] = 0.37442634f;
      sa[575] = -0.20615157f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_11_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.50984734f;
      sa[1] = 0.051910456f;
      sa[2] = -0.12515616f;
      sa[3] = -0.16818011f;
      sa[4] = 0.06195275f;
      sa[5] = 0.020706493f;
      sa[6] = 0.21141878f;
      sa[7] = 0.017199261f;
      sa[8] = -0.20722197f;
      sa[9] = 0.19644813f;
      sa[10] = -0.21787193f;
      sa[11] = 0.16364673f;
      sa[12] = 0.13760501f;
      sa[13] = 0.087021925f;
      sa[14] = -0.22967778f;
      sa[15] = 0.41207296f;
      sa[16] = 0.48438746f;
      sa[17] = -0.122525014f;
      sa[18] = 0.022310797f;
      sa[19] = -0.017676093f;
      sa[20] = 0.32329127f;
      sa[21] = 0.0033733605f;
      sa[22] = -0.16396822f;
      sa[23] = 0.206974f;
      sa[24] = -0.3132492f;
      sa[25] = 0.19473249f;
      sa[26] = -0.08916902f;
      sa[27] = 0.36855134f;
      sa[28] = -0.36500347f;
      sa[29] = -0.16572192f;
      sa[30] = 0.088993296f;
      sa[31] = -0.23052087f;
      sa[32] = -0.37886423f;
      sa[33] = -0.46302554f;
      sa[34] = 9.470591E-4f;
      sa[35] = 0.3468219f;
      sa[36] = -0.123394266f;
      sa[37] = -0.05939133f;
      sa[38] = 0.094023794f;
      sa[39] = 0.12745427f;
      sa[40] = -0.24809961f;
      sa[41] = -0.3954535f;
      sa[42] = -0.3326132f;
      sa[43] = -0.43989938f;
      sa[44] = -0.019159986f;
      sa[45] = -0.3917949f;
      sa[46] = 0.25607783f;
      sa[47] = 0.28330454f;
      sa[48] = -0.36185643f;
      sa[49] = -0.2623675f;
      sa[50] = 0.083956964f;
      sa[51] = -0.07725917f;
      sa[52] = 0.21264873f;
      sa[53] = 0.16971801f;
      sa[54] = -0.10206288f;
      sa[55] = 0.40555763f;
      sa[56] = -0.28724226f;
      sa[57] = -0.33753154f;
      sa[58] = 0.028986279f;
      sa[59] = -0.02819838f;
      sa[60] = 0.35826957f;
      sa[61] = -0.20530549f;
      sa[62] = -0.09477551f;
      sa[63] = 0.22786891f;
      sa[64] = 0.34405226f;
      sa[65] = -0.1879711f;
      sa[66] = 0.13323323f;
      sa[67] = 0.35386845f;
      sa[68] = 0.17087196f;
      sa[69] = -0.32552013f;
      sa[70] = -0.46823883f;
      sa[71] = -0.13040379f;
      sa[72] = -0.38037607f;
      sa[73] = 0.25462425f;
      sa[74] = 0.43137845f;
      sa[75] = -4.4719607E-4f;
      sa[76] = 0.2117066f;
      sa[77] = 0.1374705f;
      sa[78] = -0.3695164f;
      sa[79] = 0.3085697f;
      sa[80] = -0.22234914f;
      sa[81] = 0.036288593f;
      sa[82] = 0.20858617f;
      sa[83] = -0.15651418f;
      sa[84] = -0.43969044f;
      sa[85] = -0.37063295f;
      sa[86] = 0.08175977f;
      sa[87] = 0.32432473f;
      sa[88] = -0.44147024f;
      sa[89] = -0.14350197f;
      sa[90] = -0.32398033f;
      sa[91] = 0.39657757f;
      sa[92] = -0.092292644f;
      sa[93] = 0.05414195f;
      sa[94] = -0.43733326f;
      sa[95] = -0.09703089f;
      sa[96] = -0.25177944f;
      sa[97] = 0.021612462f;
      sa[98] = -0.06324963f;
      sa[99] = 0.10768099f;
      sa[100] = -0.34821028f;
      sa[101] = -0.2022128f;
      sa[102] = 0.291017f;
      sa[103] = 0.044870846f;
      sa[104] = -0.056774296f;
      sa[105] = -0.17688529f;
      sa[106] = 0.29283482f;
      sa[107] = 0.29076633f;
      sa[108] = 0.21424636f;
      sa[109] = 0.025827572f;
      sa[110] = 0.17563632f;
      sa[111] = -0.22439726f;
      sa[112] = -0.43944347f;
      sa[113] = -0.029875018f;
      sa[114] = 0.04266974f;
      sa[115] = -0.1373207f;
      sa[116] = 0.2512697f;
      sa[117] = -0.05517277f;
      sa[118] = -0.40048873f;
      sa[119] = -0.23217456f;
      sa[120] = -0.19384518f;
      sa[121] = 0.21843036f;
      sa[122] = -0.03323914f;
      sa[123] = 0.07597472f;
      sa[124] = -0.2353672f;
      sa[125] = 0.18122736f;
      sa[126] = -0.31123167f;
      sa[127] = 0.1103765f;
      sa[128] = -0.56365544f;
      sa[129] = 0.15223685f;
      sa[130] = -0.12216327f;
      sa[131] = 0.17743935f;
      sa[132] = 0.09126143f;
      sa[133] = 0.18194366f;
      sa[134] = 0.19946407f;
      sa[135] = -0.42628485f;
      sa[136] = 0.09543605f;
      sa[137] = -0.18084398f;
      sa[138] = 0.0753169f;
      sa[139] = 0.3010643f;
      sa[140] = -0.17839076f;
      sa[141] = -0.096966654f;
      sa[142] = 0.010983211f;
      sa[143] = -0.24499242f;
      sa[144] = 0.26763007f;
      sa[145] = -0.18800035f;
      sa[146] = 0.07385175f;
      sa[147] = -0.02916683f;
      sa[148] = -0.22385097f;
      sa[149] = 0.40637937f;
      sa[150] = -0.19377103f;
      sa[151] = -0.6406439f;
      sa[152] = 0.49278343f;
      sa[153] = -0.032415587f;
      sa[154] = 0.3673164f;
      sa[155] = -0.474241f;
      sa[156] = -0.35563686f;
      sa[157] = -0.27607924f;
      sa[158] = -0.07959997f;
      sa[159] = -0.28130916f;
      sa[160] = 0.24339792f;
      sa[161] = -0.35797077f;
      sa[162] = 0.39245218f;
      sa[163] = -0.28390953f;
      sa[164] = 0.13485532f;
      sa[165] = -0.25402594f;
      sa[166] = 0.28745118f;
      sa[167] = -0.42478853f;
      sa[168] = 0.15148094f;
      sa[169] = -0.519912f;
      sa[170] = 0.2954327f;
      sa[171] = 0.2164342f;
      sa[172] = 0.31758943f;
      sa[173] = 0.37475342f;
      sa[174] = -0.11834206f;
      sa[175] = -0.037542038f;
      sa[176] = 0.0078442525f;
      sa[177] = 0.24717855f;
      sa[178] = -0.2357985f;
      sa[179] = -0.037224986f;
      sa[180] = -0.31284624f;
      sa[181] = -0.1655576f;
      sa[182] = 0.028349191f;
      sa[183] = 0.09177041f;
      sa[184] = 0.47520489f;
      sa[185] = 0.32862836f;
      sa[186] = -0.10633142f;
      sa[187] = -0.14599879f;
      sa[188] = -0.062876835f;
      sa[189] = -0.17260388f;
      sa[190] = -0.1532636f;
      sa[191] = -0.020723548f;
      sa[192] = -0.12005942f;
      sa[193] = 0.12617336f;
      sa[194] = -0.27187222f;
      sa[195] = -0.25832528f;
      sa[196] = 0.16269368f;
      sa[197] = -0.12547326f;
      sa[198] = 0.076626785f;
      sa[199] = 0.38177088f;
      sa[200] = -0.013098775f;
      sa[201] = 0.26634094f;
      sa[202] = 0.30378997f;
      sa[203] = -0.37209123f;
      sa[204] = 0.10448588f;
      sa[205] = 0.33943668f;
      sa[206] = -0.144864f;
      sa[207] = 0.16981678f;
      sa[208] = -0.3233626f;
      sa[209] = 0.091376536f;
      sa[210] = -0.13496946f;
      sa[211] = -0.32402748f;
      sa[212] = -0.43688917f;
      sa[213] = -0.07811001f;
      sa[214] = -0.37912396f;
      sa[215] = -0.14395714f;
      sa[216] = 0.06528743f;
      sa[217] = 0.2639478f;
      sa[218] = -0.012878909f;
      sa[219] = 0.059509855f;
      sa[220] = 0.12604089f;
      sa[221] = -0.09040244f;
      sa[222] = -0.34579772f;
      sa[223] = -0.396958f;
      sa[224] = 0.37296924f;
      sa[225] = 0.051722266f;
      sa[226] = -0.0073663066f;
      sa[227] = 0.040275257f;
      sa[228] = -0.132789f;
      sa[229] = -0.28708857f;
      sa[230] = -0.2758784f;
      sa[231] = -0.17854236f;
      sa[232] = 0.37943757f;
      sa[233] = -0.18122602f;
      sa[234] = -0.30595157f;
      sa[235] = -0.015269818f;
      sa[236] = -0.33226338f;
      sa[237] = 0.58610225f;
      sa[238] = 0.16315693f;
      sa[239] = -0.15049742f;
      sa[240] = -0.15050298f;
      sa[241] = -0.4847417f;
      sa[242] = -0.2091293f;
      sa[243] = 0.34723184f;
      sa[244] = 0.16600727f;
      sa[245] = 0.37740442f;
      sa[246] = 0.30791625f;
      sa[247] = -0.5001693f;
      sa[248] = -0.21518026f;
      sa[249] = 0.09145786f;
      sa[250] = 0.27610382f;
      sa[251] = 0.34738827f;
      sa[252] = 0.16439089f;
      sa[253] = -0.33128312f;
      sa[254] = 0.3238272f;
      sa[255] = 0.05791245f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_11_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_ReLU_11_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.08173356f;
      sa[1] = -1.555042f;
      sa[2] = -1.561801f;
      sa[3] = 1.3330642f;
      sa[4] = 0.3674607f;
      sa[5] = -0.23790158f;
      sa[6] = -1.6433696f;
      sa[7] = 1.4770889f;
      sa[8] = 1.7259191f;
      sa[9] = 0.09852545f;
      sa[10] = 1.5794811f;
      sa[11] = 1.3378173f;
      sa[12] = 1.8082943f;
      sa[13] = -0.5599311f;
      sa[14] = -1.9906521f;
      sa[15] = -0.6947507f;
      sa[16] = 0.7400399f;
      sa[17] = -0.7835269f;
      sa[18] = -1.4817693f;
      sa[19] = -0.9345999f;
      sa[20] = -1.9393678f;
      sa[21] = 0.24146602f;
      sa[22] = -1.9366889f;
      sa[23] = -0.5825735f;
      sa[24] = -0.51259124f;
      sa[25] = 1.903412f;
      sa[26] = -0.32083932f;
      sa[27] = 1.1841638f;
      sa[28] = 1.1671411f;
      sa[29] = -0.70461404f;
      sa[30] = 0.13902196f;
      sa[31] = 0.16516182f;
      sa[32] = 0.40399754f;
      sa[33] = 0.04096071f;
      sa[34] = -0.6468615f;
      sa[35] = 0.8243586f;
      sa[36] = 0.4509711f;
      sa[37] = -1.3452997f;
      sa[38] = 0.5460157f;
      sa[39] = -0.20756683f;
      sa[40] = 0.25176495f;
      sa[41] = -0.61874974f;
      sa[42] = 0.5205355f;
      sa[43] = -0.043606382f;
      sa[44] = 0.85445815f;
      sa[45] = -1.967081f;
      sa[46] = -2.2698298f;
      sa[47] = 0.04977187f;
      sa[48] = 1.6043907f;
      sa[49] = -0.19074395f;
      sa[50] = -0.4711017f;
      sa[51] = 1.7648143f;
      sa[52] = -1.6318504f;
      sa[53] = 0.97138053f;
      sa[54] = 1.7359431f;
      sa[55] = 1.059051f;
      sa[56] = -0.6221317f;
      sa[57] = -0.22880177f;
      sa[58] = 1.0006062f;
      sa[59] = 0.8357994f;
      sa[60] = -1.3446529f;
      sa[61] = 0.90378255f;
      sa[62] = -0.34854698f;
      sa[63] = -0.88895816f;
      sa[64] = 0.99860394f;
      sa[65] = -0.8759109f;
      sa[66] = -1.7261772f;
      sa[67] = -0.08212825f;
      sa[68] = 0.9046516f;
      sa[69] = -1.3227434f;
      sa[70] = -1.581797f;
      sa[71] = -0.02531267f;
      sa[72] = -0.9514008f;
      sa[73] = -1.168783f;
      sa[74] = -1.0470136f;
      sa[75] = 1.3739111f;
      sa[76] = 1.9421593f;
      sa[77] = -0.59122765f;
      sa[78] = -1.3039824f;
      sa[79] = -0.37906435f;
      sa[80] = 0.51769763f;
      sa[81] = -1.6989447f;
      sa[82] = -0.22830918f;
      sa[83] = -1.4151273f;
      sa[84] = 1.5324116f;
      sa[85] = 1.0322505f;
      sa[86] = -1.9858932f;
      sa[87] = 0.99485034f;
      sa[88] = -1.6649309f;
      sa[89] = -1.0974993f;
      sa[90] = 0.23265423f;
      sa[91] = 0.009729262f;
      sa[92] = 1.2665181f;
      sa[93] = 1.845671f;
      sa[94] = 1.5013772f;
      sa[95] = 0.60522693f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_11 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_11_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_11_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_11_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_ReLU_11_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


