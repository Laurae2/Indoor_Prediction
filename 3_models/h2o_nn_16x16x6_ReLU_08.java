/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:08:25.105+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_08

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_08 > h2o_nn_16x16x6_ReLU_08.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_08.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_08", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_08 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_08_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_08_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_08_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_08_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_08_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_08_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_08_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_08_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_08_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_08_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_08_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_08_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_08.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_08_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.24528301886792453,0.12264150943396226,0.12264150943396226,0.1320754716981132,0.24528301886792453,0.1320754716981132};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_08() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-7636381691586617024L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_08_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_08_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_08_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_08_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_08_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_08_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_08_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_08_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_08_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_08_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_08_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.6244536267604075;
      sa[1] = 0.6405133446725931;
      sa[2] = 0.5958886417571901;
      sa[3] = 0.3663506863420117;
      sa[4] = 0.47866718480565484;
      sa[5] = 0.5490969450328255;
      sa[6] = 0.9190127271291431;
      sa[7] = 0.5868357665647588;
      sa[8] = 0.5721161709532973;
      sa[9] = 0.5275203858750859;
      sa[10] = 0.566249767483728;
      sa[11] = 0.4239475238562205;
      sa[12] = 0.2863163802822852;
      sa[13] = 0.39663439017201235;
      sa[14] = 0.5508350185375729;
      sa[15] = 0.5638647581821508;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_08_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_08_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.0923621298380317;
      sa[1] = 1.0467196379761856;
      sa[2] = 0.8746883321902543;
      sa[3] = 1.014203454652308;
      sa[4] = 0.9471462982968804;
      sa[5] = 0.9777730546585197;
      sa[6] = 0.975893502317887;
      sa[7] = 0.8478007163919006;
      sa[8] = 0.8739849926444786;
      sa[9] = 1.0208478210195016;
      sa[10] = 0.9209839835793274;
      sa[11] = 1.1206499414707316;
      sa[12] = 1.017678473708736;
      sa[13] = 0.8339421421119034;
      sa[14] = 0.9803935803923796;
      sa[15] = 0.9634400214423884;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_08_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_08_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.08070387246464668;
      sa[1] = 0.010418978779798223;
      sa[2] = -0.04326074221518595;
      sa[3] = -0.0022093953277473816;
      sa[4] = 0.07897389727070626;
      sa[5] = -0.05599567618271902;
    }
  }
}
class h2o_nn_16x16x6_ReLU_08_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_08_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_08_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.11982367f;
      sa[1] = 0.17214844f;
      sa[2] = 0.047378346f;
      sa[3] = 0.07949001f;
      sa[4] = -0.09135428f;
      sa[5] = -0.13911082f;
      sa[6] = 0.036438964f;
      sa[7] = 0.4093949f;
      sa[8] = 0.13931748f;
      sa[9] = -0.11614024f;
      sa[10] = -0.19543982f;
      sa[11] = -0.25692794f;
      sa[12] = 0.09452831f;
      sa[13] = -0.28004348f;
      sa[14] = -0.16584882f;
      sa[15] = 0.078777395f;
      sa[16] = 0.056329563f;
      sa[17] = 0.21599132f;
      sa[18] = -0.21929589f;
      sa[19] = 0.04487712f;
      sa[20] = 0.2997561f;
      sa[21] = -0.24365059f;
      sa[22] = 0.33555067f;
      sa[23] = -0.088607766f;
      sa[24] = 0.20758973f;
      sa[25] = 0.16812621f;
      sa[26] = -0.26282087f;
      sa[27] = 0.4642678f;
      sa[28] = 0.279948f;
      sa[29] = -0.24198651f;
      sa[30] = -0.1550678f;
      sa[31] = 0.26400673f;
      sa[32] = 0.15484755f;
      sa[33] = -0.28535816f;
      sa[34] = 0.17986271f;
      sa[35] = -0.032436453f;
      sa[36] = 0.22494453f;
      sa[37] = 0.28100646f;
      sa[38] = -0.19682957f;
      sa[39] = 0.23337248f;
      sa[40] = 0.08974675f;
      sa[41] = -0.07057565f;
      sa[42] = -0.111842334f;
      sa[43] = 0.05273641f;
      sa[44] = 0.36132726f;
      sa[45] = -0.29114076f;
      sa[46] = -0.0625584f;
      sa[47] = -0.09154882f;
      sa[48] = 0.23882733f;
      sa[49] = 0.25733262f;
      sa[50] = 0.22715363f;
      sa[51] = -0.3289228f;
      sa[52] = -0.113833986f;
      sa[53] = 0.18068585f;
      sa[54] = 0.3240692f;
      sa[55] = -0.1810814f;
      sa[56] = -0.1414328f;
      sa[57] = -0.24437743f;
      sa[58] = 0.34417248f;
      sa[59] = -0.20076297f;
      sa[60] = -0.4164943f;
      sa[61] = 0.11294841f;
      sa[62] = 0.22803384f;
      sa[63] = 0.07563102f;
      sa[64] = 0.16171512f;
      sa[65] = 0.18037727f;
      sa[66] = 0.018536786f;
      sa[67] = 0.18656154f;
      sa[68] = -0.19095744f;
      sa[69] = 0.0028388544f;
      sa[70] = 0.0782211f;
      sa[71] = 0.4617814f;
      sa[72] = -0.24986832f;
      sa[73] = 0.23922129f;
      sa[74] = -0.12652066f;
      sa[75] = -3.704661E-4f;
      sa[76] = -0.24278171f;
      sa[77] = -0.04459058f;
      sa[78] = -0.06740988f;
      sa[79] = 0.076828785f;
      sa[80] = -0.27543727f;
      sa[81] = -0.21543077f;
      sa[82] = -0.030468581f;
      sa[83] = 0.12187672f;
      sa[84] = 0.055594638f;
      sa[85] = -0.11451026f;
      sa[86] = 0.22252566f;
      sa[87] = 0.25167653f;
      sa[88] = 0.23835361f;
      sa[89] = 0.063525364f;
      sa[90] = -0.17141034f;
      sa[91] = 0.36207736f;
      sa[92] = 0.14311828f;
      sa[93] = -0.2500787f;
      sa[94] = -0.1894124f;
      sa[95] = -0.27995005f;
      sa[96] = 0.237149f;
      sa[97] = 0.048935067f;
      sa[98] = 0.18081662f;
      sa[99] = -0.23979504f;
      sa[100] = -0.020365197f;
      sa[101] = -0.20481184f;
      sa[102] = -0.23719776f;
      sa[103] = -0.14048195f;
      sa[104] = -0.009838384f;
      sa[105] = -0.17466326f;
      sa[106] = -0.2621178f;
      sa[107] = 0.1232971f;
      sa[108] = 0.20842563f;
      sa[109] = -0.3249542f;
      sa[110] = -0.21368055f;
      sa[111] = -0.019208958f;
      sa[112] = 0.1361079f;
      sa[113] = -0.023993699f;
      sa[114] = -0.20019874f;
      sa[115] = -0.017124945f;
      sa[116] = -0.2860405f;
      sa[117] = 0.032728486f;
      sa[118] = -0.21349281f;
      sa[119] = -0.10998613f;
      sa[120] = 0.18141901f;
      sa[121] = 0.17390117f;
      sa[122] = 0.2582427f;
      sa[123] = 0.26213062f;
      sa[124] = 0.18250437f;
      sa[125] = 0.27823526f;
      sa[126] = -0.22512156f;
      sa[127] = -0.27383277f;
      sa[128] = 0.068055324f;
      sa[129] = 0.19059588f;
      sa[130] = -0.13706182f;
      sa[131] = 0.42656288f;
      sa[132] = 0.13809651f;
      sa[133] = -0.275001f;
      sa[134] = 0.13691105f;
      sa[135] = -0.22277021f;
      sa[136] = -0.33177525f;
      sa[137] = -0.042074904f;
      sa[138] = 0.07137813f;
      sa[139] = -0.10573349f;
      sa[140] = -0.045451544f;
      sa[141] = -0.0757043f;
      sa[142] = 0.1427638f;
      sa[143] = -0.29449016f;
      sa[144] = 0.31842715f;
      sa[145] = -0.29905185f;
      sa[146] = -0.298225f;
      sa[147] = 0.20928225f;
      sa[148] = 0.17513084f;
      sa[149] = 0.14145812f;
      sa[150] = 0.3099238f;
      sa[151] = -0.25833967f;
      sa[152] = 0.030007116f;
      sa[153] = 0.26630026f;
      sa[154] = 0.24292074f;
      sa[155] = -0.1596361f;
      sa[156] = 0.12686206f;
      sa[157] = -0.2766859f;
      sa[158] = 0.08372097f;
      sa[159] = 0.08046425f;
      sa[160] = -0.043795932f;
      sa[161] = 0.13640086f;
      sa[162] = -0.023044478f;
      sa[163] = -0.14525978f;
      sa[164] = 0.2732399f;
      sa[165] = -0.009897172f;
      sa[166] = -0.043025773f;
      sa[167] = -0.0021478464f;
      sa[168] = 0.15113293f;
      sa[169] = 0.32977757f;
      sa[170] = 0.11796869f;
      sa[171] = -0.12563786f;
      sa[172] = -0.0952056f;
      sa[173] = -0.18360434f;
      sa[174] = -0.0890658f;
      sa[175] = -0.28652447f;
      sa[176] = 0.018980786f;
      sa[177] = 0.039023954f;
      sa[178] = -0.09982603f;
      sa[179] = 0.10085918f;
      sa[180] = -0.05661976f;
      sa[181] = -0.24059199f;
      sa[182] = -0.11464089f;
      sa[183] = 0.24799915f;
      sa[184] = 0.33664945f;
      sa[185] = 0.23927505f;
      sa[186] = -0.29270077f;
      sa[187] = 0.089153275f;
      sa[188] = -0.0035986481f;
      sa[189] = 0.22382833f;
      sa[190] = 0.019110113f;
      sa[191] = 0.01449114f;
      sa[192] = -0.095236115f;
      sa[193] = 0.31170222f;
      sa[194] = 0.14738134f;
      sa[195] = 0.3882231f;
      sa[196] = 0.4328833f;
      sa[197] = -0.01834153f;
      sa[198] = 0.08480845f;
      sa[199] = -0.37787697f;
      sa[200] = 0.034810606f;
      sa[201] = -0.31521422f;
      sa[202] = 0.14866716f;
      sa[203] = -0.08661414f;
      sa[204] = -0.17302069f;
      sa[205] = 0.22456124f;
      sa[206] = 0.25052226f;
      sa[207] = 0.08601141f;
      sa[208] = -0.25261247f;
      sa[209] = -0.06264452f;
      sa[210] = -0.2555404f;
      sa[211] = -0.22944698f;
      sa[212] = 0.28126603f;
      sa[213] = -0.25065476f;
      sa[214] = -0.19659247f;
      sa[215] = -0.13139051f;
      sa[216] = 0.060831476f;
      sa[217] = 0.15926728f;
      sa[218] = -0.09757799f;
      sa[219] = 0.07406847f;
      sa[220] = -0.20710416f;
      sa[221] = 0.17747667f;
      sa[222] = 0.29933804f;
      sa[223] = 0.076320164f;
      sa[224] = 0.13021898f;
      sa[225] = 0.3104694f;
      sa[226] = -0.19898367f;
      sa[227] = 0.38438606f;
      sa[228] = 0.26974794f;
      sa[229] = 0.26012677f;
      sa[230] = 0.41370264f;
      sa[231] = -0.20772822f;
      sa[232] = -0.28886294f;
      sa[233] = 0.07441726f;
      sa[234] = 0.09856445f;
      sa[235] = -0.16118771f;
      sa[236] = 0.018698948f;
      sa[237] = -0.2342641f;
      sa[238] = -0.21376441f;
      sa[239] = 0.13959496f;
      sa[240] = 0.20327345f;
      sa[241] = -0.17467122f;
      sa[242] = -0.15623967f;
      sa[243] = -0.38606197f;
      sa[244] = -0.1246954f;
      sa[245] = -0.06599567f;
      sa[246] = -0.1622015f;
      sa[247] = -0.008895392f;
      sa[248] = 0.19027376f;
      sa[249] = 0.14722481f;
      sa[250] = -0.32983524f;
      sa[251] = -0.13267012f;
      sa[252] = -0.19588791f;
      sa[253] = -0.30389413f;
      sa[254] = -0.33955622f;
      sa[255] = 0.15815176f;
      sa[256] = -0.19237603f;
      sa[257] = 0.26166078f;
      sa[258] = -0.2758137f;
      sa[259] = -0.1440275f;
      sa[260] = -0.104052365f;
      sa[261] = -0.056117572f;
      sa[262] = -0.25346047f;
      sa[263] = 0.34133062f;
      sa[264] = -0.15345575f;
      sa[265] = 0.039404187f;
      sa[266] = -0.30559546f;
      sa[267] = -0.26691636f;
      sa[268] = 0.08894687f;
      sa[269] = -0.23873532f;
      sa[270] = 0.0848943f;
      sa[271] = 0.15581487f;
      sa[272] = -0.038743176f;
      sa[273] = -0.09021519f;
      sa[274] = 0.15797855f;
      sa[275] = 0.01789396f;
      sa[276] = -0.020267598f;
      sa[277] = -0.45672292f;
      sa[278] = -0.074975245f;
      sa[279] = 0.13429135f;
      sa[280] = -0.16737814f;
      sa[281] = 0.32466125f;
      sa[282] = -0.13782227f;
      sa[283] = -0.034143835f;
      sa[284] = -0.032925628f;
      sa[285] = -0.322419f;
      sa[286] = 0.4594754f;
      sa[287] = 0.2913106f;
      sa[288] = -0.3171229f;
      sa[289] = -0.20694235f;
      sa[290] = -0.11727504f;
      sa[291] = 0.38274565f;
      sa[292] = 0.17475802f;
      sa[293] = -0.034097023f;
      sa[294] = 0.14100882f;
      sa[295] = 0.12589557f;
      sa[296] = 0.19200999f;
      sa[297] = 0.07356333f;
      sa[298] = -0.095003255f;
      sa[299] = -0.46560752f;
      sa[300] = 0.004752143f;
      sa[301] = -0.04432902f;
      sa[302] = 0.20851563f;
      sa[303] = 0.028002191f;
      sa[304] = -0.1798107f;
      sa[305] = -0.06876424f;
      sa[306] = 0.15564267f;
      sa[307] = -0.2556659f;
      sa[308] = 0.060368493f;
      sa[309] = 0.1298455f;
      sa[310] = 0.3216375f;
      sa[311] = 0.22024034f;
      sa[312] = -0.23540083f;
      sa[313] = -0.22148068f;
      sa[314] = -0.14948481f;
      sa[315] = 0.14626311f;
      sa[316] = -0.025628716f;
      sa[317] = -0.08206254f;
      sa[318] = 0.14914308f;
      sa[319] = 0.29535127f;
      sa[320] = 0.046150405f;
      sa[321] = 0.123740785f;
      sa[322] = 0.2479479f;
      sa[323] = -0.32151747f;
      sa[324] = 0.10567023f;
      sa[325] = 0.19809827f;
      sa[326] = -0.38516343f;
      sa[327] = 0.012443686f;
      sa[328] = -0.019538697f;
      sa[329] = 0.23233807f;
      sa[330] = -0.17545658f;
      sa[331] = 0.06495096f;
      sa[332] = -0.2557292f;
      sa[333] = 0.16448194f;
      sa[334] = -0.14895257f;
      sa[335] = 0.23452769f;
      sa[336] = -0.19483691f;
      sa[337] = -0.22125775f;
      sa[338] = 0.2706635f;
      sa[339] = -0.23252098f;
      sa[340] = -0.49437913f;
      sa[341] = -0.3660583f;
      sa[342] = 0.38655275f;
      sa[343] = -0.39880964f;
      sa[344] = -0.15568557f;
      sa[345] = 0.29625532f;
      sa[346] = 0.28201818f;
      sa[347] = -0.09798815f;
      sa[348] = 0.20966962f;
      sa[349] = -0.36629206f;
      sa[350] = -0.1562043f;
      sa[351] = 0.1939109f;
      sa[352] = 0.20434153f;
      sa[353] = -0.02350744f;
      sa[354] = 0.060893163f;
      sa[355] = 0.16278456f;
      sa[356] = -0.16867073f;
      sa[357] = 0.23002829f;
      sa[358] = -0.20621392f;
      sa[359] = 0.15757006f;
      sa[360] = 0.092362456f;
      sa[361] = -0.17512064f;
      sa[362] = -0.09831705f;
      sa[363] = 0.1477432f;
      sa[364] = -0.13356568f;
      sa[365] = -0.23912574f;
      sa[366] = 0.015504158f;
      sa[367] = -0.2852206f;
      sa[368] = -0.19416271f;
      sa[369] = 0.18445835f;
      sa[370] = -0.20629096f;
      sa[371] = 0.22314638f;
      sa[372] = 0.019539608f;
      sa[373] = 0.3291421f;
      sa[374] = -0.10275152f;
      sa[375] = -0.28589433f;
      sa[376] = -0.46479148f;
      sa[377] = -0.3562082f;
      sa[378] = 0.44113398f;
      sa[379] = 0.101197995f;
      sa[380] = -0.10990749f;
      sa[381] = -0.10373981f;
      sa[382] = -0.02207127f;
      sa[383] = -0.060199577f;
      sa[384] = -0.11961911f;
      sa[385] = 0.14198275f;
      sa[386] = -0.1570933f;
      sa[387] = -0.39346033f;
      sa[388] = 0.10008646f;
      sa[389] = -0.01205082f;
      sa[390] = -0.017025352f;
      sa[391] = -0.11015435f;
      sa[392] = 0.3307963f;
      sa[393] = 0.39363873f;
      sa[394] = -0.21771628f;
      sa[395] = 0.20201199f;
      sa[396] = 0.3330819f;
      sa[397] = -0.053653773f;
      sa[398] = 0.20048589f;
      sa[399] = -0.15934956f;
      sa[400] = 0.18096288f;
      sa[401] = 0.29983243f;
      sa[402] = -0.1617742f;
      sa[403] = 0.065102555f;
      sa[404] = 0.29330027f;
      sa[405] = -0.1495168f;
      sa[406] = 0.038742937f;
      sa[407] = 0.51754f;
      sa[408] = -0.22341399f;
      sa[409] = -0.21257967f;
      sa[410] = -0.115797624f;
      sa[411] = 0.19971146f;
      sa[412] = 0.004550712f;
      sa[413] = 0.22779737f;
      sa[414] = 0.036039684f;
      sa[415] = 0.49999842f;
      sa[416] = -0.1995306f;
      sa[417] = 0.019566666f;
      sa[418] = -0.03820931f;
      sa[419] = 0.28705415f;
      sa[420] = 0.30081853f;
      sa[421] = 0.3828285f;
      sa[422] = 0.15504003f;
      sa[423] = -0.123734266f;
      sa[424] = 0.13826862f;
      sa[425] = -0.05657699f;
      sa[426] = -0.2754468f;
      sa[427] = 0.22246285f;
      sa[428] = -0.07774237f;
      sa[429] = -0.08509254f;
      sa[430] = 0.098180704f;
      sa[431] = -0.08587534f;
      sa[432] = -0.07741121f;
      sa[433] = 0.19704938f;
      sa[434] = 0.38727832f;
      sa[435] = 0.0566018f;
      sa[436] = -0.3496877f;
      sa[437] = -0.33782148f;
      sa[438] = -0.04388839f;
      sa[439] = -0.08325064f;
      sa[440] = 0.34519923f;
      sa[441] = -0.2604588f;
      sa[442] = 0.1285621f;
      sa[443] = 0.21783984f;
      sa[444] = -0.29345915f;
      sa[445] = 0.017570913f;
      sa[446] = 0.20844512f;
      sa[447] = 0.01144201f;
      sa[448] = 0.22931057f;
      sa[449] = 0.34023082f;
      sa[450] = -0.054506883f;
      sa[451] = 0.14723676f;
      sa[452] = 0.13837843f;
      sa[453] = -0.11238869f;
      sa[454] = -0.22754261f;
      sa[455] = -0.11391498f;
      sa[456] = 0.07502964f;
      sa[457] = 0.14334512f;
      sa[458] = -0.20071808f;
      sa[459] = 0.14868595f;
      sa[460] = 0.17993155f;
      sa[461] = 0.23734803f;
      sa[462] = -0.017968422f;
      sa[463] = 0.15527032f;
      sa[464] = -0.26922128f;
      sa[465] = 0.26764417f;
      sa[466] = -0.051494163f;
      sa[467] = 0.1159237f;
      sa[468] = 0.13282582f;
      sa[469] = 0.2990055f;
      sa[470] = 0.21040489f;
      sa[471] = -0.0027040972f;
      sa[472] = 0.023883937f;
      sa[473] = -0.14524837f;
      sa[474] = -0.0175015f;
      sa[475] = 0.1643079f;
      sa[476] = 0.27198964f;
      sa[477] = -0.123535335f;
      sa[478] = 0.17762145f;
      sa[479] = -0.22059035f;
      sa[480] = -0.37296394f;
      sa[481] = -0.27692437f;
      sa[482] = -0.3156946f;
      sa[483] = 0.21571195f;
      sa[484] = 0.23470485f;
      sa[485] = 0.22631532f;
      sa[486] = -0.017830586f;
      sa[487] = -0.1562011f;
      sa[488] = -0.2315839f;
      sa[489] = 0.10176802f;
      sa[490] = -0.009003403f;
      sa[491] = -0.1502486f;
      sa[492] = 0.20279232f;
      sa[493] = 0.34790337f;
      sa[494] = -0.24611989f;
      sa[495] = 0.3534043f;
      sa[496] = -0.03078252f;
      sa[497] = 0.06227453f;
      sa[498] = 0.15300906f;
      sa[499] = 0.17316632f;
      sa[500] = -0.05790023f;
      sa[501] = 0.1326794f;
      sa[502] = 0.30076233f;
      sa[503] = 0.12621309f;
      sa[504] = -0.12934619f;
      sa[505] = -0.17781055f;
      sa[506] = 0.18531302f;
      sa[507] = -0.1951852f;
      sa[508] = 0.16962211f;
      sa[509] = 0.35715434f;
      sa[510] = 0.231854f;
      sa[511] = 0.12075952f;
      sa[512] = 0.09356676f;
      sa[513] = 0.052529946f;
      sa[514] = 0.32762024f;
      sa[515] = 0.016931577f;
      sa[516] = 0.047927935f;
      sa[517] = 0.17556979f;
      sa[518] = 0.18009292f;
      sa[519] = 0.010530171f;
      sa[520] = 0.32113138f;
      sa[521] = 0.3515376f;
      sa[522] = 0.042643864f;
      sa[523] = 0.13779461f;
      sa[524] = 0.21567705f;
      sa[525] = 0.21338142f;
      sa[526] = -0.0022517482f;
      sa[527] = -0.09028028f;
      sa[528] = -0.035117727f;
      sa[529] = 0.16706632f;
      sa[530] = -0.23645113f;
      sa[531] = 0.08466009f;
      sa[532] = 0.19353624f;
      sa[533] = 0.18226081f;
      sa[534] = 0.21721518f;
      sa[535] = -0.0039615952f;
      sa[536] = 0.07447672f;
      sa[537] = -0.08599134f;
      sa[538] = 0.11036556f;
      sa[539] = 0.20778385f;
      sa[540] = -0.19809839f;
      sa[541] = -0.2729346f;
      sa[542] = -0.15446627f;
      sa[543] = -0.37473556f;
      sa[544] = 0.18678924f;
      sa[545] = 0.053769954f;
      sa[546] = 0.090677716f;
      sa[547] = 0.24531218f;
      sa[548] = 0.08704325f;
      sa[549] = 0.18105371f;
      sa[550] = -0.011444225f;
      sa[551] = -0.2221269f;
      sa[552] = 0.02413692f;
      sa[553] = -0.12694344f;
      sa[554] = -0.19286667f;
      sa[555] = -0.20133217f;
      sa[556] = -0.34439802f;
      sa[557] = -0.3630389f;
      sa[558] = -0.016272804f;
      sa[559] = 0.10483481f;
      sa[560] = -0.29961678f;
      sa[561] = -0.024882326f;
      sa[562] = 0.27876016f;
      sa[563] = 0.06731811f;
      sa[564] = 0.22761784f;
      sa[565] = 0.039424237f;
      sa[566] = 0.35537657f;
      sa[567] = 0.10596573f;
      sa[568] = -0.10331247f;
      sa[569] = 0.025453987f;
      sa[570] = -0.07924304f;
      sa[571] = -0.07665871f;
      sa[572] = -0.17359437f;
      sa[573] = 0.061839752f;
      sa[574] = 0.4157011f;
      sa[575] = -0.07652964f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_08_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_08_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.45060295f;
      sa[1] = 0.09483754f;
      sa[2] = -0.10274113f;
      sa[3] = -0.18157549f;
      sa[4] = 0.0852505f;
      sa[5] = 0.09008226f;
      sa[6] = 0.25320578f;
      sa[7] = 0.08734298f;
      sa[8] = -0.2207876f;
      sa[9] = 0.18792439f;
      sa[10] = -0.1388353f;
      sa[11] = 0.1741708f;
      sa[12] = 0.107569024f;
      sa[13] = 0.077914044f;
      sa[14] = -0.21557197f;
      sa[15] = 0.38721007f;
      sa[16] = 0.36547935f;
      sa[17] = -0.078024656f;
      sa[18] = 0.021001128f;
      sa[19] = -0.09424191f;
      sa[20] = 0.35922414f;
      sa[21] = 0.013382801f;
      sa[22] = -0.18116257f;
      sa[23] = 0.11116174f;
      sa[24] = -0.3607535f;
      sa[25] = 0.23658863f;
      sa[26] = -0.027162768f;
      sa[27] = 0.4573013f;
      sa[28] = -0.3553671f;
      sa[29] = -0.14105089f;
      sa[30] = 0.11351784f;
      sa[31] = -0.21260817f;
      sa[32] = -0.3213605f;
      sa[33] = -0.46550286f;
      sa[34] = 0.012544645f;
      sa[35] = 0.25817925f;
      sa[36] = -0.11226546f;
      sa[37] = -0.08918963f;
      sa[38] = 0.01792073f;
      sa[39] = 0.11778211f;
      sa[40] = -0.2921383f;
      sa[41] = -0.46689612f;
      sa[42] = -0.31772855f;
      sa[43] = -0.42823687f;
      sa[44] = 0.016954632f;
      sa[45] = -0.35464f;
      sa[46] = 0.29099116f;
      sa[47] = 0.23998168f;
      sa[48] = -0.33683583f;
      sa[49] = -0.2852688f;
      sa[50] = 0.216907f;
      sa[51] = -0.079311535f;
      sa[52] = 0.20196867f;
      sa[53] = 0.22606339f;
      sa[54] = -0.08352168f;
      sa[55] = 0.342651f;
      sa[56] = -0.2888017f;
      sa[57] = -0.33643252f;
      sa[58] = 0.08261498f;
      sa[59] = -0.03217424f;
      sa[60] = 0.37286934f;
      sa[61] = -0.16821465f;
      sa[62] = -0.086578004f;
      sa[63] = 0.19294107f;
      sa[64] = 0.35403827f;
      sa[65] = -0.19277886f;
      sa[66] = 0.09750855f;
      sa[67] = 0.36624935f;
      sa[68] = 0.1676243f;
      sa[69] = -0.31724706f;
      sa[70] = -0.43360782f;
      sa[71] = -0.09791966f;
      sa[72] = -0.36418396f;
      sa[73] = 0.3224356f;
      sa[74] = 0.41988355f;
      sa[75] = -0.03018124f;
      sa[76] = 0.21361817f;
      sa[77] = 0.12024347f;
      sa[78] = -0.37247002f;
      sa[79] = 0.2906898f;
      sa[80] = -0.13952677f;
      sa[81] = 0.038364407f;
      sa[82] = 0.31003085f;
      sa[83] = -0.17729837f;
      sa[84] = -0.44711655f;
      sa[85] = -0.3618383f;
      sa[86] = 0.069761544f;
      sa[87] = 0.3020277f;
      sa[88] = -0.46054f;
      sa[89] = -0.19017433f;
      sa[90] = -0.3081387f;
      sa[91] = 0.40172172f;
      sa[92] = -0.042013887f;
      sa[93] = 0.116474204f;
      sa[94] = -0.4056791f;
      sa[95] = -0.12376337f;
      sa[96] = -0.30295405f;
      sa[97] = 0.0076620365f;
      sa[98] = 0.060516123f;
      sa[99] = 0.06478068f;
      sa[100] = -0.33783466f;
      sa[101] = -0.1818565f;
      sa[102] = 0.33940476f;
      sa[103] = -0.034174323f;
      sa[104] = -0.14988111f;
      sa[105] = -0.18992622f;
      sa[106] = 0.33848554f;
      sa[107] = 0.3510599f;
      sa[108] = 0.22655112f;
      sa[109] = 0.041680157f;
      sa[110] = 0.20509598f;
      sa[111] = -0.23112011f;
      sa[112] = -0.2611009f;
      sa[113] = -0.06823583f;
      sa[114] = 2.9714752E-4f;
      sa[115] = -0.17721342f;
      sa[116] = 0.2725261f;
      sa[117] = -0.053032212f;
      sa[118] = -0.42943254f;
      sa[119] = -0.26342538f;
      sa[120] = -0.20917436f;
      sa[121] = 0.12738483f;
      sa[122] = -0.09547259f;
      sa[123] = 0.04000001f;
      sa[124] = -0.20062889f;
      sa[125] = 0.24598856f;
      sa[126] = -0.25094935f;
      sa[127] = 0.046060927f;
      sa[128] = -0.32705137f;
      sa[129] = 0.057460383f;
      sa[130] = -0.010088388f;
      sa[131] = 0.15778984f;
      sa[132] = 0.03158216f;
      sa[133] = 0.10750705f;
      sa[134] = 0.17261074f;
      sa[135] = -0.44958284f;
      sa[136] = 0.07993169f;
      sa[137] = -0.25407553f;
      sa[138] = 0.02344373f;
      sa[139] = 0.24858314f;
      sa[140] = -0.1850564f;
      sa[141] = -0.09148516f;
      sa[142] = -0.029316394f;
      sa[143] = -0.29256976f;
      sa[144] = 0.26191396f;
      sa[145] = -0.25761968f;
      sa[146] = 0.025282297f;
      sa[147] = 0.0015808058f;
      sa[148] = -0.2278466f;
      sa[149] = 0.35240024f;
      sa[150] = -0.15961078f;
      sa[151] = -0.6299798f;
      sa[152] = 0.49376255f;
      sa[153] = -0.12334547f;
      sa[154] = 0.35989532f;
      sa[155] = -0.49812338f;
      sa[156] = -0.37659016f;
      sa[157] = -0.3185749f;
      sa[158] = -0.1448169f;
      sa[159] = -0.24026518f;
      sa[160] = 0.37774742f;
      sa[161] = -0.39104575f;
      sa[162] = 0.5735721f;
      sa[163] = -0.2512083f;
      sa[164] = 0.14113486f;
      sa[165] = -0.21655355f;
      sa[166] = 0.28722024f;
      sa[167] = -0.3907997f;
      sa[168] = 0.20093001f;
      sa[169] = -0.5346552f;
      sa[170] = 0.30299053f;
      sa[171] = 0.20210172f;
      sa[172] = 0.40099362f;
      sa[173] = 0.39743122f;
      sa[174] = -0.054921556f;
      sa[175] = -2.910861E-4f;
      sa[176] = 0.28507647f;
      sa[177] = 0.14798228f;
      sa[178] = -0.20017985f;
      sa[179] = 0.11410755f;
      sa[180] = -0.36965635f;
      sa[181] = -0.14684632f;
      sa[182] = 0.03101366f;
      sa[183] = 0.104989685f;
      sa[184] = 0.4989027f;
      sa[185] = 0.3170817f;
      sa[186] = -0.14798337f;
      sa[187] = -0.25928164f;
      sa[188] = -0.15605117f;
      sa[189] = -0.21869102f;
      sa[190] = -0.2018321f;
      sa[191] = -0.047836028f;
      sa[192] = -0.082199335f;
      sa[193] = 0.15713954f;
      sa[194] = -0.36636248f;
      sa[195] = -0.23360008f;
      sa[196] = 0.15299758f;
      sa[197] = -0.15995005f;
      sa[198] = 0.078329496f;
      sa[199] = 0.43349585f;
      sa[200] = 0.061006058f;
      sa[201] = 0.33010945f;
      sa[202] = 0.2776997f;
      sa[203] = -0.4173095f;
      sa[204] = 0.09799359f;
      sa[205] = 0.3286219f;
      sa[206] = -0.17563874f;
      sa[207] = 0.17126152f;
      sa[208] = -0.24218668f;
      sa[209] = 0.075579375f;
      sa[210] = -0.13976267f;
      sa[211] = -0.367815f;
      sa[212] = -0.40644878f;
      sa[213] = -0.066718206f;
      sa[214] = -0.39867365f;
      sa[215] = -0.13126309f;
      sa[216] = 0.039845195f;
      sa[217] = 0.19227356f;
      sa[218] = -0.017558575f;
      sa[219] = 0.04859091f;
      sa[220] = 0.14495052f;
      sa[221] = -0.036111336f;
      sa[222] = -0.32866332f;
      sa[223] = -0.4110479f;
      sa[224] = 0.33733034f;
      sa[225] = 0.062148463f;
      sa[226] = -0.06873176f;
      sa[227] = 0.059568387f;
      sa[228] = -0.095050626f;
      sa[229] = -0.21384375f;
      sa[230] = -0.28838268f;
      sa[231] = -0.17428152f;
      sa[232] = 0.40872312f;
      sa[233] = -0.26021796f;
      sa[234] = -0.29765216f;
      sa[235] = 0.008981049f;
      sa[236] = -0.33880994f;
      sa[237] = 0.48949182f;
      sa[238] = 0.1955001f;
      sa[239] = -0.10828874f;
      sa[240] = -0.16555326f;
      sa[241] = -0.41556296f;
      sa[242] = -0.3652173f;
      sa[243] = 0.33381587f;
      sa[244] = 0.21804073f;
      sa[245] = 0.3218134f;
      sa[246] = 0.34897348f;
      sa[247] = -0.4916328f;
      sa[248] = -0.20671266f;
      sa[249] = 0.114914574f;
      sa[250] = 0.29121098f;
      sa[251] = 0.4051008f;
      sa[252] = 0.1997314f;
      sa[253] = -0.32596025f;
      sa[254] = 0.3617757f;
      sa[255] = 0.10316237f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_08_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_ReLU_08_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.056837082f;
      sa[1] = -1.5999657f;
      sa[2] = -1.5324894f;
      sa[3] = 1.3057686f;
      sa[4] = 0.40945834f;
      sa[5] = -0.2354889f;
      sa[6] = -1.6912086f;
      sa[7] = 1.4411829f;
      sa[8] = 1.6653517f;
      sa[9] = 0.24991807f;
      sa[10] = 1.5884962f;
      sa[11] = 1.3582307f;
      sa[12] = 1.7369909f;
      sa[13] = -0.568992f;
      sa[14] = -1.9588332f;
      sa[15] = -0.7646287f;
      sa[16] = 0.750711f;
      sa[17] = -0.8027677f;
      sa[18] = -1.4750254f;
      sa[19] = -0.8877176f;
      sa[20] = -1.9234111f;
      sa[21] = 0.28736043f;
      sa[22] = -1.9324354f;
      sa[23] = -0.58341086f;
      sa[24] = -0.5131942f;
      sa[25] = 1.8687359f;
      sa[26] = -0.33328378f;
      sa[27] = 1.1930251f;
      sa[28] = 1.1905632f;
      sa[29] = -0.710894f;
      sa[30] = 0.1449301f;
      sa[31] = 0.15936655f;
      sa[32] = 0.45415324f;
      sa[33] = 0.06676569f;
      sa[34] = -0.6952176f;
      sa[35] = 0.93058944f;
      sa[36] = 0.4785297f;
      sa[37] = -1.3339593f;
      sa[38] = 0.59978896f;
      sa[39] = -0.19387378f;
      sa[40] = 0.26330146f;
      sa[41] = -0.69017416f;
      sa[42] = 0.5167731f;
      sa[43] = -0.041233584f;
      sa[44] = 0.9571968f;
      sa[45] = -1.9562097f;
      sa[46] = -2.384364f;
      sa[47] = 0.09572142f;
      sa[48] = 1.5842966f;
      sa[49] = -0.21592382f;
      sa[50] = -0.47667718f;
      sa[51] = 1.7835505f;
      sa[52] = -1.6497186f;
      sa[53] = 0.9605358f;
      sa[54] = 1.7390933f;
      sa[55] = 1.0701774f;
      sa[56] = -0.5783771f;
      sa[57] = -0.20410839f;
      sa[58] = 1.0388871f;
      sa[59] = 0.76230794f;
      sa[60] = -1.4022272f;
      sa[61] = 0.89811957f;
      sa[62] = -0.33944106f;
      sa[63] = -0.83896714f;
      sa[64] = 1.0100152f;
      sa[65] = -0.8819193f;
      sa[66] = -1.7292455f;
      sa[67] = -0.102101326f;
      sa[68] = 0.89791596f;
      sa[69] = -1.3464935f;
      sa[70] = -1.5985903f;
      sa[71] = -0.026661268f;
      sa[72] = -0.9720505f;
      sa[73] = -1.1747456f;
      sa[74] = -1.1398102f;
      sa[75] = 1.3884048f;
      sa[76] = 1.9349055f;
      sa[77] = -0.593108f;
      sa[78] = -1.308719f;
      sa[79] = -0.3676273f;
      sa[80] = 0.57842004f;
      sa[81] = -1.6265603f;
      sa[82] = -0.19894019f;
      sa[83] = -1.3796414f;
      sa[84] = 1.5688914f;
      sa[85] = 1.0623786f;
      sa[86] = -1.9411856f;
      sa[87] = 1.0379733f;
      sa[88] = -1.594243f;
      sa[89] = -1.1025809f;
      sa[90] = 0.2619261f;
      sa[91] = 0.030314477f;
      sa[92] = 1.330307f;
      sa[93] = 1.8738515f;
      sa[94] = 1.569495f;
      sa[95] = 0.6452793f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_08 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_08_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_08_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_08_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_ReLU_08_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


