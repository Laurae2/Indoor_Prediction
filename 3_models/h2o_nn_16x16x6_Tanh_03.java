/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:07:10.391+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_03

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_03 > h2o_nn_16x16x6_Tanh_03.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_03.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_03", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_03 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_03_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_03_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_03_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_03_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_03_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_03_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_03_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_03_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_03_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_03_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_03_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_03_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_03.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_03_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.27956989247311825,0.13978494623655913,0.15053763440860216,0.27956989247311825,0.15053763440860216};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_03() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-553995079534285440L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_03_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_03_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_03_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_03_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_03_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_03_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_03_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_03_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_03_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_03_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_03_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.012648116480859785;
      sa[1] = -0.060653970310096963;
      sa[2] = 0.1761036565516573;
      sa[3] = 0.03805702414854837;
      sa[4] = 0.04868677080881054;
      sa[5] = -0.01648401129108734;
      sa[6] = 0.07407615833510645;
      sa[7] = 0.01668198186018439;
      sa[8] = -0.2171866517901166;
      sa[9] = 0.02783249110770896;
      sa[10] = 0.04070796176701145;
      sa[11] = -0.030304505293549045;
      sa[12] = 0.06476213809802749;
      sa[13] = -0.010565388204210815;
      sa[14] = -0.03315443451663699;
      sa[15] = 0.08086846963709901;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_03_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_03_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.05322078177805379;
      sa[1] = -0.018647313137581004;
      sa[2] = -0.0634861474801517;
      sa[3] = 0.10511413718853935;
      sa[4] = 0.0897220798554117;
      sa[5] = -0.06381276302850662;
      sa[6] = -0.03139375189823785;
      sa[7] = 0.042923499108687424;
      sa[8] = 0.037510348552216785;
      sa[9] = -0.0704467829442904;
      sa[10] = 0.031387702565852986;
      sa[11] = -0.004479553464871075;
      sa[12] = 0.02883513272602449;
      sa[13] = -9.47062920086911E-4;
      sa[14] = -0.05298037227151221;
      sa[15] = -0.08621481053732738;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_03_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_03_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.04397890718310105;
      sa[1] = -0.08439748359720137;
      sa[2] = -0.059382767576452035;
      sa[3] = -0.04355117847635528;
      sa[4] = 0.025963450730386122;
    }
  }
}
class h2o_nn_16x16x6_Tanh_03_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_03_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_03_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.07504645f;
      sa[1] = 0.37726176f;
      sa[2] = 0.21913464f;
      sa[3] = 0.08277814f;
      sa[4] = -0.13777809f;
      sa[5] = -0.081369735f;
      sa[6] = 0.017054953f;
      sa[7] = 0.40396875f;
      sa[8] = 0.15980744f;
      sa[9] = -0.106707454f;
      sa[10] = -0.13550101f;
      sa[11] = -0.14551044f;
      sa[12] = 0.11013555f;
      sa[13] = -0.12766467f;
      sa[14] = -0.1556678f;
      sa[15] = 0.13548996f;
      sa[16] = 0.23537551f;
      sa[17] = 0.2798435f;
      sa[18] = -0.3604809f;
      sa[19] = 0.14761078f;
      sa[20] = 0.24366295f;
      sa[21] = -0.327847f;
      sa[22] = 0.26059094f;
      sa[23] = -0.16327079f;
      sa[24] = 0.31706446f;
      sa[25] = 0.26868787f;
      sa[26] = -0.3224503f;
      sa[27] = 0.54163754f;
      sa[28] = 0.3031754f;
      sa[29] = -0.23152746f;
      sa[30] = -0.06475987f;
      sa[31] = 0.27364022f;
      sa[32] = 0.16058113f;
      sa[33] = -0.19664021f;
      sa[34] = 0.06757487f;
      sa[35] = -0.15093352f;
      sa[36] = 0.1856155f;
      sa[37] = 0.259528f;
      sa[38] = -0.12051858f;
      sa[39] = 0.15241289f;
      sa[40] = 0.12028664f;
      sa[41] = -0.076515f;
      sa[42] = -0.109314576f;
      sa[43] = 0.17104891f;
      sa[44] = 0.25621042f;
      sa[45] = -0.16327307f;
      sa[46] = 0.06855692f;
      sa[47] = -0.027887631f;
      sa[48] = 0.16242225f;
      sa[49] = 0.22934821f;
      sa[50] = 0.14108796f;
      sa[51] = -0.22199634f;
      sa[52] = -0.090666875f;
      sa[53] = 0.4585065f;
      sa[54] = 0.19298929f;
      sa[55] = -0.27521154f;
      sa[56] = -0.20423634f;
      sa[57] = -0.24989952f;
      sa[58] = 0.32275784f;
      sa[59] = -0.12161433f;
      sa[60] = -0.44525057f;
      sa[61] = 0.21469629f;
      sa[62] = 0.1411319f;
      sa[63] = 0.13386498f;
      sa[64] = 0.11621635f;
      sa[65] = 0.16177703f;
      sa[66] = 0.0015990584f;
      sa[67] = 0.26224446f;
      sa[68] = -0.16125889f;
      sa[69] = 0.24946637f;
      sa[70] = -0.033262473f;
      sa[71] = 0.38852313f;
      sa[72] = -0.21803159f;
      sa[73] = 0.09995851f;
      sa[74] = -0.2243865f;
      sa[75] = 0.14262202f;
      sa[76] = -0.29646432f;
      sa[77] = -0.14694475f;
      sa[78] = -0.12373231f;
      sa[79] = -0.030836223f;
      sa[80] = -0.21986714f;
      sa[81] = -0.24158882f;
      sa[82] = -0.07566475f;
      sa[83] = 0.029945703f;
      sa[84] = 0.08637754f;
      sa[85] = -0.17419465f;
      sa[86] = 0.24438426f;
      sa[87] = 0.07818898f;
      sa[88] = 0.07911321f;
      sa[89] = -0.09480088f;
      sa[90] = -0.028110517f;
      sa[91] = 0.32925192f;
      sa[92] = 0.19915123f;
      sa[93] = -0.2376517f;
      sa[94] = -0.15496409f;
      sa[95] = -0.31746083f;
      sa[96] = 0.17461285f;
      sa[97] = -0.04646214f;
      sa[98] = 0.2628457f;
      sa[99] = -0.29700965f;
      sa[100] = -0.02624965f;
      sa[101] = -0.238222f;
      sa[102] = -0.32671672f;
      sa[103] = -0.2592267f;
      sa[104] = 0.051566813f;
      sa[105] = -0.34170163f;
      sa[106] = -0.2435505f;
      sa[107] = 0.1609766f;
      sa[108] = 0.12186007f;
      sa[109] = -0.17179336f;
      sa[110] = -0.13216318f;
      sa[111] = 0.1455507f;
      sa[112] = 0.07618998f;
      sa[113] = 0.07843845f;
      sa[114] = -0.16524322f;
      sa[115] = -0.17270474f;
      sa[116] = -0.24396028f;
      sa[117] = -0.020205718f;
      sa[118] = -0.26940516f;
      sa[119] = -0.060742434f;
      sa[120] = 0.29249403f;
      sa[121] = 0.33881643f;
      sa[122] = 0.39103064f;
      sa[123] = 0.3050531f;
      sa[124] = 0.3820791f;
      sa[125] = 0.36759213f;
      sa[126] = -0.36286986f;
      sa[127] = 0.048734646f;
      sa[128] = 0.062269527f;
      sa[129] = 0.083324134f;
      sa[130] = -0.17701717f;
      sa[131] = 0.20261012f;
      sa[132] = 0.33340904f;
      sa[133] = -0.28700316f;
      sa[134] = 0.09673607f;
      sa[135] = -0.36316592f;
      sa[136] = -0.26028296f;
      sa[137] = -0.041692752f;
      sa[138] = 0.1840126f;
      sa[139] = -0.1555275f;
      sa[140] = -0.036555983f;
      sa[141] = -0.15513515f;
      sa[142] = 0.07539466f;
      sa[143] = -0.43576202f;
      sa[144] = 0.21633103f;
      sa[145] = -0.15933354f;
      sa[146] = -0.21904962f;
      sa[147] = 0.18373257f;
      sa[148] = 0.17077386f;
      sa[149] = 0.23483048f;
      sa[150] = 0.33635655f;
      sa[151] = -0.286354f;
      sa[152] = 0.030224375f;
      sa[153] = 0.259848f;
      sa[154] = 0.27642193f;
      sa[155] = -0.19934763f;
      sa[156] = 0.17958523f;
      sa[157] = -0.14833708f;
      sa[158] = 0.14771819f;
      sa[159] = 0.11665642f;
      sa[160] = 0.11362865f;
      sa[161] = 0.24894664f;
      sa[162] = -0.19025382f;
      sa[163] = 0.064714f;
      sa[164] = 0.25078937f;
      sa[165] = -0.08032849f;
      sa[166] = -0.08078473f;
      sa[167] = -0.09608065f;
      sa[168] = 0.28475475f;
      sa[169] = 0.38365743f;
      sa[170] = 0.039063454f;
      sa[171] = -0.08904208f;
      sa[172] = -0.05476012f;
      sa[173] = -0.16958529f;
      sa[174] = 0.0026685474f;
      sa[175] = -0.30087638f;
      sa[176] = 0.010709281f;
      sa[177] = -0.02305243f;
      sa[178] = -0.107139714f;
      sa[179] = 0.045723274f;
      sa[180] = -0.06092059f;
      sa[181] = -0.24750443f;
      sa[182] = -0.16900828f;
      sa[183] = 0.13712427f;
      sa[184] = 0.2901753f;
      sa[185] = 0.20643862f;
      sa[186] = -0.34014955f;
      sa[187] = 0.03010623f;
      sa[188] = -0.011191101f;
      sa[189] = 0.24651815f;
      sa[190] = -0.014074258f;
      sa[191] = 0.05087244f;
      sa[192] = -0.087655984f;
      sa[193] = 0.29818794f;
      sa[194] = 0.11764295f;
      sa[195] = 0.3060278f;
      sa[196] = 0.33765003f;
      sa[197] = -0.023246124f;
      sa[198] = 0.06695234f;
      sa[199] = -0.17017987f;
      sa[200] = 0.024199348f;
      sa[201] = -0.33661067f;
      sa[202] = 0.112298824f;
      sa[203] = -0.11722352f;
      sa[204] = -0.19002654f;
      sa[205] = 0.20730935f;
      sa[206] = 0.22421843f;
      sa[207] = 0.078123815f;
      sa[208] = -0.26130682f;
      sa[209] = -0.08072796f;
      sa[210] = -0.27143347f;
      sa[211] = -0.26559815f;
      sa[212] = 0.26473632f;
      sa[213] = -0.27990732f;
      sa[214] = -0.13451953f;
      sa[215] = -0.0019789122f;
      sa[216] = 0.09193289f;
      sa[217] = 0.27604112f;
      sa[218] = -0.16848767f;
      sa[219] = 0.23993027f;
      sa[220] = -0.27264887f;
      sa[221] = 0.087705195f;
      sa[222] = 0.23722616f;
      sa[223] = -0.010604225f;
      sa[224] = 0.14747459f;
      sa[225] = 0.3778318f;
      sa[226] = -0.20984706f;
      sa[227] = 0.40261048f;
      sa[228] = 0.20271522f;
      sa[229] = 0.19624987f;
      sa[230] = 0.3370086f;
      sa[231] = -0.27370518f;
      sa[232] = -0.21209742f;
      sa[233] = 0.12405936f;
      sa[234] = 0.122463904f;
      sa[235] = -0.26358303f;
      sa[236] = -0.02039888f;
      sa[237] = -0.26650113f;
      sa[238] = -0.253667f;
      sa[239] = 0.07791234f;
      sa[240] = 0.121962935f;
      sa[241] = -0.2193425f;
      sa[242] = -0.12873374f;
      sa[243] = -0.35233137f;
      sa[244] = -0.18612982f;
      sa[245] = -0.12285812f;
      sa[246] = -0.21825501f;
      sa[247] = -0.040249743f;
      sa[248] = 0.22278462f;
      sa[249] = 0.15675187f;
      sa[250] = -0.22895506f;
      sa[251] = -0.093766645f;
      sa[252] = -0.2046482f;
      sa[253] = -0.23134118f;
      sa[254] = -0.33011326f;
      sa[255] = 0.09366713f;
      sa[256] = -0.18955006f;
      sa[257] = 0.26823062f;
      sa[258] = -0.29150733f;
      sa[259] = -0.13800377f;
      sa[260] = -0.18399428f;
      sa[261] = 6.09546E-4f;
      sa[262] = -0.13257481f;
      sa[263] = 0.26150128f;
      sa[264] = -0.18194868f;
      sa[265] = 0.03405425f;
      sa[266] = -0.3340024f;
      sa[267] = -0.2918552f;
      sa[268] = 0.15137047f;
      sa[269] = -0.13349979f;
      sa[270] = -0.025439141f;
      sa[271] = 0.29336727f;
      sa[272] = -0.06030813f;
      sa[273] = -0.07786604f;
      sa[274] = 0.16547443f;
      sa[275] = 0.05338093f;
      sa[276] = 0.02125869f;
      sa[277] = -0.2843836f;
      sa[278] = -0.19761246f;
      sa[279] = 0.3562442f;
      sa[280] = -0.17350963f;
      sa[281] = 0.32806456f;
      sa[282] = -0.12547395f;
      sa[283] = -0.045195747f;
      sa[284] = -0.09895241f;
      sa[285] = -0.29954618f;
      sa[286] = 0.4792673f;
      sa[287] = 0.33728838f;
      sa[288] = -0.20717514f;
      sa[289] = -0.37062976f;
      sa[290] = -0.109657064f;
      sa[291] = 0.11074205f;
      sa[292] = 0.15552744f;
      sa[293] = -0.10339423f;
      sa[294] = 0.09309937f;
      sa[295] = 0.2016227f;
      sa[296] = 0.20968466f;
      sa[297] = 0.19457737f;
      sa[298] = -0.028833603f;
      sa[299] = -0.012288954f;
      sa[300] = -0.067927845f;
      sa[301] = -0.104024604f;
      sa[302] = 0.13592729f;
      sa[303] = 0.0604992f;
      sa[304] = -0.2953409f;
      sa[305] = -0.05252538f;
      sa[306] = 0.18362111f;
      sa[307] = -0.34461677f;
      sa[308] = 0.028422518f;
      sa[309] = 0.12941426f;
      sa[310] = 0.26597825f;
      sa[311] = 0.29656696f;
      sa[312] = -0.2927272f;
      sa[313] = -0.15628144f;
      sa[314] = -0.124698095f;
      sa[315] = 0.016399167f;
      sa[316] = -0.07205648f;
      sa[317] = -0.11086621f;
      sa[318] = 0.07620385f;
      sa[319] = 0.344818f;
      sa[320] = 0.01611556f;
      sa[321] = 0.32585892f;
      sa[322] = 0.07523195f;
      sa[323] = -0.32707953f;
      sa[324] = -0.0025695984f;
      sa[325] = 0.2651813f;
      sa[326] = -0.2432808f;
      sa[327] = -0.037045527f;
      sa[328] = -0.014238242f;
      sa[329] = 0.29863688f;
      sa[330] = -0.14695543f;
      sa[331] = 0.10129867f;
      sa[332] = -0.30377704f;
      sa[333] = 0.12261541f;
      sa[334] = -0.015810592f;
      sa[335] = 0.18786536f;
      sa[336] = -0.20588809f;
      sa[337] = -0.18305928f;
      sa[338] = 0.29138622f;
      sa[339] = -0.169794f;
      sa[340] = -0.32804376f;
      sa[341] = -0.22613963f;
      sa[342] = 0.17634161f;
      sa[343] = -0.07348592f;
      sa[344] = -0.19707859f;
      sa[345] = 0.23602714f;
      sa[346] = 0.23895818f;
      sa[347] = -0.104610994f;
      sa[348] = 0.3335272f;
      sa[349] = -0.24068972f;
      sa[350] = -0.22761704f;
      sa[351] = 0.2465748f;
      sa[352] = 0.20467235f;
      sa[353] = -0.028327234f;
      sa[354] = 0.09776931f;
      sa[355] = 0.15923604f;
      sa[356] = -0.12951365f;
      sa[357] = 0.32955334f;
      sa[358] = -0.3359195f;
      sa[359] = 0.015936097f;
      sa[360] = -0.047984187f;
      sa[361] = -0.08459832f;
      sa[362] = -0.10949766f;
      sa[363] = 0.2494305f;
      sa[364] = -0.18133478f;
      sa[365] = -0.2504235f;
      sa[366] = -0.018830009f;
      sa[367] = -0.4189116f;
      sa[368] = -0.2189783f;
      sa[369] = 0.23117174f;
      sa[370] = -0.18991351f;
      sa[371] = 0.06821679f;
      sa[372] = 0.032350864f;
      sa[373] = 0.3478967f;
      sa[374] = -0.09572082f;
      sa[375] = -0.3782118f;
      sa[376] = -0.34871f;
      sa[377] = -0.28391117f;
      sa[378] = 0.37157616f;
      sa[379] = 0.24827816f;
      sa[380] = -0.1200711f;
      sa[381] = -0.15725087f;
      sa[382] = -0.051725503f;
      sa[383] = -0.15799555f;
      sa[384] = -0.08406545f;
      sa[385] = 0.15938796f;
      sa[386] = -0.24785624f;
      sa[387] = -0.3743749f;
      sa[388] = 0.09886607f;
      sa[389] = -0.03479142f;
      sa[390] = -0.01229463f;
      sa[391] = -0.19932893f;
      sa[392] = 0.34148762f;
      sa[393] = 0.19178317f;
      sa[394] = -0.120542265f;
      sa[395] = 0.2625627f;
      sa[396] = 0.354763f;
      sa[397] = -0.25400168f;
      sa[398] = 0.091270775f;
      sa[399] = 0.12855318f;
      sa[400] = 0.14583863f;
      sa[401] = 0.19304828f;
      sa[402] = -0.21445802f;
      sa[403] = -0.10773695f;
      sa[404] = 0.30049837f;
      sa[405] = -0.22442776f;
      sa[406] = -0.10024735f;
      sa[407] = 0.19384162f;
      sa[408] = -0.23365533f;
      sa[409] = -0.30494535f;
      sa[410] = -0.13951464f;
      sa[411] = 0.025759801f;
      sa[412] = -0.17793596f;
      sa[413] = 0.069513336f;
      sa[414] = 0.19283135f;
      sa[415] = 0.3567166f;
      sa[416] = -0.16560274f;
      sa[417] = 0.0460481f;
      sa[418] = 0.006970554f;
      sa[419] = 0.25527135f;
      sa[420] = 0.1852397f;
      sa[421] = 0.19161323f;
      sa[422] = 0.21003331f;
      sa[423] = -0.13615112f;
      sa[424] = 0.10925965f;
      sa[425] = -0.09943828f;
      sa[426] = -0.38022047f;
      sa[427] = 0.11954577f;
      sa[428] = -0.06889436f;
      sa[429] = -0.22465031f;
      sa[430] = 0.22834055f;
      sa[431] = 0.036471993f;
      sa[432] = -0.11701165f;
      sa[433] = 0.16140889f;
      sa[434] = 0.33413056f;
      sa[435] = 0.029910263f;
      sa[436] = -0.31375143f;
      sa[437] = -0.28116977f;
      sa[438] = -5.5387365E-5f;
      sa[439] = -0.052694965f;
      sa[440] = 0.32687607f;
      sa[441] = -0.35070845f;
      sa[442] = 0.116408564f;
      sa[443] = 0.011216798f;
      sa[444] = -0.21643457f;
      sa[445] = 0.08886086f;
      sa[446] = 0.27788466f;
      sa[447] = 0.04997202f;
      sa[448] = 0.21218188f;
      sa[449] = 0.2673234f;
      sa[450] = -0.07393995f;
      sa[451] = 0.20680967f;
      sa[452] = 0.21082653f;
      sa[453] = -0.06645743f;
      sa[454] = -0.16953512f;
      sa[455] = -0.04170455f;
      sa[456] = 0.003652571f;
      sa[457] = 0.12302409f;
      sa[458] = -0.22504576f;
      sa[459] = 0.24429509f;
      sa[460] = 0.250551f;
      sa[461] = 0.2907291f;
      sa[462] = 0.052431334f;
      sa[463] = 0.19956574f;
      sa[464] = -0.262494f;
      sa[465] = 0.2218228f;
      sa[466] = -0.033475358f;
      sa[467] = 0.13280293f;
      sa[468] = 0.10725197f;
      sa[469] = 0.2997775f;
      sa[470] = 0.23902078f;
      sa[471] = 0.06837201f;
      sa[472] = 0.03619569f;
      sa[473] = -0.114227235f;
      sa[474] = 0.005578488f;
      sa[475] = 0.17151143f;
      sa[476] = 0.25813833f;
      sa[477] = -0.20367655f;
      sa[478] = 0.12840731f;
      sa[479] = -0.1984348f;
      sa[480] = -0.34762374f;
      sa[481] = -0.2517011f;
      sa[482] = -0.28815672f;
      sa[483] = 0.25130033f;
      sa[484] = 0.24313092f;
      sa[485] = 0.159936f;
      sa[486] = -0.015692724f;
      sa[487] = -0.19518697f;
      sa[488] = -0.22938086f;
      sa[489] = 0.095223345f;
      sa[490] = -0.0023171494f;
      sa[491] = -0.1994209f;
      sa[492] = 0.2241618f;
      sa[493] = 0.33635914f;
      sa[494] = -0.2243468f;
      sa[495] = 0.25759134f;
      sa[496] = -0.023047622f;
      sa[497] = 0.06562315f;
      sa[498] = 0.17203167f;
      sa[499] = 0.1867947f;
      sa[500] = -0.023239091f;
      sa[501] = 0.17334762f;
      sa[502] = 0.23055038f;
      sa[503] = 0.015884487f;
      sa[504] = -0.16040137f;
      sa[505] = -0.14949378f;
      sa[506] = 0.17336155f;
      sa[507] = -0.13070121f;
      sa[508] = 0.07636207f;
      sa[509] = 0.24951065f;
      sa[510] = 0.15534852f;
      sa[511] = -0.060764857f;
      sa[512] = 0.09384245f;
      sa[513] = -0.024824899f;
      sa[514] = 0.28974792f;
      sa[515] = -0.13851713f;
      sa[516] = 0.035215672f;
      sa[517] = 0.13514766f;
      sa[518] = 0.14042288f;
      sa[519] = -0.115555026f;
      sa[520] = 0.28556922f;
      sa[521] = 0.21460928f;
      sa[522] = 0.024532339f;
      sa[523] = 0.25075814f;
      sa[524] = 0.21084906f;
      sa[525] = 0.16764833f;
      sa[526] = -0.031689446f;
      sa[527] = -0.20162193f;
      sa[528] = -0.014460433f;
      sa[529] = 0.10721863f;
      sa[530] = -0.24897613f;
      sa[531] = 0.05454957f;
      sa[532] = 0.18029127f;
      sa[533] = 0.13635488f;
      sa[534] = 0.1776139f;
      sa[535] = -0.10032659f;
      sa[536] = 0.012482306f;
      sa[537] = -0.27151895f;
      sa[538] = 0.28159648f;
      sa[539] = 0.3472678f;
      sa[540] = -0.32690218f;
      sa[541] = -0.15736021f;
      sa[542] = -0.018140936f;
      sa[543] = -0.36722863f;
      sa[544] = 0.14012001f;
      sa[545] = 0.13875113f;
      sa[546] = 0.09983878f;
      sa[547] = 0.20354322f;
      sa[548] = 0.07626909f;
      sa[549] = 0.14529857f;
      sa[550] = 0.035968408f;
      sa[551] = -0.19303666f;
      sa[552] = 0.073026754f;
      sa[553] = -0.017083023f;
      sa[554] = -0.12370272f;
      sa[555] = -0.14881329f;
      sa[556] = -0.1533984f;
      sa[557] = -0.23448983f;
      sa[558] = -0.23433802f;
      sa[559] = 0.4197245f;
      sa[560] = -0.3354834f;
      sa[561] = -0.13214408f;
      sa[562] = 0.21020372f;
      sa[563] = -0.04920878f;
      sa[564] = 0.40456492f;
      sa[565] = 0.11208041f;
      sa[566] = 0.29585502f;
      sa[567] = 0.05650705f;
      sa[568] = -0.07955279f;
      sa[569] = 0.014849025f;
      sa[570] = -0.013438586f;
      sa[571] = -0.109910004f;
      sa[572] = -0.11758999f;
      sa[573] = 0.084047124f;
      sa[574] = 0.27101344f;
      sa[575] = -0.25467405f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_03_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_03_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.352813f;
      sa[1] = 0.040071346f;
      sa[2] = -0.24846219f;
      sa[3] = -0.33674374f;
      sa[4] = 0.053242594f;
      sa[5] = 0.06809574f;
      sa[6] = 0.25490698f;
      sa[7] = -0.05981768f;
      sa[8] = -0.25202933f;
      sa[9] = 0.15317199f;
      sa[10] = -0.11231031f;
      sa[11] = 0.14741948f;
      sa[12] = 0.07101194f;
      sa[13] = 0.075122535f;
      sa[14] = -0.2514962f;
      sa[15] = 0.310087f;
      sa[16] = 0.46596438f;
      sa[17] = -0.08269316f;
      sa[18] = 0.0323587f;
      sa[19] = -0.08390309f;
      sa[20] = 0.34387046f;
      sa[21] = -0.030641539f;
      sa[22] = -0.31251517f;
      sa[23] = 0.29334185f;
      sa[24] = -0.44646806f;
      sa[25] = 0.081265874f;
      sa[26] = -0.115535475f;
      sa[27] = 0.40766197f;
      sa[28] = -0.3378176f;
      sa[29] = -0.10450317f;
      sa[30] = 0.19199131f;
      sa[31] = -0.21529154f;
      sa[32] = -0.32733047f;
      sa[33] = -0.40574777f;
      sa[34] = 0.0958948f;
      sa[35] = 0.42852372f;
      sa[36] = -0.092371374f;
      sa[37] = -0.02839501f;
      sa[38] = 0.031678274f;
      sa[39] = 0.3164254f;
      sa[40] = -0.27159902f;
      sa[41] = -0.39864272f;
      sa[42] = -0.24930876f;
      sa[43] = -0.33988044f;
      sa[44] = -0.043696623f;
      sa[45] = -0.4010134f;
      sa[46] = 0.3754426f;
      sa[47] = 0.28368178f;
      sa[48] = -0.4303786f;
      sa[49] = -0.33245462f;
      sa[50] = 0.24906348f;
      sa[51] = -0.09102976f;
      sa[52] = 0.110714205f;
      sa[53] = 0.24435148f;
      sa[54] = -0.10009262f;
      sa[55] = 0.394511f;
      sa[56] = -0.28861693f;
      sa[57] = -0.33567742f;
      sa[58] = 0.23222542f;
      sa[59] = 0.08068636f;
      sa[60] = 0.21331331f;
      sa[61] = -0.31839937f;
      sa[62] = -0.025828788f;
      sa[63] = 0.20273188f;
      sa[64] = 0.43718287f;
      sa[65] = -0.2225875f;
      sa[66] = 0.23187472f;
      sa[67] = 0.41448358f;
      sa[68] = 0.1917517f;
      sa[69] = -0.26648727f;
      sa[70] = -0.42924473f;
      sa[71] = -0.14717613f;
      sa[72] = -0.38619554f;
      sa[73] = 0.27921382f;
      sa[74] = 0.36147368f;
      sa[75] = 0.01569151f;
      sa[76] = 0.26559174f;
      sa[77] = 0.118649855f;
      sa[78] = -0.3052367f;
      sa[79] = 0.35994774f;
      sa[80] = -0.31921756f;
      sa[81] = 0.085839525f;
      sa[82] = 0.20126715f;
      sa[83] = -0.19956532f;
      sa[84] = -0.46161628f;
      sa[85] = -0.33444646f;
      sa[86] = 0.08781816f;
      sa[87] = 0.3906613f;
      sa[88] = -0.32464948f;
      sa[89] = -0.08257125f;
      sa[90] = -0.20130548f;
      sa[91] = 0.4053059f;
      sa[92] = -0.20319688f;
      sa[93] = 0.020878104f;
      sa[94] = -0.4593645f;
      sa[95] = -0.15231842f;
      sa[96] = -0.29687035f;
      sa[97] = 0.048273966f;
      sa[98] = 0.03328188f;
      sa[99] = 0.06901995f;
      sa[100] = -0.32454777f;
      sa[101] = -0.11688789f;
      sa[102] = 0.2908265f;
      sa[103] = 0.15228029f;
      sa[104] = -0.118279904f;
      sa[105] = -0.2199875f;
      sa[106] = 0.3936602f;
      sa[107] = 0.42116687f;
      sa[108] = 0.166952f;
      sa[109] = 0.01441653f;
      sa[110] = 0.3084197f;
      sa[111] = -0.20772122f;
      sa[112] = -0.38669863f;
      sa[113] = -0.016114973f;
      sa[114] = 0.14082782f;
      sa[115] = -0.14849208f;
      sa[116] = 0.24409255f;
      sa[117] = 0.033090524f;
      sa[118] = -0.37496063f;
      sa[119] = -0.17293671f;
      sa[120] = -0.06949669f;
      sa[121] = 0.2692786f;
      sa[122] = 0.12411451f;
      sa[123] = 0.19008365f;
      sa[124] = -0.32911253f;
      sa[125] = 0.098924585f;
      sa[126] = -0.22001798f;
      sa[127] = 0.18138006f;
      sa[128] = -0.28663918f;
      sa[129] = 0.104588844f;
      sa[130] = 0.009553335f;
      sa[131] = 0.292035f;
      sa[132] = 0.07472303f;
      sa[133] = 0.16791491f;
      sa[134] = 0.24681054f;
      sa[135] = -0.37720767f;
      sa[136] = 0.16770792f;
      sa[137] = -0.13047428f;
      sa[138] = 0.094884895f;
      sa[139] = 0.3156683f;
      sa[140] = -0.19777587f;
      sa[141] = -0.097700655f;
      sa[142] = 0.005233428f;
      sa[143] = -0.21688382f;
      sa[144] = 0.17105596f;
      sa[145] = -0.19888985f;
      sa[146] = 0.0032953415f;
      sa[147] = -0.025899861f;
      sa[148] = -0.26330784f;
      sa[149] = 0.2791861f;
      sa[150] = -0.16915241f;
      sa[151] = -0.55012953f;
      sa[152] = 0.50704926f;
      sa[153] = -0.05260198f;
      sa[154] = 0.41223994f;
      sa[155] = -0.51939255f;
      sa[156] = -0.39767444f;
      sa[157] = -0.34683105f;
      sa[158] = -0.25584304f;
      sa[159] = -0.27113116f;
      sa[160] = 0.2622543f;
      sa[161] = -0.3851162f;
      sa[162] = 0.5625732f;
      sa[163] = -0.17546152f;
      sa[164] = 0.11530308f;
      sa[165] = -0.1581437f;
      sa[166] = 0.3995853f;
      sa[167] = -0.38468057f;
      sa[168] = 0.2733496f;
      sa[169] = -0.3925973f;
      sa[170] = 0.47255203f;
      sa[171] = 0.28545198f;
      sa[172] = 0.25630653f;
      sa[173] = 0.23088688f;
      sa[174] = -0.062313706f;
      sa[175] = -0.004793113f;
      sa[176] = -0.2869811f;
      sa[177] = 0.039799474f;
      sa[178] = -0.37160036f;
      sa[179] = -0.13193794f;
      sa[180] = -0.4146813f;
      sa[181] = -0.2173489f;
      sa[182] = 0.11651186f;
      sa[183] = -0.31576258f;
      sa[184] = 0.5981117f;
      sa[185] = 0.36275557f;
      sa[186] = -0.09887197f;
      sa[187] = -0.24521488f;
      sa[188] = -0.19867125f;
      sa[189] = -0.20701857f;
      sa[190] = -0.45685908f;
      sa[191] = -0.25371492f;
      sa[192] = -0.01898312f;
      sa[193] = 0.098287866f;
      sa[194] = -0.2878602f;
      sa[195] = -0.22450733f;
      sa[196] = 0.1506611f;
      sa[197] = -0.21423844f;
      sa[198] = 0.04861829f;
      sa[199] = 0.31821588f;
      sa[200] = -0.024642665f;
      sa[201] = 0.26914954f;
      sa[202] = 0.15776305f;
      sa[203] = -0.44043157f;
      sa[204] = 0.18226874f;
      sa[205] = 0.38282242f;
      sa[206] = -0.20129262f;
      sa[207] = 0.18545805f;
      sa[208] = -0.25474894f;
      sa[209] = 0.2135405f;
      sa[210] = -0.17533997f;
      sa[211] = -0.40884805f;
      sa[212] = -0.37282652f;
      sa[213] = 0.055941608f;
      sa[214] = -0.40678513f;
      sa[215] = 0.068284295f;
      sa[216] = 0.20087871f;
      sa[217] = 0.31962794f;
      sa[218] = 0.06670104f;
      sa[219] = 0.18897465f;
      sa[220] = 0.06721608f;
      sa[221] = -0.030764865f;
      sa[222] = -0.22205088f;
      sa[223] = -0.27949917f;
      sa[224] = 0.22660138f;
      sa[225] = 0.14853208f;
      sa[226] = -0.16809589f;
      sa[227] = 0.04407607f;
      sa[228] = -0.10403563f;
      sa[229] = -0.2181888f;
      sa[230] = -0.23961699f;
      sa[231] = -0.0956959f;
      sa[232] = 0.47964737f;
      sa[233] = -0.13124013f;
      sa[234] = -0.2025083f;
      sa[235] = -0.0010122631f;
      sa[236] = -0.3673377f;
      sa[237] = 0.46130592f;
      sa[238] = 0.1316195f;
      sa[239] = -0.15129319f;
      sa[240] = -0.032075882f;
      sa[241] = -0.37049478f;
      sa[242] = -0.28064874f;
      sa[243] = 0.47300372f;
      sa[244] = 0.27773008f;
      sa[245] = 0.26677886f;
      sa[246] = 0.29462373f;
      sa[247] = -0.46364793f;
      sa[248] = -0.23131146f;
      sa[249] = 0.04661939f;
      sa[250] = 0.08821911f;
      sa[251] = 0.22038004f;
      sa[252] = 0.32628092f;
      sa[253] = -0.25678715f;
      sa[254] = 0.3031628f;
      sa[255] = 0.085935615f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_03_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_Tanh_03_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.17418703f;
      sa[1] = -1.5601082f;
      sa[2] = -1.5714905f;
      sa[3] = 1.3742443f;
      sa[4] = 0.4557019f;
      sa[5] = -0.17814797f;
      sa[6] = -1.6087846f;
      sa[7] = 1.6343199f;
      sa[8] = 1.8465787f;
      sa[9] = 0.31644353f;
      sa[10] = 1.7112608f;
      sa[11] = 1.5134219f;
      sa[12] = 1.8482416f;
      sa[13] = -0.5431483f;
      sa[14] = -2.0433755f;
      sa[15] = -0.61068183f;
      sa[16] = 0.81269735f;
      sa[17] = -0.84669673f;
      sa[18] = -1.6101298f;
      sa[19] = -0.9873986f;
      sa[20] = -1.9605279f;
      sa[21] = 0.2042025f;
      sa[22] = -2.0456088f;
      sa[23] = -0.61542064f;
      sa[24] = -0.5434639f;
      sa[25] = 1.9233655f;
      sa[26] = -0.33606517f;
      sa[27] = 1.2684674f;
      sa[28] = 1.298465f;
      sa[29] = -0.711058f;
      sa[30] = 0.16466095f;
      sa[31] = 0.104190126f;
      sa[32] = 0.49222594f;
      sa[33] = 0.3215379f;
      sa[34] = -0.5606723f;
      sa[35] = 1.043925f;
      sa[36] = 0.7497535f;
      sa[37] = -1.3375334f;
      sa[38] = 0.58475685f;
      sa[39] = -0.41124701f;
      sa[40] = 0.21042056f;
      sa[41] = -0.80485433f;
      sa[42] = 0.58633554f;
      sa[43] = -0.13895075f;
      sa[44] = 0.9178376f;
      sa[45] = -2.2218406f;
      sa[46] = -2.2128289f;
      sa[47] = 0.21034047f;
      sa[48] = 1.5906055f;
      sa[49] = -0.13848919f;
      sa[50] = -0.46003258f;
      sa[51] = 1.8710834f;
      sa[52] = -1.794802f;
      sa[53] = 1.0288233f;
      sa[54] = 1.8619342f;
      sa[55] = 1.1270057f;
      sa[56] = -0.5718706f;
      sa[57] = -0.13591243f;
      sa[58] = 0.99235255f;
      sa[59] = 0.8406762f;
      sa[60] = -1.3757352f;
      sa[61] = 0.9804275f;
      sa[62] = -0.3268602f;
      sa[63] = -0.916281f;
      sa[64] = 0.9877329f;
      sa[65] = -0.8584609f;
      sa[66] = -1.8052921f;
      sa[67] = -0.14662705f;
      sa[68] = 0.88051945f;
      sa[69] = -1.4114206f;
      sa[70] = -1.752199f;
      sa[71] = -0.06710469f;
      sa[72] = -1.2083975f;
      sa[73] = -1.4448471f;
      sa[74] = -1.1279405f;
      sa[75] = 1.1395301f;
      sa[76] = 2.1477802f;
      sa[77] = -0.6322387f;
      sa[78] = -1.3294044f;
      sa[79] = -0.44730127f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_03 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_03_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_03_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_03_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_Tanh_03_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


