/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:07:08.718+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_03

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_03 > h2o_nn_16x16x6_ReLU_03.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_03.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_03", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_03 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_03_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_03_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_03_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_03_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_03_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_03_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_03.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_03_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.27956989247311825,0.13978494623655913,0.15053763440860216,0.27956989247311825,0.15053763440860216};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_03() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-708814839847212032L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_03_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_03_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_03_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_03_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_03_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_03_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_03_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_03_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.6732038950988186;
      sa[1] = 0.5720664463376205;
      sa[2] = 0.5208797054981187;
      sa[3] = 0.5595538049685577;
      sa[4] = 0.45323285158830856;
      sa[5] = 0.54864216872962;
      sa[6] = 0.37965790898239493;
      sa[7] = 0.7054095312370176;
      sa[8] = 0.46420101037277883;
      sa[9] = 0.6247072136950146;
      sa[10] = 0.4518086635985816;
      sa[11] = 0.3808389505948134;
      sa[12] = 0.38861480835216294;
      sa[13] = 0.3416920248041645;
      sa[14] = 0.5422622808041888;
      sa[15] = 0.6448976038131644;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_03_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.027998616491398;
      sa[1] = 0.9970438004915557;
      sa[2] = 0.9779438653828034;
      sa[3] = 0.9928011205206938;
      sa[4] = 1.0249466412984;
      sa[5] = 0.992755885350135;
      sa[6] = 0.9434562174785315;
      sa[7] = 0.9096084785243983;
      sa[8] = 0.9385254526203604;
      sa[9] = 1.0416899056986983;
      sa[10] = 0.894516842219614;
      sa[11] = 1.1295254419185496;
      sa[12] = 1.039403729122634;
      sa[13] = 0.9645430594351436;
      sa[14] = 1.0227027532499031;
      sa[15] = 1.07117329331995;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_03_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_03_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.043706138511772956;
      sa[1] = 0.0052572071855861964;
      sa[2] = -0.04698252223040126;
      sa[3] = -0.02414183530073077;
      sa[4] = 0.03774375550049958;
    }
  }
}
class h2o_nn_16x16x6_ReLU_03_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_03_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.093577184f;
      sa[1] = 0.3376626f;
      sa[2] = 0.22506155f;
      sa[3] = 0.10246152f;
      sa[4] = -0.071124755f;
      sa[5] = -0.013535388f;
      sa[6] = 0.07748432f;
      sa[7] = 0.455055f;
      sa[8] = 0.15574914f;
      sa[9] = -0.14764191f;
      sa[10] = -0.13665695f;
      sa[11] = -0.21174611f;
      sa[12] = 0.14108829f;
      sa[13] = -0.14187412f;
      sa[14] = -0.11757231f;
      sa[15] = 0.15178014f;
      sa[16] = 0.2720319f;
      sa[17] = 0.35135666f;
      sa[18] = -0.36206552f;
      sa[19] = 0.10207036f;
      sa[20] = 0.2819037f;
      sa[21] = -0.2799487f;
      sa[22] = 0.30099905f;
      sa[23] = -0.10686305f;
      sa[24] = 0.28448787f;
      sa[25] = 0.25109354f;
      sa[26] = -0.30623475f;
      sa[27] = 0.5068741f;
      sa[28] = 0.3177339f;
      sa[29] = -0.22826716f;
      sa[30] = -0.07654323f;
      sa[31] = 0.29301476f;
      sa[32] = 0.15279339f;
      sa[33] = -0.17244771f;
      sa[34] = 0.05119227f;
      sa[35] = -0.16375154f;
      sa[36] = 0.13789769f;
      sa[37] = 0.16518268f;
      sa[38] = -0.07996894f;
      sa[39] = 0.047479473f;
      sa[40] = 0.18229726f;
      sa[41] = -0.014250126f;
      sa[42] = -0.05490988f;
      sa[43] = 0.23441935f;
      sa[44] = 0.21784653f;
      sa[45] = -0.22935988f;
      sa[46] = 0.17198934f;
      sa[47] = -0.09636844f;
      sa[48] = 0.171118f;
      sa[49] = 0.21749735f;
      sa[50] = 0.15411723f;
      sa[51] = -0.18024771f;
      sa[52] = -0.14420615f;
      sa[53] = 0.34849787f;
      sa[54] = 0.17919739f;
      sa[55] = -0.13488457f;
      sa[56] = -0.1953269f;
      sa[57] = -0.2230005f;
      sa[58] = 0.3449507f;
      sa[59] = -0.072633274f;
      sa[60] = -0.4236562f;
      sa[61] = 0.27855226f;
      sa[62] = 0.15916574f;
      sa[63] = 0.13968198f;
      sa[64] = 0.14531668f;
      sa[65] = 0.18251458f;
      sa[66] = 0.04103462f;
      sa[67] = 0.25670838f;
      sa[68] = -0.18771864f;
      sa[69] = 0.24061556f;
      sa[70] = -0.06758361f;
      sa[71] = 0.4005025f;
      sa[72] = -0.15624036f;
      sa[73] = 0.22913332f;
      sa[74] = -0.2037173f;
      sa[75] = 0.11619835f;
      sa[76] = -0.25471714f;
      sa[77] = -0.12522195f;
      sa[78] = -0.09858449f;
      sa[79] = 0.049504608f;
      sa[80] = -0.2154819f;
      sa[81] = -0.15342744f;
      sa[82] = -0.011166255f;
      sa[83] = 0.09338807f;
      sa[84] = 0.019869698f;
      sa[85] = -0.20207569f;
      sa[86] = 0.19962029f;
      sa[87] = 0.20373479f;
      sa[88] = 0.22029234f;
      sa[89] = 0.0072385687f;
      sa[90] = -0.05410051f;
      sa[91] = 0.25409013f;
      sa[92] = 0.15906914f;
      sa[93] = -0.22280765f;
      sa[94] = -0.16886057f;
      sa[95] = -0.25968927f;
      sa[96] = 0.17566758f;
      sa[97] = 0.04286079f;
      sa[98] = 0.24598067f;
      sa[99] = -0.19973339f;
      sa[100] = -0.0485226f;
      sa[101] = -0.2190641f;
      sa[102] = -0.31900814f;
      sa[103] = -0.16203175f;
      sa[104] = 0.053501856f;
      sa[105] = -0.2301631f;
      sa[106] = -0.2475086f;
      sa[107] = 0.14246784f;
      sa[108] = 0.1325232f;
      sa[109] = -0.17218684f;
      sa[110] = -0.10387683f;
      sa[111] = 0.10244319f;
      sa[112] = 0.106080115f;
      sa[113] = 0.099735074f;
      sa[114] = -0.1480411f;
      sa[115] = -0.0946967f;
      sa[116] = -0.23591201f;
      sa[117] = -0.033881452f;
      sa[118] = -0.24457185f;
      sa[119] = -0.090696484f;
      sa[120] = 0.29372466f;
      sa[121] = 0.35122177f;
      sa[122] = 0.3962931f;
      sa[123] = 0.34312195f;
      sa[124] = 0.4092839f;
      sa[125] = 0.387039f;
      sa[126] = -0.39355022f;
      sa[127] = 0.016325353f;
      sa[128] = 0.06304758f;
      sa[129] = 0.09651241f;
      sa[130] = -0.1708381f;
      sa[131] = 0.24783212f;
      sa[132] = 0.3541646f;
      sa[133] = -0.2571499f;
      sa[134] = 0.0730126f;
      sa[135] = -0.32914016f;
      sa[136] = -0.25482297f;
      sa[137] = -0.023839746f;
      sa[138] = 0.20200601f;
      sa[139] = -0.12146958f;
      sa[140] = -0.05521097f;
      sa[141] = -0.14180882f;
      sa[142] = 0.10067506f;
      sa[143] = -0.41359016f;
      sa[144] = 0.2145823f;
      sa[145] = -0.15598777f;
      sa[146] = -0.1962528f;
      sa[147] = 0.20656568f;
      sa[148] = 0.16037214f;
      sa[149] = 0.21677181f;
      sa[150] = 0.31556815f;
      sa[151] = -0.2880763f;
      sa[152] = 0.019931896f;
      sa[153] = 0.27093711f;
      sa[154] = 0.31589085f;
      sa[155] = -0.18779887f;
      sa[156] = 0.14802787f;
      sa[157] = -0.17700084f;
      sa[158] = 0.11687742f;
      sa[159] = 0.10333646f;
      sa[160] = 0.1191069f;
      sa[161] = 0.2605975f;
      sa[162] = -0.19944757f;
      sa[163] = 0.010480615f;
      sa[164] = 0.2236637f;
      sa[165] = -0.0836458f;
      sa[166] = -0.10958291f;
      sa[167] = -0.11358855f;
      sa[168] = 0.28101024f;
      sa[169] = 0.39869612f;
      sa[170] = 0.042615682f;
      sa[171] = -0.09742786f;
      sa[172] = -0.07784824f;
      sa[173] = -0.18428813f;
      sa[174] = -0.019822061f;
      sa[175] = -0.30333182f;
      sa[176] = 0.018411517f;
      sa[177] = 0.0014733848f;
      sa[178] = -0.10436362f;
      sa[179] = 0.030538728f;
      sa[180] = -0.036570195f;
      sa[181] = -0.17318523f;
      sa[182] = -0.1908285f;
      sa[183] = 0.13321848f;
      sa[184] = 0.3961124f;
      sa[185] = 0.34522164f;
      sa[186] = -0.25858644f;
      sa[187] = 0.21327262f;
      sa[188] = -0.012533552f;
      sa[189] = 0.30233863f;
      sa[190] = -0.014010912f;
      sa[191] = 0.10051935f;
      sa[192] = -0.087948315f;
      sa[193] = 0.362627f;
      sa[194] = 0.12513977f;
      sa[195] = 0.47258466f;
      sa[196] = 0.45721012f;
      sa[197] = 0.10643903f;
      sa[198] = 0.023461025f;
      sa[199] = -0.3721112f;
      sa[200] = 0.04057104f;
      sa[201] = -0.2722934f;
      sa[202] = 0.15265386f;
      sa[203] = -0.066298775f;
      sa[204] = -0.24274871f;
      sa[205] = 0.18958001f;
      sa[206] = 0.25439796f;
      sa[207] = 0.18464857f;
      sa[208] = -0.23743796f;
      sa[209] = -0.003560585f;
      sa[210] = -0.18026362f;
      sa[211] = -0.16974925f;
      sa[212] = 0.2584981f;
      sa[213] = -0.13430429f;
      sa[214] = -0.173279f;
      sa[215] = -0.06646728f;
      sa[216] = 0.097699106f;
      sa[217] = 0.24314977f;
      sa[218] = -0.19307669f;
      sa[219] = 0.19995156f;
      sa[220] = -0.29892203f;
      sa[221] = -0.0015647258f;
      sa[222] = 0.17742395f;
      sa[223] = -0.008116076f;
      sa[224] = 0.10907059f;
      sa[225] = 0.39309853f;
      sa[226] = -0.13185352f;
      sa[227] = 0.36707863f;
      sa[228] = 0.093650386f;
      sa[229] = 0.0652205f;
      sa[230] = 0.23714717f;
      sa[231] = -0.33691096f;
      sa[232] = -0.22726914f;
      sa[233] = 0.14359911f;
      sa[234] = 0.15634444f;
      sa[235] = -0.24993241f;
      sa[236] = -0.077822216f;
      sa[237] = -0.29000765f;
      sa[238] = -0.2998054f;
      sa[239] = 0.091620155f;
      sa[240] = 0.0033570495f;
      sa[241] = -0.1735875f;
      sa[242] = -0.08873726f;
      sa[243] = -0.25109315f;
      sa[244] = -0.2562098f;
      sa[245] = -0.17020816f;
      sa[246] = -0.3163833f;
      sa[247] = -0.103286825f;
      sa[248] = 0.22857204f;
      sa[249] = 0.21644421f;
      sa[250] = -0.18617116f;
      sa[251] = -0.049818896f;
      sa[252] = -0.24017298f;
      sa[253] = -0.17762522f;
      sa[254] = -0.33918583f;
      sa[255] = 0.089467004f;
      sa[256] = -0.13541946f;
      sa[257] = 0.3299769f;
      sa[258] = -0.22398531f;
      sa[259] = -0.088683605f;
      sa[260] = -0.18475063f;
      sa[261] = 0.03893729f;
      sa[262] = -0.1353456f;
      sa[263] = 0.20747712f;
      sa[264] = -0.11656717f;
      sa[265] = 0.09765904f;
      sa[266] = -0.2573972f;
      sa[267] = -0.22448874f;
      sa[268] = 0.14337024f;
      sa[269] = -0.10500472f;
      sa[270] = 0.039508488f;
      sa[271] = 0.23779644f;
      sa[272] = -0.018505068f;
      sa[273] = -0.047157034f;
      sa[274] = 0.21434373f;
      sa[275] = 0.06828297f;
      sa[276] = 0.033733122f;
      sa[277] = -0.26215708f;
      sa[278] = -0.18655637f;
      sa[279] = 0.30765155f;
      sa[280] = -0.14497022f;
      sa[281] = 0.3576315f;
      sa[282] = -0.07611721f;
      sa[283] = -0.009671791f;
      sa[284] = -0.14432183f;
      sa[285] = -0.32717055f;
      sa[286] = 0.5085581f;
      sa[287] = 0.27235335f;
      sa[288] = -0.19662571f;
      sa[289] = -0.27410728f;
      sa[290] = -0.14718911f;
      sa[291] = 0.07556001f;
      sa[292] = 0.21564549f;
      sa[293] = -0.04130459f;
      sa[294] = 0.1418659f;
      sa[295] = 0.30319256f;
      sa[296] = 0.21559721f;
      sa[297] = 0.19362885f;
      sa[298] = -0.06669485f;
      sa[299] = 0.0078150425f;
      sa[300] = -0.043386664f;
      sa[301] = -0.08178752f;
      sa[302] = 0.14731605f;
      sa[303] = 0.15220165f;
      sa[304] = -0.23319782f;
      sa[305] = -0.025191829f;
      sa[306] = 0.19073561f;
      sa[307] = -0.4139032f;
      sa[308] = 0.05520101f;
      sa[309] = 0.17508374f;
      sa[310] = 0.30374297f;
      sa[311] = 0.3312688f;
      sa[312] = -0.29433155f;
      sa[313] = -0.19927952f;
      sa[314] = -0.11356182f;
      sa[315] = 0.05385222f;
      sa[316] = -0.03068601f;
      sa[317] = -0.056136854f;
      sa[318] = 0.13662483f;
      sa[319] = 0.38288987f;
      sa[320] = -0.029562872f;
      sa[321] = 0.3585374f;
      sa[322] = 0.11840198f;
      sa[323] = -0.31692004f;
      sa[324] = 0.011624521f;
      sa[325] = 0.25353152f;
      sa[326] = -0.22966003f;
      sa[327] = -0.05769044f;
      sa[328] = 0.011318663f;
      sa[329] = 0.3342488f;
      sa[330] = -0.118735604f;
      sa[331] = 0.11802717f;
      sa[332] = -0.29103282f;
      sa[333] = 0.11059169f;
      sa[334] = -0.031885985f;
      sa[335] = 0.16140732f;
      sa[336] = -0.1652766f;
      sa[337] = -0.14603512f;
      sa[338] = 0.3246642f;
      sa[339] = -0.13840652f;
      sa[340] = -0.3521513f;
      sa[341] = -0.22869313f;
      sa[342] = 0.16422382f;
      sa[343] = -0.06548364f;
      sa[344] = -0.17244467f;
      sa[345] = 0.26398838f;
      sa[346] = 0.26572716f;
      sa[347] = -0.09518892f;
      sa[348] = 0.34517515f;
      sa[349] = -0.23232403f;
      sa[350] = -0.23366679f;
      sa[351] = 0.25317788f;
      sa[352] = 0.23039442f;
      sa[353] = 0.0010171642f;
      sa[354] = 0.13284971f;
      sa[355] = 0.19743429f;
      sa[356] = -0.17383617f;
      sa[357] = 0.28264242f;
      sa[358] = -0.30774266f;
      sa[359] = 0.03860114f;
      sa[360] = -0.018539784f;
      sa[361] = -0.09304328f;
      sa[362] = -0.079900056f;
      sa[363] = 0.22916551f;
      sa[364] = -0.17217498f;
      sa[365] = -0.26205742f;
      sa[366] = -0.036237616f;
      sa[367] = -0.38776362f;
      sa[368] = -0.2737741f;
      sa[369] = 0.23806792f;
      sa[370] = -0.19048338f;
      sa[371] = 0.122436024f;
      sa[372] = -0.0078132525f;
      sa[373] = 0.3087464f;
      sa[374] = -0.16272599f;
      sa[375] = -0.3701735f;
      sa[376] = -0.36111158f;
      sa[377] = -0.2451325f;
      sa[378] = 0.30386373f;
      sa[379] = 0.23474245f;
      sa[380] = -0.15303178f;
      sa[381] = -0.159442f;
      sa[382] = -0.09079372f;
      sa[383] = -0.16872028f;
      sa[384] = -0.082767315f;
      sa[385] = 0.15276822f;
      sa[386] = -0.26584575f;
      sa[387] = -0.3170985f;
      sa[388] = 0.089989915f;
      sa[389] = -0.033817742f;
      sa[390] = -0.015677998f;
      sa[391] = -0.17626858f;
      sa[392] = 0.35059896f;
      sa[393] = 0.27718782f;
      sa[394] = -0.12584727f;
      sa[395] = 0.22247712f;
      sa[396] = 0.34772837f;
      sa[397] = -0.22903223f;
      sa[398] = 0.061988726f;
      sa[399] = 0.14690374f;
      sa[400] = 0.111890726f;
      sa[401] = 0.16029863f;
      sa[402] = -0.2340044f;
      sa[403] = -0.065869756f;
      sa[404] = 0.30965218f;
      sa[405] = -0.20671402f;
      sa[406] = -0.09979689f;
      sa[407] = 0.23308918f;
      sa[408] = -0.2634253f;
      sa[409] = -0.3327294f;
      sa[410] = -0.17129804f;
      sa[411] = 0.06954331f;
      sa[412] = -0.15611188f;
      sa[413] = 0.0728989f;
      sa[414] = 0.19527043f;
      sa[415] = 0.3490325f;
      sa[416] = -0.19374116f;
      sa[417] = 0.017140182f;
      sa[418] = -0.026103493f;
      sa[419] = 0.2293895f;
      sa[420] = 0.1617346f;
      sa[421] = 0.20016946f;
      sa[422] = 0.22796492f;
      sa[423] = -0.14009081f;
      sa[424] = 0.091777526f;
      sa[425] = -0.108600445f;
      sa[426] = -0.3734439f;
      sa[427] = 0.14439172f;
      sa[428] = -0.054283213f;
      sa[429] = -0.21935844f;
      sa[430] = 0.24497017f;
      sa[431] = 0.044132397f;
      sa[432] = -0.095228426f;
      sa[433] = 0.2167852f;
      sa[434] = 0.33059683f;
      sa[435] = 0.054894697f;
      sa[436] = -0.33150497f;
      sa[437] = -0.3255721f;
      sa[438] = -0.03265305f;
      sa[439] = -0.08493681f;
      sa[440] = 0.3298558f;
      sa[441] = -0.27901033f;
      sa[442] = 0.110527225f;
      sa[443] = 0.08910034f;
      sa[444] = -0.27534646f;
      sa[445] = 0.030296303f;
      sa[446] = 0.22225118f;
      sa[447] = 0.024568051f;
      sa[448] = 0.28442103f;
      sa[449] = 0.32475388f;
      sa[450] = -0.09681168f;
      sa[451] = 0.17392868f;
      sa[452] = 0.15554763f;
      sa[453] = -0.09588756f;
      sa[454] = -0.21007517f;
      sa[455] = -0.10448557f;
      sa[456] = 0.013267491f;
      sa[457] = 0.10838657f;
      sa[458] = -0.26267084f;
      sa[459] = 0.22973327f;
      sa[460] = 0.20032316f;
      sa[461] = 0.2592425f;
      sa[462] = 0.007095534f;
      sa[463] = 0.18817265f;
      sa[464] = -0.28259465f;
      sa[465] = 0.2206423f;
      sa[466] = -0.009689589f;
      sa[467] = 0.15173894f;
      sa[468] = 0.09577996f;
      sa[469] = 0.32140628f;
      sa[470] = 0.2651724f;
      sa[471] = 0.036453206f;
      sa[472] = 0.0050321375f;
      sa[473] = -0.16389708f;
      sa[474] = -0.03853707f;
      sa[475] = 0.17111719f;
      sa[476] = 0.24706553f;
      sa[477] = -0.14509921f;
      sa[478] = 0.22260405f;
      sa[479] = -0.20269892f;
      sa[480] = -0.40117985f;
      sa[481] = -0.31392434f;
      sa[482] = -0.34509188f;
      sa[483] = 0.20530692f;
      sa[484] = 0.25319058f;
      sa[485] = 0.22305666f;
      sa[486] = -0.02278745f;
      sa[487] = -0.18821007f;
      sa[488] = -0.26521093f;
      sa[489] = 0.07348057f;
      sa[490] = -0.037743874f;
      sa[491] = -0.18806295f;
      sa[492] = 0.23601456f;
      sa[493] = 0.3880421f;
      sa[494] = -0.24016365f;
      sa[495] = 0.32888216f;
      sa[496] = -0.06803219f;
      sa[497] = 0.03295442f;
      sa[498] = 0.119326144f;
      sa[499] = 0.15378909f;
      sa[500] = -0.07607051f;
      sa[501] = 0.13820204f;
      sa[502] = 0.2825364f;
      sa[503] = 0.06919818f;
      sa[504] = -0.10254541f;
      sa[505] = -0.13371132f;
      sa[506] = 0.14198539f;
      sa[507] = -0.09467708f;
      sa[508] = 0.10093004f;
      sa[509] = 0.29416734f;
      sa[510] = 0.17680077f;
      sa[511] = -0.034630314f;
      sa[512] = 0.114453584f;
      sa[513] = -0.021127706f;
      sa[514] = 0.2468054f;
      sa[515] = -0.14114831f;
      sa[516] = 0.05804825f;
      sa[517] = 0.15841116f;
      sa[518] = 0.16820747f;
      sa[519] = -0.07268334f;
      sa[520] = 0.31755725f;
      sa[521] = 0.24416116f;
      sa[522] = 0.03544227f;
      sa[523] = 0.19309899f;
      sa[524] = 0.22902873f;
      sa[525] = 0.19436045f;
      sa[526] = -0.012191409f;
      sa[527] = -0.22018613f;
      sa[528] = -0.043109693f;
      sa[529] = 0.022823678f;
      sa[530] = -0.22664762f;
      sa[531] = 0.03493713f;
      sa[532] = 0.19928561f;
      sa[533] = 0.18284039f;
      sa[534] = 0.20929427f;
      sa[535] = -0.072022706f;
      sa[536] = 0.06250719f;
      sa[537] = -0.2115264f;
      sa[538] = 0.21989292f;
      sa[539] = 0.27358574f;
      sa[540] = -0.30597103f;
      sa[541] = -0.15886198f;
      sa[542] = 0.012634681f;
      sa[543] = -0.38717368f;
      sa[544] = 0.19776325f;
      sa[545] = 0.21638182f;
      sa[546] = 0.15377712f;
      sa[547] = 0.30553788f;
      sa[548] = 0.07386988f;
      sa[549] = 0.12572908f;
      sa[550] = 0.0666255f;
      sa[551] = -0.23395357f;
      sa[552] = 0.093937814f;
      sa[553] = 0.014418615f;
      sa[554] = -0.10091812f;
      sa[555] = -0.069694005f;
      sa[556] = -0.13413969f;
      sa[557] = -0.18901268f;
      sa[558] = -0.26351738f;
      sa[559] = 0.3171724f;
      sa[560] = -0.31745046f;
      sa[561] = -0.092358716f;
      sa[562] = 0.23887044f;
      sa[563] = 0.012757609f;
      sa[564] = 0.38950747f;
      sa[565] = 0.15090439f;
      sa[566] = 0.29967964f;
      sa[567] = 0.15117007f;
      sa[568] = -0.058169756f;
      sa[569] = 0.04518534f;
      sa[570] = 0.0245409f;
      sa[571] = -0.050434f;
      sa[572] = -0.13157654f;
      sa[573] = 0.126346f;
      sa[574] = 0.25384802f;
      sa[575] = -0.2769136f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_03_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.41768697f;
      sa[1] = 0.032162182f;
      sa[2] = -0.24339612f;
      sa[3] = -0.2674316f;
      sa[4] = 0.10784721f;
      sa[5] = 0.07746647f;
      sa[6] = 0.2923475f;
      sa[7] = -0.061347444f;
      sa[8] = -0.22610857f;
      sa[9] = 0.18266319f;
      sa[10] = -0.09458796f;
      sa[11] = 0.1526366f;
      sa[12] = 0.08474863f;
      sa[13] = 0.12348209f;
      sa[14] = -0.16251603f;
      sa[15] = 0.34786135f;
      sa[16] = 0.4565113f;
      sa[17] = -0.10818258f;
      sa[18] = 0.023772046f;
      sa[19] = -0.08379706f;
      sa[20] = 0.33350128f;
      sa[21] = -0.03410601f;
      sa[22] = -0.30323195f;
      sa[23] = 0.2675242f;
      sa[24] = -0.3831438f;
      sa[25] = 0.11083206f;
      sa[26] = -0.11216645f;
      sa[27] = 0.41416588f;
      sa[28] = -0.34923193f;
      sa[29] = -0.17492108f;
      sa[30] = 0.15290026f;
      sa[31] = -0.23981689f;
      sa[32] = -0.3524119f;
      sa[33] = -0.40839744f;
      sa[34] = 0.04241599f;
      sa[35] = 0.3853654f;
      sa[36] = -0.1253453f;
      sa[37] = -0.068925746f;
      sa[38] = 0.011743209f;
      sa[39] = 0.297883f;
      sa[40] = -0.22888201f;
      sa[41] = -0.37789616f;
      sa[42] = -0.28434724f;
      sa[43] = -0.36282656f;
      sa[44] = -0.043666735f;
      sa[45] = -0.4730458f;
      sa[46] = 0.32443815f;
      sa[47] = 0.2781027f;
      sa[48] = -0.40686858f;
      sa[49] = -0.29315376f;
      sa[50] = 0.16556594f;
      sa[51] = -0.096533544f;
      sa[52] = 0.14146629f;
      sa[53] = 0.22418343f;
      sa[54] = -0.07984117f;
      sa[55] = 0.3986467f;
      sa[56] = -0.2768349f;
      sa[57] = -0.3095551f;
      sa[58] = 0.10237225f;
      sa[59] = -0.023429275f;
      sa[60] = 0.30717298f;
      sa[61] = -0.24341139f;
      sa[62] = -0.10696441f;
      sa[63] = 0.12851276f;
      sa[64] = 0.51633716f;
      sa[65] = -0.17180923f;
      sa[66] = 0.24245664f;
      sa[67] = 0.42261633f;
      sa[68] = 0.240444f;
      sa[69] = -0.27000952f;
      sa[70] = -0.41853836f;
      sa[71] = -0.11980732f;
      sa[72] = -0.37610513f;
      sa[73] = 0.3032343f;
      sa[74] = 0.38646588f;
      sa[75] = 0.007274695f;
      sa[76] = 0.31321448f;
      sa[77] = 0.23003021f;
      sa[78] = -0.20258372f;
      sa[79] = 0.3626083f;
      sa[80] = -0.26411915f;
      sa[81] = 0.08992176f;
      sa[82] = 0.14921735f;
      sa[83] = -0.20697638f;
      sa[84] = -0.4422682f;
      sa[85] = -0.3517038f;
      sa[86] = 0.049171146f;
      sa[87] = 0.37827706f;
      sa[88] = -0.38718042f;
      sa[89] = -0.13648728f;
      sa[90] = -0.27668396f;
      sa[91] = 0.4265233f;
      sa[92] = -0.13888109f;
      sa[93] = 0.025370201f;
      sa[94] = -0.40977645f;
      sa[95] = -0.07446681f;
      sa[96] = -0.37252012f;
      sa[97] = 0.012518129f;
      sa[98] = -0.015163245f;
      sa[99] = 0.045563646f;
      sa[100] = -0.3799605f;
      sa[101] = -0.19185264f;
      sa[102] = 0.2878099f;
      sa[103] = 0.10156474f;
      sa[104] = -0.10343037f;
      sa[105] = -0.20801905f;
      sa[106] = 0.35283703f;
      sa[107] = 0.34029162f;
      sa[108] = 0.12714733f;
      sa[109] = -0.08881031f;
      sa[110] = 0.24531902f;
      sa[111] = -0.2605352f;
      sa[112] = -0.41137433f;
      sa[113] = -0.034972534f;
      sa[114] = 0.058569554f;
      sa[115] = -0.18915915f;
      sa[116] = 0.16671406f;
      sa[117] = -0.11921418f;
      sa[118] = -0.38245732f;
      sa[119] = -0.16633639f;
      sa[120] = -0.1409842f;
      sa[121] = 0.24801716f;
      sa[122] = 0.02671253f;
      sa[123] = 0.11166009f;
      sa[124] = -0.27530977f;
      sa[125] = 0.14633949f;
      sa[126] = -0.29547876f;
      sa[127] = 0.101170816f;
      sa[128] = -0.31479827f;
      sa[129] = 0.121640064f;
      sa[130] = -0.035463806f;
      sa[131] = 0.20758781f;
      sa[132] = 0.012829815f;
      sa[133] = 0.095457464f;
      sa[134] = 0.18285127f;
      sa[135] = -0.4299967f;
      sa[136] = 0.089789964f;
      sa[137] = -0.18560642f;
      sa[138] = 0.022160428f;
      sa[139] = 0.2891365f;
      sa[140] = -0.17473052f;
      sa[141] = -0.08070872f;
      sa[142] = -0.03163773f;
      sa[143] = -0.263347f;
      sa[144] = 0.23171514f;
      sa[145] = -0.15949275f;
      sa[146] = -0.033771586f;
      sa[147] = -0.0048775845f;
      sa[148] = -0.22063147f;
      sa[149] = 0.41348547f;
      sa[150] = -0.22577995f;
      sa[151] = -0.5623393f;
      sa[152] = 0.49979442f;
      sa[153] = -0.087153696f;
      sa[154] = 0.37406325f;
      sa[155] = -0.4663691f;
      sa[156] = -0.39257735f;
      sa[157] = -0.33158636f;
      sa[158] = -0.16883108f;
      sa[159] = -0.20874822f;
      sa[160] = 0.25745222f;
      sa[161] = -0.3984214f;
      sa[162] = 0.47727117f;
      sa[163] = -0.25806555f;
      sa[164] = 0.08543959f;
      sa[165] = -0.27942792f;
      sa[166] = 0.3425784f;
      sa[167] = -0.47765997f;
      sa[168] = 0.19833031f;
      sa[169] = -0.46151835f;
      sa[170] = 0.35769108f;
      sa[171] = 0.20722406f;
      sa[172] = 0.3325551f;
      sa[173] = 0.3047412f;
      sa[174] = -0.13032812f;
      sa[175] = -0.1011955f;
      sa[176] = -0.14734495f;
      sa[177] = 0.10382266f;
      sa[178] = -0.31671357f;
      sa[179] = -0.04023155f;
      sa[180] = -0.39602503f;
      sa[181] = -0.15400252f;
      sa[182] = 0.14307809f;
      sa[183] = -0.24823135f;
      sa[184] = 0.5184703f;
      sa[185] = 0.38864908f;
      sa[186] = -0.07979068f;
      sa[187] = -0.19382396f;
      sa[188] = -0.12029507f;
      sa[189] = -0.12426053f;
      sa[190] = -0.3724814f;
      sa[191] = -0.18198982f;
      sa[192] = 0.04652296f;
      sa[193] = 0.12440488f;
      sa[194] = -0.2458731f;
      sa[195] = -0.20260541f;
      sa[196] = 0.18029533f;
      sa[197] = -0.17110625f;
      sa[198] = 0.05271789f;
      sa[199] = 0.3463459f;
      sa[200] = -0.01025573f;
      sa[201] = 0.27538708f;
      sa[202] = 0.20409924f;
      sa[203] = -0.4145487f;
      sa[204] = 0.22526036f;
      sa[205] = 0.50622255f;
      sa[206] = -0.1665125f;
      sa[207] = 0.19744742f;
      sa[208] = -0.2762922f;
      sa[209] = 0.17119896f;
      sa[210] = -0.19929887f;
      sa[211] = -0.34787875f;
      sa[212] = -0.39597154f;
      sa[213] = -0.014099071f;
      sa[214] = -0.3848478f;
      sa[215] = 0.04589084f;
      sa[216] = 0.15336177f;
      sa[217] = 0.32314518f;
      sa[218] = 0.023230629f;
      sa[219] = 0.12394761f;
      sa[220] = 0.07838971f;
      sa[221] = -0.07818746f;
      sa[222] = -0.25346333f;
      sa[223] = -0.33608022f;
      sa[224] = 0.27637234f;
      sa[225] = 0.11352679f;
      sa[226] = -0.15134981f;
      sa[227] = 0.072260804f;
      sa[228] = -0.04243135f;
      sa[229] = -0.174822f;
      sa[230] = -0.2276911f;
      sa[231] = -0.06994258f;
      sa[232] = 0.48671973f;
      sa[233] = -0.15089436f;
      sa[234] = -0.18445863f;
      sa[235] = 0.036499023f;
      sa[236] = -0.3724458f;
      sa[237] = 0.44300252f;
      sa[238] = 0.1784507f;
      sa[239] = -0.08933264f;
      sa[240] = -0.005404624f;
      sa[241] = -0.3414975f;
      sa[242] = -0.23836981f;
      sa[243] = 0.48609105f;
      sa[244] = 0.28018272f;
      sa[245] = 0.39698344f;
      sa[246] = 0.22465724f;
      sa[247] = -0.4818167f;
      sa[248] = -0.14439036f;
      sa[249] = 0.061448306f;
      sa[250] = 0.21571764f;
      sa[251] = 0.36283335f;
      sa[252] = 0.28553042f;
      sa[253] = -0.30868396f;
      sa[254] = 0.3203269f;
      sa[255] = 0.13590063f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_03_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_ReLU_03_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.1308894f;
      sa[1] = -1.5972867f;
      sa[2] = -1.6139622f;
      sa[3] = 1.3359475f;
      sa[4] = 0.40703332f;
      sa[5] = -0.2719865f;
      sa[6] = -1.6523385f;
      sa[7] = 1.5231524f;
      sa[8] = 1.7885102f;
      sa[9] = 0.23807946f;
      sa[10] = 1.6531954f;
      sa[11] = 1.4789608f;
      sa[12] = 1.8429046f;
      sa[13] = -0.5648062f;
      sa[14] = -2.0200262f;
      sa[15] = -0.7060366f;
      sa[16] = 0.7653188f;
      sa[17] = -0.8525848f;
      sa[18] = -1.5423648f;
      sa[19] = -0.9163105f;
      sa[20] = -1.9616604f;
      sa[21] = 0.29163003f;
      sa[22] = -2.0032024f;
      sa[23] = -0.6005864f;
      sa[24] = -0.5447749f;
      sa[25] = 1.9016274f;
      sa[26] = -0.3468081f;
      sa[27] = 1.233372f;
      sa[28] = 1.2147882f;
      sa[29] = -0.7189105f;
      sa[30] = 0.15816589f;
      sa[31] = 0.13794637f;
      sa[32] = 0.4021032f;
      sa[33] = 0.260165f;
      sa[34] = -0.59224254f;
      sa[35] = 1.0575392f;
      sa[36] = 0.6026388f;
      sa[37] = -1.3180571f;
      sa[38] = 0.5467836f;
      sa[39] = -0.25399533f;
      sa[40] = 0.1935993f;
      sa[41] = -0.847706f;
      sa[42] = 0.50952643f;
      sa[43] = -0.6348234f;
      sa[44] = 0.9178013f;
      sa[45] = -2.1752717f;
      sa[46] = -2.2082295f;
      sa[47] = 0.02064388f;
      sa[48] = 1.5844386f;
      sa[49] = -0.23579966f;
      sa[50] = -0.48284227f;
      sa[51] = 1.7965057f;
      sa[52] = -1.7735748f;
      sa[53] = 0.99414873f;
      sa[54] = 1.8036692f;
      sa[55] = 1.0886182f;
      sa[56] = -0.56710374f;
      sa[57] = -0.15679057f;
      sa[58] = 0.98160094f;
      sa[59] = 0.82461226f;
      sa[60] = -1.421512f;
      sa[61] = 0.93788165f;
      sa[62] = -0.40886083f;
      sa[63] = -0.8708436f;
      sa[64] = 0.9626599f;
      sa[65] = -0.94915456f;
      sa[66] = -1.783402f;
      sa[67] = -0.15333325f;
      sa[68] = 0.9104218f;
      sa[69] = -1.3812076f;
      sa[70] = -1.6653776f;
      sa[71] = -0.045343928f;
      sa[72] = -1.0113297f;
      sa[73] = -1.2112682f;
      sa[74] = -1.0756481f;
      sa[75] = 1.2599391f;
      sa[76] = 1.9269365f;
      sa[77] = -0.62455124f;
      sa[78] = -1.3617796f;
      sa[79] = -0.3602376f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_03 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_03_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_03_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_03_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_ReLU_03_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


