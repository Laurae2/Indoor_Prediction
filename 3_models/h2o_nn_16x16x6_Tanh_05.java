/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:07:38.226+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_05

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_05 > h2o_nn_16x16x6_Tanh_05.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_05.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_05", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_05 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_05_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_05_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_05_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_05_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_05_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_05_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_05.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_05_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.29347826086956524,0.13043478260869565,0.14130434782608695,0.29347826086956524,0.14130434782608695};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_05() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(5685032972432835968L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_05_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_05_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_05_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_05_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_05_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_05_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_05_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_05_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_05_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_05_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_05_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.023271316564437476;
      sa[1] = -0.020550139935068268;
      sa[2] = 0.0917464643843788;
      sa[3] = -0.09669945259039159;
      sa[4] = 0.04401033770838949;
      sa[5] = 0.051897495790380055;
      sa[6] = 0.08888490722971751;
      sa[7] = -0.0030218483084949585;
      sa[8] = -0.05198923852858378;
      sa[9] = 0.02772702810665412;
      sa[10] = 0.06506162934126027;
      sa[11] = -0.029408120985019954;
      sa[12] = 0.10858291988183978;
      sa[13] = 0.03830822925374862;
      sa[14] = -0.11240937942095669;
      sa[15] = 0.07860004425449958;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_05_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_05_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.058586999460819605;
      sa[1] = -0.1000385639798903;
      sa[2] = -0.053267448738613915;
      sa[3] = 0.08210742687144099;
      sa[4] = 0.08961431396867779;
      sa[5] = -0.04448655985151904;
      sa[6] = -0.03655776831837005;
      sa[7] = 0.05822441897637861;
      sa[8] = 0.05090825635446816;
      sa[9] = -0.04662259390850191;
      sa[10] = 0.08890939724413811;
      sa[11] = 0.15855229165382437;
      sa[12] = 0.017078276867462994;
      sa[13] = 0.03955677802288665;
      sa[14] = -0.05240260933575118;
      sa[15] = -0.09772834295416188;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_05_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_05_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.10047653704837972;
      sa[1] = -0.06675693242953597;
      sa[2] = -0.0788260741315634;
      sa[3] = -0.01868365384802595;
      sa[4] = 0.005570596550839665;
    }
  }
}
class h2o_nn_16x16x6_Tanh_05_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_05_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_05_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.09334618f;
      sa[1] = 0.28317443f;
      sa[2] = 0.34834805f;
      sa[3] = 0.21590333f;
      sa[4] = -0.11584465f;
      sa[5] = -0.15131392f;
      sa[6] = 0.00666526f;
      sa[7] = 0.4310068f;
      sa[8] = 0.16339876f;
      sa[9] = -0.11948149f;
      sa[10] = -0.16452157f;
      sa[11] = -0.21515621f;
      sa[12] = 0.14233916f;
      sa[13] = -0.23633903f;
      sa[14] = -0.13350876f;
      sa[15] = 0.15754808f;
      sa[16] = 0.21625425f;
      sa[17] = 0.26958352f;
      sa[18] = -0.2682338f;
      sa[19] = 0.22230026f;
      sa[20] = 0.3402142f;
      sa[21] = -0.24804804f;
      sa[22] = 0.31291327f;
      sa[23] = -0.032766636f;
      sa[24] = 0.4423756f;
      sa[25] = 0.20702595f;
      sa[26] = -0.31457192f;
      sa[27] = 0.28397942f;
      sa[28] = 0.3451999f;
      sa[29] = -0.21290709f;
      sa[30] = -0.10977924f;
      sa[31] = 0.3053374f;
      sa[32] = 0.24099286f;
      sa[33] = -0.30256805f;
      sa[34] = 0.06071194f;
      sa[35] = -0.14156991f;
      sa[36] = -0.13158055f;
      sa[37] = 0.25070992f;
      sa[38] = -0.072197676f;
      sa[39] = 0.09630984f;
      sa[40] = 0.05919608f;
      sa[41] = -0.1576693f;
      sa[42] = -0.20503977f;
      sa[43] = 0.08158742f;
      sa[44] = 0.061690684f;
      sa[45] = -0.16619106f;
      sa[46] = -0.005854133f;
      sa[47] = -0.055236813f;
      sa[48] = 0.2583985f;
      sa[49] = 0.23338677f;
      sa[50] = 0.17545071f;
      sa[51] = -0.27357066f;
      sa[52] = -0.09960117f;
      sa[53] = 0.38872224f;
      sa[54] = 0.35413724f;
      sa[55] = -0.045759723f;
      sa[56] = -0.13861962f;
      sa[57] = -0.24072741f;
      sa[58] = 0.30606127f;
      sa[59] = -0.1003221f;
      sa[60] = -0.24850158f;
      sa[61] = 0.14219832f;
      sa[62] = 0.17811365f;
      sa[63] = 0.122437485f;
      sa[64] = 0.17295499f;
      sa[65] = 0.16683945f;
      sa[66] = 0.0069485973f;
      sa[67] = 0.23139557f;
      sa[68] = -0.041109607f;
      sa[69] = 0.22814251f;
      sa[70] = -0.13566779f;
      sa[71] = 0.3978349f;
      sa[72] = 0.017813852f;
      sa[73] = 0.1809771f;
      sa[74] = -0.38336933f;
      sa[75] = 0.09202823f;
      sa[76] = -0.24425973f;
      sa[77] = -0.07113105f;
      sa[78] = -0.0831382f;
      sa[79] = 0.04999438f;
      sa[80] = -0.10117353f;
      sa[81] = -0.2542071f;
      sa[82] = -0.025839036f;
      sa[83] = 0.118744515f;
      sa[84] = -0.040313683f;
      sa[85] = -0.19677928f;
      sa[86] = 0.15774411f;
      sa[87] = 0.16367663f;
      sa[88] = 0.123960145f;
      sa[89] = -0.0799165f;
      sa[90] = -0.086035006f;
      sa[91] = 0.13187516f;
      sa[92] = 0.074853234f;
      sa[93] = -0.2771382f;
      sa[94] = -0.20473133f;
      sa[95] = -0.38314036f;
      sa[96] = 0.013976491f;
      sa[97] = 0.04149069f;
      sa[98] = 0.25408334f;
      sa[99] = -0.14613478f;
      sa[100] = -0.10478618f;
      sa[101] = -0.27038634f;
      sa[102] = -0.3033061f;
      sa[103] = -0.18480876f;
      sa[104] = -0.058399003f;
      sa[105] = -0.18976933f;
      sa[106] = -0.20434362f;
      sa[107] = 0.16440073f;
      sa[108] = 0.25413302f;
      sa[109] = -0.1698377f;
      sa[110] = -0.016842075f;
      sa[111] = 0.29175326f;
      sa[112] = 0.13711129f;
      sa[113] = 0.068216756f;
      sa[114] = -0.14815198f;
      sa[115] = -0.027106348f;
      sa[116] = -0.18185857f;
      sa[117] = -0.027422322f;
      sa[118] = -0.18957186f;
      sa[119] = -0.12590134f;
      sa[120] = 0.23527545f;
      sa[121] = 0.27484027f;
      sa[122] = 0.34639487f;
      sa[123] = 0.3230495f;
      sa[124] = 0.47623226f;
      sa[125] = 0.32556546f;
      sa[126] = -0.43611977f;
      sa[127] = -0.059766013f;
      sa[128] = 0.073086254f;
      sa[129] = 0.1574694f;
      sa[130] = -0.13526368f;
      sa[131] = 0.30497804f;
      sa[132] = 0.2917679f;
      sa[133] = -0.26656732f;
      sa[134] = 0.066727474f;
      sa[135] = -0.35082656f;
      sa[136] = -0.28873107f;
      sa[137] = -0.020499894f;
      sa[138] = 0.15006687f;
      sa[139] = -0.11051819f;
      sa[140] = -0.081920356f;
      sa[141] = -0.17661324f;
      sa[142] = 0.15525988f;
      sa[143] = -0.41206998f;
      sa[144] = 0.3485062f;
      sa[145] = -0.14612669f;
      sa[146] = -0.24421118f;
      sa[147] = 0.1989269f;
      sa[148] = 0.18410477f;
      sa[149] = 0.23676635f;
      sa[150] = 0.3086424f;
      sa[151] = -0.30080193f;
      sa[152] = 0.11655125f;
      sa[153] = 0.27719688f;
      sa[154] = 0.3295276f;
      sa[155] = -0.18757421f;
      sa[156] = 0.14418972f;
      sa[157] = -0.17846683f;
      sa[158] = 0.0820442f;
      sa[159] = 0.06316647f;
      sa[160] = 0.115809105f;
      sa[161] = 0.23795477f;
      sa[162] = -0.23943433f;
      sa[163] = 0.13474369f;
      sa[164] = 0.2353582f;
      sa[165] = -0.07318064f;
      sa[166] = -0.11964771f;
      sa[167] = -0.17140178f;
      sa[168] = 0.2239385f;
      sa[169] = 0.3585534f;
      sa[170] = 0.03481361f;
      sa[171] = -0.045910623f;
      sa[172] = -0.033742335f;
      sa[173] = -0.11982004f;
      sa[174] = 0.035658415f;
      sa[175] = -0.25102228f;
      sa[176] = 0.024142522f;
      sa[177] = -0.03749334f;
      sa[178] = -0.114970356f;
      sa[179] = 0.0041666282f;
      sa[180] = 0.054209046f;
      sa[181] = -0.30481282f;
      sa[182] = -0.15005495f;
      sa[183] = 0.16303109f;
      sa[184] = 0.3004741f;
      sa[185] = 0.2349218f;
      sa[186] = -0.29942042f;
      sa[187] = 0.0307093f;
      sa[188] = 0.09258208f;
      sa[189] = 0.048106927f;
      sa[190] = 0.06471137f;
      sa[191] = 0.03876192f;
      sa[192] = -0.17049234f;
      sa[193] = 0.2690624f;
      sa[194] = 0.093321f;
      sa[195] = 0.22971532f;
      sa[196] = 0.20754099f;
      sa[197] = -0.17288421f;
      sa[198] = 0.024495738f;
      sa[199] = -0.08760701f;
      sa[200] = -0.029178103f;
      sa[201] = -0.35875067f;
      sa[202] = 0.1104325f;
      sa[203] = -0.11389628f;
      sa[204] = -0.23710391f;
      sa[205] = 0.25976825f;
      sa[206] = 0.19558644f;
      sa[207] = 0.07772996f;
      sa[208] = -0.3296272f;
      sa[209] = -0.13128729f;
      sa[210] = -0.3158091f;
      sa[211] = -0.37078825f;
      sa[212] = 0.31763288f;
      sa[213] = -0.26945892f;
      sa[214] = -0.18502082f;
      sa[215] = -0.0045713247f;
      sa[216] = 0.20960999f;
      sa[217] = 0.23809668f;
      sa[218] = -0.2220574f;
      sa[219] = 0.37273866f;
      sa[220] = -0.22385886f;
      sa[221] = 0.099088654f;
      sa[222] = 0.29386792f;
      sa[223] = 0.07371129f;
      sa[224] = 0.20543271f;
      sa[225] = 0.23093934f;
      sa[226] = -0.22985381f;
      sa[227] = 0.36136252f;
      sa[228] = 0.1396723f;
      sa[229] = 0.13331181f;
      sa[230] = 0.31960618f;
      sa[231] = -0.2709949f;
      sa[232] = -0.28036973f;
      sa[233] = -1.7188139E-4f;
      sa[234] = 0.11365481f;
      sa[235] = -0.33366534f;
      sa[236] = -0.03939366f;
      sa[237] = -0.24547821f;
      sa[238] = -0.2063572f;
      sa[239] = 0.10827164f;
      sa[240] = -0.020046668f;
      sa[241] = -0.20888034f;
      sa[242] = -0.1326237f;
      sa[243] = -0.4260127f;
      sa[244] = -0.2384905f;
      sa[245] = -0.1589847f;
      sa[246] = -0.2757452f;
      sa[247] = -0.10719345f;
      sa[248] = 0.13221082f;
      sa[249] = 0.22222932f;
      sa[250] = -0.20234002f;
      sa[251] = -0.10642835f;
      sa[252] = -0.23294552f;
      sa[253] = -0.2895498f;
      sa[254] = -0.43084836f;
      sa[255] = 0.12003748f;
      sa[256] = -0.22426343f;
      sa[257] = 0.2735185f;
      sa[258] = -0.296538f;
      sa[259] = -0.11661859f;
      sa[260] = -0.15026559f;
      sa[261] = -0.13406546f;
      sa[262] = -0.17857774f;
      sa[263] = 0.15302089f;
      sa[264] = -0.15411563f;
      sa[265] = 0.054135386f;
      sa[266] = -0.30040386f;
      sa[267] = -0.21908578f;
      sa[268] = 0.20470534f;
      sa[269] = -0.2541535f;
      sa[270] = -0.0268531f;
      sa[271] = 0.22195153f;
      sa[272] = -0.04492242f;
      sa[273] = -0.096719004f;
      sa[274] = 0.20201299f;
      sa[275] = 0.062625565f;
      sa[276] = 0.014759885f;
      sa[277] = -0.25982076f;
      sa[278] = -0.15267001f;
      sa[279] = 0.29919714f;
      sa[280] = -0.19053857f;
      sa[281] = 0.2888955f;
      sa[282] = -0.13121119f;
      sa[283] = 1.107821E-4f;
      sa[284] = -0.23179336f;
      sa[285] = -0.36687425f;
      sa[286] = 0.5847436f;
      sa[287] = 0.3722529f;
      sa[288] = -0.36695942f;
      sa[289] = -0.19181229f;
      sa[290] = -0.019324197f;
      sa[291] = 0.12589754f;
      sa[292] = 0.17580912f;
      sa[293] = -0.09902767f;
      sa[294] = 0.13322671f;
      sa[295] = 0.17531082f;
      sa[296] = 0.11827058f;
      sa[297] = 0.2812259f;
      sa[298] = -0.05800243f;
      sa[299] = 0.020525513f;
      sa[300] = -9.779348E-4f;
      sa[301] = -0.077919714f;
      sa[302] = 0.20603244f;
      sa[303] = 0.07703344f;
      sa[304] = -0.22663707f;
      sa[305] = 0.036510296f;
      sa[306] = 0.26642746f;
      sa[307] = -0.28755993f;
      sa[308] = 0.10302719f;
      sa[309] = 0.18964286f;
      sa[310] = 0.3362236f;
      sa[311] = 0.37364852f;
      sa[312] = -0.10961933f;
      sa[313] = -0.17282248f;
      sa[314] = -0.15827788f;
      sa[315] = -0.051717248f;
      sa[316] = -0.037435375f;
      sa[317] = -0.09863905f;
      sa[318] = 0.072712295f;
      sa[319] = 0.3086231f;
      sa[320] = 0.07910532f;
      sa[321] = 0.24259293f;
      sa[322] = 0.13622773f;
      sa[323] = -0.24839197f;
      sa[324] = -0.110551946f;
      sa[325] = 0.30535126f;
      sa[326] = -0.19237605f;
      sa[327] = -0.054048955f;
      sa[328] = -0.036165413f;
      sa[329] = 0.26604587f;
      sa[330] = -0.2235099f;
      sa[331] = 0.0460512f;
      sa[332] = -0.3846432f;
      sa[333] = 0.25544596f;
      sa[334] = -0.046079505f;
      sa[335] = 0.20355472f;
      sa[336] = -0.14932697f;
      sa[337] = -0.1690625f;
      sa[338] = 0.27008897f;
      sa[339] = -0.18158966f;
      sa[340] = -0.280414f;
      sa[341] = -0.1492085f;
      sa[342] = 0.20379147f;
      sa[343] = -0.014211147f;
      sa[344] = -0.14025202f;
      sa[345] = 0.26668411f;
      sa[346] = 0.20805289f;
      sa[347] = -0.10933138f;
      sa[348] = 0.38819087f;
      sa[349] = -0.3107968f;
      sa[350] = -0.19349611f;
      sa[351] = 0.2897737f;
      sa[352] = 0.2954296f;
      sa[353] = 0.048891287f;
      sa[354] = 0.15146051f;
      sa[355] = 0.22097728f;
      sa[356] = -0.04309795f;
      sa[357] = 0.28874245f;
      sa[358] = -0.35684344f;
      sa[359] = 0.023259655f;
      sa[360] = 0.19121826f;
      sa[361] = -0.055449106f;
      sa[362] = -0.37489426f;
      sa[363] = 0.21138437f;
      sa[364] = -0.22112577f;
      sa[365] = -0.2356308f;
      sa[366] = -0.11552575f;
      sa[367] = -0.5238418f;
      sa[368] = -0.068052225f;
      sa[369] = 0.12594305f;
      sa[370] = -0.10362016f;
      sa[371] = 0.15575987f;
      sa[372] = -0.09081867f;
      sa[373] = 0.28837302f;
      sa[374] = -0.25620425f;
      sa[375] = -0.5281747f;
      sa[376] = -0.49053344f;
      sa[377] = -0.38135657f;
      sa[378] = 0.27057782f;
      sa[379] = 0.19189516f;
      sa[380] = -0.24252164f;
      sa[381] = -0.24073057f;
      sa[382] = -0.17786874f;
      sa[383] = -0.383022f;
      sa[384] = -0.38246432f;
      sa[385] = 0.14223574f;
      sa[386] = -0.24328747f;
      sa[387] = -0.1752877f;
      sa[388] = 0.051108435f;
      sa[389] = -0.05548341f;
      sa[390] = 0.0027128696f;
      sa[391] = -0.24630533f;
      sa[392] = 0.3088436f;
      sa[393] = 0.21819787f;
      sa[394] = -0.08473081f;
      sa[395] = 0.26481694f;
      sa[396] = 0.35155576f;
      sa[397] = -0.2763222f;
      sa[398] = -0.008545859f;
      sa[399] = 0.12854227f;
      sa[400] = 0.15816876f;
      sa[401] = 0.25123462f;
      sa[402] = -0.16441345f;
      sa[403] = -0.019356834f;
      sa[404] = 0.31637558f;
      sa[405] = -0.34444475f;
      sa[406] = -0.090875976f;
      sa[407] = 0.20196041f;
      sa[408] = -0.26363912f;
      sa[409] = -0.28871256f;
      sa[410] = -0.14151478f;
      sa[411] = 0.064256154f;
      sa[412] = -0.20198046f;
      sa[413] = 0.023826497f;
      sa[414] = 0.15986237f;
      sa[415] = 0.25526926f;
      sa[416] = -0.23588523f;
      sa[417] = -0.022518223f;
      sa[418] = -0.015691658f;
      sa[419] = 0.17081162f;
      sa[420] = 0.11325009f;
      sa[421] = 0.2872795f;
      sa[422] = 0.23420739f;
      sa[423] = -0.09684289f;
      sa[424] = 0.04805961f;
      sa[425] = -0.17302032f;
      sa[426] = -0.36004972f;
      sa[427] = 0.09079647f;
      sa[428] = -0.15287732f;
      sa[429] = -0.1636416f;
      sa[430] = 0.23001096f;
      sa[431] = 0.035726987f;
      sa[432] = 0.0055747735f;
      sa[433] = 0.15562944f;
      sa[434] = 0.17237732f;
      sa[435] = -0.051645055f;
      sa[436] = -0.31802273f;
      sa[437] = -0.26965857f;
      sa[438] = -0.038653284f;
      sa[439] = -0.057202928f;
      sa[440] = 0.43977353f;
      sa[441] = -0.4331333f;
      sa[442] = 0.15189278f;
      sa[443] = -0.049623266f;
      sa[444] = -0.2493308f;
      sa[445] = 0.070012435f;
      sa[446] = 0.21338475f;
      sa[447] = 0.027247591f;
      sa[448] = 0.1448838f;
      sa[449] = 0.1721698f;
      sa[450] = -0.11221111f;
      sa[451] = 0.15558241f;
      sa[452] = 0.18777615f;
      sa[453] = -0.07367732f;
      sa[454] = -0.21481287f;
      sa[455] = -0.10106944f;
      sa[456] = -0.15501913f;
      sa[457] = 0.10776749f;
      sa[458] = -0.20029226f;
      sa[459] = 0.34073472f;
      sa[460] = 0.25879648f;
      sa[461] = 0.32086542f;
      sa[462] = 0.091209844f;
      sa[463] = 0.2419736f;
      sa[464] = -0.3151335f;
      sa[465] = 0.20288026f;
      sa[466] = -0.0022211699f;
      sa[467] = 0.13901532f;
      sa[468] = 0.07801807f;
      sa[469] = 0.31968552f;
      sa[470] = 0.20591654f;
      sa[471] = -0.0060442067f;
      sa[472] = 0.0076047448f;
      sa[473] = -0.12297544f;
      sa[474] = -0.063065656f;
      sa[475] = 0.09909357f;
      sa[476] = 0.2125506f;
      sa[477] = -0.16176258f;
      sa[478] = 0.16128783f;
      sa[479] = -0.2335021f;
      sa[480] = -0.33057594f;
      sa[481] = -0.23810734f;
      sa[482] = -0.33215827f;
      sa[483] = 0.21004817f;
      sa[484] = 0.24294576f;
      sa[485] = 0.17936414f;
      sa[486] = -0.0036741393f;
      sa[487] = -0.11733637f;
      sa[488] = -0.20986377f;
      sa[489] = 0.08467278f;
      sa[490] = -0.0562775f;
      sa[491] = -0.23290527f;
      sa[492] = 0.24883817f;
      sa[493] = 0.27123275f;
      sa[494] = -0.19557059f;
      sa[495] = 0.31010807f;
      sa[496] = 0.047599923f;
      sa[497] = 0.120919265f;
      sa[498] = 0.22400314f;
      sa[499] = 0.2550738f;
      sa[500] = 0.047334075f;
      sa[501] = 0.20745789f;
      sa[502] = 0.19202049f;
      sa[503] = 0.00642115f;
      sa[504] = -0.13142262f;
      sa[505] = -0.2178922f;
      sa[506] = 0.30692664f;
      sa[507] = 0.09676625f;
      sa[508] = 0.10507994f;
      sa[509] = 0.2604591f;
      sa[510] = 0.25070906f;
      sa[511] = 0.06592125f;
      sa[512] = 0.12131806f;
      sa[513] = -0.08961841f;
      sa[514] = 0.25135195f;
      sa[515] = -0.11799369f;
      sa[516] = 0.045593362f;
      sa[517] = 0.1303608f;
      sa[518] = 0.21621297f;
      sa[519] = -0.014500944f;
      sa[520] = 0.3542729f;
      sa[521] = 0.1853001f;
      sa[522] = 0.04205162f;
      sa[523] = 0.21957903f;
      sa[524] = 0.22476625f;
      sa[525] = 0.20538187f;
      sa[526] = 0.046861246f;
      sa[527] = -0.07063955f;
      sa[528] = 0.052739386f;
      sa[529] = 0.15695812f;
      sa[530] = -0.276348f;
      sa[531] = -0.1607868f;
      sa[532] = 0.11548244f;
      sa[533] = 0.084747046f;
      sa[534] = 0.12468828f;
      sa[535] = -0.16304515f;
      sa[536] = 0.026354428f;
      sa[537] = -0.2583198f;
      sa[538] = 0.24257456f;
      sa[539] = 0.3081197f;
      sa[540] = -0.15932341f;
      sa[541] = -0.15797941f;
      sa[542] = -0.10338474f;
      sa[543] = -0.44704226f;
      sa[544] = 0.11793159f;
      sa[545] = 0.11446784f;
      sa[546] = 0.024207113f;
      sa[547] = 0.15048012f;
      sa[548] = 0.16825034f;
      sa[549] = 0.15889357f;
      sa[550] = 0.07439947f;
      sa[551] = -0.23818082f;
      sa[552] = 0.041081898f;
      sa[553] = -0.056163374f;
      sa[554] = -0.21034753f;
      sa[555] = -0.21563306f;
      sa[556] = -0.17731419f;
      sa[557] = -0.26608717f;
      sa[558] = -0.27964333f;
      sa[559] = 0.37709102f;
      sa[560] = -0.34689036f;
      sa[561] = -0.13969792f;
      sa[562] = 0.14278221f;
      sa[563] = -0.12670161f;
      sa[564] = 0.2870274f;
      sa[565] = 0.05691526f;
      sa[566] = 0.3032411f;
      sa[567] = 0.14248712f;
      sa[568] = -0.052647714f;
      sa[569] = 0.060895026f;
      sa[570] = 0.013670022f;
      sa[571] = -0.027378222f;
      sa[572] = -0.13749437f;
      sa[573] = 0.055403236f;
      sa[574] = 0.29645872f;
      sa[575] = -0.24263161f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_05_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_05_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.33887726f;
      sa[1] = -0.006382546f;
      sa[2] = -0.15094924f;
      sa[3] = -0.24604455f;
      sa[4] = -0.024380127f;
      sa[5] = 0.013252768f;
      sa[6] = 0.2445709f;
      sa[7] = -0.022453861f;
      sa[8] = -0.22672294f;
      sa[9] = 0.1371238f;
      sa[10] = -0.1090523f;
      sa[11] = 0.115803204f;
      sa[12] = 0.085447095f;
      sa[13] = 0.047087736f;
      sa[14] = -0.24800631f;
      sa[15] = 0.3619528f;
      sa[16] = 0.46330118f;
      sa[17] = -0.13162513f;
      sa[18] = 0.06934842f;
      sa[19] = -0.011534816f;
      sa[20] = 0.40616333f;
      sa[21] = -0.05865416f;
      sa[22] = -0.3171802f;
      sa[23] = 0.33148453f;
      sa[24] = -0.4211183f;
      sa[25] = 0.009362926f;
      sa[26] = -0.13527317f;
      sa[27] = 0.48561713f;
      sa[28] = -0.32940695f;
      sa[29] = -0.09335939f;
      sa[30] = 0.20170955f;
      sa[31] = -0.19780117f;
      sa[32] = -0.3419475f;
      sa[33] = -0.3767313f;
      sa[34] = 0.081510596f;
      sa[35] = 0.4036106f;
      sa[36] = -0.0631537f;
      sa[37] = -0.05745093f;
      sa[38] = 0.0016700602f;
      sa[39] = 0.42860678f;
      sa[40] = -0.23002943f;
      sa[41] = -0.4463229f;
      sa[42] = -0.2575511f;
      sa[43] = -0.29378936f;
      sa[44] = 0.027246375f;
      sa[45] = -0.35935554f;
      sa[46] = 0.35782743f;
      sa[47] = 0.3786849f;
      sa[48] = -0.45230252f;
      sa[49] = -0.21647263f;
      sa[50] = 0.13683376f;
      sa[51] = -0.15462635f;
      sa[52] = 0.16522223f;
      sa[53] = 0.29073575f;
      sa[54] = -0.07735552f;
      sa[55] = 0.36593625f;
      sa[56] = -0.26363185f;
      sa[57] = -0.31701633f;
      sa[58] = 0.26035655f;
      sa[59] = 0.010734907f;
      sa[60] = 0.3305955f;
      sa[61] = -0.21825056f;
      sa[62] = -0.14811464f;
      sa[63] = 0.23750995f;
      sa[64] = 0.46286252f;
      sa[65] = -0.16790551f;
      sa[66] = 0.17631969f;
      sa[67] = 0.3467277f;
      sa[68] = 0.2508163f;
      sa[69] = -0.24492082f;
      sa[70] = -0.48358887f;
      sa[71] = -0.14388792f;
      sa[72] = -0.46137264f;
      sa[73] = 0.25609064f;
      sa[74] = 0.33463654f;
      sa[75] = 0.06006534f;
      sa[76] = 0.302712f;
      sa[77] = 0.15422222f;
      sa[78] = -0.3040997f;
      sa[79] = 0.36166978f;
      sa[80] = -0.340579f;
      sa[81] = 0.12484303f;
      sa[82] = 0.23254377f;
      sa[83] = -0.18989886f;
      sa[84] = -0.60201734f;
      sa[85] = -0.32873794f;
      sa[86] = 0.11341574f;
      sa[87] = 0.4118215f;
      sa[88] = -0.31288517f;
      sa[89] = -0.09212923f;
      sa[90] = -0.123195104f;
      sa[91] = 0.39583883f;
      sa[92] = -0.17623803f;
      sa[93] = 0.014245337f;
      sa[94] = -0.47021827f;
      sa[95] = -0.08525352f;
      sa[96] = -0.33220822f;
      sa[97] = 0.061361015f;
      sa[98] = 0.029700981f;
      sa[99] = 0.085020676f;
      sa[100] = -0.3490214f;
      sa[101] = -0.1291634f;
      sa[102] = 0.30007318f;
      sa[103] = 0.20341471f;
      sa[104] = -0.06003302f;
      sa[105] = -0.22698654f;
      sa[106] = 0.41827315f;
      sa[107] = 0.38445953f;
      sa[108] = 0.21373308f;
      sa[109] = 0.029136317f;
      sa[110] = 0.21642052f;
      sa[111] = -0.1590155f;
      sa[112] = -0.40403956f;
      sa[113] = 0.092957035f;
      sa[114] = 0.07559521f;
      sa[115] = -0.19142945f;
      sa[116] = 0.21547565f;
      sa[117] = 0.073000215f;
      sa[118] = -0.3656933f;
      sa[119] = -0.15265657f;
      sa[120] = -0.074861825f;
      sa[121] = 0.30511102f;
      sa[122] = 0.18048702f;
      sa[123] = 0.14444615f;
      sa[124] = -0.22668025f;
      sa[125] = 0.1574429f;
      sa[126] = -0.32787257f;
      sa[127] = 0.21811922f;
      sa[128] = -0.30391735f;
      sa[129] = 0.1987197f;
      sa[130] = -0.06135441f;
      sa[131] = 0.17495373f;
      sa[132] = 0.0914103f;
      sa[133] = 0.22912204f;
      sa[134] = 0.2801573f;
      sa[135] = -0.44454703f;
      sa[136] = 0.13441207f;
      sa[137] = -0.08625947f;
      sa[138] = 0.12069311f;
      sa[139] = 0.31585833f;
      sa[140] = -0.1759559f;
      sa[141] = -0.055951428f;
      sa[142] = -0.08165901f;
      sa[143] = -0.25182033f;
      sa[144] = 0.24444173f;
      sa[145] = -0.23543938f;
      sa[146] = 0.006351324f;
      sa[147] = -0.039482195f;
      sa[148] = -0.23932648f;
      sa[149] = 0.30901256f;
      sa[150] = -0.15379728f;
      sa[151] = -0.5115664f;
      sa[152] = 0.4776213f;
      sa[153] = -0.08035706f;
      sa[154] = 0.39506724f;
      sa[155] = -0.46704012f;
      sa[156] = -0.44253272f;
      sa[157] = -0.32075685f;
      sa[158] = -0.10825406f;
      sa[159] = -0.28257915f;
      sa[160] = 0.21236235f;
      sa[161] = -0.26850325f;
      sa[162] = 0.46959338f;
      sa[163] = -0.2963965f;
      sa[164] = 0.13293147f;
      sa[165] = -0.050118715f;
      sa[166] = 0.41611627f;
      sa[167] = -0.37172678f;
      sa[168] = 0.28151155f;
      sa[169] = -0.38344854f;
      sa[170] = 0.5117285f;
      sa[171] = 0.35334858f;
      sa[172] = 0.3270096f;
      sa[173] = 0.30932865f;
      sa[174] = -0.16000924f;
      sa[175] = 0.022753157f;
      sa[176] = -0.28572622f;
      sa[177] = 0.05260972f;
      sa[178] = -0.38557187f;
      sa[179] = -0.17281547f;
      sa[180] = -0.5206151f;
      sa[181] = -0.20758395f;
      sa[182] = 0.09925699f;
      sa[183] = -0.35506338f;
      sa[184] = 0.52428764f;
      sa[185] = 0.42898956f;
      sa[186] = -0.12383278f;
      sa[187] = -0.35023504f;
      sa[188] = -0.20657377f;
      sa[189] = -0.23154421f;
      sa[190] = -0.4289825f;
      sa[191] = -0.20197012f;
      sa[192] = 0.0078065894f;
      sa[193] = 0.09180268f;
      sa[194] = -0.31521723f;
      sa[195] = -0.24167696f;
      sa[196] = 0.20033358f;
      sa[197] = -0.19941062f;
      sa[198] = 0.04637815f;
      sa[199] = 0.25320294f;
      sa[200] = -0.056228224f;
      sa[201] = 0.2888215f;
      sa[202] = 0.14435785f;
      sa[203] = -0.4444861f;
      sa[204] = 0.14246528f;
      sa[205] = 0.38281855f;
      sa[206] = -0.16470538f;
      sa[207] = 0.13137229f;
      sa[208] = -0.3000986f;
      sa[209] = 0.2514341f;
      sa[210] = -0.11074793f;
      sa[211] = -0.3277461f;
      sa[212] = -0.4853776f;
      sa[213] = 0.038887393f;
      sa[214] = -0.3740432f;
      sa[215] = 0.066197895f;
      sa[216] = 0.20248894f;
      sa[217] = 0.35036305f;
      sa[218] = 0.09553441f;
      sa[219] = 0.11211102f;
      sa[220] = 0.1290776f;
      sa[221] = -0.060775995f;
      sa[222] = -0.28062505f;
      sa[223] = -0.24841473f;
      sa[224] = 0.26448295f;
      sa[225] = 0.06887416f;
      sa[226] = -0.087489195f;
      sa[227] = 0.14271575f;
      sa[228] = -0.17065713f;
      sa[229] = -0.25911072f;
      sa[230] = -0.2180324f;
      sa[231] = -0.0953568f;
      sa[232] = 0.5343903f;
      sa[233] = -0.13981411f;
      sa[234] = -0.22021803f;
      sa[235] = -0.077080205f;
      sa[236] = -0.40014952f;
      sa[237] = 0.42934144f;
      sa[238] = 0.18799974f;
      sa[239] = -0.15203214f;
      sa[240] = 0.03835294f;
      sa[241] = -0.49776617f;
      sa[242] = -0.2529098f;
      sa[243] = 0.46052292f;
      sa[244] = 0.3015049f;
      sa[245] = 0.25017023f;
      sa[246] = 0.23763889f;
      sa[247] = -0.43023956f;
      sa[248] = -0.24046555f;
      sa[249] = 0.0057126726f;
      sa[250] = 0.03113611f;
      sa[251] = 0.3627266f;
      sa[252] = 0.23462617f;
      sa[253] = -0.2714184f;
      sa[254] = 0.42625853f;
      sa[255] = 0.0630322f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_05_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_Tanh_05_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.27933255f;
      sa[1] = -1.6274996f;
      sa[2] = -1.7131764f;
      sa[3] = 1.3718119f;
      sa[4] = 0.41906974f;
      sa[5] = -0.1975432f;
      sa[6] = -1.6018007f;
      sa[7] = 1.6443557f;
      sa[8] = 1.8574047f;
      sa[9] = 0.30545422f;
      sa[10] = 1.7280853f;
      sa[11] = 1.5732534f;
      sa[12] = 1.9129403f;
      sa[13] = -0.43705732f;
      sa[14] = -2.0819714f;
      sa[15] = -0.66425276f;
      sa[16] = 0.7623604f;
      sa[17] = -0.82379895f;
      sa[18] = -1.5553555f;
      sa[19] = -1.0361809f;
      sa[20] = -1.9627451f;
      sa[21] = 0.20931906f;
      sa[22] = -2.0303774f;
      sa[23] = -0.74629486f;
      sa[24] = -0.53025603f;
      sa[25] = 1.9398085f;
      sa[26] = -0.32687196f;
      sa[27] = 1.2364641f;
      sa[28] = 1.1831471f;
      sa[29] = -0.8324854f;
      sa[30] = 0.28782487f;
      sa[31] = 0.17858969f;
      sa[32] = 0.51269877f;
      sa[33] = 0.4161561f;
      sa[34] = -0.6050185f;
      sa[35] = 1.0556648f;
      sa[36] = 0.72800845f;
      sa[37] = -1.3425652f;
      sa[38] = 0.575279f;
      sa[39] = -0.30953377f;
      sa[40] = 0.21673444f;
      sa[41] = -0.83458793f;
      sa[42] = 0.5936703f;
      sa[43] = -0.18046811f;
      sa[44] = 0.9921768f;
      sa[45] = -2.1900892f;
      sa[46] = -2.1268091f;
      sa[47] = 0.17747012f;
      sa[48] = 1.5869268f;
      sa[49] = -0.2202649f;
      sa[50] = -0.44238925f;
      sa[51] = 2.0409362f;
      sa[52] = -1.7582456f;
      sa[53] = 1.0825689f;
      sa[54] = 1.9345825f;
      sa[55] = 1.1298215f;
      sa[56] = -0.56341183f;
      sa[57] = -0.14720063f;
      sa[58] = 1.0197061f;
      sa[59] = 0.8406746f;
      sa[60] = -1.353199f;
      sa[61] = 1.048839f;
      sa[62] = -0.39894944f;
      sa[63] = -0.92348975f;
      sa[64] = 0.91215265f;
      sa[65] = -0.85952544f;
      sa[66] = -1.7208599f;
      sa[67] = -0.120048694f;
      sa[68] = 0.9946077f;
      sa[69] = -1.3969866f;
      sa[70] = -1.8276154f;
      sa[71] = -0.07134205f;
      sa[72] = -1.2691463f;
      sa[73] = -1.4009593f;
      sa[74] = -1.1988089f;
      sa[75] = 1.1625363f;
      sa[76] = 1.986653f;
      sa[77] = -0.6677244f;
      sa[78] = -1.3346698f;
      sa[79] = -0.4702754f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_05 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_05_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_05_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_05_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_Tanh_05_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


