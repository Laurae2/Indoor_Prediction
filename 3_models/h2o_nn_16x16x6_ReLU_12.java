/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:09:31.645+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_12

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_12 > h2o_nn_16x16x6_ReLU_12.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_12.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_12", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_12 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_12_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_12_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_12_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_12_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_12_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_12_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_12.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_12_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.2864864864864865,0.13513513513513514,0.14594594594594595,0.2864864864864865,0.14594594594594595};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_12() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(6615238218410872736L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_12_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_12_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_12_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_12_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_12_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_12_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_12_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_12_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.6064519560877877;
      sa[1] = 0.5239337467947549;
      sa[2] = 0.5107289410594505;
      sa[3] = 0.5344309425699274;
      sa[4] = 0.4653722820724308;
      sa[5] = 0.5430130544776982;
      sa[6] = 0.43466009128124655;
      sa[7] = 0.6988330565432258;
      sa[8] = 0.4821041269089682;
      sa[9] = 0.7054867139054274;
      sa[10] = 0.42897449434409624;
      sa[11] = 0.37292571525119206;
      sa[12] = 0.35931734076173993;
      sa[13] = 0.3610645382232015;
      sa[14] = 0.5316009158336638;
      sa[15] = 0.6741885909791918;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_12_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.0599774993102205;
      sa[1] = 1.0131319179085063;
      sa[2] = 0.9783924556568575;
      sa[3] = 0.9912522572381773;
      sa[4] = 1.0352635055861747;
      sa[5] = 0.9826158728201918;
      sa[6] = 0.919116416269317;
      sa[7] = 0.9334999657508667;
      sa[8] = 0.9195060187186169;
      sa[9] = 1.0539583312319667;
      sa[10] = 0.9043995492669005;
      sa[11] = 1.1574294561414833;
      sa[12] = 1.0684487505267812;
      sa[13] = 0.9862860104349376;
      sa[14] = 1.0364627923598717;
      sa[15] = 1.0557378025414292;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_12_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_12_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.05394287372769693;
      sa[1] = 0.005476193358736913;
      sa[2] = -0.025611380002932144;
      sa[3] = -0.03181938869261941;
      sa[4] = 0.038901550853551015;
    }
  }
}
class h2o_nn_16x16x6_ReLU_12_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_12_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.07166903f;
      sa[1] = 0.34696957f;
      sa[2] = 0.32913074f;
      sa[3] = 0.112523556f;
      sa[4] = -0.08615173f;
      sa[5] = -0.09436712f;
      sa[6] = 0.038600154f;
      sa[7] = 0.45904797f;
      sa[8] = 0.110314436f;
      sa[9] = -0.12577769f;
      sa[10] = -0.15482649f;
      sa[11] = -0.2129776f;
      sa[12] = 0.15195876f;
      sa[13] = -0.1891266f;
      sa[14] = -0.124538004f;
      sa[15] = 0.1746407f;
      sa[16] = 0.29468378f;
      sa[17] = 0.2925109f;
      sa[18] = -0.37481126f;
      sa[19] = 0.14929181f;
      sa[20] = 0.31568f;
      sa[21] = -0.20982248f;
      sa[22] = 0.30941498f;
      sa[23] = -0.060403403f;
      sa[24] = 0.3668755f;
      sa[25] = 0.23692699f;
      sa[26] = -0.31918466f;
      sa[27] = 0.39898187f;
      sa[28] = 0.36299992f;
      sa[29] = -0.1298699f;
      sa[30] = -0.05985954f;
      sa[31] = 0.3418144f;
      sa[32] = 0.12989524f;
      sa[33] = -0.16398382f;
      sa[34] = 0.050353196f;
      sa[35] = -0.16249429f;
      sa[36] = 0.04679337f;
      sa[37] = 0.25848013f;
      sa[38] = 0.047504414f;
      sa[39] = 0.051411618f;
      sa[40] = 0.17654075f;
      sa[41] = -0.07742311f;
      sa[42] = -0.112055585f;
      sa[43] = 0.22009186f;
      sa[44] = 0.1559544f;
      sa[45] = -0.1879594f;
      sa[46] = 0.09288238f;
      sa[47] = -0.09361946f;
      sa[48] = 0.24332099f;
      sa[49] = 0.21389906f;
      sa[50] = 0.20192018f;
      sa[51] = -0.21003544f;
      sa[52] = -0.042926274f;
      sa[53] = 0.35226777f;
      sa[54] = 0.26136014f;
      sa[55] = -0.04213219f;
      sa[56] = -0.13778831f;
      sa[57] = -0.18311067f;
      sa[58] = 0.32635516f;
      sa[59] = -0.0140387155f;
      sa[60] = -0.27344623f;
      sa[61] = 0.26311037f;
      sa[62] = 0.20256159f;
      sa[63] = 0.15112413f;
      sa[64] = 0.19582172f;
      sa[65] = 0.2568913f;
      sa[66] = 0.053155113f;
      sa[67] = 0.31342015f;
      sa[68] = -0.14525887f;
      sa[69] = 0.23609653f;
      sa[70] = -0.08351655f;
      sa[71] = 0.41170478f;
      sa[72] = -0.0945595f;
      sa[73] = 0.17651717f;
      sa[74] = -0.28088602f;
      sa[75] = 0.14162932f;
      sa[76] = -0.26639318f;
      sa[77] = -0.09551054f;
      sa[78] = -0.100523464f;
      sa[79] = 0.04896952f;
      sa[80] = -0.15159446f;
      sa[81] = -0.17865664f;
      sa[82] = -0.01260532f;
      sa[83] = 0.10023147f;
      sa[84] = -0.019386925f;
      sa[85] = -0.1982451f;
      sa[86] = 0.16083504f;
      sa[87] = 0.18824005f;
      sa[88] = 0.14234927f;
      sa[89] = -0.026880648f;
      sa[90] = -0.052762378f;
      sa[91] = 0.19725823f;
      sa[92] = 0.109322116f;
      sa[93] = -0.26993272f;
      sa[94] = -0.19293731f;
      sa[95] = -0.33879086f;
      sa[96] = 0.13311693f;
      sa[97] = 0.046249952f;
      sa[98] = 0.24047573f;
      sa[99] = -0.20304099f;
      sa[100] = -0.08378085f;
      sa[101] = -0.25719273f;
      sa[102] = -0.32156476f;
      sa[103] = -0.16219747f;
      sa[104] = 0.05340656f;
      sa[105] = -0.19267373f;
      sa[106] = -0.24322848f;
      sa[107] = 0.15564679f;
      sa[108] = 0.2121368f;
      sa[109] = -0.15794308f;
      sa[110] = -0.029697906f;
      sa[111] = 0.16446076f;
      sa[112] = 0.121805705f;
      sa[113] = 0.110102944f;
      sa[114] = -0.14540023f;
      sa[115] = -0.062761545f;
      sa[116] = -0.19838828f;
      sa[117] = -0.012689279f;
      sa[118] = -0.21664159f;
      sa[119] = -0.03504277f;
      sa[120] = 0.28838995f;
      sa[121] = 0.3635956f;
      sa[122] = 0.38039437f;
      sa[123] = 0.36951482f;
      sa[124] = 0.4693398f;
      sa[125] = 0.39108396f;
      sa[126] = -0.4378447f;
      sa[127] = 0.0141192805f;
      sa[128] = 0.08050276f;
      sa[129] = 0.1328843f;
      sa[130] = -0.14832653f;
      sa[131] = 0.24053116f;
      sa[132] = 0.2699589f;
      sa[133] = -0.25822234f;
      sa[134] = 0.033148274f;
      sa[135] = -0.4413754f;
      sa[136] = -0.23913793f;
      sa[137] = -0.0067182756f;
      sa[138] = 0.23207049f;
      sa[139] = -0.12628645f;
      sa[140] = -0.1037606f;
      sa[141] = -0.18526022f;
      sa[142] = 0.11195632f;
      sa[143] = -0.48489633f;
      sa[144] = 0.2798304f;
      sa[145] = -0.15710014f;
      sa[146] = -0.20457885f;
      sa[147] = 0.22273704f;
      sa[148] = 0.13317935f;
      sa[149] = 0.21313323f;
      sa[150] = 0.29078975f;
      sa[151] = -0.37903914f;
      sa[152] = 0.08100541f;
      sa[153] = 0.25833368f;
      sa[154] = 0.3242059f;
      sa[155] = -0.18221317f;
      sa[156] = 0.13934489f;
      sa[157] = -0.18260893f;
      sa[158] = 0.091465734f;
      sa[159] = 0.051548652f;
      sa[160] = 0.101285875f;
      sa[161] = 0.23310821f;
      sa[162] = -0.23120621f;
      sa[163] = 0.08509114f;
      sa[164] = 0.21719415f;
      sa[165] = -0.13599582f;
      sa[166] = -0.12569565f;
      sa[167] = -0.202949f;
      sa[168] = 0.27809995f;
      sa[169] = 0.37024304f;
      sa[170] = 0.059244942f;
      sa[171] = -0.15217271f;
      sa[172] = -0.07339356f;
      sa[173] = -0.19850644f;
      sa[174] = -0.013758157f;
      sa[175] = -0.358538f;
      sa[176] = 0.043763667f;
      sa[177] = -0.0066416543f;
      sa[178] = -0.14514278f;
      sa[179] = -0.025482625f;
      sa[180] = -0.08754612f;
      sa[181] = -0.24819674f;
      sa[182] = 0.01817638f;
      sa[183] = 0.19904675f;
      sa[184] = 0.43856645f;
      sa[185] = 0.31869248f;
      sa[186] = -0.21986502f;
      sa[187] = 0.19910803f;
      sa[188] = -0.061339777f;
      sa[189] = 0.287144f;
      sa[190] = -0.010419679f;
      sa[191] = 0.058993977f;
      sa[192] = -0.094933316f;
      sa[193] = 0.35420737f;
      sa[194] = 0.16839011f;
      sa[195] = 0.4153943f;
      sa[196] = 0.4025405f;
      sa[197] = 0.060557637f;
      sa[198] = 0.06422184f;
      sa[199] = -0.2324523f;
      sa[200] = 0.04695725f;
      sa[201] = -0.23296234f;
      sa[202] = 0.17567055f;
      sa[203] = -0.0076386137f;
      sa[204] = -0.20912263f;
      sa[205] = 0.21789502f;
      sa[206] = 0.21291669f;
      sa[207] = 0.11368869f;
      sa[208] = -0.24629009f;
      sa[209] = -0.0042733434f;
      sa[210] = -0.21101983f;
      sa[211] = -0.20449832f;
      sa[212] = 0.28304386f;
      sa[213] = -0.14226341f;
      sa[214] = -0.21113412f;
      sa[215] = -0.051846325f;
      sa[216] = 0.06267824f;
      sa[217] = 0.23069245f;
      sa[218] = -0.12772349f;
      sa[219] = 0.24495423f;
      sa[220] = -0.23151724f;
      sa[221] = 0.0668297f;
      sa[222] = 0.23819031f;
      sa[223] = 0.091138184f;
      sa[224] = 0.08690392f;
      sa[225] = 0.4009555f;
      sa[226] = -0.17579679f;
      sa[227] = 0.4218952f;
      sa[228] = 0.12969135f;
      sa[229] = 0.118212156f;
      sa[230] = 0.27522457f;
      sa[231] = -0.24490803f;
      sa[232] = -0.1946371f;
      sa[233] = 0.17563039f;
      sa[234] = 0.12821816f;
      sa[235] = -0.32155308f;
      sa[236] = -0.051287796f;
      sa[237] = -0.24818373f;
      sa[238] = -0.25428957f;
      sa[239] = 0.1288103f;
      sa[240] = 0.033890422f;
      sa[241] = -0.20186073f;
      sa[242] = -0.092023104f;
      sa[243] = -0.28326896f;
      sa[244] = -0.22103976f;
      sa[245] = -0.13221265f;
      sa[246] = -0.26816434f;
      sa[247] = -0.05100647f;
      sa[248] = 0.23591433f;
      sa[249] = 0.25306267f;
      sa[250] = -0.20252596f;
      sa[251] = -0.07659626f;
      sa[252] = -0.2288634f;
      sa[253] = -0.2339404f;
      sa[254] = -0.40558538f;
      sa[255] = 0.051398076f;
      sa[256] = -0.12431778f;
      sa[257] = 0.3444154f;
      sa[258] = -0.22937138f;
      sa[259] = -0.05410722f;
      sa[260] = -0.16859381f;
      sa[261] = 0.09295148f;
      sa[262] = -0.15187083f;
      sa[263] = 0.18490823f;
      sa[264] = -0.09791387f;
      sa[265] = 0.11888122f;
      sa[266] = -0.25775173f;
      sa[267] = -0.18912145f;
      sa[268] = 0.1812023f;
      sa[269] = -0.087917835f;
      sa[270] = 0.015568309f;
      sa[271] = 0.2283204f;
      sa[272] = 0.0032117683f;
      sa[273] = -0.028428948f;
      sa[274] = 0.23224704f;
      sa[275] = 0.08830259f;
      sa[276] = 0.01356672f;
      sa[277] = -0.25649473f;
      sa[278] = -0.18429291f;
      sa[279] = 0.34337282f;
      sa[280] = -0.12084368f;
      sa[281] = 0.37405184f;
      sa[282] = -0.05863642f;
      sa[283] = 0.0348839f;
      sa[284] = -0.131823f;
      sa[285] = -0.2945743f;
      sa[286] = 0.55617124f;
      sa[287] = 0.31294474f;
      sa[288] = -0.2811337f;
      sa[289] = -0.20337278f;
      sa[290] = -0.02042206f;
      sa[291] = 0.06918444f;
      sa[292] = 0.23363276f;
      sa[293] = -0.06060906f;
      sa[294] = 0.14973843f;
      sa[295] = 0.2666047f;
      sa[296] = 0.1564734f;
      sa[297] = 0.24299069f;
      sa[298] = -0.07860945f;
      sa[299] = -0.0012298042f;
      sa[300] = -0.0022856048f;
      sa[301] = -0.06792984f;
      sa[302] = 0.20652075f;
      sa[303] = 0.14030898f;
      sa[304] = -0.16486247f;
      sa[305] = 0.027329491f;
      sa[306] = 0.23329772f;
      sa[307] = -0.3446966f;
      sa[308] = 0.09724532f;
      sa[309] = 0.23761903f;
      sa[310] = 0.3277444f;
      sa[311] = 0.4092904f;
      sa[312] = -0.20352486f;
      sa[313] = -0.20127697f;
      sa[314] = -0.10370983f;
      sa[315] = -0.016841853f;
      sa[316] = 0.00657193f;
      sa[317] = -0.003358127f;
      sa[318] = 0.14771503f;
      sa[319] = 0.42142123f;
      sa[320] = 0.028306428f;
      sa[321] = 0.35966966f;
      sa[322] = 0.048255224f;
      sa[323] = -0.33128318f;
      sa[324] = -0.022105675f;
      sa[325] = 0.2615245f;
      sa[326] = -0.07535544f;
      sa[327] = -0.20730087f;
      sa[328] = 0.06396965f;
      sa[329] = 0.34650487f;
      sa[330] = -0.12445407f;
      sa[331] = 0.1693222f;
      sa[332] = -0.3408256f;
      sa[333] = 0.190589f;
      sa[334] = 0.008894664f;
      sa[335] = 0.1109397f;
      sa[336] = -0.13386738f;
      sa[337] = -0.1445025f;
      sa[338] = 0.3097185f;
      sa[339] = -0.11801127f;
      sa[340] = -0.27620998f;
      sa[341] = -0.14269704f;
      sa[342] = 0.215587f;
      sa[343] = -0.035558034f;
      sa[344] = -0.13536775f;
      sa[345] = 0.2976047f;
      sa[346] = 0.2582066f;
      sa[347] = -0.061377708f;
      sa[348] = 0.35329556f;
      sa[349] = -0.24608847f;
      sa[350] = -0.15179658f;
      sa[351] = 0.29048175f;
      sa[352] = 0.28803727f;
      sa[353] = 0.06183417f;
      sa[354] = 0.17717353f;
      sa[355] = 0.2803009f;
      sa[356] = -0.1588319f;
      sa[357] = 0.27994546f;
      sa[358] = -0.28654248f;
      sa[359] = 0.066563904f;
      sa[360] = -0.010307853f;
      sa[361] = -0.11985506f;
      sa[362] = -0.16908045f;
      sa[363] = 0.21290874f;
      sa[364] = -0.21607405f;
      sa[365] = -0.28944194f;
      sa[366] = -0.0935007f;
      sa[367] = -0.40480056f;
      sa[368] = -0.3368315f;
      sa[369] = 0.239463f;
      sa[370] = -0.1560533f;
      sa[371] = 0.114238136f;
      sa[372] = -0.049938876f;
      sa[373] = 0.27002183f;
      sa[374] = -0.22186266f;
      sa[375] = -0.4168619f;
      sa[376] = -0.4236535f;
      sa[377] = -0.2752888f;
      sa[378] = 0.2829193f;
      sa[379] = 0.19686559f;
      sa[380] = -0.18053982f;
      sa[381] = -0.19595355f;
      sa[382] = -0.11566645f;
      sa[383] = -0.20873116f;
      sa[384] = -0.08774811f;
      sa[385] = 0.13813588f;
      sa[386] = -0.24465586f;
      sa[387] = -0.24206464f;
      sa[388] = 0.059841633f;
      sa[389] = -0.06451697f;
      sa[390] = -0.040679224f;
      sa[391] = -0.21341173f;
      sa[392] = 0.37269384f;
      sa[393] = 0.36321884f;
      sa[394] = -0.13719268f;
      sa[395] = 0.21007644f;
      sa[396] = 0.38868225f;
      sa[397] = -0.2508289f;
      sa[398] = -0.052765988f;
      sa[399] = 0.18820557f;
      sa[400] = 0.091910385f;
      sa[401] = 0.15832661f;
      sa[402] = -0.2047162f;
      sa[403] = -0.07517392f;
      sa[404] = 0.3961384f;
      sa[405] = -0.25922257f;
      sa[406] = -0.13875079f;
      sa[407] = 0.22072777f;
      sa[408] = -0.25809467f;
      sa[409] = -0.34129354f;
      sa[410] = -0.15143709f;
      sa[411] = 0.06752957f;
      sa[412] = -0.21624766f;
      sa[413] = 0.033032164f;
      sa[414] = 0.19154322f;
      sa[415] = 0.2652843f;
      sa[416] = -0.21065079f;
      sa[417] = -0.017785149f;
      sa[418] = -0.012230532f;
      sa[419] = 0.1898484f;
      sa[420] = 0.12775397f;
      sa[421] = 0.22090875f;
      sa[422] = 0.16673613f;
      sa[423] = -0.14597467f;
      sa[424] = 0.04097946f;
      sa[425] = -0.1809802f;
      sa[426] = -0.42325428f;
      sa[427] = 0.09028505f;
      sa[428] = -0.096714914f;
      sa[429] = -0.34971058f;
      sa[430] = 0.2840263f;
      sa[431] = 0.07466069f;
      sa[432] = -0.07717665f;
      sa[433] = 0.21894832f;
      sa[434] = 0.2956804f;
      sa[435] = 0.052446168f;
      sa[436] = -0.34335455f;
      sa[437] = -0.30641985f;
      sa[438] = -0.042188253f;
      sa[439] = -0.07647693f;
      sa[440] = 0.35514134f;
      sa[441] = -0.30577075f;
      sa[442] = 0.14163384f;
      sa[443] = 0.07883351f;
      sa[444] = -0.27150786f;
      sa[445] = 0.04474929f;
      sa[446] = 0.21053496f;
      sa[447] = 0.036416374f;
      sa[448] = 0.2841661f;
      sa[449] = 0.31084326f;
      sa[450] = -0.113498785f;
      sa[451] = 0.16099255f;
      sa[452] = 0.16490154f;
      sa[453] = -0.104607f;
      sa[454] = -0.2108285f;
      sa[455] = -0.10947701f;
      sa[456] = 0.003099951f;
      sa[457] = 0.12254102f;
      sa[458] = -0.2561499f;
      sa[459] = 0.27812776f;
      sa[460] = 0.21200572f;
      sa[461] = 0.2624093f;
      sa[462] = 0.028389607f;
      sa[463] = 0.20111237f;
      sa[464] = -0.31081522f;
      sa[465] = 0.11075904f;
      sa[466] = 0.014637988f;
      sa[467] = 0.15465726f;
      sa[468] = 0.06589164f;
      sa[469] = 0.34966558f;
      sa[470] = 0.2798457f;
      sa[471] = -0.014660284f;
      sa[472] = 0.0098916795f;
      sa[473] = -0.16345385f;
      sa[474] = -0.056822844f;
      sa[475] = 0.16041943f;
      sa[476] = 0.22495934f;
      sa[477] = -0.1456433f;
      sa[478] = 0.22648846f;
      sa[479] = -0.23323001f;
      sa[480] = -0.37820727f;
      sa[481] = -0.30466107f;
      sa[482] = -0.34474695f;
      sa[483] = 0.22210424f;
      sa[484] = 0.2987637f;
      sa[485] = 0.21378078f;
      sa[486] = 0.016522009f;
      sa[487] = -0.16306338f;
      sa[488] = -0.23612836f;
      sa[489] = 0.091302074f;
      sa[490] = -0.038929794f;
      sa[491] = -0.16557318f;
      sa[492] = 0.27258882f;
      sa[493] = 0.35259587f;
      sa[494] = -0.16895859f;
      sa[495] = 0.4632049f;
      sa[496] = -0.026732503f;
      sa[497] = 0.07879617f;
      sa[498] = 0.15515932f;
      sa[499] = 0.22714072f;
      sa[500] = -0.06408372f;
      sa[501] = 0.13653019f;
      sa[502] = 0.32246363f;
      sa[503] = 0.15876056f;
      sa[504] = -0.15299466f;
      sa[505] = -0.14317691f;
      sa[506] = 0.28273824f;
      sa[507] = 0.012411435f;
      sa[508] = 0.15428895f;
      sa[509] = 0.3354089f;
      sa[510] = 0.24731794f;
      sa[511] = 0.08072265f;
      sa[512] = 0.108942844f;
      sa[513] = -0.04415504f;
      sa[514] = 0.20704013f;
      sa[515] = -0.058693286f;
      sa[516] = 0.077420995f;
      sa[517] = 0.23457862f;
      sa[518] = 0.21598801f;
      sa[519] = -0.0076017682f;
      sa[520] = 0.44072282f;
      sa[521] = 0.2526826f;
      sa[522] = -0.0069413483f;
      sa[523] = 0.154737f;
      sa[524] = 0.26999146f;
      sa[525] = 0.23495835f;
      sa[526] = 0.05205246f;
      sa[527] = -0.15528446f;
      sa[528] = -0.04494426f;
      sa[529] = 0.09348109f;
      sa[530] = -0.33930695f;
      sa[531] = -0.21157172f;
      sa[532] = 0.23566206f;
      sa[533] = 0.18164782f;
      sa[534] = 0.24111755f;
      sa[535] = -0.048296146f;
      sa[536] = 0.009769207f;
      sa[537] = -0.2293225f;
      sa[538] = 0.19809143f;
      sa[539] = 0.22421944f;
      sa[540] = -0.24132961f;
      sa[541] = -0.1554001f;
      sa[542] = 0.02409577f;
      sa[543] = -0.4218062f;
      sa[544] = 0.16992682f;
      sa[545] = 0.18761538f;
      sa[546] = 0.08908642f;
      sa[547] = 0.25375542f;
      sa[548] = 0.14070013f;
      sa[549] = 0.15788068f;
      sa[550] = 0.084447645f;
      sa[551] = -0.22880876f;
      sa[552] = 0.08126827f;
      sa[553] = 0.025331564f;
      sa[554] = -0.15715297f;
      sa[555] = -0.11806429f;
      sa[556] = -0.10074918f;
      sa[557] = -0.19225055f;
      sa[558] = -0.29329738f;
      sa[559] = 0.3576053f;
      sa[560] = -0.31608427f;
      sa[561] = -0.10447552f;
      sa[562] = 0.20743755f;
      sa[563] = -0.017112913f;
      sa[564] = 0.3891189f;
      sa[565] = 0.107167676f;
      sa[566] = 0.33586565f;
      sa[567] = 0.1419573f;
      sa[568] = -0.012355653f;
      sa[569] = 0.08211336f;
      sa[570] = 0.06858439f;
      sa[571] = -0.017018052f;
      sa[572] = -0.11417295f;
      sa[573] = 0.106436245f;
      sa[574] = 0.26898754f;
      sa[575] = -0.2783442f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_12_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.45365137f;
      sa[1] = 0.07116043f;
      sa[2] = -0.2513922f;
      sa[3] = -0.2435632f;
      sa[4] = 0.049048916f;
      sa[5] = 0.07212218f;
      sa[6] = 0.25078675f;
      sa[7] = 0.023203379f;
      sa[8] = -0.21252866f;
      sa[9] = 0.22894242f;
      sa[10] = -0.15352984f;
      sa[11] = 0.17723322f;
      sa[12] = 0.10561573f;
      sa[13] = 0.12775551f;
      sa[14] = -0.1965289f;
      sa[15] = 0.3841367f;
      sa[16] = 0.4632817f;
      sa[17] = -0.07334589f;
      sa[18] = 0.026452921f;
      sa[19] = -0.05105708f;
      sa[20] = 0.34388638f;
      sa[21] = -0.041594878f;
      sa[22] = -0.34090987f;
      sa[23] = 0.28713605f;
      sa[24] = -0.3722483f;
      sa[25] = 0.094886266f;
      sa[26] = -0.18123315f;
      sa[27] = 0.44842145f;
      sa[28] = -0.34166497f;
      sa[29] = -0.16224323f;
      sa[30] = 0.16100033f;
      sa[31] = -0.24167384f;
      sa[32] = -0.34544677f;
      sa[33] = -0.3770009f;
      sa[34] = 0.0345175f;
      sa[35] = 0.38223168f;
      sa[36] = -0.091044605f;
      sa[37] = -0.09372959f;
      sa[38] = -0.060414862f;
      sa[39] = 0.30480483f;
      sa[40] = -0.23674987f;
      sa[41] = -0.40021664f;
      sa[42] = -0.33280706f;
      sa[43] = -0.31234178f;
      sa[44] = -0.039001253f;
      sa[45] = -0.4470818f;
      sa[46] = 0.33151823f;
      sa[47] = 0.2865534f;
      sa[48] = -0.42452756f;
      sa[49] = -0.27652708f;
      sa[50] = 0.14001569f;
      sa[51] = -0.12089577f;
      sa[52] = 0.18453316f;
      sa[53] = 0.23332076f;
      sa[54] = -0.090767086f;
      sa[55] = 0.34783053f;
      sa[56] = -0.2697212f;
      sa[57] = -0.31185612f;
      sa[58] = 0.1108234f;
      sa[59] = 1.723847E-4f;
      sa[60] = 0.30158964f;
      sa[61] = -0.22512835f;
      sa[62] = -0.13166979f;
      sa[63] = 0.16074747f;
      sa[64] = 0.49431488f;
      sa[65] = -0.16167183f;
      sa[66] = 0.215023f;
      sa[67] = 0.3967449f;
      sa[68] = 0.22213046f;
      sa[69] = -0.2801567f;
      sa[70] = -0.48983878f;
      sa[71] = -0.06799634f;
      sa[72] = -0.3965738f;
      sa[73] = 0.29178223f;
      sa[74] = 0.42487016f;
      sa[75] = 0.036844525f;
      sa[76] = 0.31794986f;
      sa[77] = 0.23641136f;
      sa[78] = -0.28887418f;
      sa[79] = 0.3424892f;
      sa[80] = -0.32693458f;
      sa[81] = 0.07523723f;
      sa[82] = 0.17247286f;
      sa[83] = -0.21710888f;
      sa[84] = -0.46793148f;
      sa[85] = -0.3327031f;
      sa[86] = 0.044214487f;
      sa[87] = 0.3677572f;
      sa[88] = -0.3665115f;
      sa[89] = -0.11692431f;
      sa[90] = -0.2741853f;
      sa[91] = 0.426869f;
      sa[92] = -0.21122284f;
      sa[93] = 0.004859879f;
      sa[94] = -0.45499602f;
      sa[95] = -0.08163378f;
      sa[96] = -0.37537703f;
      sa[97] = 0.023668958f;
      sa[98] = -0.022743661f;
      sa[99] = 0.044156242f;
      sa[100] = -0.38386554f;
      sa[101] = -0.22817014f;
      sa[102] = 0.1470723f;
      sa[103] = 0.106080554f;
      sa[104] = -0.112197176f;
      sa[105] = -0.21677439f;
      sa[106] = 0.29632095f;
      sa[107] = 0.3724251f;
      sa[108] = 0.13249002f;
      sa[109] = -0.06508876f;
      sa[110] = 0.18301743f;
      sa[111] = -0.25378162f;
      sa[112] = -0.43574184f;
      sa[113] = -0.011422986f;
      sa[114] = 0.06314712f;
      sa[115] = -0.1750447f;
      sa[116] = 0.22796798f;
      sa[117] = -0.04903271f;
      sa[118] = -0.40532425f;
      sa[119] = -0.19951874f;
      sa[120] = -0.13195886f;
      sa[121] = 0.2582845f;
      sa[122] = 0.044936128f;
      sa[123] = 0.10112649f;
      sa[124] = -0.27615884f;
      sa[125] = 0.14180295f;
      sa[126] = -0.3347082f;
      sa[127] = 0.1179998f;
      sa[128] = -0.35842833f;
      sa[129] = 0.1301822f;
      sa[130] = -0.05559184f;
      sa[131] = 0.16714552f;
      sa[132] = 0.06031205f;
      sa[133] = 0.10893107f;
      sa[134] = 0.16729954f;
      sa[135] = -0.43328708f;
      sa[136] = 0.0850464f;
      sa[137] = -0.20459427f;
      sa[138] = 0.0859003f;
      sa[139] = 0.29231986f;
      sa[140] = -0.18089712f;
      sa[141] = -0.066784106f;
      sa[142] = -0.024472607f;
      sa[143] = -0.25265938f;
      sa[144] = 0.25414136f;
      sa[145] = -0.18159546f;
      sa[146] = 0.0131013915f;
      sa[147] = -0.014340824f;
      sa[148] = -0.19921233f;
      sa[149] = 0.3833989f;
      sa[150] = -0.1852289f;
      sa[151] = -0.5174963f;
      sa[152] = 0.49706915f;
      sa[153] = -0.09610918f;
      sa[154] = 0.37463662f;
      sa[155] = -0.467654f;
      sa[156] = -0.3869501f;
      sa[157] = -0.3256254f;
      sa[158] = -0.07963015f;
      sa[159] = -0.1985015f;
      sa[160] = 0.24820335f;
      sa[161] = -0.37904105f;
      sa[162] = 0.44239795f;
      sa[163] = -0.27945718f;
      sa[164] = 0.1410578f;
      sa[165] = -0.23744892f;
      sa[166] = 0.30967543f;
      sa[167] = -0.47379863f;
      sa[168] = 0.20110172f;
      sa[169] = -0.46933693f;
      sa[170] = 0.4296345f;
      sa[171] = 0.223696f;
      sa[172] = 0.32916075f;
      sa[173] = 0.32439065f;
      sa[174] = -0.11592543f;
      sa[175] = -0.06978991f;
      sa[176] = -0.17709592f;
      sa[177] = 0.10070175f;
      sa[178] = -0.26299122f;
      sa[179] = -0.03533472f;
      sa[180] = -0.37581897f;
      sa[181] = -0.12717153f;
      sa[182] = 0.2273056f;
      sa[183] = -0.23480168f;
      sa[184] = 0.54028416f;
      sa[185] = 0.45959553f;
      sa[186] = -0.0076762508f;
      sa[187] = -0.16984984f;
      sa[188] = -0.118667245f;
      sa[189] = -0.12467161f;
      sa[190] = -0.38114733f;
      sa[191] = -0.13280705f;
      sa[192] = 0.12765534f;
      sa[193] = 0.13391033f;
      sa[194] = -0.22470911f;
      sa[195] = -0.20309725f;
      sa[196] = 0.21088189f;
      sa[197] = -0.13768236f;
      sa[198] = 0.12705669f;
      sa[199] = 0.3175351f;
      sa[200] = -0.014177023f;
      sa[201] = 0.28787068f;
      sa[202] = 0.2599171f;
      sa[203] = -0.43454605f;
      sa[204] = 0.30302957f;
      sa[205] = 0.53000575f;
      sa[206] = -0.115133144f;
      sa[207] = 0.2338816f;
      sa[208] = -0.25781295f;
      sa[209] = 0.19321564f;
      sa[210] = -0.19302809f;
      sa[211] = -0.37611517f;
      sa[212] = -0.4091939f;
      sa[213] = 0.009263543f;
      sa[214] = -0.47691014f;
      sa[215] = 0.083662555f;
      sa[216] = 0.16605994f;
      sa[217] = 0.355799f;
      sa[218] = -0.012981862f;
      sa[219] = 0.123762906f;
      sa[220] = 0.09485992f;
      sa[221] = -0.008844367f;
      sa[222] = -0.27317378f;
      sa[223] = -0.28309578f;
      sa[224] = 0.28712952f;
      sa[225] = 0.10024939f;
      sa[226] = -0.08929487f;
      sa[227] = 0.10174882f;
      sa[228] = -0.09581085f;
      sa[229] = -0.143451f;
      sa[230] = -0.15897255f;
      sa[231] = -0.103368804f;
      sa[232] = 0.4990363f;
      sa[233] = -0.13258299f;
      sa[234] = -0.2520516f;
      sa[235] = 0.014423573f;
      sa[236] = -0.3782726f;
      sa[237] = 0.42700303f;
      sa[238] = 0.17976518f;
      sa[239] = -0.10480538f;
      sa[240] = -0.004770549f;
      sa[241] = -0.3650028f;
      sa[242] = -0.24977744f;
      sa[243] = 0.4577954f;
      sa[244] = 0.27300686f;
      sa[245] = 0.36479527f;
      sa[246] = 0.25936714f;
      sa[247] = -0.41773108f;
      sa[248] = -0.1742327f;
      sa[249] = 0.02498828f;
      sa[250] = 0.19010073f;
      sa[251] = 0.39299178f;
      sa[252] = 0.28186968f;
      sa[253] = -0.31434086f;
      sa[254] = 0.45095918f;
      sa[255] = 0.14897339f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_12_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_ReLU_12_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.10111795f;
      sa[1] = -1.6052128f;
      sa[2] = -1.6338156f;
      sa[3] = 1.3572896f;
      sa[4] = 0.40189618f;
      sa[5] = -0.30727753f;
      sa[6] = -1.6653575f;
      sa[7] = 1.5350791f;
      sa[8] = 1.775529f;
      sa[9] = 0.2594704f;
      sa[10] = 1.6574025f;
      sa[11] = 1.4795809f;
      sa[12] = 1.8373554f;
      sa[13] = -0.5601388f;
      sa[14] = -2.0340245f;
      sa[15] = -0.72631735f;
      sa[16] = 0.7594048f;
      sa[17] = -0.8148388f;
      sa[18] = -1.5292896f;
      sa[19] = -0.944751f;
      sa[20] = -1.9690495f;
      sa[21] = 0.2608204f;
      sa[22] = -2.0161138f;
      sa[23] = -0.63036895f;
      sa[24] = -0.5378338f;
      sa[25] = 1.9139777f;
      sa[26] = -0.34142146f;
      sa[27] = 1.2388136f;
      sa[28] = 1.2076994f;
      sa[29] = -0.7562721f;
      sa[30] = 0.1677885f;
      sa[31] = 0.15114163f;
      sa[32] = 0.43038714f;
      sa[33] = 0.2989994f;
      sa[34] = -0.605158f;
      sa[35] = 1.045623f;
      sa[36] = 0.59332114f;
      sa[37] = -1.3500506f;
      sa[38] = 0.5670641f;
      sa[39] = -0.25357172f;
      sa[40] = 0.2142957f;
      sa[41] = -0.82469636f;
      sa[42] = 0.52977806f;
      sa[43] = -0.38219765f;
      sa[44] = 0.9328201f;
      sa[45] = -2.148661f;
      sa[46] = -2.1483777f;
      sa[47] = 0.047492042f;
      sa[48] = 1.5384797f;
      sa[49] = -0.23990983f;
      sa[50] = -0.48991868f;
      sa[51] = 1.7950736f;
      sa[52] = -1.779055f;
      sa[53] = 1.0993603f;
      sa[54] = 1.8009638f;
      sa[55] = 1.1006339f;
      sa[56] = -0.5773515f;
      sa[57] = -0.15456964f;
      sa[58] = 0.908291f;
      sa[59] = 0.8125042f;
      sa[60] = -1.433903f;
      sa[61] = 0.97302955f;
      sa[62] = -0.42044201f;
      sa[63] = -0.90440875f;
      sa[64] = 0.97214514f;
      sa[65] = -0.9497853f;
      sa[66] = -1.7687899f;
      sa[67] = -0.13862076f;
      sa[68] = 0.91945875f;
      sa[69] = -1.3728666f;
      sa[70] = -1.6636244f;
      sa[71] = -0.03727938f;
      sa[72] = -1.0602363f;
      sa[73] = -1.2408707f;
      sa[74] = -1.0955237f;
      sa[75] = 1.2175673f;
      sa[76] = 1.9412849f;
      sa[77] = -0.6061538f;
      sa[78] = -1.3684793f;
      sa[79] = -0.36531436f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_12 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_12_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_12_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_12_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_ReLU_12_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


