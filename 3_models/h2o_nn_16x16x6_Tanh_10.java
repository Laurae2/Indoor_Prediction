/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:09:00.417+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_10

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_10 > h2o_nn_16x16x6_Tanh_10.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_10.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_10", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_10 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_10_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_10_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_10_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_10_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_10_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_10_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_10.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_10_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.24761904761904763,0.18571428571428572,0.06190476190476191,0.12857142857142856,0.24761904761904763,0.12857142857142856};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_10() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-3026184788060053584L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_10_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_10_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_10_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_10_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_10_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_10_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_10_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_10_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_10_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_10_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_10_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.06924552506556236;
      sa[1] = 0.005062357562374512;
      sa[2] = 0.03952825678119593;
      sa[3] = -0.03504210404756142;
      sa[4] = -0.014649483342201796;
      sa[5] = 0.0013993221296463585;
      sa[6] = 0.09551828600349241;
      sa[7] = -0.013231265829217695;
      sa[8] = 0.010602196354452668;
      sa[9] = 0.016797299003236923;
      sa[10] = -0.02545519028227048;
      sa[11] = 0.006551249178506734;
      sa[12] = 0.08199121054057268;
      sa[13] = -0.06833539067022847;
      sa[14] = -0.10760120625839709;
      sa[15] = -0.025624431634247616;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_10_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_10_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.10240072228387263;
      sa[1] = -0.01880194058019656;
      sa[2] = -0.030453275304918346;
      sa[3] = 0.10238521315397858;
      sa[4] = -0.020616422976430092;
      sa[5] = -0.04222699588642422;
      sa[6] = 0.07018198998439541;
      sa[7] = 0.004668145808753065;
      sa[8] = -0.04420059441727885;
      sa[9] = -0.052524170522091705;
      sa[10] = 0.006741894602690414;
      sa[11] = 0.17825990619854948;
      sa[12] = -0.06159596153476188;
      sa[13] = -0.006186491460173903;
      sa[14] = -0.03421153186084093;
      sa[15] = -0.09842458277223326;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_10_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_10_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.035673702804441446;
      sa[1] = -0.07710427857875701;
      sa[2] = -0.21788920753612998;
      sa[3] = 0.11604120619606324;
      sa[4] = 0.06518872598719717;
      sa[5] = -0.08620397502035208;
    }
  }
}
class h2o_nn_16x16x6_Tanh_10_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_10_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_10_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.09750269f;
      sa[1] = 0.32753664f;
      sa[2] = 0.19323717f;
      sa[3] = 0.20072052f;
      sa[4] = -0.16570103f;
      sa[5] = -0.19811743f;
      sa[6] = -0.0514325f;
      sa[7] = 0.3821204f;
      sa[8] = 0.13345683f;
      sa[9] = -0.11978511f;
      sa[10] = -0.14979029f;
      sa[11] = -0.20727913f;
      sa[12] = 0.04136443f;
      sa[13] = -0.30951107f;
      sa[14] = -0.2087714f;
      sa[15] = 0.0319645f;
      sa[16] = 0.13114549f;
      sa[17] = 0.20562154f;
      sa[18] = -0.20851865f;
      sa[19] = -0.010593839f;
      sa[20] = 0.23259944f;
      sa[21] = -0.31601134f;
      sa[22] = 0.2414283f;
      sa[23] = -0.18291995f;
      sa[24] = 0.27379596f;
      sa[25] = 0.22425461f;
      sa[26] = -0.2538763f;
      sa[27] = 0.4204534f;
      sa[28] = 0.23372883f;
      sa[29] = -0.2743141f;
      sa[30] = -0.20149717f;
      sa[31] = 0.266818f;
      sa[32] = 0.15693417f;
      sa[33] = -0.29021809f;
      sa[34] = 0.08724377f;
      sa[35] = -0.035340738f;
      sa[36] = 0.13760118f;
      sa[37] = 0.36612946f;
      sa[38] = -0.10442839f;
      sa[39] = 0.17438222f;
      sa[40] = 0.039911665f;
      sa[41] = -0.08183815f;
      sa[42] = -0.15371984f;
      sa[43] = 0.06427195f;
      sa[44] = 0.2531571f;
      sa[45] = -0.25730228f;
      sa[46] = 0.004589153f;
      sa[47] = -0.08127288f;
      sa[48] = 0.24019508f;
      sa[49] = 0.2714979f;
      sa[50] = 0.20940802f;
      sa[51] = -0.2914028f;
      sa[52] = -0.02468028f;
      sa[53] = 0.24817003f;
      sa[54] = 0.20838341f;
      sa[55] = 0.06126682f;
      sa[56] = -0.1688917f;
      sa[57] = -0.28799427f;
      sa[58] = 0.30058852f;
      sa[59] = -0.19481951f;
      sa[60] = -0.3451514f;
      sa[61] = 0.13337517f;
      sa[62] = 0.14235294f;
      sa[63] = 0.017148972f;
      sa[64] = 0.16373575f;
      sa[65] = 0.16408344f;
      sa[66] = 0.028907113f;
      sa[67] = 0.19532034f;
      sa[68] = -0.19015272f;
      sa[69] = -0.03686475f;
      sa[70] = 0.1756982f;
      sa[71] = 0.45228654f;
      sa[72] = -0.19974151f;
      sa[73] = 0.1382083f;
      sa[74] = -0.21905947f;
      sa[75] = 0.11592709f;
      sa[76] = -0.22016342f;
      sa[77] = -0.061337736f;
      sa[78] = -0.06581632f;
      sa[79] = 0.07658391f;
      sa[80] = -0.23381446f;
      sa[81] = -0.1410937f;
      sa[82] = -0.026458045f;
      sa[83] = 0.13034713f;
      sa[84] = 0.011711951f;
      sa[85] = -0.17242202f;
      sa[86] = 0.17884003f;
      sa[87] = 0.24727578f;
      sa[88] = 0.19795613f;
      sa[89] = 0.07641212f;
      sa[90] = -0.17813791f;
      sa[91] = 0.21307038f;
      sa[92] = 0.1252207f;
      sa[93] = -0.236245f;
      sa[94] = -0.18105672f;
      sa[95] = -0.27754474f;
      sa[96] = 0.1578592f;
      sa[97] = 0.041810703f;
      sa[98] = 0.20092976f;
      sa[99] = -0.11747041f;
      sa[100] = -0.043130368f;
      sa[101] = -0.21517262f;
      sa[102] = -0.26246318f;
      sa[103] = -0.15836962f;
      sa[104] = 0.0627038f;
      sa[105] = -0.13671553f;
      sa[106] = -0.28795725f;
      sa[107] = 0.08616825f;
      sa[108] = 0.22433789f;
      sa[109] = -0.31859422f;
      sa[110] = -0.21957032f;
      sa[111] = 0.13353626f;
      sa[112] = 0.13593017f;
      sa[113] = 0.002077026f;
      sa[114] = -0.19096139f;
      sa[115] = -0.06815589f;
      sa[116] = -0.2644741f;
      sa[117] = -0.03395154f;
      sa[118] = -0.26716313f;
      sa[119] = -0.15500629f;
      sa[120] = 0.1989147f;
      sa[121] = 0.19772597f;
      sa[122] = 0.30042917f;
      sa[123] = 0.24140841f;
      sa[124] = 0.2101935f;
      sa[125] = 0.22076693f;
      sa[126] = 6.301447E-4f;
      sa[127] = -0.2237971f;
      sa[128] = 0.074682f;
      sa[129] = 0.1875699f;
      sa[130] = -0.14615452f;
      sa[131] = 0.3626517f;
      sa[132] = 0.15386055f;
      sa[133] = -0.30576873f;
      sa[134] = 0.26945338f;
      sa[135] = -0.3719598f;
      sa[136] = -0.30948123f;
      sa[137] = -0.01937305f;
      sa[138] = 0.09287997f;
      sa[139] = -0.09897766f;
      sa[140] = -0.023452405f;
      sa[141] = -0.06200565f;
      sa[142] = 0.043817952f;
      sa[143] = -0.40912578f;
      sa[144] = 0.30314404f;
      sa[145] = -0.24199453f;
      sa[146] = -0.30320215f;
      sa[147] = 0.21786349f;
      sa[148] = 0.18045445f;
      sa[149] = 0.17772292f;
      sa[150] = 0.31031066f;
      sa[151] = -0.31434265f;
      sa[152] = 0.02349855f;
      sa[153] = 0.22601336f;
      sa[154] = 0.2533983f;
      sa[155] = -0.21029839f;
      sa[156] = 0.12722223f;
      sa[157] = -0.24508347f;
      sa[158] = 0.089382365f;
      sa[159] = 0.04681376f;
      sa[160] = 0.041546136f;
      sa[161] = 0.15222241f;
      sa[162] = -0.050150372f;
      sa[163] = -0.019697286f;
      sa[164] = 0.258216f;
      sa[165] = -0.029482098f;
      sa[166] = -0.07372008f;
      sa[167] = -0.067854375f;
      sa[168] = 0.18468885f;
      sa[169] = 0.33239463f;
      sa[170] = 0.1037731f;
      sa[171] = -0.12247759f;
      sa[172] = -0.07836558f;
      sa[173] = -0.15681255f;
      sa[174] = -0.053014092f;
      sa[175] = -0.27844635f;
      sa[176] = 0.023130555f;
      sa[177] = -0.01356898f;
      sa[178] = -0.047140125f;
      sa[179] = 0.062606715f;
      sa[180] = -0.11344749f;
      sa[181] = -0.27379468f;
      sa[182] = -0.120355636f;
      sa[183] = 0.07929786f;
      sa[184] = 0.30521348f;
      sa[185] = 0.21346383f;
      sa[186] = -0.30576053f;
      sa[187] = 0.08285141f;
      sa[188] = -0.028081015f;
      sa[189] = 0.190421f;
      sa[190] = -0.016831966f;
      sa[191] = -0.005151005f;
      sa[192] = -0.12517652f;
      sa[193] = 0.2884097f;
      sa[194] = 0.12748623f;
      sa[195] = 0.3198122f;
      sa[196] = 0.35582086f;
      sa[197] = -0.075758025f;
      sa[198] = 0.10142763f;
      sa[199] = -0.17331581f;
      sa[200] = 0.008607685f;
      sa[201] = -0.33657494f;
      sa[202] = 0.14092302f;
      sa[203] = -0.064035624f;
      sa[204] = -0.17083919f;
      sa[205] = 0.21377426f;
      sa[206] = 0.2822384f;
      sa[207] = 0.14103952f;
      sa[208] = -0.2962806f;
      sa[209] = -0.10706549f;
      sa[210] = -0.30292392f;
      sa[211] = -0.2931579f;
      sa[212] = 0.2615117f;
      sa[213] = -0.2269598f;
      sa[214] = -0.29104215f;
      sa[215] = -0.00817092f;
      sa[216] = 0.09039584f;
      sa[217] = 0.26081088f;
      sa[218] = -0.16080536f;
      sa[219] = 0.22689174f;
      sa[220] = -0.2358305f;
      sa[221] = 0.07432768f;
      sa[222] = 0.25992468f;
      sa[223] = 0.066883914f;
      sa[224] = 0.13867748f;
      sa[225] = 0.32198787f;
      sa[226] = -0.25073802f;
      sa[227] = 0.44910023f;
      sa[228] = 0.1728934f;
      sa[229] = 0.1308916f;
      sa[230] = 0.30854726f;
      sa[231] = -0.23103268f;
      sa[232] = -0.21485569f;
      sa[233] = 0.08730727f;
      sa[234] = 0.090209775f;
      sa[235] = -0.31287414f;
      sa[236] = -0.017233275f;
      sa[237] = -0.24641082f;
      sa[238] = -0.22538075f;
      sa[239] = 0.1381425f;
      sa[240] = 0.051506203f;
      sa[241] = -0.23450723f;
      sa[242] = -0.11455266f;
      sa[243] = -0.32964107f;
      sa[244] = -0.19793782f;
      sa[245] = -0.13617617f;
      sa[246] = -0.25694954f;
      sa[247] = -0.040599007f;
      sa[248] = 0.28226846f;
      sa[249] = 0.3079911f;
      sa[250] = -0.37902683f;
      sa[251] = -0.19663863f;
      sa[252] = -0.25114462f;
      sa[253] = -0.25415114f;
      sa[254] = -0.3033974f;
      sa[255] = 0.16016725f;
      sa[256] = -0.20760326f;
      sa[257] = 0.25454214f;
      sa[258] = -0.31069857f;
      sa[259] = -0.14417459f;
      sa[260] = -0.17663991f;
      sa[261] = -0.06188f;
      sa[262] = -0.166076f;
      sa[263] = 0.2647873f;
      sa[264] = -0.18014053f;
      sa[265] = 0.022704758f;
      sa[266] = -0.3322298f;
      sa[267] = -0.26821616f;
      sa[268] = 0.12454369f;
      sa[269] = -0.17921409f;
      sa[270] = 0.012243968f;
      sa[271] = 0.3678935f;
      sa[272] = -0.07620888f;
      sa[273] = -0.107507154f;
      sa[274] = 0.13416961f;
      sa[275] = 0.029491682f;
      sa[276] = 0.051897462f;
      sa[277] = -0.29441264f;
      sa[278] = -0.19391993f;
      sa[279] = 0.16790687f;
      sa[280] = -0.17256102f;
      sa[281] = 0.3254626f;
      sa[282] = -0.12088293f;
      sa[283] = -0.028642302f;
      sa[284] = -0.020483606f;
      sa[285] = -0.2737679f;
      sa[286] = 0.3731002f;
      sa[287] = 0.21283218f;
      sa[288] = -0.2955611f;
      sa[289] = -0.15535216f;
      sa[290] = -0.070327245f;
      sa[291] = 0.08657135f;
      sa[292] = 0.15385622f;
      sa[293] = -0.036941368f;
      sa[294] = 0.14273882f;
      sa[295] = 0.16415042f;
      sa[296] = 0.18120289f;
      sa[297] = 0.14888209f;
      sa[298] = -0.024107188f;
      sa[299] = -0.026659386f;
      sa[300] = 0.0051673474f;
      sa[301] = -0.015131939f;
      sa[302] = 0.228922f;
      sa[303] = 0.07250192f;
      sa[304] = -0.14840117f;
      sa[305] = -0.057053886f;
      sa[306] = 0.22510375f;
      sa[307] = -0.30829072f;
      sa[308] = 0.05608589f;
      sa[309] = 0.12695187f;
      sa[310] = 0.30279046f;
      sa[311] = 0.28033125f;
      sa[312] = -0.18568186f;
      sa[313] = -0.10156202f;
      sa[314] = -0.12965731f;
      sa[315] = -0.026503824f;
      sa[316] = -0.044492193f;
      sa[317] = -0.10887506f;
      sa[318] = 0.12075104f;
      sa[319] = 0.30957863f;
      sa[320] = 0.0076405616f;
      sa[321] = 0.26005155f;
      sa[322] = 0.09503592f;
      sa[323] = -0.31592247f;
      sa[324] = 0.06425953f;
      sa[325] = 0.2901302f;
      sa[326] = -0.30321753f;
      sa[327] = 0.0016911591f;
      sa[328] = -0.050906617f;
      sa[329] = 0.24805002f;
      sa[330] = -0.20428887f;
      sa[331] = 0.01922864f;
      sa[332] = -0.29543594f;
      sa[333] = 0.12420773f;
      sa[334] = -0.058916412f;
      sa[335] = 0.17608121f;
      sa[336] = -0.19637787f;
      sa[337] = -0.21189591f;
      sa[338] = 0.27600798f;
      sa[339] = -0.2366681f;
      sa[340] = -0.37157094f;
      sa[341] = -0.3424398f;
      sa[342] = 0.4042728f;
      sa[343] = -0.06201023f;
      sa[344] = -0.17161886f;
      sa[345] = 0.2508872f;
      sa[346] = 0.23037706f;
      sa[347] = -0.14719115f;
      sa[348] = 0.28158227f;
      sa[349] = -0.2798178f;
      sa[350] = -0.13496438f;
      sa[351] = 0.17379521f;
      sa[352] = 0.22094256f;
      sa[353] = -0.0052945823f;
      sa[354] = 0.085054904f;
      sa[355] = 0.16601591f;
      sa[356] = -0.18730359f;
      sa[357] = 0.18164167f;
      sa[358] = -0.10053167f;
      sa[359] = 0.15278558f;
      sa[360] = 0.09119593f;
      sa[361] = -0.16715729f;
      sa[362] = -0.16792323f;
      sa[363] = 0.26754153f;
      sa[364] = -0.15565723f;
      sa[365] = -0.26002878f;
      sa[366] = -0.0030285018f;
      sa[367] = -0.39017773f;
      sa[368] = -0.20619614f;
      sa[369] = 0.17427188f;
      sa[370] = -0.21382381f;
      sa[371] = 0.17411184f;
      sa[372] = -0.022348437f;
      sa[373] = 0.2869766f;
      sa[374] = -0.14298739f;
      sa[375] = -0.37331554f;
      sa[376] = -0.37343988f;
      sa[377] = -0.32674435f;
      sa[378] = 0.47592938f;
      sa[379] = 0.12050373f;
      sa[380] = -0.13199528f;
      sa[381] = -0.1332275f;
      sa[382] = -0.043057732f;
      sa[383] = -0.11523834f;
      sa[384] = -0.14282095f;
      sa[385] = 0.12536708f;
      sa[386] = -0.16946861f;
      sa[387] = -0.32726023f;
      sa[388] = 0.06648771f;
      sa[389] = -0.037630536f;
      sa[390] = -0.07113582f;
      sa[391] = -0.18085314f;
      sa[392] = 0.40934926f;
      sa[393] = 0.3223348f;
      sa[394] = -0.12205777f;
      sa[395] = 0.2144381f;
      sa[396] = 0.31623626f;
      sa[397] = -0.2959767f;
      sa[398] = 0.11591731f;
      sa[399] = 0.090605244f;
      sa[400] = 0.18896922f;
      sa[401] = 0.2573918f;
      sa[402] = -0.15566067f;
      sa[403] = 0.010307482f;
      sa[404] = 0.29589972f;
      sa[405] = -0.22910649f;
      sa[406] = -0.0739265f;
      sa[407] = 0.18502894f;
      sa[408] = -0.213346f;
      sa[409] = -0.2666836f;
      sa[410] = -0.12615876f;
      sa[411] = 0.15968929f;
      sa[412] = -0.18176681f;
      sa[413] = 0.14967029f;
      sa[414] = 0.08755849f;
      sa[415] = 0.44377863f;
      sa[416] = -0.17036493f;
      sa[417] = 0.044306885f;
      sa[418] = 0.011011737f;
      sa[419] = 0.30686647f;
      sa[420] = 0.20737429f;
      sa[421] = 0.23968986f;
      sa[422] = 0.1810871f;
      sa[423] = -0.056590807f;
      sa[424] = 0.13387696f;
      sa[425] = -0.07995307f;
      sa[426] = -0.30976787f;
      sa[427] = 0.16936673f;
      sa[428] = -0.016533978f;
      sa[429] = -0.16207947f;
      sa[430] = 0.22158079f;
      sa[431] = -0.010251402f;
      sa[432] = -0.036371216f;
      sa[433] = 0.052519992f;
      sa[434] = 0.24342379f;
      sa[435] = 0.0024537356f;
      sa[436] = -0.28519648f;
      sa[437] = -0.30264607f;
      sa[438] = -0.009142495f;
      sa[439] = -0.06318525f;
      sa[440] = 0.3511104f;
      sa[441] = -0.34716555f;
      sa[442] = 0.10348031f;
      sa[443] = 0.022134934f;
      sa[444] = -0.21770388f;
      sa[445] = 0.04969716f;
      sa[446] = 0.24447536f;
      sa[447] = 0.03456922f;
      sa[448] = 0.13162486f;
      sa[449] = 0.25194627f;
      sa[450] = -0.07141359f;
      sa[451] = 0.2043718f;
      sa[452] = 0.25368884f;
      sa[453] = -0.0063310964f;
      sa[454] = -0.1414324f;
      sa[455] = 0.005131649f;
      sa[456] = -0.06701444f;
      sa[457] = 0.08930733f;
      sa[458] = -0.23221831f;
      sa[459] = 0.25141323f;
      sa[460] = 0.2862114f;
      sa[461] = 0.33484757f;
      sa[462] = 0.050322518f;
      sa[463] = 0.23134996f;
      sa[464] = -0.2665082f;
      sa[465] = 0.21389605f;
      sa[466] = 0.00940812f;
      sa[467] = 0.14007692f;
      sa[468] = 0.11973671f;
      sa[469] = 0.2875235f;
      sa[470] = 0.18988422f;
      sa[471] = 0.11715901f;
      sa[472] = 0.007013458f;
      sa[473] = -0.14122942f;
      sa[474] = -0.037510984f;
      sa[475] = 0.09992691f;
      sa[476] = 0.24476893f;
      sa[477] = -0.17580372f;
      sa[478] = 0.14766513f;
      sa[479] = -0.19746034f;
      sa[480] = -0.35989517f;
      sa[481] = -0.2613462f;
      sa[482] = -0.31024805f;
      sa[483] = 0.18793485f;
      sa[484] = 0.20506363f;
      sa[485] = 0.16565429f;
      sa[486] = -0.011487622f;
      sa[487] = -0.22232747f;
      sa[488] = -0.2503096f;
      sa[489] = 0.076504685f;
      sa[490] = -0.036783848f;
      sa[491] = -0.25700188f;
      sa[492] = 0.20927349f;
      sa[493] = 0.33418185f;
      sa[494] = -0.24722926f;
      sa[495] = 0.23825388f;
      sa[496] = -0.030814698f;
      sa[497] = 0.053553987f;
      sa[498] = 0.16544792f;
      sa[499] = 0.15805869f;
      sa[500] = -0.02033312f;
      sa[501] = 0.11177269f;
      sa[502] = 0.26334563f;
      sa[503] = 0.09416659f;
      sa[504] = -0.17258465f;
      sa[505] = -0.14468142f;
      sa[506] = 0.21830668f;
      sa[507] = -0.1504567f;
      sa[508] = 0.055044793f;
      sa[509] = 0.20566224f;
      sa[510] = 0.13283996f;
      sa[511] = 0.0134709105f;
      sa[512] = 0.10061764f;
      sa[513] = 0.016300866f;
      sa[514] = 0.28996798f;
      sa[515] = -0.12742288f;
      sa[516] = -0.0028003298f;
      sa[517] = 0.07651755f;
      sa[518] = 0.10607506f;
      sa[519] = -0.077800035f;
      sa[520] = 0.26872864f;
      sa[521] = 0.21009035f;
      sa[522] = 0.066827916f;
      sa[523] = 0.16350596f;
      sa[524] = 0.1849702f;
      sa[525] = 0.14979582f;
      sa[526] = -0.04560783f;
      sa[527] = -0.17086847f;
      sa[528] = -0.01808451f;
      sa[529] = 0.13284288f;
      sa[530] = -0.23585132f;
      sa[531] = 0.01852235f;
      sa[532] = 0.13768695f;
      sa[533] = 0.09739184f;
      sa[534] = 0.11844809f;
      sa[535] = -0.09102104f;
      sa[536] = 0.042228542f;
      sa[537] = -0.11676471f;
      sa[538] = 0.153226f;
      sa[539] = 0.29119328f;
      sa[540] = -0.21071117f;
      sa[541] = -0.286808f;
      sa[542] = -0.10910966f;
      sa[543] = -0.3332328f;
      sa[544] = 0.14884539f;
      sa[545] = -5.6195044E-4f;
      sa[546] = 0.018374726f;
      sa[547] = 0.17200099f;
      sa[548] = 0.063273005f;
      sa[549] = 0.13282897f;
      sa[550] = 0.03089929f;
      sa[551] = -0.1949978f;
      sa[552] = -0.049475346f;
      sa[553] = -0.16855009f;
      sa[554] = -0.22674337f;
      sa[555] = -0.26341605f;
      sa[556] = -0.3175101f;
      sa[557] = -0.40325814f;
      sa[558] = -0.03614181f;
      sa[559] = 0.26580352f;
      sa[560] = -0.33606356f;
      sa[561] = -0.07593889f;
      sa[562] = 0.19389032f;
      sa[563] = -0.021355726f;
      sa[564] = 0.2719074f;
      sa[565] = 0.07760284f;
      sa[566] = 0.39364776f;
      sa[567] = -0.0034817657f;
      sa[568] = -0.10738935f;
      sa[569] = 0.039927524f;
      sa[570] = -0.09206197f;
      sa[571] = -0.07074941f;
      sa[572] = -0.10979059f;
      sa[573] = 0.08695212f;
      sa[574] = 0.34642208f;
      sa[575] = -0.22087944f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_10_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_10_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.4265585f;
      sa[1] = 0.058805406f;
      sa[2] = -0.21248832f;
      sa[3] = -0.23836473f;
      sa[4] = 0.07161236f;
      sa[5] = -0.019319734f;
      sa[6] = 0.22180241f;
      sa[7] = -0.14130151f;
      sa[8] = -0.2622661f;
      sa[9] = 0.14761746f;
      sa[10] = -0.15768641f;
      sa[11] = 0.11392474f;
      sa[12] = 0.18406317f;
      sa[13] = 0.04651244f;
      sa[14] = -0.22304657f;
      sa[15] = 0.32706103f;
      sa[16] = 0.431897f;
      sa[17] = -0.0759937f;
      sa[18] = 0.009514251f;
      sa[19] = -0.12544958f;
      sa[20] = 0.2922802f;
      sa[21] = -0.072422504f;
      sa[22] = -0.2513695f;
      sa[23] = 0.17175423f;
      sa[24] = -0.35198295f;
      sa[25] = 0.15364571f;
      sa[26] = -0.08972894f;
      sa[27] = 0.32080424f;
      sa[28] = -0.32440197f;
      sa[29] = -0.12225306f;
      sa[30] = 0.0924784f;
      sa[31] = -0.22133635f;
      sa[32] = -0.23314096f;
      sa[33] = -0.43594134f;
      sa[34] = 0.008585235f;
      sa[35] = 0.2583455f;
      sa[36] = -0.020856772f;
      sa[37] = -0.003917082f;
      sa[38] = 0.058568712f;
      sa[39] = 0.18373239f;
      sa[40] = -0.2322656f;
      sa[41] = -0.35726994f;
      sa[42] = -0.28485116f;
      sa[43] = -0.4931455f;
      sa[44] = 0.045464374f;
      sa[45] = -0.25158885f;
      sa[46] = 0.33482596f;
      sa[47] = 0.3338386f;
      sa[48] = -0.37152722f;
      sa[49] = -0.29609182f;
      sa[50] = 0.10645078f;
      sa[51] = -0.014291587f;
      sa[52] = 0.14590132f;
      sa[53] = 0.17070939f;
      sa[54] = -0.08645618f;
      sa[55] = 0.36101088f;
      sa[56] = -0.25530902f;
      sa[57] = -0.32785884f;
      sa[58] = 0.0749808f;
      sa[59] = 0.010424887f;
      sa[60] = 0.32377338f;
      sa[61] = -0.30686873f;
      sa[62] = -0.06929872f;
      sa[63] = 0.23986417f;
      sa[64] = 0.35091853f;
      sa[65] = -0.18002945f;
      sa[66] = 0.1189875f;
      sa[67] = 0.33190432f;
      sa[68] = 0.19191058f;
      sa[69] = -0.23544437f;
      sa[70] = -0.44621664f;
      sa[71] = -0.06625747f;
      sa[72] = -0.33627334f;
      sa[73] = 0.29490393f;
      sa[74] = 0.43755433f;
      sa[75] = 0.21437326f;
      sa[76] = 0.14914875f;
      sa[77] = 0.110358946f;
      sa[78] = -0.3171084f;
      sa[79] = 0.37931532f;
      sa[80] = -0.10865582f;
      sa[81] = 0.028870529f;
      sa[82] = 0.24617967f;
      sa[83] = -0.19053252f;
      sa[84] = -0.3521264f;
      sa[85] = -0.32149154f;
      sa[86] = 0.07455683f;
      sa[87] = 0.33960247f;
      sa[88] = -0.46373546f;
      sa[89] = -0.15134116f;
      sa[90] = -0.30427685f;
      sa[91] = 0.24268582f;
      sa[92] = -0.058721077f;
      sa[93] = 0.21691284f;
      sa[94] = -0.3981125f;
      sa[95] = -0.087211765f;
      sa[96] = -0.2592577f;
      sa[97] = 0.05245466f;
      sa[98] = -0.049425807f;
      sa[99] = 0.07987703f;
      sa[100] = -0.32901514f;
      sa[101] = -0.21422833f;
      sa[102] = 0.33870995f;
      sa[103] = 0.027397932f;
      sa[104] = -0.049148228f;
      sa[105] = -0.15437381f;
      sa[106] = 0.36403772f;
      sa[107] = 0.2956804f;
      sa[108] = 0.26943764f;
      sa[109] = -0.013562173f;
      sa[110] = 0.21677385f;
      sa[111] = -0.21624124f;
      sa[112] = -0.23750792f;
      sa[113] = 0.011008871f;
      sa[114] = 0.06420255f;
      sa[115] = -0.085551724f;
      sa[116] = 0.3381893f;
      sa[117] = 0.032594744f;
      sa[118] = -0.4060742f;
      sa[119] = -0.10698796f;
      sa[120] = -0.1301054f;
      sa[121] = 0.22955081f;
      sa[122] = 0.011898346f;
      sa[123] = 0.19889125f;
      sa[124] = -0.23462693f;
      sa[125] = 0.17533173f;
      sa[126] = -0.15599328f;
      sa[127] = 0.20072156f;
      sa[128] = -0.28746343f;
      sa[129] = 0.055391677f;
      sa[130] = -0.048610564f;
      sa[131] = 0.2907696f;
      sa[132] = 0.038464244f;
      sa[133] = 0.17760213f;
      sa[134] = 0.25670666f;
      sa[135] = -0.2899637f;
      sa[136] = 0.15093103f;
      sa[137] = -0.14844124f;
      sa[138] = 0.06316672f;
      sa[139] = 0.31659865f;
      sa[140] = -0.23089536f;
      sa[141] = -0.055653382f;
      sa[142] = 0.014749937f;
      sa[143] = -0.20539989f;
      sa[144] = 0.2598567f;
      sa[145] = -0.2567492f;
      sa[146] = 0.08453805f;
      sa[147] = -0.021557305f;
      sa[148] = -0.23742342f;
      sa[149] = 0.35983983f;
      sa[150] = -0.18428336f;
      sa[151] = -0.47580856f;
      sa[152] = 0.42185745f;
      sa[153] = -0.098016776f;
      sa[154] = 0.34064236f;
      sa[155] = -0.70994985f;
      sa[156] = -0.3475616f;
      sa[157] = -0.26244584f;
      sa[158] = -0.14513242f;
      sa[159] = -0.290747f;
      sa[160] = 0.37142083f;
      sa[161] = -0.35434917f;
      sa[162] = 0.44465026f;
      sa[163] = -0.19208136f;
      sa[164] = 0.19352493f;
      sa[165] = -0.123088084f;
      sa[166] = 0.40537462f;
      sa[167] = -0.35464245f;
      sa[168] = 0.26576167f;
      sa[169] = -0.40264854f;
      sa[170] = 0.3675929f;
      sa[171] = 0.23595601f;
      sa[172] = 0.3459621f;
      sa[173] = 0.3412741f;
      sa[174] = -0.05991259f;
      sa[175] = 6.6706896E-5f;
      sa[176] = -0.28101483f;
      sa[177] = 0.13464592f;
      sa[178] = -0.30629286f;
      sa[179] = 0.055972915f;
      sa[180] = -0.44997713f;
      sa[181] = -0.26728645f;
      sa[182] = 0.06031406f;
      sa[183] = -0.23778999f;
      sa[184] = 0.4670896f;
      sa[185] = 0.30956557f;
      sa[186] = -0.15940733f;
      sa[187] = -0.1665945f;
      sa[188] = -0.14059725f;
      sa[189] = -0.3914192f;
      sa[190] = -0.37490347f;
      sa[191] = -0.2314091f;
      sa[192] = -0.13298036f;
      sa[193] = 0.07621691f;
      sa[194] = -0.2770987f;
      sa[195] = -0.25210586f;
      sa[196] = 0.10840515f;
      sa[197] = -0.15246576f;
      sa[198] = 0.050917942f;
      sa[199] = 0.38417742f;
      sa[200] = -0.00851095f;
      sa[201] = 0.2662979f;
      sa[202] = 0.23489827f;
      sa[203] = -0.34565303f;
      sa[204] = 0.04667743f;
      sa[205] = 0.3532526f;
      sa[206] = -0.18549217f;
      sa[207] = 0.17298676f;
      sa[208] = -0.054154012f;
      sa[209] = 0.2522617f;
      sa[210] = -0.11544987f;
      sa[211] = -0.3224621f;
      sa[212] = -0.3020457f;
      sa[213] = 0.038132597f;
      sa[214] = -0.38390598f;
      sa[215] = 0.02829269f;
      sa[216] = 0.044367254f;
      sa[217] = 0.29495358f;
      sa[218] = 0.0036041453f;
      sa[219] = 0.109714955f;
      sa[220] = 0.18938132f;
      sa[221] = 0.087810524f;
      sa[222] = -0.2316305f;
      sa[223] = -0.30558506f;
      sa[224] = 0.3592844f;
      sa[225] = 0.099595055f;
      sa[226] = -0.02916122f;
      sa[227] = 0.007997882f;
      sa[228] = -0.05122118f;
      sa[229] = -0.18925264f;
      sa[230] = -0.24211887f;
      sa[231] = -0.15036716f;
      sa[232] = 0.39836735f;
      sa[233] = -0.17649978f;
      sa[234] = -0.18155584f;
      sa[235] = -0.15640084f;
      sa[236] = -0.32795826f;
      sa[237] = 0.56098497f;
      sa[238] = 0.1666985f;
      sa[239] = -0.12993325f;
      sa[240] = -0.109471664f;
      sa[241] = -0.4248418f;
      sa[242] = -0.23103833f;
      sa[243] = 0.24716558f;
      sa[244] = 0.2640086f;
      sa[245] = 0.3592293f;
      sa[246] = 0.2349718f;
      sa[247] = -0.4424584f;
      sa[248] = -0.21187219f;
      sa[249] = 0.063171f;
      sa[250] = 0.2512441f;
      sa[251] = 0.32078305f;
      sa[252] = 0.21168806f;
      sa[253] = -0.19854121f;
      sa[254] = 0.34450117f;
      sa[255] = 0.11787934f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_10_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_Tanh_10_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.14023896f;
      sa[1] = -1.4601198f;
      sa[2] = -1.4903799f;
      sa[3] = 1.3621681f;
      sa[4] = 0.48495245f;
      sa[5] = -0.16305837f;
      sa[6] = -1.577107f;
      sa[7] = 1.4356905f;
      sa[8] = 1.7643453f;
      sa[9] = 0.25269783f;
      sa[10] = 1.6129125f;
      sa[11] = 1.4312588f;
      sa[12] = 1.8193406f;
      sa[13] = -0.6030805f;
      sa[14] = -1.9763497f;
      sa[15] = -0.5504231f;
      sa[16] = 0.7805013f;
      sa[17] = -0.82150954f;
      sa[18] = -1.5265403f;
      sa[19] = -0.9159244f;
      sa[20] = -1.9486511f;
      sa[21] = 0.31273535f;
      sa[22] = -1.959479f;
      sa[23] = -0.6319062f;
      sa[24] = -0.5218852f;
      sa[25] = 1.8746042f;
      sa[26] = -0.25615606f;
      sa[27] = 1.1935794f;
      sa[28] = 1.1920823f;
      sa[29] = -0.71667004f;
      sa[30] = 0.12354291f;
      sa[31] = 0.051182393f;
      sa[32] = 0.63962543f;
      sa[33] = 0.14943595f;
      sa[34] = -0.75102705f;
      sa[35] = 0.93003947f;
      sa[36] = 0.4199977f;
      sa[37] = -1.2863386f;
      sa[38] = 0.7169016f;
      sa[39] = -0.23983108f;
      sa[40] = 0.33098254f;
      sa[41] = -0.4885376f;
      sa[42] = 0.7317123f;
      sa[43] = 0.032553032f;
      sa[44] = 1.1139853f;
      sa[45] = -1.9172615f;
      sa[46] = -2.2456326f;
      sa[47] = 0.07616105f;
      sa[48] = 1.5792636f;
      sa[49] = -0.14014387f;
      sa[50] = -0.3739171f;
      sa[51] = 1.7829138f;
      sa[52] = -1.5844659f;
      sa[53] = 0.9200791f;
      sa[54] = 1.671698f;
      sa[55] = 0.9964118f;
      sa[56] = -0.6561273f;
      sa[57] = -0.17667174f;
      sa[58] = 0.9401225f;
      sa[59] = 0.7931541f;
      sa[60] = -1.3641297f;
      sa[61] = 0.86761045f;
      sa[62] = -0.27784505f;
      sa[63] = -0.87925714f;
      sa[64] = 0.8453857f;
      sa[65] = -0.8785628f;
      sa[66] = -1.7154194f;
      sa[67] = -0.11803133f;
      sa[68] = 0.8722897f;
      sa[69] = -1.3159746f;
      sa[70] = -1.6508005f;
      sa[71] = 0.008606434f;
      sa[72] = -0.9954733f;
      sa[73] = -1.2299088f;
      sa[74] = -1.1362845f;
      sa[75] = 1.2192372f;
      sa[76] = 1.8054761f;
      sa[77] = -0.5737422f;
      sa[78] = -1.3487105f;
      sa[79] = -0.41389716f;
      sa[80] = 0.6915818f;
      sa[81] = -1.5389569f;
      sa[82] = -0.21382476f;
      sa[83] = -1.3349383f;
      sa[84] = 1.5967307f;
      sa[85] = 1.0586814f;
      sa[86] = -1.8823912f;
      sa[87] = 1.0647945f;
      sa[88] = -1.5705982f;
      sa[89] = -0.93999434f;
      sa[90] = 0.30848652f;
      sa[91] = 0.18455969f;
      sa[92] = 1.4706405f;
      sa[93] = 1.8986998f;
      sa[94] = 1.5961529f;
      sa[95] = 0.7023629f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_10 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_10_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_10_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_10_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_Tanh_10_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


