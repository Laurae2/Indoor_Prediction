/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:07:36.543+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_05

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_05 > h2o_nn_16x16x6_ReLU_05.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_05.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_05", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_05 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_05_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_05_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_05_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_05_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_05_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_05_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_05_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_05_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_05_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_05_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_05_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_05_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_05.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_05_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.29347826086956524,0.13043478260869565,0.14130434782608695,0.29347826086956524,0.14130434782608695};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_05() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(4049635125041659656L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_05_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_05_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_05_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_05_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_05_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_05_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_05_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_05_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_05_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_05_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_05_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.6545644858862261;
      sa[1] = 0.5870132493097667;
      sa[2] = 0.41576988593679937;
      sa[3] = 0.4699693433002658;
      sa[4] = 0.4813507421552259;
      sa[5] = 0.5718728454241034;
      sa[6] = 0.3327553075104109;
      sa[7] = 0.6838729769303363;
      sa[8] = 0.5607193682972622;
      sa[9] = 0.6726498373552174;
      sa[10] = 0.3713973865533465;
      sa[11] = 0.3705263941268175;
      sa[12] = 0.46094201626425374;
      sa[13] = 0.4367115964352131;
      sa[14] = 0.4833512720402834;
      sa[15] = 0.5629145364374202;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_05_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_05_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.0263646502471517;
      sa[1] = 0.9903861535952446;
      sa[2] = 0.9632272852005377;
      sa[3] = 0.9956748002802439;
      sa[4] = 1.02385506734429;
      sa[5] = 0.9943286057657726;
      sa[6] = 0.9262231391928685;
      sa[7] = 0.931118856745239;
      sa[8] = 0.9213539134362152;
      sa[9] = 1.0646836260036572;
      sa[10] = 0.8855147908805192;
      sa[11] = 1.151787431308602;
      sa[12] = 1.0428760996422826;
      sa[13] = 1.0019039646214563;
      sa[14] = 1.0389241271010388;
      sa[15] = 1.0483155574172478;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_05_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_05_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.0450070441831238;
      sa[1] = 0.008482239036640412;
      sa[2] = -0.019332920556553602;
      sa[3] = -0.0253660627641576;
      sa[4] = 0.035157677502852126;
    }
  }
}
class h2o_nn_16x16x6_ReLU_05_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_05_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_05_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.030734766f;
      sa[1] = 0.2861228f;
      sa[2] = 0.41101423f;
      sa[3] = 0.17634489f;
      sa[4] = -0.076650135f;
      sa[5] = -0.09196542f;
      sa[6] = 0.05393453f;
      sa[7] = 0.4487593f;
      sa[8] = 0.08279247f;
      sa[9] = -0.043471675f;
      sa[10] = -0.17363822f;
      sa[11] = -0.23790027f;
      sa[12] = 0.18629266f;
      sa[13] = -0.18976149f;
      sa[14] = -0.08866049f;
      sa[15] = 0.16742972f;
      sa[16] = 0.35034713f;
      sa[17] = 0.347639f;
      sa[18] = -0.25315112f;
      sa[19] = 0.17121688f;
      sa[20] = 0.3612777f;
      sa[21] = -0.22025834f;
      sa[22] = 0.35347667f;
      sa[23] = -0.017095676f;
      sa[24] = 0.48360178f;
      sa[25] = 0.19188543f;
      sa[26] = -0.27761042f;
      sa[27] = 0.28112167f;
      sa[28] = 0.37151065f;
      sa[29] = -0.1828221f;
      sa[30] = -0.07629037f;
      sa[31] = 0.33164543f;
      sa[32] = 0.23922776f;
      sa[33] = -0.27908868f;
      sa[34] = 0.027899321f;
      sa[35] = -0.14663902f;
      sa[36] = -0.27551112f;
      sa[37] = 0.28307208f;
      sa[38] = 0.08212512f;
      sa[39] = 0.0899114f;
      sa[40] = 0.12528564f;
      sa[41] = -0.094060436f;
      sa[42] = -0.12929152f;
      sa[43] = 0.13749292f;
      sa[44] = -0.083682865f;
      sa[45] = -0.0013770967f;
      sa[46] = 0.023856075f;
      sa[47] = -0.06834919f;
      sa[48] = 0.31649888f;
      sa[49] = 0.2779456f;
      sa[50] = 0.24076083f;
      sa[51] = -0.21052854f;
      sa[52] = -0.00356118f;
      sa[53] = 0.5401697f;
      sa[54] = 0.2956471f;
      sa[55] = -0.035914f;
      sa[56] = -0.089067f;
      sa[57] = -0.17886654f;
      sa[58] = 0.3584868f;
      sa[59] = -0.061196838f;
      sa[60] = -0.20184238f;
      sa[61] = 0.17048113f;
      sa[62] = 0.1931596f;
      sa[63] = 0.098222755f;
      sa[64] = 0.23776053f;
      sa[65] = 0.25461861f;
      sa[66] = 0.07083957f;
      sa[67] = 0.28426078f;
      sa[68] = -0.06716915f;
      sa[69] = 0.23837574f;
      sa[70] = -0.1416428f;
      sa[71] = 0.3679129f;
      sa[72] = -0.15832545f;
      sa[73] = 0.19882591f;
      sa[74] = -0.28060374f;
      sa[75] = 0.1109037f;
      sa[76] = -0.24135417f;
      sa[77] = -0.07840331f;
      sa[78] = -0.08452391f;
      sa[79] = 0.10946612f;
      sa[80] = -0.22381319f;
      sa[81] = -0.21352038f;
      sa[82] = -0.011097895f;
      sa[83] = 0.14953971f;
      sa[84] = -0.06571565f;
      sa[85] = -0.21282858f;
      sa[86] = 0.14198174f;
      sa[87] = 0.21947986f;
      sa[88] = 0.21587616f;
      sa[89] = -0.026086751f;
      sa[90] = -0.09650953f;
      sa[91] = 0.15302113f;
      sa[92] = 0.06768143f;
      sa[93] = -0.26941302f;
      sa[94] = -0.21625447f;
      sa[95] = -0.3089188f;
      sa[96] = 0.09349204f;
      sa[97] = 0.06640487f;
      sa[98] = 0.22633809f;
      sa[99] = -0.09119867f;
      sa[100] = -0.1142624f;
      sa[101] = -0.25302437f;
      sa[102] = -0.3208197f;
      sa[103] = -0.14456631f;
      sa[104] = -0.005935052f;
      sa[105] = -0.1601986f;
      sa[106] = -0.21143278f;
      sa[107] = 0.15426284f;
      sa[108] = 0.31181556f;
      sa[109] = -0.15098046f;
      sa[110] = -0.11169187f;
      sa[111] = 0.26454523f;
      sa[112] = 0.13159765f;
      sa[113] = 0.070071176f;
      sa[114] = -0.16925776f;
      sa[115] = -0.04934362f;
      sa[116] = -0.16076313f;
      sa[117] = -0.039478645f;
      sa[118] = -0.20236547f;
      sa[119] = -0.14713465f;
      sa[120] = 0.23327275f;
      sa[121] = 0.27565435f;
      sa[122] = 0.32861367f;
      sa[123] = 0.29419297f;
      sa[124] = 0.41246837f;
      sa[125] = 0.30961376f;
      sa[126] = -0.41083896f;
      sa[127] = -0.035913844f;
      sa[128] = 0.07483575f;
      sa[129] = 0.15456744f;
      sa[130] = -0.14592935f;
      sa[131] = 0.28583893f;
      sa[132] = 0.21838662f;
      sa[133] = -0.27539697f;
      sa[134] = 0.07137203f;
      sa[135] = -0.360456f;
      sa[136] = -0.28292212f;
      sa[137] = -0.0124641f;
      sa[138] = 0.15812619f;
      sa[139] = -0.10516767f;
      sa[140] = -0.082838945f;
      sa[141] = -0.17394255f;
      sa[142] = 0.14642978f;
      sa[143] = -0.41860247f;
      sa[144] = 0.37410212f;
      sa[145] = -0.14886549f;
      sa[146] = -0.23599362f;
      sa[147] = 0.23336805f;
      sa[148] = 0.16167408f;
      sa[149] = 0.22047676f;
      sa[150] = 0.2891553f;
      sa[151] = -0.32010618f;
      sa[152] = 0.14496252f;
      sa[153] = 0.26972505f;
      sa[154] = 0.33208928f;
      sa[155] = -0.16992281f;
      sa[156] = 0.12614167f;
      sa[157] = -0.19849631f;
      sa[158] = 0.06574094f;
      sa[159] = 0.051956326f;
      sa[160] = 0.10966089f;
      sa[161] = 0.22044742f;
      sa[162] = -0.23900221f;
      sa[163] = 0.062676676f;
      sa[164] = 0.22413196f;
      sa[165] = -0.080153935f;
      sa[166] = -0.13220195f;
      sa[167] = -0.16692026f;
      sa[168] = 0.20125456f;
      sa[169] = 0.3715026f;
      sa[170] = 0.039147057f;
      sa[171] = -0.049776576f;
      sa[172] = -0.056764565f;
      sa[173] = -0.15409912f;
      sa[174] = 0.005123354f;
      sa[175] = -0.2850937f;
      sa[176] = 0.03944324f;
      sa[177] = -0.024019986f;
      sa[178] = -0.1280105f;
      sa[179] = 0.027623411f;
      sa[180] = -0.0589681f;
      sa[181] = -0.29273948f;
      sa[182] = 0.051878523f;
      sa[183] = 0.22076084f;
      sa[184] = 0.39870104f;
      sa[185] = 0.27884936f;
      sa[186] = -0.19424976f;
      sa[187] = 0.15837248f;
      sa[188] = -0.07290365f;
      sa[189] = 0.29933742f;
      sa[190] = -0.064382724f;
      sa[191] = 0.023566369f;
      sa[192] = -0.081101276f;
      sa[193] = 0.3177606f;
      sa[194] = 0.19646743f;
      sa[195] = 0.3745709f;
      sa[196] = 0.3393264f;
      sa[197] = 0.019968923f;
      sa[198] = 0.08053304f;
      sa[199] = -0.2073025f;
      sa[200] = 0.07762646f;
      sa[201] = -0.23410359f;
      sa[202] = 0.22651254f;
      sa[203] = 0.007096893f;
      sa[204] = -0.12250885f;
      sa[205] = 0.18162219f;
      sa[206] = 0.11778974f;
      sa[207] = 0.026037015f;
      sa[208] = -0.2525533f;
      sa[209] = -0.05015439f;
      sa[210] = -0.2682316f;
      sa[211] = -0.28104478f;
      sa[212] = 0.37228692f;
      sa[213] = -0.15870464f;
      sa[214] = -0.25400382f;
      sa[215] = -0.067046925f;
      sa[216] = 0.047879536f;
      sa[217] = 0.22794034f;
      sa[218] = -0.21520166f;
      sa[219] = 0.25166062f;
      sa[220] = -0.29015172f;
      sa[221] = 0.023945691f;
      sa[222] = 0.19752742f;
      sa[223] = 0.024551526f;
      sa[224] = 0.070877455f;
      sa[225] = 0.34325558f;
      sa[226] = -0.19505736f;
      sa[227] = 0.393213f;
      sa[228] = 0.07399589f;
      sa[229] = 0.06210292f;
      sa[230] = 0.2293079f;
      sa[231] = -0.31206548f;
      sa[232] = -0.20841044f;
      sa[233] = 0.13646615f;
      sa[234] = 0.13390622f;
      sa[235] = -0.27937704f;
      sa[236] = -0.100609325f;
      sa[237] = -0.3093042f;
      sa[238] = -0.29321504f;
      sa[239] = 0.096366145f;
      sa[240] = 0.021658726f;
      sa[241] = -0.17411175f;
      sa[242] = -0.09650691f;
      sa[243] = -0.19977391f;
      sa[244] = -0.28477907f;
      sa[245] = -0.19948356f;
      sa[246] = -0.3340638f;
      sa[247] = -0.10446488f;
      sa[248] = 0.2243099f;
      sa[249] = 0.24991445f;
      sa[250] = -0.16020617f;
      sa[251] = -0.055358123f;
      sa[252] = -0.22581112f;
      sa[253] = -0.26185456f;
      sa[254] = -0.33618525f;
      sa[255] = 0.13391712f;
      sa[256] = -0.14678483f;
      sa[257] = 0.33229804f;
      sa[258] = -0.21536878f;
      sa[259] = -0.05286513f;
      sa[260] = -0.19751896f;
      sa[261] = -0.047554843f;
      sa[262] = -0.29135945f;
      sa[263] = 0.2049853f;
      sa[264] = -0.09211477f;
      sa[265] = 0.12305644f;
      sa[266] = -0.22756948f;
      sa[267] = -0.16956665f;
      sa[268] = 0.2248997f;
      sa[269] = -0.12152522f;
      sa[270] = 0.02611481f;
      sa[271] = 0.24202013f;
      sa[272] = 0.006186267f;
      sa[273] = -0.033015303f;
      sa[274] = 0.25584525f;
      sa[275] = 0.0870327f;
      sa[276] = 0.0466603f;
      sa[277] = -0.3253191f;
      sa[278] = -0.1718204f;
      sa[279] = 0.25916734f;
      sa[280] = -0.13345139f;
      sa[281] = 0.35680956f;
      sa[282] = -0.06525347f;
      sa[283] = 0.025851961f;
      sa[284] = -0.16211168f;
      sa[285] = -0.30817062f;
      sa[286] = 0.4859744f;
      sa[287] = 0.27333492f;
      sa[288] = -0.49681255f;
      sa[289] = -0.20749463f;
      sa[290] = 0.03787708f;
      sa[291] = 0.14241828f;
      sa[292] = 0.21458355f;
      sa[293] = -0.052060846f;
      sa[294] = 0.16733761f;
      sa[295] = 0.21506634f;
      sa[296] = 0.049419742f;
      sa[297] = 0.3416267f;
      sa[298] = -0.078053325f;
      sa[299] = 0.003381934f;
      sa[300] = 0.03764668f;
      sa[301] = -0.03444728f;
      sa[302] = 0.24103478f;
      sa[303] = 0.11408457f;
      sa[304] = -0.193787f;
      sa[305] = 0.070241004f;
      sa[306] = 0.27007762f;
      sa[307] = -0.2877557f;
      sa[308] = 0.13371721f;
      sa[309] = 0.22276245f;
      sa[310] = 0.36204967f;
      sa[311] = 0.40817827f;
      sa[312] = -0.10231178f;
      sa[313] = -0.20440985f;
      sa[314] = -0.11512729f;
      sa[315] = -0.076954655f;
      sa[316] = 0.0027228112f;
      sa[317] = -0.04887973f;
      sa[318] = 0.12291597f;
      sa[319] = 0.3572497f;
      sa[320] = 0.09259747f;
      sa[321] = 0.32591712f;
      sa[322] = 0.102763824f;
      sa[323] = -0.26986498f;
      sa[324] = -0.06927686f;
      sa[325] = 0.31025332f;
      sa[326] = -0.16502436f;
      sa[327] = -0.0904996f;
      sa[328] = 0.023066385f;
      sa[329] = 0.30445248f;
      sa[330] = -0.18942851f;
      sa[331] = 0.0931413f;
      sa[332] = -0.364258f;
      sa[333] = 0.25199687f;
      sa[334] = 0.010622045f;
      sa[335] = 0.16650201f;
      sa[336] = -0.10132538f;
      sa[337] = -0.13302611f;
      sa[338] = 0.3002941f;
      sa[339] = -0.14199251f;
      sa[340] = -0.2786111f;
      sa[341] = -0.14012982f;
      sa[342] = 0.2136534f;
      sa[343] = -0.021775296f;
      sa[344] = -0.08295179f;
      sa[345] = 0.33342695f;
      sa[346] = 0.25122848f;
      sa[347] = -0.05451751f;
      sa[348] = 0.4066279f;
      sa[349] = -0.2904431f;
      sa[350] = -0.1837304f;
      sa[351] = 0.27819228f;
      sa[352] = 0.356163f;
      sa[353] = 0.12452889f;
      sa[354] = 0.21422431f;
      sa[355] = 0.28363287f;
      sa[356] = -0.08710635f;
      sa[357] = 0.2588152f;
      sa[358] = -0.34002158f;
      sa[359] = 0.031684343f;
      sa[360] = 0.13728115f;
      sa[361] = -0.085193716f;
      sa[362] = -0.18418045f;
      sa[363] = 0.20858964f;
      sa[364] = -0.19491619f;
      sa[365] = -0.28899273f;
      sa[366] = -0.089794934f;
      sa[367] = -0.40105575f;
      sa[368] = -0.16548143f;
      sa[369] = 0.28295788f;
      sa[370] = -0.16266774f;
      sa[371] = 0.15741844f;
      sa[372] = -0.068808384f;
      sa[373] = 0.26479986f;
      sa[374] = -0.22771221f;
      sa[375] = -0.39836198f;
      sa[376] = -0.3684046f;
      sa[377] = -0.26550776f;
      sa[378] = 0.2827319f;
      sa[379] = 0.15985788f;
      sa[380] = -0.18204068f;
      sa[381] = -0.16986813f;
      sa[382] = -0.12353137f;
      sa[383] = -0.20955242f;
      sa[384] = -0.19741504f;
      sa[385] = 0.14528924f;
      sa[386] = -0.26341468f;
      sa[387] = -0.16541168f;
      sa[388] = 0.06789024f;
      sa[389] = -0.031451136f;
      sa[390] = -0.026752198f;
      sa[391] = -0.15611416f;
      sa[392] = 0.4231036f;
      sa[393] = 0.3393499f;
      sa[394] = -0.1192646f;
      sa[395] = 0.25459412f;
      sa[396] = 0.33765596f;
      sa[397] = -0.27216065f;
      sa[398] = -0.02996517f;
      sa[399] = 0.13143739f;
      sa[400] = 0.12489749f;
      sa[401] = 0.22455698f;
      sa[402] = -0.188151f;
      sa[403] = -0.01380818f;
      sa[404] = 0.30384776f;
      sa[405] = -0.29939747f;
      sa[406] = -0.12484471f;
      sa[407] = 0.21555085f;
      sa[408] = -0.27786785f;
      sa[409] = -0.30989793f;
      sa[410] = -0.15091375f;
      sa[411] = 0.10690283f;
      sa[412] = -0.18469977f;
      sa[413] = 0.02749204f;
      sa[414] = 0.15576592f;
      sa[415] = 0.23348723f;
      sa[416] = -0.25065115f;
      sa[417] = -0.045817487f;
      sa[418] = -0.022714894f;
      sa[419] = 0.2077236f;
      sa[420] = 0.08729377f;
      sa[421] = 0.25859967f;
      sa[422] = 0.21719594f;
      sa[423] = -0.07445042f;
      sa[424] = 0.02406518f;
      sa[425] = -0.19657685f;
      sa[426] = -0.41219074f;
      sa[427] = 0.11081492f;
      sa[428] = -0.13843264f;
      sa[429] = -0.19996256f;
      sa[430] = 0.2705422f;
      sa[431] = 0.048244394f;
      sa[432] = -0.03912037f;
      sa[433] = 0.18679585f;
      sa[434] = 0.25594035f;
      sa[435] = 0.010958822f;
      sa[436] = -0.31001332f;
      sa[437] = -0.27793398f;
      sa[438] = -0.035186473f;
      sa[439] = -0.032801587f;
      sa[440] = 0.35681435f;
      sa[441] = -0.35438433f;
      sa[442] = 0.14778045f;
      sa[443] = 0.025560822f;
      sa[444] = -0.25840193f;
      sa[445] = 0.061393064f;
      sa[446] = 0.20988703f;
      sa[447] = 0.05102001f;
      sa[448] = 0.23477075f;
      sa[449] = 0.2722107f;
      sa[450] = -0.1446218f;
      sa[451] = 0.1516031f;
      sa[452] = 0.18601379f;
      sa[453] = -0.069216795f;
      sa[454] = -0.2038001f;
      sa[455] = -0.075645775f;
      sa[456] = -0.105848916f;
      sa[457] = 0.09613768f;
      sa[458] = -0.23704089f;
      sa[459] = 0.32585552f;
      sa[460] = 0.24670883f;
      sa[461] = 0.31002504f;
      sa[462] = 0.06840454f;
      sa[463] = 0.24428272f;
      sa[464] = -0.33064282f;
      sa[465] = 0.20846908f;
      sa[466] = -0.0062473933f;
      sa[467] = 0.13749492f;
      sa[468] = -0.02125318f;
      sa[469] = 0.37596297f;
      sa[470] = 0.23728795f;
      sa[471] = -0.04891541f;
      sa[472] = 0.0019332729f;
      sa[473] = -0.12725413f;
      sa[474] = -0.08315056f;
      sa[475] = 0.124126844f;
      sa[476] = 0.13622153f;
      sa[477] = -0.09495723f;
      sa[478] = 0.16118954f;
      sa[479] = -0.24944061f;
      sa[480] = -0.3292432f;
      sa[481] = -0.23821267f;
      sa[482] = -0.33815637f;
      sa[483] = 0.24573897f;
      sa[484] = 0.34122443f;
      sa[485] = 0.27152464f;
      sa[486] = -0.02162672f;
      sa[487] = -0.15154262f;
      sa[488] = -0.20460533f;
      sa[489] = 0.09006625f;
      sa[490] = -0.03966752f;
      sa[491] = -0.19859903f;
      sa[492] = 0.27562392f;
      sa[493] = 0.2812649f;
      sa[494] = -0.19126172f;
      sa[495] = 0.3007093f;
      sa[496] = 0.02985054f;
      sa[497] = 0.10059688f;
      sa[498] = 0.2107486f;
      sa[499] = 0.26307854f;
      sa[500] = -0.030810094f;
      sa[501] = 0.13445555f;
      sa[502] = 0.27233374f;
      sa[503] = 0.075360216f;
      sa[504] = -0.10139007f;
      sa[505] = -0.15666021f;
      sa[506] = 0.34034145f;
      sa[507] = 0.11763916f;
      sa[508] = 0.14835526f;
      sa[509] = 0.298018f;
      sa[510] = 0.29780552f;
      sa[511] = 0.060300823f;
      sa[512] = 0.10077484f;
      sa[513] = -0.055309474f;
      sa[514] = 0.21409573f;
      sa[515] = -0.13590552f;
      sa[516] = 0.061330866f;
      sa[517] = 0.16359048f;
      sa[518] = 0.25394022f;
      sa[519] = -0.04446542f;
      sa[520] = 0.38800746f;
      sa[521] = 0.21754411f;
      sa[522] = 0.011717451f;
      sa[523] = 0.1892052f;
      sa[524] = 0.22556083f;
      sa[525] = 0.20191246f;
      sa[526] = 0.044908833f;
      sa[527] = -0.09955575f;
      sa[528] = 0.018700266f;
      sa[529] = 0.09924546f;
      sa[530] = -0.33449498f;
      sa[531] = -0.08452744f;
      sa[532] = 0.15060979f;
      sa[533] = 0.12294757f;
      sa[534] = 0.1560031f;
      sa[535] = -0.13228078f;
      sa[536] = 0.024907514f;
      sa[537] = -0.23512705f;
      sa[538] = 0.1987829f;
      sa[539] = 0.26693144f;
      sa[540] = -0.17500155f;
      sa[541] = -0.16866046f;
      sa[542] = -0.013681611f;
      sa[543] = -0.41907254f;
      sa[544] = 0.16248627f;
      sa[545] = 0.13480936f;
      sa[546] = 0.057744972f;
      sa[547] = 0.22040436f;
      sa[548] = 0.1991793f;
      sa[549] = 0.17327103f;
      sa[550] = 0.08175811f;
      sa[551] = -0.21666268f;
      sa[552] = 0.05601467f;
      sa[553] = -0.037567463f;
      sa[554] = -0.19032125f;
      sa[555] = -0.15065177f;
      sa[556] = -0.14310056f;
      sa[557] = -0.23279437f;
      sa[558] = -0.25930664f;
      sa[559] = 0.34461063f;
      sa[560] = -0.32045245f;
      sa[561] = -0.106805064f;
      sa[562] = 0.18291803f;
      sa[563] = -0.06318277f;
      sa[564] = 0.34327212f;
      sa[565] = 0.0671792f;
      sa[566] = 0.31250387f;
      sa[567] = 0.116249815f;
      sa[568] = -0.03446423f;
      sa[569] = 0.08013642f;
      sa[570] = 0.030236192f;
      sa[571] = -0.0014640709f;
      sa[572] = -0.10084427f;
      sa[573] = 0.070121154f;
      sa[574] = 0.27305213f;
      sa[575] = -0.2714124f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_05_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_05_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.3897046f;
      sa[1] = 0.004087907f;
      sa[2] = -0.15993269f;
      sa[3] = -0.22047882f;
      sa[4] = 0.016143143f;
      sa[5] = 0.0404349f;
      sa[6] = 0.27666542f;
      sa[7] = -0.0755134f;
      sa[8] = -0.21801803f;
      sa[9] = 0.20295013f;
      sa[10] = -0.10674296f;
      sa[11] = 0.13013858f;
      sa[12] = 0.091291845f;
      sa[13] = 0.053163037f;
      sa[14] = -0.26417622f;
      sa[15] = 0.35243982f;
      sa[16] = 0.46755838f;
      sa[17] = -0.12767309f;
      sa[18] = 0.043221176f;
      sa[19] = -0.013367138f;
      sa[20] = 0.35564744f;
      sa[21] = -0.063151054f;
      sa[22] = -0.31267554f;
      sa[23] = 0.28661877f;
      sa[24] = -0.38914564f;
      sa[25] = 0.05950448f;
      sa[26] = -0.15505011f;
      sa[27] = 0.45824078f;
      sa[28] = -0.34675542f;
      sa[29] = -0.1678297f;
      sa[30] = 0.16071747f;
      sa[31] = -0.22921933f;
      sa[32] = -0.39049566f;
      sa[33] = -0.40841106f;
      sa[34] = 0.06299639f;
      sa[35] = 0.37742245f;
      sa[36] = -0.09569152f;
      sa[37] = -0.07616417f;
      sa[38] = -0.0077721123f;
      sa[39] = 0.29575193f;
      sa[40] = -0.23707452f;
      sa[41] = -0.43553382f;
      sa[42] = -0.3144863f;
      sa[43] = -0.32956082f;
      sa[44] = -0.030435225f;
      sa[45] = -0.4210941f;
      sa[46] = 0.3158437f;
      sa[47] = 0.32782683f;
      sa[48] = -0.54463494f;
      sa[49] = -0.2731692f;
      sa[50] = 0.10319181f;
      sa[51] = -0.10559887f;
      sa[52] = 0.19687049f;
      sa[53] = 0.23624952f;
      sa[54] = -0.07772518f;
      sa[55] = 0.40359905f;
      sa[56] = -0.27290633f;
      sa[57] = -0.30562112f;
      sa[58] = 0.09312727f;
      sa[59] = -0.01564526f;
      sa[60] = 0.29535824f;
      sa[61] = -0.27175555f;
      sa[62] = -0.14952034f;
      sa[63] = 0.18152736f;
      sa[64] = 0.5241407f;
      sa[65] = -0.16128677f;
      sa[66] = 0.15788464f;
      sa[67] = 0.3917569f;
      sa[68] = 0.23107941f;
      sa[69] = -0.27213457f;
      sa[70] = -0.4322116f;
      sa[71] = -0.1097001f;
      sa[72] = -0.3959744f;
      sa[73] = 0.29269022f;
      sa[74] = 0.39836568f;
      sa[75] = 0.01299502f;
      sa[76] = 0.39099514f;
      sa[77] = 0.2867003f;
      sa[78] = -0.31553596f;
      sa[79] = 0.33069652f;
      sa[80] = -0.3499548f;
      sa[81] = 0.08519244f;
      sa[82] = 0.20733428f;
      sa[83] = -0.1801169f;
      sa[84] = -0.4626421f;
      sa[85] = -0.33373383f;
      sa[86] = 0.060915384f;
      sa[87] = 0.37897128f;
      sa[88] = -0.36223412f;
      sa[89] = -0.110621154f;
      sa[90] = -0.2724631f;
      sa[91] = 0.4170569f;
      sa[92] = -0.1980727f;
      sa[93] = -0.017685845f;
      sa[94] = -0.42719558f;
      sa[95] = -0.06705243f;
      sa[96] = -0.43857652f;
      sa[97] = 0.009359978f;
      sa[98] = -0.021048658f;
      sa[99] = 0.05485123f;
      sa[100] = -0.38382873f;
      sa[101] = -0.18504357f;
      sa[102] = 0.2655908f;
      sa[103] = 0.09049805f;
      sa[104] = -0.11276512f;
      sa[105] = -0.25392005f;
      sa[106] = 0.3259907f;
      sa[107] = 0.34109792f;
      sa[108] = 0.14603037f;
      sa[109] = -0.036741864f;
      sa[110] = 0.17107883f;
      sa[111] = -0.23178813f;
      sa[112] = -0.538972f;
      sa[113] = -0.016038034f;
      sa[114] = 0.034643367f;
      sa[115] = -0.15619212f;
      sa[116] = 0.26331815f;
      sa[117] = -0.028648114f;
      sa[118] = -0.37943476f;
      sa[119] = -0.1853525f;
      sa[120] = -0.13199177f;
      sa[121] = 0.26266652f;
      sa[122] = 0.011517103f;
      sa[123] = 0.08583303f;
      sa[124] = -0.2891671f;
      sa[125] = 0.12447377f;
      sa[126] = -0.3458463f;
      sa[127] = 0.12435845f;
      sa[128] = -0.42831627f;
      sa[129] = 0.12805495f;
      sa[130] = -0.107645825f;
      sa[131] = 0.16581008f;
      sa[132] = 0.085042365f;
      sa[133] = 0.1521746f;
      sa[134] = 0.18593279f;
      sa[135] = -0.4095402f;
      sa[136] = 0.09033403f;
      sa[137] = -0.18756749f;
      sa[138] = 0.049985293f;
      sa[139] = 0.28706843f;
      sa[140] = -0.19060422f;
      sa[141] = -0.07957045f;
      sa[142] = -0.018746616f;
      sa[143] = -0.25544077f;
      sa[144] = 0.3192573f;
      sa[145] = -0.15103894f;
      sa[146] = 0.050866187f;
      sa[147] = -0.02446031f;
      sa[148] = -0.20768122f;
      sa[149] = 0.39209974f;
      sa[150] = -0.2225795f;
      sa[151] = -0.5508856f;
      sa[152] = 0.49682063f;
      sa[153] = -0.08986528f;
      sa[154] = 0.38796228f;
      sa[155] = -0.44473544f;
      sa[156] = -0.4203195f;
      sa[157] = -0.34886423f;
      sa[158] = -0.07399523f;
      sa[159] = -0.20305292f;
      sa[160] = 0.17666951f;
      sa[161] = -0.40804565f;
      sa[162] = 0.4047778f;
      sa[163] = -0.27818742f;
      sa[164] = 0.14349464f;
      sa[165] = -0.20164599f;
      sa[166] = 0.3477238f;
      sa[167] = -0.48227313f;
      sa[168] = 0.20648059f;
      sa[169] = -0.4628816f;
      sa[170] = 0.3465082f;
      sa[171] = 0.23004684f;
      sa[172] = 0.3279992f;
      sa[173] = 0.31581157f;
      sa[174] = -0.20552853f;
      sa[175] = -0.04942331f;
      sa[176] = -0.14367397f;
      sa[177] = 0.16415443f;
      sa[178] = -0.28931665f;
      sa[179] = -0.0701261f;
      sa[180] = -0.33277816f;
      sa[181] = -0.11373867f;
      sa[182] = 0.14520924f;
      sa[183] = -0.20956668f;
      sa[184] = 0.50504535f;
      sa[185] = 0.5105255f;
      sa[186] = -0.030527433f;
      sa[187] = -0.23748673f;
      sa[188] = -0.10797483f;
      sa[189] = -0.112731524f;
      sa[190] = -0.30769697f;
      sa[191] = -0.112149045f;
      sa[192] = 0.13716954f;
      sa[193] = 0.13105313f;
      sa[194] = -0.28405926f;
      sa[195] = -0.2262191f;
      sa[196] = 0.20411627f;
      sa[197] = -0.16237816f;
      sa[198] = 0.06768919f;
      sa[199] = 0.3504071f;
      sa[200] = -0.016376007f;
      sa[201] = 0.28938305f;
      sa[202] = 0.22349374f;
      sa[203] = -0.40591213f;
      sa[204] = 0.21880743f;
      sa[205] = 0.4343521f;
      sa[206] = -0.12502687f;
      sa[207] = 0.1747805f;
      sa[208] = -0.25351548f;
      sa[209] = 0.20009375f;
      sa[210] = -0.14132819f;
      sa[211] = -0.29364634f;
      sa[212] = -0.40361068f;
      sa[213] = 0.005292151f;
      sa[214] = -0.4009971f;
      sa[215] = 0.01725849f;
      sa[216] = 0.16502446f;
      sa[217] = 0.3661882f;
      sa[218] = 0.006349901f;
      sa[219] = 0.10066636f;
      sa[220] = 0.11562398f;
      sa[221] = -0.01767748f;
      sa[222] = -0.27118567f;
      sa[223] = -0.28933814f;
      sa[224] = 0.3209051f;
      sa[225] = 0.113491595f;
      sa[226] = -0.032996286f;
      sa[227] = 0.10915584f;
      sa[228] = -0.12925968f;
      sa[229] = -0.19397274f;
      sa[230] = -0.21685983f;
      sa[231] = -0.09014729f;
      sa[232] = 0.5002893f;
      sa[233] = -0.13209806f;
      sa[234] = -0.18404311f;
      sa[235] = 0.020906081f;
      sa[236] = -0.40929744f;
      sa[237] = 0.3980624f;
      sa[238] = 0.19514607f;
      sa[239] = -0.093422f;
      sa[240] = 0.07430327f;
      sa[241] = -0.36818326f;
      sa[242] = -0.2230247f;
      sa[243] = 0.4299698f;
      sa[244] = 0.24843293f;
      sa[245] = 0.34898335f;
      sa[246] = 0.22150517f;
      sa[247] = -0.4136521f;
      sa[248] = -0.17723694f;
      sa[249] = 0.022098787f;
      sa[250] = 0.22561944f;
      sa[251] = 0.42024925f;
      sa[252] = 0.265241f;
      sa[253] = -0.31013766f;
      sa[254] = 0.4364534f;
      sa[255] = 0.14231178f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_05_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_ReLU_05_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.145241f;
      sa[1] = -1.6300129f;
      sa[2] = -1.6617595f;
      sa[3] = 1.362008f;
      sa[4] = 0.39162138f;
      sa[5] = -0.30558082f;
      sa[6] = -1.6617466f;
      sa[7] = 1.5376382f;
      sa[8] = 1.7870216f;
      sa[9] = 0.2313519f;
      sa[10] = 1.654946f;
      sa[11] = 1.4802239f;
      sa[12] = 1.8577553f;
      sa[13] = -0.55236316f;
      sa[14] = -2.0343642f;
      sa[15] = -0.7157691f;
      sa[16] = 0.7631706f;
      sa[17] = -0.7879481f;
      sa[18] = -1.5439188f;
      sa[19] = -0.96840143f;
      sa[20] = -1.9592736f;
      sa[21] = 0.23028393f;
      sa[22] = -2.0143635f;
      sa[23] = -0.6198957f;
      sa[24] = -0.5435755f;
      sa[25] = 1.9180841f;
      sa[26] = -0.3364357f;
      sa[27] = 1.2259874f;
      sa[28] = 1.2045598f;
      sa[29] = -0.73214215f;
      sa[30] = 0.17875949f;
      sa[31] = 0.14783338f;
      sa[32] = 0.44889066f;
      sa[33] = 0.29839578f;
      sa[34] = -0.60977495f;
      sa[35] = 1.0622816f;
      sa[36] = 0.5858192f;
      sa[37] = -1.3388526f;
      sa[38] = 0.568228f;
      sa[39] = -0.24530359f;
      sa[40] = 0.21758635f;
      sa[41] = -0.8425403f;
      sa[42] = 0.53929865f;
      sa[43] = -0.8125007f;
      sa[44] = 0.9672937f;
      sa[45] = -2.1168594f;
      sa[46] = -2.1462777f;
      sa[47] = 0.044865627f;
      sa[48] = 1.5547518f;
      sa[49] = -0.26482683f;
      sa[50] = -0.47067893f;
      sa[51] = 1.8137015f;
      sa[52] = -1.7684717f;
      sa[53] = 1.0795681f;
      sa[54] = 1.8037009f;
      sa[55] = 1.0926623f;
      sa[56] = -0.56922805f;
      sa[57] = -0.15759495f;
      sa[58] = 0.97133493f;
      sa[59] = 0.8279348f;
      sa[60] = -1.4208264f;
      sa[61] = 0.9374112f;
      sa[62] = -0.41656962f;
      sa[63] = -0.8760672f;
      sa[64] = 0.9506563f;
      sa[65] = -0.9624358f;
      sa[66] = -1.7684151f;
      sa[67] = -0.15897323f;
      sa[68] = 0.91222346f;
      sa[69] = -1.375574f;
      sa[70] = -1.6600105f;
      sa[71] = -0.07101896f;
      sa[72] = -1.0501446f;
      sa[73] = -1.2441292f;
      sa[74] = -1.1041133f;
      sa[75] = 1.2015684f;
      sa[76] = 1.9203002f;
      sa[77] = -0.5947595f;
      sa[78] = -1.3753409f;
      sa[79] = -0.36551717f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_05 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_05_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_05_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_05_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_ReLU_05_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


