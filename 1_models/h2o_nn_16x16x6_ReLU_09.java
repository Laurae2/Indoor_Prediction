/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:48:33.887+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_09

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_09 > h2o_nn_16x16x6_ReLU_09.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_09.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_09", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_09 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_09_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_09_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_09_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_09_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_09_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_09_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_09.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_09_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25961538461538464,0.11538461538461539,0.11538461538461539,0.125,0.25961538461538464,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_09() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(1964117212897430908L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_09_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_09_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_09_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_09_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_09_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_09_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_09_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_09_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.604416920600352;
      sa[1] = 0.6763589053363264;
      sa[2] = 0.5645551195676108;
      sa[3] = 0.3204580585340232;
      sa[4] = 0.6477205379489521;
      sa[5] = 0.6874151284869539;
      sa[6] = 0.5272392175977265;
      sa[7] = 0.6307387412182743;
      sa[8] = 0.5287395208571843;
      sa[9] = 0.5694078752916024;
      sa[10] = 0.8142295819271276;
      sa[11] = 0.4272108476110194;
      sa[12] = 0.3598053125995373;
      sa[13] = 0.5430610710276333;
      sa[14] = 0.5582830672324532;
      sa[15] = 0.6583889621964131;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_09_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.1648433299199679;
      sa[1] = 1.1127960410397801;
      sa[2] = 0.9439219331247398;
      sa[3] = 1.0017958977770702;
      sa[4] = 0.9258351487187467;
      sa[5] = 0.9643582215891056;
      sa[6] = 0.9331507393866932;
      sa[7] = 0.9787867571904408;
      sa[8] = 0.9302288261706276;
      sa[9] = 1.026246988306405;
      sa[10] = 0.9378689535420741;
      sa[11] = 1.1441058593085536;
      sa[12] = 1.096362265254916;
      sa[13] = 0.8742041397969239;
      sa[14] = 0.9763757419983929;
      sa[15] = 0.9347555490760027;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_09_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_09_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.09513562209259342;
      sa[1] = 0.01861728741735222;
      sa[2] = -0.05698731618741199;
      sa[3] = -0.04687418644407655;
      sa[4] = 0.08937074361762799;
      sa[5] = -0.15231345620340805;
    }
  }
}
class h2o_nn_16x16x6_ReLU_09_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_09_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.02170406f;
      sa[1] = 0.2906806f;
      sa[2] = 0.26301455f;
      sa[3] = 0.006221537f;
      sa[4] = 0.034012254f;
      sa[5] = -0.13227385f;
      sa[6] = 0.10155736f;
      sa[7] = 0.5268125f;
      sa[8] = 0.068917796f;
      sa[9] = -0.039635602f;
      sa[10] = -0.25544414f;
      sa[11] = -0.31504327f;
      sa[12] = 0.202436f;
      sa[13] = -0.2326121f;
      sa[14] = -0.05465939f;
      sa[15] = 0.14663388f;
      sa[16] = 0.27798268f;
      sa[17] = 0.24058922f;
      sa[18] = -0.11566478f;
      sa[19] = 0.03335384f;
      sa[20] = 0.42315644f;
      sa[21] = -0.1412971f;
      sa[22] = 0.42054868f;
      sa[23] = 0.04968462f;
      sa[24] = 0.41155562f;
      sa[25] = 0.15556629f;
      sa[26] = -0.255184f;
      sa[27] = 0.26814103f;
      sa[28] = 0.4265398f;
      sa[29] = -0.08160343f;
      sa[30] = -0.09466906f;
      sa[31] = 0.4204761f;
      sa[32] = 0.11927679f;
      sa[33] = -0.3612175f;
      sa[34] = 0.18513235f;
      sa[35] = 0.002878573f;
      sa[36] = 0.114093654f;
      sa[37] = 0.1993794f;
      sa[38] = -0.25572968f;
      sa[39] = 0.31627193f;
      sa[40] = 0.0773488f;
      sa[41] = -0.13183716f;
      sa[42] = -0.1342459f;
      sa[43] = -0.063197844f;
      sa[44] = 0.19844046f;
      sa[45] = -0.29436213f;
      sa[46] = -0.0038291232f;
      sa[47] = -0.19797793f;
      sa[48] = 0.18533061f;
      sa[49] = 0.20134494f;
      sa[50] = 0.18701169f;
      sa[51] = -0.44369483f;
      sa[52] = -0.15947147f;
      sa[53] = 0.20625737f;
      sa[54] = 0.47910482f;
      sa[55] = -0.005269805f;
      sa[56] = -0.21478386f;
      sa[57] = -0.30991492f;
      sa[58] = 0.2577558f;
      sa[59] = -0.29212627f;
      sa[60] = -0.5185978f;
      sa[61] = 0.22388703f;
      sa[62] = 0.27484512f;
      sa[63] = -0.08297939f;
      sa[64] = 0.055788457f;
      sa[65] = 0.10778681f;
      sa[66] = -0.094222136f;
      sa[67] = -0.025063885f;
      sa[68] = -0.22950135f;
      sa[69] = 0.035696488f;
      sa[70] = 0.07854651f;
      sa[71] = 0.49845108f;
      sa[72] = -0.114645086f;
      sa[73] = 0.16819979f;
      sa[74] = -0.1387557f;
      sa[75] = 0.08484052f;
      sa[76] = -0.25300044f;
      sa[77] = -0.029529536f;
      sa[78] = -0.117732644f;
      sa[79] = 0.11998994f;
      sa[80] = -0.18274939f;
      sa[81] = -0.19749896f;
      sa[82] = 0.022588419f;
      sa[83] = 0.10862523f;
      sa[84] = -0.015505037f;
      sa[85] = -0.13183111f;
      sa[86] = 0.120206766f;
      sa[87] = 0.24337745f;
      sa[88] = 0.17882074f;
      sa[89] = 0.032680318f;
      sa[90] = -0.2493364f;
      sa[91] = 0.3084953f;
      sa[92] = 0.08571831f;
      sa[93] = -0.2760605f;
      sa[94] = -0.2352917f;
      sa[95] = -0.32810867f;
      sa[96] = 0.15809849f;
      sa[97] = 0.024650253f;
      sa[98] = 0.19277996f;
      sa[99] = -0.041802578f;
      sa[100] = -0.030474707f;
      sa[101] = -0.20037325f;
      sa[102] = -0.21420583f;
      sa[103] = -0.088898875f;
      sa[104] = 0.0059987563f;
      sa[105] = -0.18627223f;
      sa[106] = -0.26229787f;
      sa[107] = 0.08949712f;
      sa[108] = 0.11970723f;
      sa[109] = -0.060557015f;
      sa[110] = -0.19971995f;
      sa[111] = -0.050235044f;
      sa[112] = 0.089733295f;
      sa[113] = -6.3356274E-5f;
      sa[114] = -0.17294152f;
      sa[115] = 0.060965408f;
      sa[116] = -0.25790858f;
      sa[117] = 0.050881535f;
      sa[118] = -0.30351055f;
      sa[119] = 0.027700908f;
      sa[120] = 0.346466f;
      sa[121] = 0.3174535f;
      sa[122] = 0.42868626f;
      sa[123] = 0.46936378f;
      sa[124] = 0.3559911f;
      sa[125] = 0.2851394f;
      sa[126] = -0.3773745f;
      sa[127] = -0.418437f;
      sa[128] = 0.17661123f;
      sa[129] = 0.2631575f;
      sa[130] = -0.023431588f;
      sa[131] = 0.5506252f;
      sa[132] = 0.39662218f;
      sa[133] = -0.2600431f;
      sa[134] = 0.09842751f;
      sa[135] = -0.15520847f;
      sa[136] = -0.24742363f;
      sa[137] = -0.018215867f;
      sa[138] = 0.116764985f;
      sa[139] = 0.071059465f;
      sa[140] = -0.08630658f;
      sa[141] = -0.012171964f;
      sa[142] = 0.09489432f;
      sa[143] = -0.3724944f;
      sa[144] = 0.2644309f;
      sa[145] = -0.24123438f;
      sa[146] = -0.44657382f;
      sa[147] = 0.21784425f;
      sa[148] = 0.1159436f;
      sa[149] = 0.17523956f;
      sa[150] = 0.24795316f;
      sa[151] = -0.34752712f;
      sa[152] = 0.022738375f;
      sa[153] = 0.2103323f;
      sa[154] = 0.23899975f;
      sa[155] = -0.211401f;
      sa[156] = 0.10588976f;
      sa[157] = -0.23823655f;
      sa[158] = 0.04004961f;
      sa[159] = 0.039134786f;
      sa[160] = -0.12385366f;
      sa[161] = 0.14416659f;
      sa[162] = -0.0988387f;
      sa[163] = -0.152557f;
      sa[164] = 0.18760768f;
      sa[165] = -0.1412657f;
      sa[166] = -0.14279577f;
      sa[167] = -0.18993229f;
      sa[168] = 0.017056448f;
      sa[169] = 0.30039892f;
      sa[170] = 0.15731864f;
      sa[171] = 0.04571801f;
      sa[172] = -0.13747126f;
      sa[173] = -0.24138544f;
      sa[174] = -0.08741361f;
      sa[175] = -0.33479947f;
      sa[176] = 0.039910402f;
      sa[177] = 0.005393284f;
      sa[178] = -0.04800611f;
      sa[179] = 0.097385995f;
      sa[180] = -0.18074432f;
      sa[181] = -0.3509052f;
      sa[182] = 0.055841945f;
      sa[183] = 0.48156595f;
      sa[184] = 0.53597885f;
      sa[185] = 0.31057826f;
      sa[186] = -0.16582325f;
      sa[187] = 0.11599422f;
      sa[188] = -0.16453755f;
      sa[189] = 0.21705145f;
      sa[190] = 0.009341298f;
      sa[191] = 0.005417736f;
      sa[192] = -0.1765524f;
      sa[193] = 0.22615112f;
      sa[194] = 0.14911857f;
      sa[195] = 0.21388803f;
      sa[196] = 0.21697873f;
      sa[197] = -0.084043115f;
      sa[198] = 0.21883702f;
      sa[199] = -0.18682869f;
      sa[200] = 0.02536703f;
      sa[201] = -0.19760206f;
      sa[202] = 0.18793988f;
      sa[203] = -0.065719165f;
      sa[204] = -0.115445025f;
      sa[205] = 0.19332696f;
      sa[206] = 0.23329519f;
      sa[207] = -0.118549764f;
      sa[208] = -0.32838202f;
      sa[209] = -0.035955824f;
      sa[210] = -0.31413615f;
      sa[211] = -0.4764721f;
      sa[212] = 0.4205815f;
      sa[213] = -0.16656965f;
      sa[214] = -0.2681209f;
      sa[215] = -0.1324111f;
      sa[216] = 0.104852766f;
      sa[217] = 0.2884813f;
      sa[218] = -0.13957308f;
      sa[219] = 0.21059644f;
      sa[220] = -0.22784911f;
      sa[221] = 0.11438331f;
      sa[222] = 0.30642468f;
      sa[223] = 0.1514698f;
      sa[224] = 0.22012646f;
      sa[225] = 0.20312744f;
      sa[226] = -0.24972653f;
      sa[227] = 0.6357109f;
      sa[228] = 0.24616592f;
      sa[229] = 0.22604628f;
      sa[230] = 0.3951417f;
      sa[231] = -0.1262565f;
      sa[232] = -0.29425186f;
      sa[233] = -0.058594953f;
      sa[234] = -0.06686899f;
      sa[235] = -0.4249336f;
      sa[236] = 0.034075934f;
      sa[237] = -0.20760016f;
      sa[238] = -0.14663899f;
      sa[239] = 0.218103f;
      sa[240] = 0.1548111f;
      sa[241] = -0.21375181f;
      sa[242] = -0.2455407f;
      sa[243] = -0.3288268f;
      sa[244] = -0.1626174f;
      sa[245] = -0.12932129f;
      sa[246] = -0.22025144f;
      sa[247] = -0.005414417f;
      sa[248] = 0.10928261f;
      sa[249] = 0.34024146f;
      sa[250] = -0.35381803f;
      sa[251] = -0.23950881f;
      sa[252] = -0.17217334f;
      sa[253] = -0.35548556f;
      sa[254] = -0.48675698f;
      sa[255] = 0.13774177f;
      sa[256] = -0.25058022f;
      sa[257] = 0.31712016f;
      sa[258] = -0.20235388f;
      sa[259] = -0.08046131f;
      sa[260] = -0.072001286f;
      sa[261] = -0.30412322f;
      sa[262] = -0.20591518f;
      sa[263] = 0.54528403f;
      sa[264] = -0.040434394f;
      sa[265] = 0.21399714f;
      sa[266] = -0.10858568f;
      sa[267] = -0.093146905f;
      sa[268] = 0.070044465f;
      sa[269] = -0.37284f;
      sa[270] = 0.0033933828f;
      sa[271] = -0.13109578f;
      sa[272] = -0.052275304f;
      sa[273] = -0.13934746f;
      sa[274] = 0.26627105f;
      sa[275] = 0.0026447352f;
      sa[276] = -0.050564926f;
      sa[277] = -0.23074345f;
      sa[278] = -0.13305707f;
      sa[279] = -0.046834588f;
      sa[280] = -0.21160308f;
      sa[281] = 0.21628274f;
      sa[282] = -0.18403006f;
      sa[283] = -0.083588675f;
      sa[284] = -0.20552492f;
      sa[285] = -0.34085107f;
      sa[286] = 0.4518962f;
      sa[287] = 0.2203413f;
      sa[288] = -0.417771f;
      sa[289] = -0.1770152f;
      sa[290] = 0.052514177f;
      sa[291] = 0.14157958f;
      sa[292] = 0.368758f;
      sa[293] = -0.066137664f;
      sa[294] = 0.16376676f;
      sa[295] = 0.12800124f;
      sa[296] = 0.024071123f;
      sa[297] = 0.45605326f;
      sa[298] = -0.02307277f;
      sa[299] = -0.39796972f;
      sa[300] = -0.09256423f;
      sa[301] = -0.16259259f;
      sa[302] = 0.12219328f;
      sa[303] = -0.08062287f;
      sa[304] = -0.1185076f;
      sa[305] = 0.24160287f;
      sa[306] = 0.46144903f;
      sa[307] = -0.057971463f;
      sa[308] = 0.103841245f;
      sa[309] = 0.30545738f;
      sa[310] = 0.28789124f;
      sa[311] = 0.36294246f;
      sa[312] = -0.1345069f;
      sa[313] = -0.19420743f;
      sa[314] = -0.018440763f;
      sa[315] = -0.009553971f;
      sa[316] = -0.018626561f;
      sa[317] = 0.05681547f;
      sa[318] = 0.09323831f;
      sa[319] = 0.29104134f;
      sa[320] = 0.055072214f;
      sa[321] = 0.1821222f;
      sa[322] = 0.18327425f;
      sa[323] = -0.16711438f;
      sa[324] = -0.06960121f;
      sa[325] = 0.24066223f;
      sa[326] = -0.40809f;
      sa[327] = -0.062972516f;
      sa[328] = -0.03874034f;
      sa[329] = 0.20298338f;
      sa[330] = -0.1842663f;
      sa[331] = -0.0149838105f;
      sa[332] = -0.379489f;
      sa[333] = 0.1698079f;
      sa[334] = -0.18391407f;
      sa[335] = 0.18033144f;
      sa[336] = -0.16988136f;
      sa[337] = -0.23847285f;
      sa[338] = 0.31226927f;
      sa[339] = -0.25924283f;
      sa[340] = -0.37805462f;
      sa[341] = -0.29050568f;
      sa[342] = 0.45858258f;
      sa[343] = -0.33103204f;
      sa[344] = -0.16134356f;
      sa[345] = 0.2620475f;
      sa[346] = 0.24026825f;
      sa[347] = -0.12442356f;
      sa[348] = 0.19415934f;
      sa[349] = -0.3142794f;
      sa[350] = -0.062139016f;
      sa[351] = 0.23926166f;
      sa[352] = 0.19957842f;
      sa[353] = -0.03609814f;
      sa[354] = -0.009595235f;
      sa[355] = 0.14832f;
      sa[356] = -0.1791209f;
      sa[357] = 0.23640844f;
      sa[358] = -0.16657546f;
      sa[359] = 0.19688857f;
      sa[360] = 0.15353417f;
      sa[361] = -0.31536624f;
      sa[362] = -0.1898277f;
      sa[363] = 0.17113532f;
      sa[364] = -0.220823f;
      sa[365] = -0.2519093f;
      sa[366] = -0.05027838f;
      sa[367] = -0.3352708f;
      sa[368] = -0.12910515f;
      sa[369] = 0.07977178f;
      sa[370] = -0.24821264f;
      sa[371] = 0.30758417f;
      sa[372] = 0.047572523f;
      sa[373] = 0.38511986f;
      sa[374] = -0.13532943f;
      sa[375] = -0.26609492f;
      sa[376] = -0.5733399f;
      sa[377] = -0.4718291f;
      sa[378] = 0.25269356f;
      sa[379] = -0.02206786f;
      sa[380] = -0.18140112f;
      sa[381] = -0.21395384f;
      sa[382] = -0.058325388f;
      sa[383] = -0.1937656f;
      sa[384] = -0.17727393f;
      sa[385] = 0.03229953f;
      sa[386] = -0.22200213f;
      sa[387] = -0.19577177f;
      sa[388] = 0.08964695f;
      sa[389] = -0.057932906f;
      sa[390] = 0.018229315f;
      sa[391] = -0.13374913f;
      sa[392] = 0.37955612f;
      sa[393] = 0.52341205f;
      sa[394] = -0.30697462f;
      sa[395] = 0.17641112f;
      sa[396] = 0.43970233f;
      sa[397] = -0.17254402f;
      sa[398] = 0.10645019f;
      sa[399] = 0.050560817f;
      sa[400] = 0.102307014f;
      sa[401] = 0.29231316f;
      sa[402] = -0.16657992f;
      sa[403] = 0.0764576f;
      sa[404] = 0.42362976f;
      sa[405] = -0.3364076f;
      sa[406] = -0.06395146f;
      sa[407] = 0.5327707f;
      sa[408] = -0.17436592f;
      sa[409] = -0.15766425f;
      sa[410] = -0.066193186f;
      sa[411] = 0.3162341f;
      sa[412] = -0.09401373f;
      sa[413] = 0.052329116f;
      sa[414] = -0.1082467f;
      sa[415] = 0.3541605f;
      sa[416] = -0.18991986f;
      sa[417] = -0.022303535f;
      sa[418] = 0.03106357f;
      sa[419] = 0.24420309f;
      sa[420] = 0.25896546f;
      sa[421] = 0.31891668f;
      sa[422] = 0.045370907f;
      sa[423] = -0.24222581f;
      sa[424] = 0.13686533f;
      sa[425] = -0.13784282f;
      sa[426] = -0.21971413f;
      sa[427] = 0.18048277f;
      sa[428] = -0.16162068f;
      sa[429] = -0.14740919f;
      sa[430] = 0.12211865f;
      sa[431] = -0.117281854f;
      sa[432] = -0.08865871f;
      sa[433] = 0.21572588f;
      sa[434] = 0.26790434f;
      sa[435] = 0.145049f;
      sa[436] = -0.33460876f;
      sa[437] = -0.22456591f;
      sa[438] = -0.037496388f;
      sa[439] = -0.02149903f;
      sa[440] = 0.2975156f;
      sa[441] = -0.50611734f;
      sa[442] = 0.11645521f;
      sa[443] = 0.11006591f;
      sa[444] = -0.2902472f;
      sa[445] = 0.09551526f;
      sa[446] = 0.1979441f;
      sa[447] = 0.06603749f;
      sa[448] = 0.27375627f;
      sa[449] = 0.1755753f;
      sa[450] = -0.21263689f;
      sa[451] = 0.102733195f;
      sa[452] = 0.15021959f;
      sa[453] = -0.10634552f;
      sa[454] = -0.19701806f;
      sa[455] = -0.11148847f;
      sa[456] = -0.07400665f;
      sa[457] = 0.078280956f;
      sa[458] = -0.31471702f;
      sa[459] = 0.25879994f;
      sa[460] = 0.19457059f;
      sa[461] = 0.2575262f;
      sa[462] = 0.055930424f;
      sa[463] = 0.18837439f;
      sa[464] = -0.37153533f;
      sa[465] = 0.28656214f;
      sa[466] = 0.0035956914f;
      sa[467] = 0.115625374f;
      sa[468] = -0.023183206f;
      sa[469] = 0.43199143f;
      sa[470] = 0.21510015f;
      sa[471] = -0.06019633f;
      sa[472] = 0.017564883f;
      sa[473] = -0.13923845f;
      sa[474] = -0.07128101f;
      sa[475] = 0.15151708f;
      sa[476] = 0.17330933f;
      sa[477] = 0.017780306f;
      sa[478] = 0.17363958f;
      sa[479] = -0.2690545f;
      sa[480] = -0.31213707f;
      sa[481] = -0.23669884f;
      sa[482] = -0.32557067f;
      sa[483] = 0.2678006f;
      sa[484] = 0.39042327f;
      sa[485] = 0.386018f;
      sa[486] = 0.0042618136f;
      sa[487] = -0.15796667f;
      sa[488] = -0.15494503f;
      sa[489] = 0.13898365f;
      sa[490] = -0.009755411f;
      sa[491] = -0.16064282f;
      sa[492] = 0.29457524f;
      sa[493] = 0.28156888f;
      sa[494] = -0.17949289f;
      sa[495] = 0.41043225f;
      sa[496] = 0.077836506f;
      sa[497] = 0.15570106f;
      sa[498] = 0.23571773f;
      sa[499] = 0.3711112f;
      sa[500] = -0.042187043f;
      sa[501] = 0.123915285f;
      sa[502] = 0.25138447f;
      sa[503] = 0.105917715f;
      sa[504] = -0.18270515f;
      sa[505] = -0.09929164f;
      sa[506] = 0.42131475f;
      sa[507] = -0.1298104f;
      sa[508] = 0.28660664f;
      sa[509] = 0.38990405f;
      sa[510] = 0.45326516f;
      sa[511] = 0.24139078f;
      sa[512] = 0.07996513f;
      sa[513] = 0.068261065f;
      sa[514] = 0.21563171f;
      sa[515] = -0.01266382f;
      sa[516] = 0.24698235f;
      sa[517] = 0.302579f;
      sa[518] = 0.44382727f;
      sa[519] = 0.19261408f;
      sa[520] = 0.38596693f;
      sa[521] = 0.19546458f;
      sa[522] = -0.14446765f;
      sa[523] = 0.07552871f;
      sa[524] = 0.45937043f;
      sa[525] = 0.4409956f;
      sa[526] = 0.30825981f;
      sa[527] = 0.24744184f;
      sa[528] = 0.40129825f;
      sa[529] = 0.121541195f;
      sa[530] = -0.4253038f;
      sa[531] = -0.1922446f;
      sa[532] = 0.32657006f;
      sa[533] = 0.29339713f;
      sa[534] = 0.286808f;
      sa[535] = 0.10785959f;
      sa[536] = 0.077802725f;
      sa[537] = -0.013426841f;
      sa[538] = 0.03635407f;
      sa[539] = 0.16863802f;
      sa[540] = -0.12983765f;
      sa[541] = -0.30523476f;
      sa[542] = -0.3503336f;
      sa[543] = -0.6067712f;
      sa[544] = 0.081180386f;
      sa[545] = 0.06479887f;
      sa[546] = -0.012741705f;
      sa[547] = 0.15256704f;
      sa[548] = 0.21955699f;
      sa[549] = 0.16287544f;
      sa[550] = 0.013976143f;
      sa[551] = -0.35607994f;
      sa[552] = 0.03968884f;
      sa[553] = -0.08715181f;
      sa[554] = -0.22986202f;
      sa[555] = -0.19159836f;
      sa[556] = -0.33696046f;
      sa[557] = -0.27241328f;
      sa[558] = 0.030885762f;
      sa[559] = 0.123008765f;
      sa[560] = -0.33687872f;
      sa[561] = -0.11950777f;
      sa[562] = 0.16918634f;
      sa[563] = -0.055110987f;
      sa[564] = 0.13629238f;
      sa[565] = 0.060531065f;
      sa[566] = 0.5779642f;
      sa[567] = 0.48413453f;
      sa[568] = -0.095366426f;
      sa[569] = 0.014165626f;
      sa[570] = -0.09946612f;
      sa[571] = 0.007962267f;
      sa[572] = -0.18421465f;
      sa[573] = -0.036422934f;
      sa[574] = 0.50745493f;
      sa[575] = -0.01725298f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_09_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.7359151f;
      sa[1] = 0.21140862f;
      sa[2] = -0.15280636f;
      sa[3] = -0.100040734f;
      sa[4] = 0.16825047f;
      sa[5] = 0.03408778f;
      sa[6] = 0.0441674f;
      sa[7] = 0.5633671f;
      sa[8] = -0.20777069f;
      sa[9] = 0.1514213f;
      sa[10] = -0.26910803f;
      sa[11] = 0.41397533f;
      sa[12] = 0.14678447f;
      sa[13] = 0.06433398f;
      sa[14] = -0.1123068f;
      sa[15] = 0.7129478f;
      sa[16] = 0.47413677f;
      sa[17] = -0.16036156f;
      sa[18] = 0.062259443f;
      sa[19] = 0.05398101f;
      sa[20] = 0.35754263f;
      sa[21] = 0.01169102f;
      sa[22] = -0.056559004f;
      sa[23] = 0.35151115f;
      sa[24] = -0.34691563f;
      sa[25] = 0.21408643f;
      sa[26] = -0.035874393f;
      sa[27] = 0.5351953f;
      sa[28] = -0.34801155f;
      sa[29] = -0.23179986f;
      sa[30] = 0.15514092f;
      sa[31] = -0.29013005f;
      sa[32] = -0.1886204f;
      sa[33] = -0.4606465f;
      sa[34] = 0.055363014f;
      sa[35] = 0.36458862f;
      sa[36] = -0.12418407f;
      sa[37] = -0.07881768f;
      sa[38] = 0.05761744f;
      sa[39] = 0.15561694f;
      sa[40] = -0.25825396f;
      sa[41] = -0.43578437f;
      sa[42] = -0.35583502f;
      sa[43] = -0.38493735f;
      sa[44] = 0.12049324f;
      sa[45] = -0.25736225f;
      sa[46] = 0.3300834f;
      sa[47] = 0.3325671f;
      sa[48] = -0.39122975f;
      sa[49] = -0.194744f;
      sa[50] = 0.21847127f;
      sa[51] = -0.14470117f;
      sa[52] = 0.2511823f;
      sa[53] = 0.2232088f;
      sa[54] = -0.10544017f;
      sa[55] = 0.40239182f;
      sa[56] = -0.34511364f;
      sa[57] = -0.36617342f;
      sa[58] = 0.06434981f;
      sa[59] = 0.07605553f;
      sa[60] = 0.44810137f;
      sa[61] = -0.20175423f;
      sa[62] = -0.18757026f;
      sa[63] = 0.20485374f;
      sa[64] = 0.1967401f;
      sa[65] = -0.12971425f;
      sa[66] = 0.074304365f;
      sa[67] = 0.3173654f;
      sa[68] = 0.15793763f;
      sa[69] = -0.3141693f;
      sa[70] = -0.42958468f;
      sa[71] = -0.07222084f;
      sa[72] = -0.35864332f;
      sa[73] = 0.36864287f;
      sa[74] = 0.44569993f;
      sa[75] = -0.13416144f;
      sa[76] = 0.18243243f;
      sa[77] = 0.12267258f;
      sa[78] = -0.47026342f;
      sa[79] = 0.42908266f;
      sa[80] = -0.20411393f;
      sa[81] = 0.03226765f;
      sa[82] = 0.23228711f;
      sa[83] = -0.17151521f;
      sa[84] = -0.45563802f;
      sa[85] = -0.37964603f;
      sa[86] = 0.060581f;
      sa[87] = 0.2884849f;
      sa[88] = -0.4423977f;
      sa[89] = -0.1957023f;
      sa[90] = -0.31912172f;
      sa[91] = 0.40733084f;
      sa[92] = -0.05120471f;
      sa[93] = 0.07789578f;
      sa[94] = -0.4096031f;
      sa[95] = -0.106806405f;
      sa[96] = -0.23365377f;
      sa[97] = -0.039558303f;
      sa[98] = -0.006298378f;
      sa[99] = 0.13863046f;
      sa[100] = -0.36740512f;
      sa[101] = -0.3334171f;
      sa[102] = 0.38596967f;
      sa[103] = 0.018150678f;
      sa[104] = -0.19266655f;
      sa[105] = -0.24502732f;
      sa[106] = 0.28415963f;
      sa[107] = 0.39252734f;
      sa[108] = 0.33404726f;
      sa[109] = 0.043969322f;
      sa[110] = 0.15260582f;
      sa[111] = -0.29991043f;
      sa[112] = -0.1404862f;
      sa[113] = 0.07043205f;
      sa[114] = 0.06288995f;
      sa[115] = -0.18623623f;
      sa[116] = 0.341061f;
      sa[117] = 0.011403444f;
      sa[118] = -0.4863432f;
      sa[119] = -0.19885914f;
      sa[120] = -0.12402947f;
      sa[121] = 0.20585346f;
      sa[122] = -0.0154176755f;
      sa[123] = 0.091170356f;
      sa[124] = -0.07103893f;
      sa[125] = 0.3849364f;
      sa[126] = -0.27475372f;
      sa[127] = 0.20552433f;
      sa[128] = -0.5165404f;
      sa[129] = 0.1481804f;
      sa[130] = -0.0715575f;
      sa[131] = 0.07362014f;
      sa[132] = 0.06840008f;
      sa[133] = 0.1772291f;
      sa[134] = 0.21027254f;
      sa[135] = -0.42259327f;
      sa[136] = 0.09366321f;
      sa[137] = -0.17801498f;
      sa[138] = 0.12493453f;
      sa[139] = 0.23113148f;
      sa[140] = -0.15656467f;
      sa[141] = -0.033309415f;
      sa[142] = -0.08552152f;
      sa[143] = -0.26487285f;
      sa[144] = 0.34467998f;
      sa[145] = -0.33176574f;
      sa[146] = 0.097051784f;
      sa[147] = -0.033410046f;
      sa[148] = -0.24175295f;
      sa[149] = 0.41132414f;
      sa[150] = -0.13695394f;
      sa[151] = -0.62871534f;
      sa[152] = 0.47957277f;
      sa[153] = -0.13758376f;
      sa[154] = 0.43420914f;
      sa[155] = -0.4713933f;
      sa[156] = -0.43156976f;
      sa[157] = -0.3240777f;
      sa[158] = 0.048139784f;
      sa[159] = -0.36191496f;
      sa[160] = 0.34954488f;
      sa[161] = -0.33700275f;
      sa[162] = 0.44387686f;
      sa[163] = -0.3126724f;
      sa[164] = 0.15494053f;
      sa[165] = -0.2052878f;
      sa[166] = 0.26170942f;
      sa[167] = -0.4260302f;
      sa[168] = 0.20726605f;
      sa[169] = -0.48752168f;
      sa[170] = 0.30675337f;
      sa[171] = 0.19463547f;
      sa[172] = 0.51165324f;
      sa[173] = 0.5034158f;
      sa[174] = -0.09063313f;
      sa[175] = -0.026399022f;
      sa[176] = -0.19570026f;
      sa[177] = 0.32072705f;
      sa[178] = -0.25005928f;
      sa[179] = -0.14156812f;
      sa[180] = -0.2383365f;
      sa[181] = -0.09724381f;
      sa[182] = -0.10532862f;
      sa[183] = -0.032361228f;
      sa[184] = 0.49321875f;
      sa[185] = 0.34977582f;
      sa[186] = -0.09350722f;
      sa[187] = -0.1472686f;
      sa[188] = -0.21688922f;
      sa[189] = -0.27391145f;
      sa[190] = -0.36548904f;
      sa[191] = -0.0945323f;
      sa[192] = -0.16791356f;
      sa[193] = 0.19594407f;
      sa[194] = -0.27977192f;
      sa[195] = -0.2553569f;
      sa[196] = 0.20048529f;
      sa[197] = 0.012268243f;
      sa[198] = 0.12902993f;
      sa[199] = 0.43878877f;
      sa[200] = 0.1316748f;
      sa[201] = 0.46526644f;
      sa[202] = 0.397807f;
      sa[203] = -0.48004076f;
      sa[204] = -0.0027394285f;
      sa[205] = 0.29623345f;
      sa[206] = -0.17882311f;
      sa[207] = 0.25562516f;
      sa[208] = -0.25857925f;
      sa[209] = 0.09282608f;
      sa[210] = -0.15508406f;
      sa[211] = -0.31137538f;
      sa[212] = -0.43773812f;
      sa[213] = -0.07404984f;
      sa[214] = -0.4077213f;
      sa[215] = -0.103138804f;
      sa[216] = 0.07736014f;
      sa[217] = 0.26020563f;
      sa[218] = -0.02833206f;
      sa[219] = 0.0576589f;
      sa[220] = 0.14581308f;
      sa[221] = -0.048220225f;
      sa[222] = -0.32728392f;
      sa[223] = -0.3945299f;
      sa[224] = 0.46607f;
      sa[225] = 0.008958587f;
      sa[226] = -0.060812037f;
      sa[227] = 0.07451556f;
      sa[228] = -0.11875942f;
      sa[229] = -0.26484513f;
      sa[230] = -0.3633445f;
      sa[231] = -0.23221229f;
      sa[232] = 0.45527077f;
      sa[233] = -0.26088393f;
      sa[234] = -0.27305362f;
      sa[235] = -0.009993418f;
      sa[236] = -0.32733193f;
      sa[237] = 0.56531376f;
      sa[238] = 0.2948634f;
      sa[239] = -0.12242759f;
      sa[240] = -0.13214634f;
      sa[241] = -0.7126322f;
      sa[242] = -0.25606892f;
      sa[243] = 0.5437507f;
      sa[244] = 1.0627742E-4f;
      sa[245] = 0.36044428f;
      sa[246] = 0.61026305f;
      sa[247] = -0.6548471f;
      sa[248] = -0.13280348f;
      sa[249] = 0.12221823f;
      sa[250] = 0.31429958f;
      sa[251] = 0.21876085f;
      sa[252] = 0.13738851f;
      sa[253] = -0.34020922f;
      sa[254] = 0.4749544f;
      sa[255] = -0.064453214f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_09_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_ReLU_09_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.007990568f;
      sa[1] = -1.6807835f;
      sa[2] = -1.6026537f;
      sa[3] = 1.3470433f;
      sa[4] = 0.39533445f;
      sa[5] = -0.22931118f;
      sa[6] = -1.7014889f;
      sa[7] = 1.546663f;
      sa[8] = 1.6896162f;
      sa[9] = 0.16829033f;
      sa[10] = 1.5811791f;
      sa[11] = 1.3484182f;
      sa[12] = 1.7924925f;
      sa[13] = -0.5552997f;
      sa[14] = -2.0307112f;
      sa[15] = -0.80949634f;
      sa[16] = 0.707702f;
      sa[17] = -0.7281215f;
      sa[18] = -1.4890662f;
      sa[19] = -1.0328411f;
      sa[20] = -2.0252173f;
      sa[21] = 0.2914017f;
      sa[22] = -1.905703f;
      sa[23] = -0.86646956f;
      sa[24] = -0.5025389f;
      sa[25] = 1.9420744f;
      sa[26] = -0.29645914f;
      sa[27] = 1.1752645f;
      sa[28] = 1.1513412f;
      sa[29] = -0.7171375f;
      sa[30] = 0.24320379f;
      sa[31] = 0.20884816f;
      sa[32] = 0.29126787f;
      sa[33] = -0.06525406f;
      sa[34] = -0.5807561f;
      sa[35] = 0.78153676f;
      sa[36] = 0.51240325f;
      sa[37] = -1.3610938f;
      sa[38] = 0.73532593f;
      sa[39] = -0.41923794f;
      sa[40] = 0.27411604f;
      sa[41] = -0.5997328f;
      sa[42] = 0.5513728f;
      sa[43] = -0.007539935f;
      sa[44] = 0.91648656f;
      sa[45] = -1.961754f;
      sa[46] = -2.3563514f;
      sa[47] = 0.21540791f;
      sa[48] = 1.6029687f;
      sa[49] = -0.21095102f;
      sa[50] = -0.49335015f;
      sa[51] = 1.8164017f;
      sa[52] = -1.6674554f;
      sa[53] = 1.010075f;
      sa[54] = 1.6916089f;
      sa[55] = 1.0761422f;
      sa[56] = -0.7558056f;
      sa[57] = -0.42728817f;
      sa[58] = 0.9836723f;
      sa[59] = 0.60125875f;
      sa[60] = -1.5056794f;
      sa[61] = 0.8880446f;
      sa[62] = -0.32865104f;
      sa[63] = -1.0115252f;
      sa[64] = 1.1434389f;
      sa[65] = -0.8500371f;
      sa[66] = -1.7833267f;
      sa[67] = 4.892845E-4f;
      sa[68] = 0.9519706f;
      sa[69] = -1.3123708f;
      sa[70] = -1.748112f;
      sa[71] = 0.11555145f;
      sa[72] = -1.0037552f;
      sa[73] = -1.2956917f;
      sa[74] = -1.3368695f;
      sa[75] = 1.4397131f;
      sa[76] = 1.9706165f;
      sa[77] = -0.5879292f;
      sa[78] = -1.3594537f;
      sa[79] = -0.5187064f;
      sa[80] = 0.42434362f;
      sa[81] = -1.755679f;
      sa[82] = -0.19853207f;
      sa[83] = -1.5576017f;
      sa[84] = 1.5187134f;
      sa[85] = 0.9681347f;
      sa[86] = -2.0720592f;
      sa[87] = 0.96298164f;
      sa[88] = -1.8099254f;
      sa[89] = -1.049346f;
      sa[90] = 0.26096836f;
      sa[91] = 0.02248744f;
      sa[92] = 1.2265124f;
      sa[93] = 1.8698927f;
      sa[94] = 1.5713474f;
      sa[95] = 0.532484f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_09 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_09_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_09_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_09_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_ReLU_09_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


