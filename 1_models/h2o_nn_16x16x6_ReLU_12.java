/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:49:24.418+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_12

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_12 > h2o_nn_16x16x6_ReLU_12.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_12.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_12", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_12 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_12_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_12_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_12_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_12_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_12_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_12_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_12.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_12_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.2864864864864865,0.13513513513513514,0.14594594594594595,0.2864864864864865,0.14594594594594595};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_12() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-7539613273203989656L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_12_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_12_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_12_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_12_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_12_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_12_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_12_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_12_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.6202929336916552;
      sa[1] = 0.659273967972507;
      sa[2] = 0.3996578631546435;
      sa[3] = 0.49216658774821626;
      sa[4] = 0.4366439580381392;
      sa[5] = 0.505702294313557;
      sa[6] = 0.4268715976368206;
      sa[7] = 0.6660569531085334;
      sa[8] = 0.548534681422624;
      sa[9] = 0.6888403643391964;
      sa[10] = 0.3970682111205334;
      sa[11] = 0.34747960718342;
      sa[12] = 0.42768810215863046;
      sa[13] = 0.43210681851294347;
      sa[14] = 0.5568717161401027;
      sa[15] = 0.5873219004875991;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_12_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.0532888542310281;
      sa[1] = 1.0037613359429938;
      sa[2] = 0.941472345455643;
      sa[3] = 0.9493028940718587;
      sa[4] = 0.9806256808444753;
      sa[5] = 0.9898492522452633;
      sa[6] = 0.9285437070152024;
      sa[7] = 0.9356765022753429;
      sa[8] = 0.9126608579944507;
      sa[9] = 1.0155550678896386;
      sa[10] = 0.9207855320371909;
      sa[11] = 1.048252175949622;
      sa[12] = 1.0363064821083818;
      sa[13] = 0.9836796825617787;
      sa[14] = 1.0602782929196009;
      sa[15] = 1.0501797763197942;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_12_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_12_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.041560072068178834;
      sa[1] = 0.016571844121473642;
      sa[2] = -0.02844855547070699;
      sa[3] = -0.018630182186978206;
      sa[4] = 0.02257400988369589;
    }
  }
}
class h2o_nn_16x16x6_ReLU_12_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_12_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.105061226f;
      sa[1] = 0.26254037f;
      sa[2] = 0.21960409f;
      sa[3] = 0.16178118f;
      sa[4] = -0.14118049f;
      sa[5] = -0.15067329f;
      sa[6] = -0.0022844085f;
      sa[7] = 0.32664323f;
      sa[8] = 0.1983067f;
      sa[9] = -0.18403967f;
      sa[10] = -0.1744617f;
      sa[11] = -0.25236848f;
      sa[12] = 0.13330138f;
      sa[13] = -0.23589455f;
      sa[14] = -0.14112078f;
      sa[15] = 0.04456121f;
      sa[16] = 0.10927497f;
      sa[17] = 0.1682943f;
      sa[18] = -0.2393779f;
      sa[19] = 0.16862404f;
      sa[20] = 0.30341548f;
      sa[21] = -0.2716468f;
      sa[22] = 0.30606994f;
      sa[23] = -0.1309695f;
      sa[24] = 0.31583714f;
      sa[25] = 0.19323191f;
      sa[26] = -0.2881458f;
      sa[27] = 0.3438069f;
      sa[28] = 0.3078332f;
      sa[29] = -0.24138512f;
      sa[30] = -0.13730997f;
      sa[31] = 0.22609076f;
      sa[32] = 0.19990592f;
      sa[33] = -0.32530397f;
      sa[34] = 0.07721635f;
      sa[35] = -0.113628864f;
      sa[36] = 0.10279984f;
      sa[37] = 0.2861599f;
      sa[38] = -0.072557285f;
      sa[39] = 0.15197861f;
      sa[40] = 0.09229652f;
      sa[41] = -0.04618988f;
      sa[42] = -0.11922842f;
      sa[43] = 0.08362351f;
      sa[44] = 0.2620646f;
      sa[45] = -0.27100697f;
      sa[46] = 0.037931945f;
      sa[47] = -0.024151063f;
      sa[48] = 0.29063493f;
      sa[49] = 0.31777486f;
      sa[50] = 0.2505827f;
      sa[51] = -0.2754985f;
      sa[52] = -0.09752947f;
      sa[53] = 0.244028f;
      sa[54] = 0.25947386f;
      sa[55] = 0.010748006f;
      sa[56] = -0.13748004f;
      sa[57] = -0.25706148f;
      sa[58] = 0.32896933f;
      sa[59] = -0.14887564f;
      sa[60] = -0.3008335f;
      sa[61] = 0.20540404f;
      sa[62] = 0.15432355f;
      sa[63] = 0.023508254f;
      sa[64] = 0.19857766f;
      sa[65] = 0.1884544f;
      sa[66] = 0.06485172f;
      sa[67] = 0.20293356f;
      sa[68] = -0.111503094f;
      sa[69] = 0.15431541f;
      sa[70] = -0.13833077f;
      sa[71] = 0.35205582f;
      sa[72] = -0.1658925f;
      sa[73] = 0.22286423f;
      sa[74] = -0.20885175f;
      sa[75] = 0.09562982f;
      sa[76] = -0.23831446f;
      sa[77] = -0.09380475f;
      sa[78] = -0.090924114f;
      sa[79] = 0.1280245f;
      sa[80] = -0.25495434f;
      sa[81] = -0.12178717f;
      sa[82] = 0.0026043712f;
      sa[83] = 0.13237071f;
      sa[84] = -0.04035212f;
      sa[85] = -0.21785593f;
      sa[86] = 0.1460341f;
      sa[87] = 0.25021124f;
      sa[88] = 0.26142472f;
      sa[89] = 0.0723246f;
      sa[90] = -0.13082132f;
      sa[91] = 0.15676185f;
      sa[92] = 0.096709356f;
      sa[93] = -0.25020325f;
      sa[94] = -0.21229315f;
      sa[95] = -0.29038984f;
      sa[96] = 0.1424921f;
      sa[97] = 0.073593535f;
      sa[98] = 0.22389333f;
      sa[99] = -0.11404385f;
      sa[100] = -0.07565318f;
      sa[101] = -0.22305673f;
      sa[102] = -0.30199713f;
      sa[103] = -0.10460253f;
      sa[104] = 0.0076263505f;
      sa[105] = -0.13095047f;
      sa[106] = -0.23523207f;
      sa[107] = 0.1591368f;
      sa[108] = 0.19980448f;
      sa[109] = -0.23160206f;
      sa[110] = -0.16862425f;
      sa[111] = 0.17961434f;
      sa[112] = 0.12715134f;
      sa[113] = 0.045906708f;
      sa[114] = -0.17112488f;
      sa[115] = -0.0695781f;
      sa[116] = -0.23494925f;
      sa[117] = -0.020328272f;
      sa[118] = -0.25759593f;
      sa[119] = -0.17757508f;
      sa[120] = 0.23673819f;
      sa[121] = 0.2633738f;
      sa[122] = 0.33557346f;
      sa[123] = 0.28225526f;
      sa[124] = 0.31368375f;
      sa[125] = 0.31025964f;
      sa[126] = -0.31860253f;
      sa[127] = -0.17402226f;
      sa[128] = 0.073303334f;
      sa[129] = 0.15652695f;
      sa[130] = -0.13983181f;
      sa[131] = 0.31095645f;
      sa[132] = 0.21169572f;
      sa[133] = -0.30467647f;
      sa[134] = 0.09083275f;
      sa[135] = -0.29114768f;
      sa[136] = -0.28954375f;
      sa[137] = -0.024897108f;
      sa[138] = 0.14226598f;
      sa[139] = -0.1090316f;
      sa[140] = -0.07827363f;
      sa[141] = -0.16128434f;
      sa[142] = 0.14973335f;
      sa[143] = -0.37481755f;
      sa[144] = 0.2966226f;
      sa[145] = -0.14557013f;
      sa[146] = -0.2628332f;
      sa[147] = 0.2176293f;
      sa[148] = 0.16407469f;
      sa[149] = 0.19713247f;
      sa[150] = 0.30316505f;
      sa[151] = -0.30239812f;
      sa[152] = 0.042363923f;
      sa[153] = 0.3004427f;
      sa[154] = 0.28381455f;
      sa[155] = -0.18098807f;
      sa[156] = 0.12903967f;
      sa[157] = -0.21463943f;
      sa[158] = 0.0853028f;
      sa[159] = 0.08189851f;
      sa[160] = 0.10518565f;
      sa[161] = 0.24113901f;
      sa[162] = -0.22039849f;
      sa[163] = -0.051696025f;
      sa[164] = 0.23473898f;
      sa[165] = -0.06837365f;
      sa[166] = -0.09607353f;
      sa[167] = -0.12453279f;
      sa[168] = 0.22264947f;
      sa[169] = 0.35494104f;
      sa[170] = 0.010435452f;
      sa[171] = -0.06587144f;
      sa[172] = -0.08366854f;
      sa[173] = -0.18101631f;
      sa[174] = -0.03154179f;
      sa[175] = -0.2897873f;
      sa[176] = -0.023998888f;
      sa[177] = -0.01252036f;
      sa[178] = -0.086001396f;
      sa[179] = 0.064164676f;
      sa[180] = -0.055623643f;
      sa[181] = -0.29097214f;
      sa[182] = -0.15439457f;
      sa[183] = 0.109076515f;
      sa[184] = 0.31802994f;
      sa[185] = 0.19355445f;
      sa[186] = -0.32072407f;
      sa[187] = 0.084289625f;
      sa[188] = -0.024670176f;
      sa[189] = 0.24355562f;
      sa[190] = 0.02003547f;
      sa[191] = -0.02800541f;
      sa[192] = -0.13896371f;
      sa[193] = 0.25629967f;
      sa[194] = 0.095776744f;
      sa[195] = 0.29520366f;
      sa[196] = 0.30286166f;
      sa[197] = -0.04145867f;
      sa[198] = 0.12182991f;
      sa[199] = -0.09513663f;
      sa[200] = 0.020008087f;
      sa[201] = -0.30623883f;
      sa[202] = 0.14351901f;
      sa[203] = -0.04148092f;
      sa[204] = -0.2248578f;
      sa[205] = 0.21351703f;
      sa[206] = 0.24672344f;
      sa[207] = 0.15311444f;
      sa[208] = -0.2914935f;
      sa[209] = -0.08972819f;
      sa[210] = -0.30804285f;
      sa[211] = -0.2879604f;
      sa[212] = 0.27346995f;
      sa[213] = -0.24915273f;
      sa[214] = -0.1140143f;
      sa[215] = 0.036648702f;
      sa[216] = 0.09435113f;
      sa[217] = 0.2136233f;
      sa[218] = -0.19048575f;
      sa[219] = 0.24412507f;
      sa[220] = -0.27319574f;
      sa[221] = 0.018160462f;
      sa[222] = 0.21402605f;
      sa[223] = 0.039477196f;
      sa[224] = 0.10451956f;
      sa[225] = 0.34681162f;
      sa[226] = -0.21382631f;
      sa[227] = 0.3465556f;
      sa[228] = 0.10549673f;
      sa[229] = 0.07194176f;
      sa[230] = 0.25400478f;
      sa[231] = -0.299279f;
      sa[232] = -0.24628194f;
      sa[233] = 0.107194774f;
      sa[234] = 0.14659773f;
      sa[235] = -0.29364035f;
      sa[236] = -0.063657254f;
      sa[237] = -0.27304134f;
      sa[238] = -0.26560232f;
      sa[239] = 0.12286243f;
      sa[240] = 0.012991366f;
      sa[241] = -0.22234963f;
      sa[242] = -0.10280679f;
      sa[243] = -0.22716631f;
      sa[244] = -0.24982221f;
      sa[245] = -0.16790853f;
      sa[246] = -0.31135222f;
      sa[247] = -0.0842705f;
      sa[248] = 0.25495082f;
      sa[249] = 0.26234865f;
      sa[250] = -0.17266832f;
      sa[251] = -0.036042105f;
      sa[252] = -0.30176514f;
      sa[253] = -0.31353486f;
      sa[254] = -0.26319227f;
      sa[255] = 0.14556797f;
      sa[256] = -0.13721454f;
      sa[257] = 0.36859363f;
      sa[258] = -0.22780704f;
      sa[259] = -0.07296891f;
      sa[260] = -0.2340691f;
      sa[261] = -0.10063589f;
      sa[262] = -0.15055095f;
      sa[263] = 0.23640895f;
      sa[264] = -0.11898766f;
      sa[265] = 0.1278024f;
      sa[266] = -0.26073173f;
      sa[267] = -0.2078992f;
      sa[268] = 0.12512316f;
      sa[269] = -0.16788588f;
      sa[270] = -0.0024603333f;
      sa[271] = 0.2126967f;
      sa[272] = -0.05715268f;
      sa[273] = -0.08947363f;
      sa[274] = 0.17166317f;
      sa[275] = 0.040606342f;
      sa[276] = 0.108456306f;
      sa[277] = -0.25115582f;
      sa[278] = -0.119343154f;
      sa[279] = 0.24142486f;
      sa[280] = -0.13764066f;
      sa[281] = 0.36129245f;
      sa[282] = -0.035270166f;
      sa[283] = 0.0141047435f;
      sa[284] = 0.0022703998f;
      sa[285] = -0.19712472f;
      sa[286] = 0.31739485f;
      sa[287] = 0.167657f;
      sa[288] = -0.22462033f;
      sa[289] = -0.19180736f;
      sa[290] = -0.10901535f;
      sa[291] = 0.040444598f;
      sa[292] = 0.16276726f;
      sa[293] = -0.08844456f;
      sa[294] = 0.11118826f;
      sa[295] = 0.14513327f;
      sa[296] = 0.23611398f;
      sa[297] = 0.20899568f;
      sa[298] = -0.06960354f;
      sa[299] = -0.043471698f;
      sa[300] = 0.0056358674f;
      sa[301] = -0.056765452f;
      sa[302] = 0.19851246f;
      sa[303] = 0.046598345f;
      sa[304] = -0.2332963f;
      sa[305] = -0.049325384f;
      sa[306] = 0.24813159f;
      sa[307] = -0.20725736f;
      sa[308] = 0.10595158f;
      sa[309] = 0.18398133f;
      sa[310] = 0.32984677f;
      sa[311] = 0.34026653f;
      sa[312] = -0.23836397f;
      sa[313] = -0.21188731f;
      sa[314] = -0.14656392f;
      sa[315] = -0.043356434f;
      sa[316] = -0.016500216f;
      sa[317] = -0.08306977f;
      sa[318] = 0.10569654f;
      sa[319] = 0.3148655f;
      sa[320] = -0.012296816f;
      sa[321] = 0.2086985f;
      sa[322] = 0.15799165f;
      sa[323] = -0.25390962f;
      sa[324] = 0.010632379f;
      sa[325] = 0.3022777f;
      sa[326] = -0.2157234f;
      sa[327] = -0.04791889f;
      sa[328] = -0.002530428f;
      sa[329] = 0.32925767f;
      sa[330] = -0.14424425f;
      sa[331] = 0.054660894f;
      sa[332] = -0.27831787f;
      sa[333] = 0.13295144f;
      sa[334] = -0.0672005f;
      sa[335] = 0.19733724f;
      sa[336] = -0.117526054f;
      sa[337] = -0.11373292f;
      sa[338] = 0.34691286f;
      sa[339] = -0.18141668f;
      sa[340] = -0.340492f;
      sa[341] = -0.272454f;
      sa[342] = 0.20947894f;
      sa[343] = -0.08928843f;
      sa[344] = -0.13947973f;
      sa[345] = 0.26563752f;
      sa[346] = 0.26160467f;
      sa[347] = -0.13824886f;
      sa[348] = 0.33184433f;
      sa[349] = -0.28949985f;
      sa[350] = -0.23501697f;
      sa[351] = 0.16905306f;
      sa[352] = 0.2682119f;
      sa[353] = 0.01564863f;
      sa[354] = 0.15179382f;
      sa[355] = 0.19294229f;
      sa[356] = -0.16205041f;
      sa[357] = 0.21814212f;
      sa[358] = -0.31692073f;
      sa[359] = 0.04484851f;
      sa[360] = 0.083544195f;
      sa[361] = -0.022336595f;
      sa[362] = -0.1564532f;
      sa[363] = 0.24238819f;
      sa[364] = -0.15732652f;
      sa[365] = -0.2576927f;
      sa[366] = -0.026064632f;
      sa[367] = -0.32869622f;
      sa[368] = -0.22281227f;
      sa[369] = 0.30727926f;
      sa[370] = -0.18590283f;
      sa[371] = 0.14806628f;
      sa[372] = -0.034678504f;
      sa[373] = 0.29155907f;
      sa[374] = -0.17131262f;
      sa[375] = -0.32450014f;
      sa[376] = -0.30421907f;
      sa[377] = -0.21511362f;
      sa[378] = 0.28719324f;
      sa[379] = 0.10150765f;
      sa[380] = -0.1464787f;
      sa[381] = -0.1282729f;
      sa[382] = -0.06435277f;
      sa[383] = -0.1326281f;
      sa[384] = -0.13679247f;
      sa[385] = 0.1475244f;
      sa[386] = -0.2941285f;
      sa[387] = -0.2128485f;
      sa[388] = 0.07523735f;
      sa[389] = -0.025183361f;
      sa[390] = -0.021821136f;
      sa[391] = -0.12810186f;
      sa[392] = 0.30443332f;
      sa[393] = 0.28163454f;
      sa[394] = -0.07551083f;
      sa[395] = 0.29295662f;
      sa[396] = 0.30864438f;
      sa[397] = -0.26841924f;
      sa[398] = 0.09029585f;
      sa[399] = 0.12643564f;
      sa[400] = 0.14526431f;
      sa[401] = 0.22154726f;
      sa[402] = -0.18007268f;
      sa[403] = 0.02033527f;
      sa[404] = 0.2604596f;
      sa[405] = -0.24798708f;
      sa[406] = -0.08228372f;
      sa[407] = 0.22109751f;
      sa[408] = -0.26677874f;
      sa[409] = -0.3156447f;
      sa[410] = -0.1546418f;
      sa[411] = 0.13996542f;
      sa[412] = -0.1381575f;
      sa[413] = 0.117347546f;
      sa[414] = 0.13536195f;
      sa[415] = 0.29739806f;
      sa[416] = -0.23064604f;
      sa[417] = -0.014708198f;
      sa[418] = -0.03394499f;
      sa[419] = 0.24174263f;
      sa[420] = 0.1936553f;
      sa[421] = 0.27361837f;
      sa[422] = 0.21947098f;
      sa[423] = -0.0746812f;
      sa[424] = 0.06959141f;
      sa[425] = -0.1257881f;
      sa[426] = -0.362204f;
      sa[427] = 0.16060875f;
      sa[428] = -0.054875188f;
      sa[429] = -0.15512016f;
      sa[430] = 0.2202143f;
      sa[431] = 0.00941586f;
      sa[432] = -0.08008454f;
      sa[433] = 0.16206825f;
      sa[434] = 0.29869446f;
      sa[435] = 0.060805265f;
      sa[436] = -0.3075103f;
      sa[437] = -0.29113814f;
      sa[438] = -0.01758907f;
      sa[439] = -0.034728784f;
      sa[440] = 0.29683265f;
      sa[441] = -0.3177925f;
      sa[442] = 0.12854296f;
      sa[443] = 0.06945366f;
      sa[444] = -0.2545152f;
      sa[445] = 0.049555186f;
      sa[446] = 0.23001726f;
      sa[447] = 0.06291787f;
      sa[448] = 0.22536099f;
      sa[449] = 0.29298615f;
      sa[450] = -0.11421685f;
      sa[451] = 0.10359892f;
      sa[452] = 0.18032669f;
      sa[453] = -0.07817638f;
      sa[454] = -0.19619001f;
      sa[455] = -0.08498514f;
      sa[456] = -0.029240923f;
      sa[457] = 0.12686794f;
      sa[458] = -0.24199231f;
      sa[459] = 0.2894203f;
      sa[460] = 0.2291915f;
      sa[461] = 0.29290164f;
      sa[462] = 0.045283873f;
      sa[463] = 0.23273124f;
      sa[464] = -0.28473246f;
      sa[465] = 0.27326468f;
      sa[466] = -0.025710776f;
      sa[467] = 0.12939939f;
      sa[468] = 0.11074087f;
      sa[469] = 0.3450794f;
      sa[470] = 0.23581773f;
      sa[471] = 0.06815586f;
      sa[472] = -0.004317285f;
      sa[473] = -0.13338183f;
      sa[474] = -0.027027063f;
      sa[475] = 0.101438195f;
      sa[476] = 0.2684004f;
      sa[477] = -0.18264835f;
      sa[478] = 0.1471523f;
      sa[479] = -0.15781274f;
      sa[480] = -0.34406298f;
      sa[481] = -0.24735388f;
      sa[482] = -0.29454133f;
      sa[483] = 0.21634142f;
      sa[484] = 0.2683166f;
      sa[485] = 0.15598412f;
      sa[486] = -0.02895929f;
      sa[487] = -0.20006566f;
      sa[488] = -0.23003988f;
      sa[489] = 0.07450363f;
      sa[490] = -0.022051373f;
      sa[491] = -0.2557231f;
      sa[492] = 0.24462636f;
      sa[493] = 0.3189502f;
      sa[494] = -0.25358278f;
      sa[495] = 0.23782983f;
      sa[496] = -0.023448013f;
      sa[497] = 0.052988686f;
      sa[498] = 0.16783029f;
      sa[499] = 0.1730186f;
      sa[500] = -0.044082873f;
      sa[501] = 0.12804858f;
      sa[502] = 0.25679117f;
      sa[503] = 0.06253487f;
      sa[504] = -0.18552102f;
      sa[505] = -0.24820708f;
      sa[506] = 0.17429192f;
      sa[507] = -0.050566033f;
      sa[508] = 0.10399735f;
      sa[509] = 0.2546045f;
      sa[510] = 0.19393037f;
      sa[511] = 0.003051833f;
      sa[512] = 0.090396225f;
      sa[513] = -0.108077146f;
      sa[514] = 0.25178918f;
      sa[515] = -0.2351251f;
      sa[516] = 0.028316518f;
      sa[517] = 0.12085121f;
      sa[518] = 0.16185951f;
      sa[519] = -0.10286758f;
      sa[520] = 0.23798569f;
      sa[521] = 0.14299731f;
      sa[522] = 0.10641305f;
      sa[523] = 0.22959015f;
      sa[524] = 0.20875953f;
      sa[525] = 0.17992175f;
      sa[526] = 0.0015845082f;
      sa[527] = -0.13664858f;
      sa[528] = -0.043042775f;
      sa[529] = 0.09984274f;
      sa[530] = -0.19015734f;
      sa[531] = -0.021618133f;
      sa[532] = 0.15610838f;
      sa[533] = 0.12798472f;
      sa[534] = 0.14911555f;
      sa[535] = -0.119053714f;
      sa[536] = 0.102905065f;
      sa[537] = -0.21578623f;
      sa[538] = 0.20236814f;
      sa[539] = 0.2663564f;
      sa[540] = -0.24230993f;
      sa[541] = -0.16253139f;
      sa[542] = -0.02589267f;
      sa[543] = -0.34749657f;
      sa[544] = 0.1859041f;
      sa[545] = 0.15247697f;
      sa[546] = 0.09886718f;
      sa[547] = 0.23672006f;
      sa[548] = 0.11082368f;
      sa[549] = 0.17991056f;
      sa[550] = 0.040172335f;
      sa[551] = -0.18078578f;
      sa[552] = 0.06899583f;
      sa[553] = -0.022492193f;
      sa[554] = -0.15209724f;
      sa[555] = -0.13337384f;
      sa[556] = -0.1744499f;
      sa[557] = -0.23925266f;
      sa[558] = -0.25547668f;
      sa[559] = 0.18745664f;
      sa[560] = -0.31325358f;
      sa[561] = -0.08134075f;
      sa[562] = 0.21934958f;
      sa[563] = -0.045504186f;
      sa[564] = 0.3510755f;
      sa[565] = 0.07990091f;
      sa[566] = 0.2856893f;
      sa[567] = 0.0749613f;
      sa[568] = -0.046749353f;
      sa[569] = 0.06414137f;
      sa[570] = 0.02052495f;
      sa[571] = -0.025351796f;
      sa[572] = -0.16489618f;
      sa[573] = 0.071639955f;
      sa[574] = 0.281782f;
      sa[575] = -0.24059469f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_12_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.41445416f;
      sa[1] = 0.011709357f;
      sa[2] = -0.1508072f;
      sa[3] = -0.22408861f;
      sa[4] = 0.06288275f;
      sa[5] = 0.0870339f;
      sa[6] = 0.30020773f;
      sa[7] = -0.12117905f;
      sa[8] = -0.22075433f;
      sa[9] = 0.20328602f;
      sa[10] = -0.051240116f;
      sa[11] = 0.14303672f;
      sa[12] = 0.101921454f;
      sa[13] = 0.06296232f;
      sa[14] = -0.25879902f;
      sa[15] = 0.35774782f;
      sa[16] = 0.42960554f;
      sa[17] = -0.101543106f;
      sa[18] = 0.012521474f;
      sa[19] = -0.11358627f;
      sa[20] = 0.32092607f;
      sa[21] = -0.006746438f;
      sa[22] = -0.2917241f;
      sa[23] = 0.21920487f;
      sa[24] = -0.35244995f;
      sa[25] = 0.115832664f;
      sa[26] = -0.06839163f;
      sa[27] = 0.41209713f;
      sa[28] = -0.37752518f;
      sa[29] = -0.123621106f;
      sa[30] = 0.113852575f;
      sa[31] = -0.18950754f;
      sa[32] = -0.3546741f;
      sa[33] = -0.42085904f;
      sa[34] = -0.0037764097f;
      sa[35] = 0.35243276f;
      sa[36] = -0.112897135f;
      sa[37] = -0.066966936f;
      sa[38] = 0.002456897f;
      sa[39] = 0.21968424f;
      sa[40] = -0.2313671f;
      sa[41] = -0.39808512f;
      sa[42] = -0.29389033f;
      sa[43] = -0.39523122f;
      sa[44] = -0.027214557f;
      sa[45] = -0.3928276f;
      sa[46] = 0.2848965f;
      sa[47] = 0.32095757f;
      sa[48] = -0.40130135f;
      sa[49] = -0.29877052f;
      sa[50] = 0.09522666f;
      sa[51] = -0.11201396f;
      sa[52] = 0.18108654f;
      sa[53] = 0.20327637f;
      sa[54] = -0.08875749f;
      sa[55] = 0.28911236f;
      sa[56] = -0.2994315f;
      sa[57] = -0.32074323f;
      sa[58] = 0.029726325f;
      sa[59] = -0.07097544f;
      sa[60] = 0.33817422f;
      sa[61] = -0.18570094f;
      sa[62] = -0.12994644f;
      sa[63] = 0.15651213f;
      sa[64] = 0.41060752f;
      sa[65] = -0.18234499f;
      sa[66] = 0.16474392f;
      sa[67] = 0.41066897f;
      sa[68] = 0.19474523f;
      sa[69] = -0.28606805f;
      sa[70] = -0.43993682f;
      sa[71] = -0.1304004f;
      sa[72] = -0.36740434f;
      sa[73] = 0.2978723f;
      sa[74] = 0.33982483f;
      sa[75] = -0.02152003f;
      sa[76] = 0.25684634f;
      sa[77] = 0.15474638f;
      sa[78] = -0.33821228f;
      sa[79] = 0.26653826f;
      sa[80] = -0.23423639f;
      sa[81] = 0.07282005f;
      sa[82] = 0.20682421f;
      sa[83] = -0.16865554f;
      sa[84] = -0.43629822f;
      sa[85] = -0.34305725f;
      sa[86] = 0.054625485f;
      sa[87] = 0.35772026f;
      sa[88] = -0.4065925f;
      sa[89] = -0.13759948f;
      sa[90] = -0.27648398f;
      sa[91] = 0.41163933f;
      sa[92] = -0.10761726f;
      sa[93] = 0.06092871f;
      sa[94] = -0.41144285f;
      sa[95] = -0.05727869f;
      sa[96] = -0.34633368f;
      sa[97] = 0.020540873f;
      sa[98] = -0.032794874f;
      sa[99] = 0.06288728f;
      sa[100] = -0.3701003f;
      sa[101] = -0.15637442f;
      sa[102] = 0.2770252f;
      sa[103] = 0.016743911f;
      sa[104] = -0.07470206f;
      sa[105] = -0.1882723f;
      sa[106] = 0.3549937f;
      sa[107] = 0.2998087f;
      sa[108] = 0.16694973f;
      sa[109] = 7.069455E-4f;
      sa[110] = 0.15814425f;
      sa[111] = -0.23306556f;
      sa[112] = -0.35417396f;
      sa[113] = 0.004254256f;
      sa[114] = 0.039923105f;
      sa[115] = -0.11424712f;
      sa[116] = 0.2746694f;
      sa[117] = -0.028842269f;
      sa[118] = -0.37901855f;
      sa[119] = -0.22572637f;
      sa[120] = -0.123275004f;
      sa[121] = 0.26812768f;
      sa[122] = -0.04416431f;
      sa[123] = 0.068084f;
      sa[124] = -0.2191604f;
      sa[125] = 0.1781089f;
      sa[126] = -0.2893266f;
      sa[127] = 0.102402955f;
      sa[128] = -0.3096683f;
      sa[129] = 0.15313254f;
      sa[130] = -0.11406444f;
      sa[131] = 0.1909069f;
      sa[132] = 0.06601157f;
      sa[133] = 0.10435014f;
      sa[134] = 0.1625713f;
      sa[135] = -0.355383f;
      sa[136] = 0.09488467f;
      sa[137] = -0.19645071f;
      sa[138] = -0.04231519f;
      sa[139] = 0.2792585f;
      sa[140] = -0.1593604f;
      sa[141] = -0.043502364f;
      sa[142] = 0.013294807f;
      sa[143] = -0.262727f;
      sa[144] = 0.24624772f;
      sa[145] = -0.19977278f;
      sa[146] = 0.026726387f;
      sa[147] = -0.066553965f;
      sa[148] = -0.22863695f;
      sa[149] = 0.312432f;
      sa[150] = -0.24861252f;
      sa[151] = -0.43756473f;
      sa[152] = 0.44136152f;
      sa[153] = -0.13795987f;
      sa[154] = 0.39076576f;
      sa[155] = -0.4239396f;
      sa[156] = -0.38640097f;
      sa[157] = -0.31398898f;
      sa[158] = -0.07577868f;
      sa[159] = -0.179203f;
      sa[160] = 0.30222705f;
      sa[161] = -0.34281155f;
      sa[162] = 0.39427802f;
      sa[163] = -0.24822246f;
      sa[164] = 0.15292484f;
      sa[165] = -0.20265284f;
      sa[166] = 0.32964316f;
      sa[167] = -0.42338076f;
      sa[168] = 0.22600153f;
      sa[169] = -0.44894835f;
      sa[170] = 0.27973673f;
      sa[171] = 0.20691638f;
      sa[172] = 0.36763927f;
      sa[173] = 0.36590812f;
      sa[174] = -0.078517295f;
      sa[175] = -0.049271077f;
      sa[176] = -0.1939894f;
      sa[177] = 0.054833286f;
      sa[178] = -0.26441047f;
      sa[179] = -0.050277542f;
      sa[180] = -0.37522322f;
      sa[181] = -0.22326402f;
      sa[182] = 0.12937798f;
      sa[183] = -0.2564391f;
      sa[184] = 0.42742068f;
      sa[185] = 0.36326978f;
      sa[186] = -0.106175095f;
      sa[187] = -0.2413003f;
      sa[188] = -0.12192926f;
      sa[189] = -0.1960594f;
      sa[190] = -0.38382712f;
      sa[191] = -0.24501586f;
      sa[192] = 0.008313685f;
      sa[193] = 0.1278243f;
      sa[194] = -0.2676752f;
      sa[195] = -0.22850633f;
      sa[196] = 0.17485467f;
      sa[197] = -0.18970172f;
      sa[198] = 0.05398371f;
      sa[199] = 0.39542896f;
      sa[200] = -0.024314834f;
      sa[201] = 0.26623026f;
      sa[202] = 0.18409796f;
      sa[203] = -0.38732073f;
      sa[204] = 0.18583308f;
      sa[205] = 0.40704453f;
      sa[206] = -0.12274577f;
      sa[207] = 0.16925451f;
      sa[208] = -0.22173528f;
      sa[209] = 0.16693419f;
      sa[210] = -0.123629585f;
      sa[211] = -0.27738878f;
      sa[212] = -0.3748354f;
      sa[213] = 0.01879212f;
      sa[214] = -0.39263937f;
      sa[215] = -0.021523215f;
      sa[216] = 0.1465436f;
      sa[217] = 0.33981097f;
      sa[218] = 0.024309406f;
      sa[219] = 0.093894616f;
      sa[220] = 0.13924016f;
      sa[221] = -0.040535633f;
      sa[222] = -0.2771513f;
      sa[223] = -0.31641555f;
      sa[224] = 0.30481628f;
      sa[225] = 0.096360385f;
      sa[226] = -0.027874004f;
      sa[227] = 0.088006094f;
      sa[228] = -0.08534505f;
      sa[229] = -0.16926777f;
      sa[230] = -0.20542128f;
      sa[231] = -0.09299071f;
      sa[232] = 0.46990258f;
      sa[233] = -0.15021655f;
      sa[234] = -0.118600674f;
      sa[235] = 0.06589823f;
      sa[236] = -0.36144748f;
      sa[237] = 0.43499678f;
      sa[238] = 0.19475423f;
      sa[239] = -0.059844553f;
      sa[240] = -0.07422518f;
      sa[241] = -0.36571464f;
      sa[242] = -0.24441758f;
      sa[243] = 0.3791193f;
      sa[244] = 0.2269255f;
      sa[245] = 0.339044f;
      sa[246] = 0.21214332f;
      sa[247] = -0.33697447f;
      sa[248] = -0.18580163f;
      sa[249] = 0.015528447f;
      sa[250] = 0.26057538f;
      sa[251] = 0.43927935f;
      sa[252] = 0.22473924f;
      sa[253] = -0.31388834f;
      sa[254] = 0.42105177f;
      sa[255] = 0.18776238f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_12_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_ReLU_12_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.1288249f;
      sa[1] = -1.5581086f;
      sa[2] = -1.602915f;
      sa[3] = 1.3376997f;
      sa[4] = 0.41776854f;
      sa[5] = -0.21894695f;
      sa[6] = -1.6813997f;
      sa[7] = 1.494347f;
      sa[8] = 1.7626624f;
      sa[9] = 0.17477764f;
      sa[10] = 1.6209738f;
      sa[11] = 1.4557275f;
      sa[12] = 1.8690684f;
      sa[13] = -0.573654f;
      sa[14] = -1.9915245f;
      sa[15] = -0.715511f;
      sa[16] = 0.7763086f;
      sa[17] = -0.7453946f;
      sa[18] = -1.5061338f;
      sa[19] = -0.85980445f;
      sa[20] = -1.9413705f;
      sa[21] = 0.32157886f;
      sa[22] = -1.9804701f;
      sa[23] = -0.59359646f;
      sa[24] = -0.55474716f;
      sa[25] = 1.8769711f;
      sa[26] = -0.3311572f;
      sa[27] = 1.2089009f;
      sa[28] = 1.2290499f;
      sa[29] = -0.72482234f;
      sa[30] = 0.17433122f;
      sa[31] = 0.14611392f;
      sa[32] = 0.44661838f;
      sa[33] = 0.27078268f;
      sa[34] = -0.640609f;
      sa[35] = 1.0366077f;
      sa[36] = 0.5646424f;
      sa[37] = -1.3427163f;
      sa[38] = 0.5523955f;
      sa[39] = -0.21358603f;
      sa[40] = 0.2087573f;
      sa[41] = -0.7812802f;
      sa[42] = 0.5099019f;
      sa[43] = -0.15773906f;
      sa[44] = 0.98409224f;
      sa[45] = -2.0478373f;
      sa[46] = -2.1456277f;
      sa[47] = 0.011130562f;
      sa[48] = 1.5914541f;
      sa[49] = -0.27299425f;
      sa[50] = -0.49554268f;
      sa[51] = 1.7775156f;
      sa[52] = -1.7325261f;
      sa[53] = 0.938859f;
      sa[54] = 1.7931314f;
      sa[55] = 1.0842397f;
      sa[56] = -0.55498666f;
      sa[57] = -0.06804013f;
      sa[58] = 1.0160326f;
      sa[59] = 0.8485205f;
      sa[60] = -1.417256f;
      sa[61] = 0.92475814f;
      sa[62] = -0.4072969f;
      sa[63] = -0.8516301f;
      sa[64] = 0.9289354f;
      sa[65] = -0.9754706f;
      sa[66] = -1.7670254f;
      sa[67] = -0.15131637f;
      sa[68] = 0.89101523f;
      sa[69] = -1.371863f;
      sa[70] = -1.6554724f;
      sa[71] = -0.02731125f;
      sa[72] = -0.9804255f;
      sa[73] = -1.1635175f;
      sa[74] = -1.0759147f;
      sa[75] = 1.2737983f;
      sa[76] = 1.8889734f;
      sa[77] = -0.6123138f;
      sa[78] = -1.3964614f;
      sa[79] = -0.3649433f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_12 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_12_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_12_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_12_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_ReLU_12_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


