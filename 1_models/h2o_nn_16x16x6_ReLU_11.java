/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:49:09.513+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_11

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_11 > h2o_nn_16x16x6_ReLU_11.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_11.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_11", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_11 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_11_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_11_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_11_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_11_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_11_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_11_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_11.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_11_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.2548076923076923,0.18269230769230768,0.057692307692307696,0.125,0.2548076923076923,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_11() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-7767515202938209728L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_11_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_11_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_11_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_11_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_11_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_11_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_11_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_11_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.6149714422923384;
      sa[1] = 0.45991072157938995;
      sa[2] = 0.4149088484417021;
      sa[3] = 0.5068475634005006;
      sa[4] = 0.5409659258121292;
      sa[5] = 0.7071201043941708;
      sa[6] = 0.5597290294624592;
      sa[7] = 0.6426582341995097;
      sa[8] = 0.6339628540386637;
      sa[9] = 0.5203061360223428;
      sa[10] = 0.5512549652027658;
      sa[11] = 0.24593485072510407;
      sa[12] = 0.12643048224147677;
      sa[13] = 0.5107294907425046;
      sa[14] = 0.6122114387648822;
      sa[15] = 0.48901527788837645;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_11_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.1337183925047598;
      sa[1] = 1.0971312177742705;
      sa[2] = 0.8812551498941691;
      sa[3] = 1.0037218603189264;
      sa[4] = 0.9551710484956386;
      sa[5] = 0.932765719767269;
      sa[6] = 0.9540596660991953;
      sa[7] = 0.8441240991671672;
      sa[8] = 0.856606915830149;
      sa[9] = 1.0870192222057726;
      sa[10] = 1.0040418119431533;
      sa[11] = 1.2092641549609573;
      sa[12] = 1.038895291849854;
      sa[13] = 0.8044970042648492;
      sa[14] = 0.9889694321192994;
      sa[15] = 0.9564603561621391;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_11_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_11_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.12111600314954775;
      sa[1] = -2.2217361159713677E-4;
      sa[2] = -0.08172834780053509;
      sa[3] = -0.010254401647409213;
      sa[4] = 0.0931089972094501;
      sa[5] = -0.1372324307691745;
    }
  }
}
class h2o_nn_16x16x6_ReLU_11_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_11_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.012634731f;
      sa[1] = 0.23917258f;
      sa[2] = 0.22490883f;
      sa[3] = -0.03766388f;
      sa[4] = -0.20934379f;
      sa[5] = -0.27241886f;
      sa[6] = -0.028408743f;
      sa[7] = 0.34837684f;
      sa[8] = 0.040513698f;
      sa[9] = -0.156007f;
      sa[10] = -0.21049893f;
      sa[11] = -0.43678948f;
      sa[12] = 0.08005041f;
      sa[13] = -0.34229133f;
      sa[14] = -0.14162333f;
      sa[15] = 0.058806278f;
      sa[16] = 0.24135968f;
      sa[17] = 0.19651683f;
      sa[18] = -0.019205159f;
      sa[19] = 0.057023257f;
      sa[20] = 0.26168045f;
      sa[21] = -0.31252486f;
      sa[22] = 0.30040988f;
      sa[23] = 0.05237176f;
      sa[24] = 0.28144118f;
      sa[25] = 0.19604973f;
      sa[26] = -0.2237893f;
      sa[27] = 0.19955106f;
      sa[28] = 0.19910432f;
      sa[29] = -0.3478892f;
      sa[30] = -0.2879314f;
      sa[31] = 0.21935524f;
      sa[32] = 0.17509013f;
      sa[33] = -0.39105788f;
      sa[34] = 0.13839579f;
      sa[35] = -0.007126303f;
      sa[36] = 0.2685679f;
      sa[37] = 0.06116713f;
      sa[38] = -0.2590768f;
      sa[39] = 0.22055474f;
      sa[40] = -0.018797895f;
      sa[41] = -0.20289843f;
      sa[42] = -0.1571719f;
      sa[43] = 0.03474205f;
      sa[44] = 0.39667326f;
      sa[45] = -0.38655144f;
      sa[46] = -0.1254356f;
      sa[47] = -0.19346876f;
      sa[48] = 0.23291177f;
      sa[49] = 0.26310384f;
      sa[50] = 0.28840172f;
      sa[51] = -0.21241799f;
      sa[52] = -0.11364585f;
      sa[53] = 0.295458f;
      sa[54] = 0.45074624f;
      sa[55] = -0.11591478f;
      sa[56] = -0.19085298f;
      sa[57] = -0.31415954f;
      sa[58] = 0.21862838f;
      sa[59] = -0.06986595f;
      sa[60] = -0.4721711f;
      sa[61] = 0.39914903f;
      sa[62] = 0.19573946f;
      sa[63] = -0.30783266f;
      sa[64] = 0.18379322f;
      sa[65] = 0.2101069f;
      sa[66] = -0.0055353474f;
      sa[67] = 0.22788128f;
      sa[68] = -0.22814514f;
      sa[69] = -0.14197433f;
      sa[70] = 0.02078658f;
      sa[71] = 0.55492336f;
      sa[72] = -0.21170971f;
      sa[73] = 0.26113436f;
      sa[74] = -0.22658275f;
      sa[75] = 0.14797707f;
      sa[76] = -0.2595317f;
      sa[77] = -0.08262849f;
      sa[78] = -0.16299105f;
      sa[79] = 0.043188132f;
      sa[80] = -0.25506675f;
      sa[81] = -0.15223101f;
      sa[82] = 0.11886361f;
      sa[83] = 0.19301662f;
      sa[84] = -0.0666555f;
      sa[85] = -0.225781f;
      sa[86] = 0.04933821f;
      sa[87] = 0.11721627f;
      sa[88] = 0.14292535f;
      sa[89] = 0.01979443f;
      sa[90] = -0.12026236f;
      sa[91] = 0.20018059f;
      sa[92] = 0.08066532f;
      sa[93] = -0.28624448f;
      sa[94] = -0.26588616f;
      sa[95] = -0.4174045f;
      sa[96] = 0.061823122f;
      sa[97] = 0.1146118f;
      sa[98] = 0.31896484f;
      sa[99] = -0.060378354f;
      sa[100] = -0.07503504f;
      sa[101] = -0.22763467f;
      sa[102] = -0.28344506f;
      sa[103] = -0.17564894f;
      sa[104] = 0.07117325f;
      sa[105] = -0.15823278f;
      sa[106] = -0.21475387f;
      sa[107] = 0.10218128f;
      sa[108] = 0.1911782f;
      sa[109] = -0.18159516f;
      sa[110] = -0.17379338f;
      sa[111] = 0.120756716f;
      sa[112] = 0.008895257f;
      sa[113] = -0.0011084467f;
      sa[114] = -0.17351781f;
      sa[115] = 0.13502544f;
      sa[116] = -0.2540526f;
      sa[117] = 0.16889042f;
      sa[118] = -0.026389532f;
      sa[119] = -0.019748347f;
      sa[120] = 0.2825265f;
      sa[121] = 0.27451372f;
      sa[122] = 0.4897056f;
      sa[123] = 0.4987823f;
      sa[124] = 0.34448782f;
      sa[125] = 0.3710604f;
      sa[126] = -0.09491651f;
      sa[127] = -0.5664145f;
      sa[128] = 0.06832057f;
      sa[129] = 0.10931812f;
      sa[130] = -0.019010274f;
      sa[131] = 0.5150944f;
      sa[132] = 0.19707695f;
      sa[133] = -0.17156585f;
      sa[134] = 0.17370181f;
      sa[135] = -0.57022375f;
      sa[136] = -0.4009793f;
      sa[137] = -0.14769897f;
      sa[138] = 0.029520154f;
      sa[139] = -0.08337121f;
      sa[140] = -0.07645231f;
      sa[141] = -0.09336448f;
      sa[142] = 0.2333548f;
      sa[143] = -0.32660007f;
      sa[144] = 0.2888487f;
      sa[145] = -0.16086209f;
      sa[146] = -0.37427625f;
      sa[147] = 0.33849344f;
      sa[148] = 0.12891549f;
      sa[149] = 0.16149446f;
      sa[150] = 0.26771137f;
      sa[151] = -0.18194236f;
      sa[152] = 0.046428096f;
      sa[153] = 0.3603174f;
      sa[154] = 0.34895372f;
      sa[155] = -0.29889712f;
      sa[156] = 0.16089107f;
      sa[157] = -0.23156227f;
      sa[158] = 0.15511228f;
      sa[159] = 0.19746837f;
      sa[160] = -0.0635335f;
      sa[161] = 0.18286121f;
      sa[162] = -0.05420061f;
      sa[163] = -0.13532974f;
      sa[164] = 0.27530006f;
      sa[165] = -0.046084695f;
      sa[166] = -0.07162139f;
      sa[167] = -0.046246275f;
      sa[168] = 0.10562602f;
      sa[169] = 0.34640613f;
      sa[170] = 0.09163442f;
      sa[171] = 0.026970347f;
      sa[172] = -0.106161475f;
      sa[173] = -0.17804107f;
      sa[174] = -0.08028683f;
      sa[175] = -0.2903487f;
      sa[176] = 0.032198314f;
      sa[177] = -0.05467432f;
      sa[178] = -0.029820716f;
      sa[179] = 0.09337951f;
      sa[180] = 0.035460114f;
      sa[181] = -0.37995347f;
      sa[182] = -0.0070931176f;
      sa[183] = -0.072105214f;
      sa[184] = 0.45670757f;
      sa[185] = 0.2152538f;
      sa[186] = -0.25378406f;
      sa[187] = -0.2340557f;
      sa[188] = 0.07725028f;
      sa[189] = -0.016167188f;
      sa[190] = -0.34364602f;
      sa[191] = -0.042257383f;
      sa[192] = -0.08493772f;
      sa[193] = 0.24760604f;
      sa[194] = 0.050926387f;
      sa[195] = 0.18342227f;
      sa[196] = 0.23095258f;
      sa[197] = -0.26158258f;
      sa[198] = -0.29536507f;
      sa[199] = 0.05427225f;
      sa[200] = 0.15170933f;
      sa[201] = -0.12969191f;
      sa[202] = 0.17689124f;
      sa[203] = -0.09720236f;
      sa[204] = -0.16511798f;
      sa[205] = -0.0978738f;
      sa[206] = -0.063261695f;
      sa[207] = 0.32763082f;
      sa[208] = -0.13027166f;
      sa[209] = 0.13945621f;
      sa[210] = -0.14620996f;
      sa[211] = -0.2576804f;
      sa[212] = 0.15078005f;
      sa[213] = -0.21961406f;
      sa[214] = -0.44845593f;
      sa[215] = -0.06944056f;
      sa[216] = 0.14072134f;
      sa[217] = 0.28043815f;
      sa[218] = -0.30390322f;
      sa[219] = 0.15244308f;
      sa[220] = -0.1916798f;
      sa[221] = 0.077802755f;
      sa[222] = 0.23093362f;
      sa[223] = -0.013879448f;
      sa[224] = 0.15698834f;
      sa[225] = 0.19326779f;
      sa[226] = -0.4157175f;
      sa[227] = 0.25686488f;
      sa[228] = 0.13046977f;
      sa[229] = 0.097918f;
      sa[230] = 0.20729893f;
      sa[231] = -0.4046841f;
      sa[232] = -0.34726956f;
      sa[233] = 0.0017185794f;
      sa[234] = -0.17028105f;
      sa[235] = -0.2474583f;
      sa[236] = 0.0086781625f;
      sa[237] = -0.17783567f;
      sa[238] = -0.20136951f;
      sa[239] = 0.089748375f;
      sa[240] = 0.0867103f;
      sa[241] = -0.3779709f;
      sa[242] = -0.22739029f;
      sa[243] = -0.098781876f;
      sa[244] = -0.16187881f;
      sa[245] = -0.08465587f;
      sa[246] = -0.22339678f;
      sa[247] = -0.07381558f;
      sa[248] = 0.16910216f;
      sa[249] = 0.26236844f;
      sa[250] = -0.237809f;
      sa[251] = -0.022929233f;
      sa[252] = -0.09475103f;
      sa[253] = -0.28961575f;
      sa[254] = -0.7347355f;
      sa[255] = 0.6321362f;
      sa[256] = -0.19164927f;
      sa[257] = 0.5973607f;
      sa[258] = -0.1740508f;
      sa[259] = 0.031454995f;
      sa[260] = 0.032190006f;
      sa[261] = -0.61431694f;
      sa[262] = -0.23891062f;
      sa[263] = 0.38984826f;
      sa[264] = -0.056927614f;
      sa[265] = 0.43764958f;
      sa[266] = -0.09000689f;
      sa[267] = -0.08727742f;
      sa[268] = 0.03255219f;
      sa[269] = -0.4243553f;
      sa[270] = -0.05052026f;
      sa[271] = -0.18248513f;
      sa[272] = -0.1828234f;
      sa[273] = -0.41705886f;
      sa[274] = 0.15665506f;
      sa[275] = -0.1836428f;
      sa[276] = -0.024359489f;
      sa[277] = -0.04768139f;
      sa[278] = 0.031588335f;
      sa[279] = -0.2999439f;
      sa[280] = -0.23734316f;
      sa[281] = 0.23929372f;
      sa[282] = 0.06704359f;
      sa[283] = -0.073076084f;
      sa[284] = -0.008946959f;
      sa[285] = -0.4807827f;
      sa[286] = 0.63638043f;
      sa[287] = 0.21439819f;
      sa[288] = -0.2702637f;
      sa[289] = -0.12326535f;
      sa[290] = 0.06056531f;
      sa[291] = -0.33740568f;
      sa[292] = 0.2915611f;
      sa[293] = -0.17274153f;
      sa[294] = 0.14690109f;
      sa[295] = -0.2792186f;
      sa[296] = 0.098490566f;
      sa[297] = 0.38621175f;
      sa[298] = -0.11260783f;
      sa[299] = -0.16782649f;
      sa[300] = 0.010043738f;
      sa[301] = -0.24598102f;
      sa[302] = 0.08017748f;
      sa[303] = 0.03432124f;
      sa[304] = 0.028395925f;
      sa[305] = 0.14992629f;
      sa[306] = 0.3369848f;
      sa[307] = 0.17723179f;
      sa[308] = 0.18983059f;
      sa[309] = 0.2844136f;
      sa[310] = 0.27177757f;
      sa[311] = 0.63410693f;
      sa[312] = -0.16853215f;
      sa[313] = -0.267004f;
      sa[314] = -0.17561501f;
      sa[315] = 0.19228294f;
      sa[316] = 0.12024604f;
      sa[317] = 0.05419783f;
      sa[318] = 0.15776618f;
      sa[319] = 0.5143329f;
      sa[320] = -0.19783379f;
      sa[321] = 0.1837404f;
      sa[322] = 0.17009085f;
      sa[323] = -0.041928582f;
      sa[324] = -0.0011125985f;
      sa[325] = 0.32454753f;
      sa[326] = -0.26220977f;
      sa[327] = 0.1393029f;
      sa[328] = -0.18513685f;
      sa[329] = 0.2108824f;
      sa[330] = -0.17763151f;
      sa[331] = 0.18264271f;
      sa[332] = -0.27460384f;
      sa[333] = 0.25025117f;
      sa[334] = -0.013683763f;
      sa[335] = 0.09918475f;
      sa[336] = -0.16108692f;
      sa[337] = -0.17218955f;
      sa[338] = 0.48794582f;
      sa[339] = 0.040323842f;
      sa[340] = -0.28794694f;
      sa[341] = -0.19162136f;
      sa[342] = 0.5243069f;
      sa[343] = -0.34200346f;
      sa[344] = -0.20465615f;
      sa[345] = 0.13480695f;
      sa[346] = 0.22880688f;
      sa[347] = 0.046790574f;
      sa[348] = 0.20580216f;
      sa[349] = -0.09645404f;
      sa[350] = -0.16405547f;
      sa[351] = -0.2788755f;
      sa[352] = 0.12752835f;
      sa[353] = -0.11631761f;
      sa[354] = -0.023209639f;
      sa[355] = 0.15844132f;
      sa[356] = -0.06341288f;
      sa[357] = 0.15108939f;
      sa[358] = -0.2507123f;
      sa[359] = 0.06366537f;
      sa[360] = 0.28472304f;
      sa[361] = -0.2299408f;
      sa[362] = -0.518448f;
      sa[363] = -0.007437096f;
      sa[364] = -0.27502102f;
      sa[365] = -0.51287264f;
      sa[366] = -0.24629496f;
      sa[367] = -0.61399066f;
      sa[368] = -0.19308326f;
      sa[369] = 0.19492362f;
      sa[370] = -0.1971814f;
      sa[371] = 0.024715204f;
      sa[372] = -0.0898037f;
      sa[373] = 0.16697484f;
      sa[374] = -0.31969061f;
      sa[375] = -0.5722166f;
      sa[376] = -0.5277703f;
      sa[377] = -0.36916766f;
      sa[378] = 0.38246512f;
      sa[379] = 0.1014894f;
      sa[380] = -0.081626005f;
      sa[381] = -0.064276904f;
      sa[382] = -0.19762568f;
      sa[383] = -0.50263524f;
      sa[384] = -0.3868089f;
      sa[385] = 0.022474876f;
      sa[386] = -0.19147468f;
      sa[387] = 0.29342082f;
      sa[388] = 0.11145385f;
      sa[389] = 0.02353419f;
      sa[390] = -0.09983491f;
      sa[391] = -0.34153992f;
      sa[392] = 0.30663386f;
      sa[393] = 0.11793419f;
      sa[394] = -0.30611324f;
      sa[395] = 0.13124385f;
      sa[396] = 0.49878392f;
      sa[397] = -0.2111721f;
      sa[398] = 0.1106845f;
      sa[399] = 0.22291754f;
      sa[400] = 0.12717882f;
      sa[401] = 0.25913525f;
      sa[402] = -0.2469049f;
      sa[403] = 0.02983979f;
      sa[404] = 0.33603743f;
      sa[405] = -0.23923524f;
      sa[406] = -0.031694945f;
      sa[407] = 0.22300358f;
      sa[408] = -0.35163885f;
      sa[409] = -0.29119933f;
      sa[410] = -0.2593741f;
      sa[411] = -0.007726179f;
      sa[412] = -0.037968952f;
      sa[413] = 0.20889272f;
      sa[414] = -0.16656962f;
      sa[415] = 0.39117295f;
      sa[416] = -0.3201849f;
      sa[417] = -0.065959975f;
      sa[418] = -0.098338686f;
      sa[419] = 0.10898213f;
      sa[420] = 0.20758319f;
      sa[421] = 0.33966014f;
      sa[422] = 0.07534137f;
      sa[423] = -0.123259515f;
      sa[424] = 0.035120707f;
      sa[425] = -0.14918543f;
      sa[426] = -0.3076582f;
      sa[427] = 0.14116392f;
      sa[428] = -0.07135504f;
      sa[429] = -0.19531336f;
      sa[430] = 0.14494912f;
      sa[431] = -0.17575535f;
      sa[432] = -0.1931758f;
      sa[433] = 0.15617195f;
      sa[434] = 0.26351562f;
      sa[435] = 0.30667385f;
      sa[436] = -0.22645709f;
      sa[437] = -0.25494504f;
      sa[438] = -0.039805923f;
      sa[439] = 0.13387278f;
      sa[440] = 0.27767467f;
      sa[441] = -0.40723562f;
      sa[442] = 0.18663567f;
      sa[443] = -0.037859168f;
      sa[444] = -0.2939705f;
      sa[445] = 0.042434905f;
      sa[446] = 0.16097243f;
      sa[447] = 0.0051533626f;
      sa[448] = 0.13907632f;
      sa[449] = 0.1628326f;
      sa[450] = -0.06603305f;
      sa[451] = 0.2628065f;
      sa[452] = 0.14231768f;
      sa[453] = -0.06229548f;
      sa[454] = -0.22444613f;
      sa[455] = -0.2363361f;
      sa[456] = -0.058802363f;
      sa[457] = 0.15035191f;
      sa[458] = -0.1532191f;
      sa[459] = 0.40118104f;
      sa[460] = 0.21076992f;
      sa[461] = 0.31008506f;
      sa[462] = 0.059150442f;
      sa[463] = 0.18287224f;
      sa[464] = -0.08680585f;
      sa[465] = 0.24483936f;
      sa[466] = 0.43842837f;
      sa[467] = 0.12767753f;
      sa[468] = -0.062320195f;
      sa[469] = 0.41373473f;
      sa[470] = 0.3999543f;
      sa[471] = 0.12009461f;
      sa[472] = 0.08291589f;
      sa[473] = -0.122587666f;
      sa[474] = -0.012838601f;
      sa[475] = 0.37795737f;
      sa[476] = 0.055419363f;
      sa[477] = -0.035133913f;
      sa[478] = 0.24992462f;
      sa[479] = -0.32830107f;
      sa[480] = -0.34427f;
      sa[481] = -0.2503922f;
      sa[482] = -0.30619f;
      sa[483] = 0.26737893f;
      sa[484] = 0.36831892f;
      sa[485] = 0.26215875f;
      sa[486] = 0.10935928f;
      sa[487] = -0.17907928f;
      sa[488] = -0.21896876f;
      sa[489] = 0.16253386f;
      sa[490] = 0.039230354f;
      sa[491] = -0.08915721f;
      sa[492] = 0.24030331f;
      sa[493] = 0.31059095f;
      sa[494] = -0.22729138f;
      sa[495] = 0.33948994f;
      sa[496] = -0.044500466f;
      sa[497] = 0.0684223f;
      sa[498] = 0.1510985f;
      sa[499] = 0.22050679f;
      sa[500] = 0.024879696f;
      sa[501] = 0.10255788f;
      sa[502] = 0.3767648f;
      sa[503] = 0.15295036f;
      sa[504] = -0.20839263f;
      sa[505] = -0.09383f;
      sa[506] = 0.5764321f;
      sa[507] = -0.40649357f;
      sa[508] = 0.13476953f;
      sa[509] = 0.28488618f;
      sa[510] = 0.3126535f;
      sa[511] = -0.13175073f;
      sa[512] = 0.027193613f;
      sa[513] = 0.040090967f;
      sa[514] = 0.21139635f;
      sa[515] = 0.233101f;
      sa[516] = 0.071964405f;
      sa[517] = 0.1445683f;
      sa[518] = 0.19713415f;
      sa[519] = -0.12104871f;
      sa[520] = 0.39591235f;
      sa[521] = 0.22960784f;
      sa[522] = 0.058809154f;
      sa[523] = 0.12245444f;
      sa[524] = 0.23874496f;
      sa[525] = 0.21113783f;
      sa[526] = 0.124507554f;
      sa[527] = -0.01960374f;
      sa[528] = 0.14011422f;
      sa[529] = 0.06960097f;
      sa[530] = -0.23296499f;
      sa[531] = -0.12437012f;
      sa[532] = 0.15641841f;
      sa[533] = 0.09185096f;
      sa[534] = 0.15475011f;
      sa[535] = -0.060827557f;
      sa[536] = 0.08185425f;
      sa[537] = 0.16711788f;
      sa[538] = -0.014057273f;
      sa[539] = 0.16695757f;
      sa[540] = -0.2965436f;
      sa[541] = -0.20973355f;
      sa[542] = -0.34049472f;
      sa[543] = -0.28286192f;
      sa[544] = 0.1354705f;
      sa[545] = 0.091730416f;
      sa[546] = -0.003060136f;
      sa[547] = 0.3776103f;
      sa[548] = -0.007700191f;
      sa[549] = 0.31793734f;
      sa[550] = 0.15976231f;
      sa[551] = -0.16588156f;
      sa[552] = 0.012614719f;
      sa[553] = -0.107114896f;
      sa[554] = -0.1877996f;
      sa[555] = -0.1467704f;
      sa[556] = -0.4314098f;
      sa[557] = -0.14201786f;
      sa[558] = -4.686454E-5f;
      sa[559] = 0.06997773f;
      sa[560] = -0.3934407f;
      sa[561] = -0.1565423f;
      sa[562] = 0.16741416f;
      sa[563] = -0.047461186f;
      sa[564] = 0.21461438f;
      sa[565] = 0.10213249f;
      sa[566] = 0.46266517f;
      sa[567] = 0.107789785f;
      sa[568] = -0.16615525f;
      sa[569] = -0.009975708f;
      sa[570] = -0.09176571f;
      sa[571] = -0.0787715f;
      sa[572] = -0.06019341f;
      sa[573] = 0.012308762f;
      sa[574] = 0.49253634f;
      sa[575] = -0.085069f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_11_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.41715735f;
      sa[1] = 0.18280855f;
      sa[2] = -0.17812268f;
      sa[3] = 0.013898698f;
      sa[4] = 0.12792554f;
      sa[5] = 0.08632776f;
      sa[6] = 0.32635698f;
      sa[7] = 0.44823894f;
      sa[8] = -0.22113803f;
      sa[9] = 0.25499743f;
      sa[10] = -0.26320893f;
      sa[11] = 0.24790722f;
      sa[12] = -0.050138187f;
      sa[13] = -0.018929143f;
      sa[14] = -0.2441058f;
      sa[15] = 0.37121442f;
      sa[16] = 0.3444429f;
      sa[17] = -0.11795981f;
      sa[18] = -0.051720276f;
      sa[19] = 0.028700486f;
      sa[20] = 0.26726893f;
      sa[21] = 0.046486758f;
      sa[22] = -0.13188899f;
      sa[23] = 0.3310367f;
      sa[24] = -0.40688974f;
      sa[25] = 0.32218543f;
      sa[26] = -0.08099606f;
      sa[27] = 0.4753305f;
      sa[28] = -0.48979947f;
      sa[29] = -0.31802815f;
      sa[30] = 0.023132293f;
      sa[31] = -0.36522466f;
      sa[32] = -0.34549296f;
      sa[33] = -0.54148006f;
      sa[34] = -0.03274243f;
      sa[35] = 0.25987405f;
      sa[36] = -0.1907668f;
      sa[37] = -0.08852096f;
      sa[38] = 0.06462125f;
      sa[39] = 0.04679272f;
      sa[40] = -0.2538747f;
      sa[41] = -0.33216107f;
      sa[42] = -0.3725088f;
      sa[43] = -0.44863042f;
      sa[44] = -0.025895542f;
      sa[45] = -0.35871115f;
      sa[46] = 0.3079969f;
      sa[47] = 0.35691786f;
      sa[48] = -0.3699311f;
      sa[49] = -0.2439288f;
      sa[50] = 0.1546768f;
      sa[51] = -0.1817129f;
      sa[52] = 0.16644964f;
      sa[53] = 0.29689127f;
      sa[54] = -0.068071544f;
      sa[55] = 0.67376053f;
      sa[56] = -0.32709637f;
      sa[57] = -0.36683944f;
      sa[58] = 0.09690772f;
      sa[59] = 0.09093294f;
      sa[60] = 0.43579146f;
      sa[61] = -0.128578f;
      sa[62] = -0.12959875f;
      sa[63] = 0.22060649f;
      sa[64] = 0.3825422f;
      sa[65] = -0.15955657f;
      sa[66] = 0.02506551f;
      sa[67] = 0.45024943f;
      sa[68] = 0.2808944f;
      sa[69] = -0.2864021f;
      sa[70] = -0.31811067f;
      sa[71] = -0.1478849f;
      sa[72] = -0.36573946f;
      sa[73] = 0.30144638f;
      sa[74] = 0.4582869f;
      sa[75] = -0.11890767f;
      sa[76] = 0.2000616f;
      sa[77] = 0.16126141f;
      sa[78] = -0.3963746f;
      sa[79] = 0.33182025f;
      sa[80] = -0.19876035f;
      sa[81] = 0.039463848f;
      sa[82] = 0.2117483f;
      sa[83] = -0.2057444f;
      sa[84] = -0.44928107f;
      sa[85] = -0.36409214f;
      sa[86] = 0.048011057f;
      sa[87] = 0.26096654f;
      sa[88] = -0.45596248f;
      sa[89] = -0.19938904f;
      sa[90] = -0.34224558f;
      sa[91] = 0.4018902f;
      sa[92] = -0.084257826f;
      sa[93] = 0.06274164f;
      sa[94] = -0.43158782f;
      sa[95] = -0.12989192f;
      sa[96] = -0.3027733f;
      sa[97] = -0.023869675f;
      sa[98] = -0.0718971f;
      sa[99] = 0.0884621f;
      sa[100] = -0.3988872f;
      sa[101] = -0.12142198f;
      sa[102] = 0.36073607f;
      sa[103] = 0.14400612f;
      sa[104] = -0.17474574f;
      sa[105] = -0.2111184f;
      sa[106] = 0.23406278f;
      sa[107] = 0.4004129f;
      sa[108] = 0.13756804f;
      sa[109] = -0.0042424235f;
      sa[110] = 0.09544192f;
      sa[111] = -0.2663641f;
      sa[112] = -0.23667079f;
      sa[113] = -0.120560326f;
      sa[114] = 0.1326613f;
      sa[115] = -0.31727615f;
      sa[116] = 0.22298416f;
      sa[117] = 0.0027619381f;
      sa[118] = -0.40157893f;
      sa[119] = -0.20099744f;
      sa[120] = -0.22186702f;
      sa[121] = 0.13390765f;
      sa[122] = 0.042841602f;
      sa[123] = 0.08111295f;
      sa[124] = -0.14530222f;
      sa[125] = 0.33246756f;
      sa[126] = -0.32291526f;
      sa[127] = 0.24215674f;
      sa[128] = -0.31189373f;
      sa[129] = 0.09871948f;
      sa[130] = -0.10192574f;
      sa[131] = -0.08879244f;
      sa[132] = -0.019559382f;
      sa[133] = 0.17293799f;
      sa[134] = 0.0864857f;
      sa[135] = -0.50162154f;
      sa[136] = 0.12521225f;
      sa[137] = -0.38778365f;
      sa[138] = 0.40296674f;
      sa[139] = 0.29066363f;
      sa[140] = 0.020260284f;
      sa[141] = -0.02651968f;
      sa[142] = -0.002086248f;
      sa[143] = -0.21358754f;
      sa[144] = 0.2610833f;
      sa[145] = -0.27262688f;
      sa[146] = 0.16459632f;
      sa[147] = -0.12672828f;
      sa[148] = -0.39140365f;
      sa[149] = 0.37054658f;
      sa[150] = -0.3214748f;
      sa[151] = -0.7612905f;
      sa[152] = 0.51317286f;
      sa[153] = -0.025475135f;
      sa[154] = 0.5478902f;
      sa[155] = -0.46444714f;
      sa[156] = -0.30946848f;
      sa[157] = -0.3291509f;
      sa[158] = 0.03027162f;
      sa[159] = -0.26444367f;
      sa[160] = 0.4109549f;
      sa[161] = -0.36950114f;
      sa[162] = 0.47016782f;
      sa[163] = -0.3636899f;
      sa[164] = 0.12325331f;
      sa[165] = -0.110198885f;
      sa[166] = 0.36313245f;
      sa[167] = -0.2737198f;
      sa[168] = 0.28593406f;
      sa[169] = -0.474792f;
      sa[170] = 0.39613461f;
      sa[171] = 0.25716683f;
      sa[172] = 0.535113f;
      sa[173] = 0.5292316f;
      sa[174] = 0.05856875f;
      sa[175] = 0.041323356f;
      sa[176] = -0.07702313f;
      sa[177] = 0.5732068f;
      sa[178] = -0.19619878f;
      sa[179] = 0.026900802f;
      sa[180] = -0.2277657f;
      sa[181] = -0.15442011f;
      sa[182] = -0.014370273f;
      sa[183] = 0.25581837f;
      sa[184] = 0.49295926f;
      sa[185] = 0.33731276f;
      sa[186] = -0.08308221f;
      sa[187] = -0.14317258f;
      sa[188] = -0.053807482f;
      sa[189] = -0.2072848f;
      sa[190] = -0.14006567f;
      sa[191] = -0.082460254f;
      sa[192] = -0.07827202f;
      sa[193] = 0.17842191f;
      sa[194] = -0.27573556f;
      sa[195] = -0.23259664f;
      sa[196] = 0.20777118f;
      sa[197] = -0.16787273f;
      sa[198] = 0.06597541f;
      sa[199] = 0.32363796f;
      sa[200] = 0.05042021f;
      sa[201] = 0.30824995f;
      sa[202] = 0.3910873f;
      sa[203] = -0.48306122f;
      sa[204] = 0.1657731f;
      sa[205] = 0.35967007f;
      sa[206] = -0.13142551f;
      sa[207] = 0.19203536f;
      sa[208] = -0.26845402f;
      sa[209] = 0.044385243f;
      sa[210] = -0.12945728f;
      sa[211] = -0.34973264f;
      sa[212] = -0.44375414f;
      sa[213] = -0.049227193f;
      sa[214] = -0.34710976f;
      sa[215] = -0.23971435f;
      sa[216] = 0.031036261f;
      sa[217] = 0.23473576f;
      sa[218] = -0.01882284f;
      sa[219] = 0.055962157f;
      sa[220] = 0.11900938f;
      sa[221] = -0.0606067f;
      sa[222] = -0.3724742f;
      sa[223] = -0.43046734f;
      sa[224] = 0.3923422f;
      sa[225] = -0.031278115f;
      sa[226] = -0.07007859f;
      sa[227] = 0.16842945f;
      sa[228] = -0.050095476f;
      sa[229] = -0.31888083f;
      sa[230] = -0.28798917f;
      sa[231] = -0.2894219f;
      sa[232] = 0.49899837f;
      sa[233] = -0.16904742f;
      sa[234] = -0.5256738f;
      sa[235] = -0.0011183249f;
      sa[236] = -0.43043807f;
      sa[237] = 0.6027766f;
      sa[238] = 0.2784433f;
      sa[239] = -0.095627785f;
      sa[240] = -0.1346611f;
      sa[241] = -0.64716667f;
      sa[242] = -0.25325692f;
      sa[243] = 0.3890033f;
      sa[244] = 0.19862786f;
      sa[245] = 0.28253856f;
      sa[246] = 0.29163855f;
      sa[247] = -0.9333354f;
      sa[248] = -0.19953413f;
      sa[249] = 0.14764398f;
      sa[250] = 0.17635925f;
      sa[251] = 0.29093325f;
      sa[252] = 0.14964852f;
      sa[253] = -0.34229925f;
      sa[254] = 0.40628803f;
      sa[255] = -0.022753492f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_11_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_ReLU_11_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.1354757f;
      sa[1] = -1.6605705f;
      sa[2] = -1.7289877f;
      sa[3] = 1.3254299f;
      sa[4] = 0.23926781f;
      sa[5] = -0.15969811f;
      sa[6] = -1.7156944f;
      sa[7] = 1.4859589f;
      sa[8] = 1.6715384f;
      sa[9] = 0.2131663f;
      sa[10] = 1.6867877f;
      sa[11] = 1.0869055f;
      sa[12] = 1.7123233f;
      sa[13] = -0.56089145f;
      sa[14] = -1.9919907f;
      sa[15] = -0.85890377f;
      sa[16] = 0.6939f;
      sa[17] = -0.78761154f;
      sa[18] = -1.4863578f;
      sa[19] = -0.97031754f;
      sa[20] = -1.9328027f;
      sa[21] = 0.31120184f;
      sa[22] = -1.945815f;
      sa[23] = -0.6080377f;
      sa[24] = -0.47849315f;
      sa[25] = 1.9767805f;
      sa[26] = -0.3172985f;
      sa[27] = 1.169068f;
      sa[28] = 1.1465079f;
      sa[29] = -0.69971883f;
      sa[30] = 0.17659605f;
      sa[31] = 0.18750365f;
      sa[32] = 0.39137006f;
      sa[33] = 0.069271594f;
      sa[34] = -0.66073877f;
      sa[35] = 0.8618518f;
      sa[36] = 0.50723165f;
      sa[37] = -1.3219113f;
      sa[38] = 0.5495786f;
      sa[39] = -0.2700373f;
      sa[40] = 0.23998475f;
      sa[41] = -0.63868815f;
      sa[42] = 0.5244901f;
      sa[43] = -0.096453525f;
      sa[44] = 0.86986774f;
      sa[45] = -1.9685599f;
      sa[46] = -2.2976556f;
      sa[47] = 0.05844307f;
      sa[48] = 1.6219144f;
      sa[49] = -0.15778622f;
      sa[50] = -0.46598864f;
      sa[51] = 1.8192936f;
      sa[52] = -1.7026061f;
      sa[53] = 0.9213128f;
      sa[54] = 1.7584667f;
      sa[55] = 1.0366837f;
      sa[56] = -0.6623444f;
      sa[57] = -0.3826359f;
      sa[58] = 0.9434662f;
      sa[59] = 0.81461805f;
      sa[60] = -1.3878701f;
      sa[61] = 0.89602023f;
      sa[62] = -0.38011977f;
      sa[63] = -0.8862613f;
      sa[64] = 1.0143763f;
      sa[65] = -0.79656875f;
      sa[66] = -1.6980753f;
      sa[67] = -0.034402423f;
      sa[68] = 0.9662774f;
      sa[69] = -1.3457712f;
      sa[70] = -1.5704225f;
      sa[71] = 0.0036278025f;
      sa[72] = -1.0115491f;
      sa[73] = -1.4376934f;
      sa[74] = -1.3763292f;
      sa[75] = 1.428104f;
      sa[76] = 1.9576714f;
      sa[77] = -0.5932217f;
      sa[78] = -1.3762977f;
      sa[79] = -0.35160437f;
      sa[80] = 0.47703135f;
      sa[81] = -1.7146435f;
      sa[82] = -0.18099308f;
      sa[83] = -1.5413141f;
      sa[84] = 1.546339f;
      sa[85] = 1.0085149f;
      sa[86] = -2.0045438f;
      sa[87] = 0.9932871f;
      sa[88] = -1.6346556f;
      sa[89] = -1.0345494f;
      sa[90] = 0.27423775f;
      sa[91] = 0.0800482f;
      sa[92] = 1.2119887f;
      sa[93] = 1.8142802f;
      sa[94] = 1.5737109f;
      sa[95] = 0.65483147f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_11 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_11_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_11_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_11_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_ReLU_11_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


