/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:47:34.620+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_05

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_05 > h2o_nn_16x16x6_Tanh_05.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_05.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_05", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_05 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_05_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_05_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_05_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_05_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_05_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_05_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_05.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_05_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.29347826086956524,0.13043478260869565,0.14130434782608695,0.29347826086956524,0.14130434782608695};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_05() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(4449766594023818624L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_05_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_05_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_05_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_05_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_05_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_05_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_05_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_05_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_05_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_05_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_05_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.03243176745009313;
      sa[1] = 0.01261291137757022;
      sa[2] = 0.03262922072678938;
      sa[3] = 0.003431825309987679;
      sa[4] = 0.015453324451912035;
      sa[5] = -0.021726273597904217;
      sa[6] = 0.013458288697991618;
      sa[7] = 0.029255157781837956;
      sa[8] = -0.03643674633119162;
      sa[9] = 0.005712340319320071;
      sa[10] = 0.03244986639106487;
      sa[11] = 0.005063803590225279;
      sa[12] = 0.05793514025495695;
      sa[13] = 0.029434114178364095;
      sa[14] = -0.050495210566740396;
      sa[15] = 0.021496455349137755;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_05_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_05_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.01790175076478197;
      sa[1] = -0.03295931043168155;
      sa[2] = -0.008928891955038334;
      sa[3] = 0.03442299908896628;
      sa[4] = 0.039457482172952744;
      sa[5] = -0.0042323251097693;
      sa[6] = 0.0060277358880635006;
      sa[7] = 0.04745215102440502;
      sa[8] = 0.024873847288651788;
      sa[9] = -0.038900374097527605;
      sa[10] = 0.03205544790978469;
      sa[11] = 0.02621685513480601;
      sa[12] = 0.002301588169840098;
      sa[13] = 0.012020896359520786;
      sa[14] = -0.034142038064429676;
      sa[15] = -0.04621052389589933;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_05_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_05_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.03992339709908202;
      sa[1] = -0.04895880346950006;
      sa[2] = -0.024893388309538425;
      sa[3] = 0.0014178595291690248;
      sa[4] = -0.007592762683966784;
    }
  }
}
class h2o_nn_16x16x6_Tanh_05_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_05_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_05_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.0598015f;
      sa[1] = 0.27280217f;
      sa[2] = 0.2123488f;
      sa[3] = 0.19437551f;
      sa[4] = -0.1904421f;
      sa[5] = -0.19410576f;
      sa[6] = -0.040345035f;
      sa[7] = 0.2770913f;
      sa[8] = 0.13314055f;
      sa[9] = -0.16837335f;
      sa[10] = -0.16335414f;
      sa[11] = -0.20675874f;
      sa[12] = 0.09123174f;
      sa[13] = -0.2847279f;
      sa[14] = -0.17982353f;
      sa[15] = 5.6419794E-6f;
      sa[16] = 0.12090173f;
      sa[17] = 0.18727314f;
      sa[18] = -0.2619183f;
      sa[19] = 0.18555452f;
      sa[20] = 0.255204f;
      sa[21] = -0.3360398f;
      sa[22] = 0.2647915f;
      sa[23] = -0.18574423f;
      sa[24] = 0.32151383f;
      sa[25] = 0.20523627f;
      sa[26] = -0.3174213f;
      sa[27] = 0.32594404f;
      sa[28] = 0.25615832f;
      sa[29] = -0.30455187f;
      sa[30] = -0.1871987f;
      sa[31] = 0.17326751f;
      sa[32] = 0.21042435f;
      sa[33] = -0.30537876f;
      sa[34] = 0.09700309f;
      sa[35] = -0.09909598f;
      sa[36] = 0.053611543f;
      sa[37] = 0.31347957f;
      sa[38] = -0.08730999f;
      sa[39] = 0.1790876f;
      sa[40] = 0.03483229f;
      sa[41] = -0.095791444f;
      sa[42] = -0.15888989f;
      sa[43] = 0.038075272f;
      sa[44] = 0.22526303f;
      sa[45] = -0.25246435f;
      sa[46] = 0.032908075f;
      sa[47] = 0.012448637f;
      sa[48] = 0.25647348f;
      sa[49] = 0.27755034f;
      sa[50] = 0.21838884f;
      sa[51] = -0.30533755f;
      sa[52] = -0.07459851f;
      sa[53] = 0.267891f;
      sa[54] = 0.2483935f;
      sa[55] = 0.01185222f;
      sa[56] = -0.17206424f;
      sa[57] = -0.3021148f;
      sa[58] = 0.29743284f;
      sa[59] = -0.19420056f;
      sa[60] = -0.2835241f;
      sa[61] = 0.19490868f;
      sa[62] = 0.13643272f;
      sa[63] = 0.0076717963f;
      sa[64] = 0.15676942f;
      sa[65] = 0.13635184f;
      sa[66] = 0.017196206f;
      sa[67] = 0.161245f;
      sa[68] = -0.071084216f;
      sa[69] = 0.18650371f;
      sa[70] = -0.15469787f;
      sa[71] = 0.33612895f;
      sa[72] = -0.12214115f;
      sa[73] = 0.21129888f;
      sa[74] = -0.23073862f;
      sa[75] = 0.084532894f;
      sa[76] = -0.20527491f;
      sa[77] = -0.06000032f;
      sa[78] = -0.062489036f;
      sa[79] = 0.14995368f;
      sa[80] = -0.2011083f;
      sa[81] = -0.14703587f;
      sa[82] = -0.022204744f;
      sa[83] = 0.10851072f;
      sa[84] = -0.009902515f;
      sa[85] = -0.18252937f;
      sa[86] = 0.17454527f;
      sa[87] = 0.26966643f;
      sa[88] = 0.24085455f;
      sa[89] = 0.038475353f;
      sa[90] = -0.10214878f;
      sa[91] = 0.14102118f;
      sa[92] = 0.1294446f;
      sa[93] = -0.21370946f;
      sa[94] = -0.17861377f;
      sa[95] = -0.26035902f;
      sa[96] = 0.115723945f;
      sa[97] = 0.03870095f;
      sa[98] = 0.25207183f;
      sa[99] = -0.1206227f;
      sa[100] = -0.04481126f;
      sa[101] = -0.1904207f;
      sa[102] = -0.26917064f;
      sa[103] = -0.08663299f;
      sa[104] = -0.009255936f;
      sa[105] = -0.15333344f;
      sa[106] = -0.24394499f;
      sa[107] = 0.13491756f;
      sa[108] = 0.20407782f;
      sa[109] = -0.24147168f;
      sa[110] = -0.1897739f;
      sa[111] = 0.17466496f;
      sa[112] = 0.14290686f;
      sa[113] = 0.04520298f;
      sa[114] = -0.1655664f;
      sa[115] = -0.05294536f;
      sa[116] = -0.24295872f;
      sa[117] = -0.020807998f;
      sa[118] = -0.2671235f;
      sa[119] = -0.19654794f;
      sa[120] = 0.23243272f;
      sa[121] = 0.25022525f;
      sa[122] = 0.3309886f;
      sa[123] = 0.28117695f;
      sa[124] = 0.30247387f;
      sa[125] = 0.30182895f;
      sa[126] = -0.30871782f;
      sa[127] = -0.19181678f;
      sa[128] = 0.08000637f;
      sa[129] = 0.17314775f;
      sa[130] = -0.12899694f;
      sa[131] = 0.33164024f;
      sa[132] = 0.19384602f;
      sa[133] = -0.31511486f;
      sa[134] = 0.10096617f;
      sa[135] = -0.2607402f;
      sa[136] = -0.29416102f;
      sa[137] = -0.020020613f;
      sa[138] = 0.1330249f;
      sa[139] = -0.09870993f;
      sa[140] = -0.079950035f;
      sa[141] = -0.1627206f;
      sa[142] = 0.18168683f;
      sa[143] = -0.33238658f;
      sa[144] = 0.31644225f;
      sa[145] = -0.15112768f;
      sa[146] = -0.28400674f;
      sa[147] = 0.20834537f;
      sa[148] = 0.19527002f;
      sa[149] = 0.21651599f;
      sa[150] = 0.32792032f;
      sa[151] = -0.2623859f;
      sa[152] = 0.06075172f;
      sa[153] = 0.29971054f;
      sa[154] = 0.26667228f;
      sa[155] = -0.20124602f;
      sa[156] = 0.14863905f;
      sa[157] = -0.19701818f;
      sa[158] = 0.10455736f;
      sa[159] = 0.10760796f;
      sa[160] = 0.09340374f;
      sa[161] = 0.23464885f;
      sa[162] = -0.18322161f;
      sa[163] = -0.062434524f;
      sa[164] = 0.26560265f;
      sa[165] = -0.024451954f;
      sa[166] = -0.066674665f;
      sa[167] = -0.083921134f;
      sa[168] = 0.20132756f;
      sa[169] = 0.34203663f;
      sa[170] = 0.023660569f;
      sa[171] = -0.045714535f;
      sa[172] = -0.05825643f;
      sa[173] = -0.1463162f;
      sa[174] = -0.008957035f;
      sa[175] = -0.25352657f;
      sa[176] = -0.03459812f;
      sa[177] = -0.03980503f;
      sa[178] = -0.058127288f;
      sa[179] = 0.08472158f;
      sa[180] = -0.030219555f;
      sa[181] = -0.29862446f;
      sa[182] = -0.1514331f;
      sa[183] = 0.08071762f;
      sa[184] = 0.30380312f;
      sa[185] = 0.18280075f;
      sa[186] = -0.3306318f;
      sa[187] = 0.074964054f;
      sa[188] = -0.003975103f;
      sa[189] = 0.23092085f;
      sa[190] = 0.039646056f;
      sa[191] = -0.03327934f;
      sa[192] = -0.15194638f;
      sa[193] = 0.24485174f;
      sa[194] = 0.08481274f;
      sa[195] = 0.27933013f;
      sa[196] = 0.2891152f;
      sa[197] = -0.049826507f;
      sa[198] = 0.10640587f;
      sa[199] = -0.07304724f;
      sa[200] = 0.008012573f;
      sa[201] = -0.31933188f;
      sa[202] = 0.13434124f;
      sa[203] = -0.044073395f;
      sa[204] = -0.21445145f;
      sa[205] = 0.24538079f;
      sa[206] = 0.2243225f;
      sa[207] = 0.16205233f;
      sa[208] = -0.30479226f;
      sa[209] = -0.10486835f;
      sa[210] = -0.3222836f;
      sa[211] = -0.3043286f;
      sa[212] = 0.2454791f;
      sa[213] = -0.2996014f;
      sa[214] = -0.082196265f;
      sa[215] = 0.069206804f;
      sa[216] = 0.1255292f;
      sa[217] = 0.19656458f;
      sa[218] = -0.2054773f;
      sa[219] = 0.25672528f;
      sa[220] = -0.24761967f;
      sa[221] = 0.043795954f;
      sa[222] = 0.24157785f;
      sa[223] = 0.062778816f;
      sa[224] = 0.13239545f;
      sa[225] = 0.32172504f;
      sa[226] = -0.24329151f;
      sa[227] = 0.33197248f;
      sa[228] = 0.12856005f;
      sa[229] = 0.095562376f;
      sa[230] = 0.27925336f;
      sa[231] = -0.27691615f;
      sa[232] = -0.27141458f;
      sa[233] = 0.07848568f;
      sa[234] = 0.16612418f;
      sa[235] = -0.3103334f;
      sa[236] = -0.041388538f;
      sa[237] = -0.25054348f;
      sa[238] = -0.23964098f;
      sa[239] = 0.14085741f;
      sa[240] = -0.010092676f;
      sa[241] = -0.24631396f;
      sa[242] = -0.0865411f;
      sa[243] = -0.2649506f;
      sa[244] = -0.23089132f;
      sa[245] = -0.149172f;
      sa[246] = -0.2920088f;
      sa[247] = -0.0689181f;
      sa[248] = 0.24443355f;
      sa[249] = 0.2679748f;
      sa[250] = -0.2081165f;
      sa[251] = -0.08796938f;
      sa[252] = -0.3075335f;
      sa[253] = -0.31081608f;
      sa[254] = -0.27386972f;
      sa[255] = 0.18218662f;
      sa[256] = -0.19239679f;
      sa[257] = 0.30159193f;
      sa[258] = -0.27422854f;
      sa[259] = -0.113276355f;
      sa[260] = -0.23420516f;
      sa[261] = -0.11998941f;
      sa[262] = -0.14655975f;
      sa[263] = 0.25671387f;
      sa[264] = -0.15784635f;
      sa[265] = 0.07448294f;
      sa[266] = -0.29891255f;
      sa[267] = -0.2363827f;
      sa[268] = 0.15099402f;
      sa[269] = -0.18768427f;
      sa[270] = -0.026634775f;
      sa[271] = 0.25113496f;
      sa[272] = -0.08320557f;
      sa[273] = -0.11850685f;
      sa[274] = 0.14351201f;
      sa[275] = 0.021493567f;
      sa[276] = 0.10269123f;
      sa[277] = -0.25358284f;
      sa[278] = -0.12874144f;
      sa[279] = 0.24105175f;
      sa[280] = -0.17162098f;
      sa[281] = 0.32569984f;
      sa[282] = -0.08979671f;
      sa[283] = -0.017313324f;
      sa[284] = -0.011014962f;
      sa[285] = -0.20941275f;
      sa[286] = 0.3361222f;
      sa[287] = 0.18581852f;
      sa[288] = -0.24454518f;
      sa[289] = -0.17483567f;
      sa[290] = -0.09582104f;
      sa[291] = 0.054582074f;
      sa[292] = 0.13236994f;
      sa[293] = -0.10996472f;
      sa[294] = 0.09133953f;
      sa[295] = 0.11840771f;
      sa[296] = 0.21859273f;
      sa[297] = 0.22854209f;
      sa[298] = -0.03531986f;
      sa[299] = -0.015767176f;
      sa[300] = -0.013643492f;
      sa[301] = -0.07425264f;
      sa[302] = 0.18128559f;
      sa[303] = 0.023733458f;
      sa[304] = -0.21746562f;
      sa[305] = -0.022296611f;
      sa[306] = 0.22393379f;
      sa[307] = -0.19142982f;
      sa[308] = 0.08077969f;
      sa[309] = 0.15160859f;
      sa[310] = 0.30670574f;
      sa[311] = 0.3094759f;
      sa[312] = -0.21012917f;
      sa[313] = -0.17588452f;
      sa[314] = -0.17668314f;
      sa[315] = -0.035211705f;
      sa[316] = -0.039689578f;
      sa[317] = -0.11295779f;
      sa[318] = 0.08336658f;
      sa[319] = 0.2818379f;
      sa[320] = -0.010527658f;
      sa[321] = 0.1862877f;
      sa[322] = 0.18693979f;
      sa[323] = -0.21936157f;
      sa[324] = -0.013664208f;
      sa[325] = 0.32917127f;
      sa[326] = -0.2696215f;
      sa[327] = 0.011212531f;
      sa[328] = -0.059313767f;
      sa[329] = 0.26796323f;
      sa[330] = -0.20004044f;
      sa[331] = 0.0075341887f;
      sa[332] = -0.302734f;
      sa[333] = 0.15844294f;
      sa[334] = -0.08028573f;
      sa[335] = 0.24767025f;
      sa[336] = -0.16607203f;
      sa[337] = -0.16974826f;
      sa[338] = 0.29655913f;
      sa[339] = -0.21796398f;
      sa[340] = -0.3220928f;
      sa[341] = -0.2576414f;
      sa[342] = 0.18515278f;
      sa[343] = -0.09182958f;
      sa[344] = -0.17404026f;
      sa[345] = 0.23105668f;
      sa[346] = 0.22644997f;
      sa[347] = -0.16880646f;
      sa[348] = 0.33735067f;
      sa[349] = -0.2967434f;
      sa[350] = -0.26338634f;
      sa[351] = 0.16172127f;
      sa[352] = 0.23016629f;
      sa[353] = -0.021398397f;
      sa[354] = 0.10680444f;
      sa[355] = 0.14967915f;
      sa[356] = -0.12303658f;
      sa[357] = 0.25735977f;
      sa[358] = -0.3259509f;
      sa[359] = 0.028359126f;
      sa[360] = 0.13476728f;
      sa[361] = -0.03720864f;
      sa[362] = -0.1980328f;
      sa[363] = 0.24241151f;
      sa[364] = -0.11702224f;
      sa[365] = -0.21939154f;
      sa[366] = 0.013597655f;
      sa[367] = -0.30229783f;
      sa[368] = -0.15100695f;
      sa[369] = 0.28316987f;
      sa[370] = -0.21719709f;
      sa[371] = 0.12385774f;
      sa[372] = -0.0020169427f;
      sa[373] = 0.33183095f;
      sa[374] = -0.13552566f;
      sa[375] = -0.3013789f;
      sa[376] = -0.3319097f;
      sa[377] = -0.24346818f;
      sa[378] = 0.34013283f;
      sa[379] = 0.09113887f;
      sa[380] = -0.10915635f;
      sa[381] = -0.08681755f;
      sa[382] = -0.026527267f;
      sa[383] = -0.11311528f;
      sa[384] = -0.19336256f;
      sa[385] = 0.10996161f;
      sa[386] = -0.25508198f;
      sa[387] = -0.22218923f;
      sa[388] = 0.109999724f;
      sa[389] = 0.014295876f;
      sa[390] = 0.014393293f;
      sa[391] = -0.097053766f;
      sa[392] = 0.29603603f;
      sa[393] = 0.25009263f;
      sa[394] = -0.07910707f;
      sa[395] = 0.28563133f;
      sa[396] = 0.32801116f;
      sa[397] = -0.2883663f;
      sa[398] = 0.11397636f;
      sa[399] = 0.105938666f;
      sa[400] = 0.19941473f;
      sa[401] = 0.2740698f;
      sa[402] = -0.14193001f;
      sa[403] = 0.0704742f;
      sa[404] = 0.2865407f;
      sa[405] = -0.26635915f;
      sa[406] = -0.08663455f;
      sa[407] = 0.18297337f;
      sa[408] = -0.22905795f;
      sa[409] = -0.264421f;
      sa[410] = -0.12208591f;
      sa[411] = 0.18010174f;
      sa[412] = -0.1551033f;
      sa[413] = 0.10178711f;
      sa[414] = 0.16842821f;
      sa[415] = 0.28790456f;
      sa[416] = -0.18828909f;
      sa[417] = 0.03464679f;
      sa[418] = 0.0029633166f;
      sa[419] = 0.288887f;
      sa[420] = 0.1942012f;
      sa[421] = 0.26946226f;
      sa[422] = 0.2660301f;
      sa[423] = -0.06255486f;
      sa[424] = 0.119517274f;
      sa[425] = -0.07536343f;
      sa[426] = -0.3114311f;
      sa[427] = 0.20874494f;
      sa[428] = -0.053475413f;
      sa[429] = -0.13056822f;
      sa[430] = 0.1666295f;
      sa[431] = -0.026647829f;
      sa[432] = -0.03412039f;
      sa[433] = 0.1492029f;
      sa[434] = 0.267019f;
      sa[435] = 0.034695853f;
      sa[436] = -0.27240655f;
      sa[437] = -0.2617471f;
      sa[438] = 0.0094147585f;
      sa[439] = -0.0018777715f;
      sa[440] = 0.36231825f;
      sa[441] = -0.34558925f;
      sa[442] = 0.11438487f;
      sa[443] = 0.016938157f;
      sa[444] = -0.22698502f;
      sa[445] = 0.08020203f;
      sa[446] = 0.2542855f;
      sa[447] = 0.08578625f;
      sa[448] = 0.1978715f;
      sa[449] = 0.25817403f;
      sa[450] = -0.08169993f;
      sa[451] = 0.094388686f;
      sa[452] = 0.21255329f;
      sa[453] = -0.03812333f;
      sa[454] = -0.16420951f;
      sa[455] = -0.040563073f;
      sa[456] = -0.06350378f;
      sa[457] = 0.10831889f;
      sa[458] = -0.21413067f;
      sa[459] = 0.30472267f;
      sa[460] = 0.26008552f;
      sa[461] = 0.32979122f;
      sa[462] = 0.07733929f;
      sa[463] = 0.26401633f;
      sa[464] = -0.29481354f;
      sa[465] = 0.25600353f;
      sa[466] = -0.027130054f;
      sa[467] = 0.12761082f;
      sa[468] = 0.12802058f;
      sa[469] = 0.3362352f;
      sa[470] = 0.20445219f;
      sa[471] = 0.07973542f;
      sa[472] = 0.021578623f;
      sa[473] = -0.11080231f;
      sa[474] = -0.005074743f;
      sa[475] = 0.116413556f;
      sa[476] = 0.2877768f;
      sa[477] = -0.19222118f;
      sa[478] = 0.11289595f;
      sa[479] = -0.16650774f;
      sa[480] = -0.31540114f;
      sa[481] = -0.21659805f;
      sa[482] = -0.26923698f;
      sa[483] = 0.23955703f;
      sa[484] = 0.24769574f;
      sa[485] = 0.13931459f;
      sa[486] = -0.0052680797f;
      sa[487] = -0.21315145f;
      sa[488] = -0.20199712f;
      sa[489] = 0.10033642f;
      sa[490] = 8.472261E-4f;
      sa[491] = -0.243659f;
      sa[492] = 0.23477398f;
      sa[493] = 0.28111237f;
      sa[494] = -0.23853882f;
      sa[495] = 0.19105817f;
      sa[496] = 0.010866355f;
      sa[497] = 0.085863344f;
      sa[498] = 0.19852278f;
      sa[499] = 0.2001195f;
      sa[500] = -0.019476904f;
      sa[501] = 0.14779316f;
      sa[502] = 0.22072224f;
      sa[503] = 0.015373205f;
      sa[504] = -0.20184992f;
      sa[505] = -0.2542214f;
      sa[506] = 0.20354713f;
      sa[507] = -0.050254855f;
      sa[508] = 0.075726114f;
      sa[509] = 0.22605823f;
      sa[510] = 0.16927046f;
      sa[511] = -0.019728385f;
      sa[512] = 0.062759936f;
      sa[513] = -0.10028927f;
      sa[514] = 0.2842963f;
      sa[515] = -0.22404227f;
      sa[516] = -0.0055513955f;
      sa[517] = 0.081625134f;
      sa[518] = 0.13419484f;
      sa[519] = -0.13353066f;
      sa[520] = 0.23872516f;
      sa[521] = 0.15826575f;
      sa[522] = 0.08330408f;
      sa[523] = 0.25731078f;
      sa[524] = 0.1688383f;
      sa[525] = 0.14178537f;
      sa[526] = -0.030413954f;
      sa[527] = -0.15962046f;
      sa[528] = -0.0154408375f;
      sa[529] = 0.13367991f;
      sa[530] = -0.20259589f;
      sa[531] = 0.04155003f;
      sa[532] = 0.116376996f;
      sa[533] = 0.09040269f;
      sa[534] = 0.11295098f;
      sa[535] = -0.15675235f;
      sa[536] = 0.093157455f;
      sa[537] = -0.2199461f;
      sa[538] = 0.23006825f;
      sa[539] = 0.31096157f;
      sa[540] = -0.24660735f;
      sa[541] = -0.16331406f;
      sa[542] = -0.06315067f;
      sa[543] = -0.3315576f;
      sa[544] = 0.16635579f;
      sa[545] = 0.124228776f;
      sa[546] = 0.08269903f;
      sa[547] = 0.21524717f;
      sa[548] = 0.09215179f;
      sa[549] = 0.18037842f;
      sa[550] = 0.02497461f;
      sa[551] = -0.15915057f;
      sa[552] = 0.046070054f;
      sa[553] = -0.05793901f;
      sa[554] = -0.16905566f;
      sa[555] = -0.15354669f;
      sa[556] = -0.17927067f;
      sa[557] = -0.24701922f;
      sa[558] = -0.24407247f;
      sa[559] = 0.18290327f;
      sa[560] = -0.33042613f;
      sa[561] = -0.09979709f;
      sa[562] = 0.20755085f;
      sa[563] = -0.0712098f;
      sa[564] = 0.32468292f;
      sa[565] = 0.064200245f;
      sa[566] = 0.2821726f;
      sa[567] = 0.054528937f;
      sa[568] = -0.078086935f;
      sa[569] = 0.037634708f;
      sa[570] = -0.015324426f;
      sa[571] = -0.051005885f;
      sa[572] = -0.16338268f;
      sa[573] = 0.08091298f;
      sa[574] = 0.30383918f;
      sa[575] = -0.23551135f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_05_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_05_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.35572892f;
      sa[1] = -0.033293527f;
      sa[2] = -0.14847475f;
      sa[3] = -0.24349682f;
      sa[4] = 0.02372673f;
      sa[5] = 0.052943077f;
      sa[6] = 0.2922712f;
      sa[7] = -0.14653157f;
      sa[8] = -0.24900465f;
      sa[9] = 0.1636446f;
      sa[10] = -0.06590408f;
      sa[11] = 0.11011476f;
      sa[12] = 0.069855906f;
      sa[13] = 0.032720093f;
      sa[14] = -0.29993808f;
      sa[15] = 0.33559975f;
      sa[16] = 0.4393716f;
      sa[17] = -0.113180816f;
      sa[18] = 0.01238121f;
      sa[19] = -0.11303002f;
      sa[20] = 0.32974824f;
      sa[21] = -0.018041367f;
      sa[22] = -0.30068955f;
      sa[23] = 0.24041714f;
      sa[24] = -0.3653862f;
      sa[25] = 0.09696071f;
      sa[26] = -0.081328966f;
      sa[27] = 0.4145862f;
      sa[28] = -0.3706623f;
      sa[29] = -0.111740954f;
      sa[30] = 0.13664566f;
      sa[31] = -0.16899829f;
      sa[32] = -0.31283376f;
      sa[33] = -0.3796426f;
      sa[34] = 0.008284427f;
      sa[35] = 0.37875402f;
      sa[36] = -0.08450135f;
      sa[37] = -0.033618692f;
      sa[38] = 0.01667254f;
      sa[39] = 0.26933283f;
      sa[40] = -0.20192347f;
      sa[41] = -0.38335985f;
      sa[42] = -0.29507774f;
      sa[43] = -0.36283058f;
      sa[44] = 0.007818076f;
      sa[45] = -0.35714847f;
      sa[46] = 0.34825704f;
      sa[47] = 0.37688306f;
      sa[48] = -0.381565f;
      sa[49] = -0.24522652f;
      sa[50] = 0.09798695f;
      sa[51] = -0.0831328f;
      sa[52] = 0.19855875f;
      sa[53] = 0.24653658f;
      sa[54] = -0.07957789f;
      sa[55] = 0.31721783f;
      sa[56] = -0.2604338f;
      sa[57] = -0.30562377f;
      sa[58] = 0.059071116f;
      sa[59] = -0.0330609f;
      sa[60] = 0.35211992f;
      sa[61] = -0.17402892f;
      sa[62] = -0.09288202f;
      sa[63] = 0.19558334f;
      sa[64] = 0.39799514f;
      sa[65] = -0.1670142f;
      sa[66] = 0.15949528f;
      sa[67] = 0.4184622f;
      sa[68] = 0.20645007f;
      sa[69] = -0.26444125f;
      sa[70] = -0.41390145f;
      sa[71] = -0.1385299f;
      sa[72] = -0.35103327f;
      sa[73] = 0.31058586f;
      sa[74] = 0.34616742f;
      sa[75] = -0.0063856966f;
      sa[76] = 0.24946299f;
      sa[77] = 0.13859944f;
      sa[78] = -0.34356248f;
      sa[79] = 0.26501572f;
      sa[80] = -0.22976415f;
      sa[81] = 0.08193241f;
      sa[82] = 0.2175282f;
      sa[83] = -0.16000757f;
      sa[84] = -0.4590657f;
      sa[85] = -0.34897286f;
      sa[86] = 0.067979075f;
      sa[87] = 0.36257014f;
      sa[88] = -0.40081045f;
      sa[89] = -0.13113847f;
      sa[90] = -0.2586326f;
      sa[91] = 0.41128606f;
      sa[92] = -0.09898408f;
      sa[93] = 0.061496764f;
      sa[94] = -0.4118105f;
      sa[95] = -0.05079943f;
      sa[96] = -0.30399355f;
      sa[97] = 0.05973915f;
      sa[98] = -0.020146763f;
      sa[99] = 0.0916679f;
      sa[100] = -0.3403755f;
      sa[101] = -0.11315219f;
      sa[102] = 0.33124387f;
      sa[103] = 0.041409995f;
      sa[104] = -0.039501723f;
      sa[105] = -0.1672455f;
      sa[106] = 0.3711735f;
      sa[107] = 0.32751912f;
      sa[108] = 0.19724852f;
      sa[109] = 0.031117007f;
      sa[110] = 0.20198259f;
      sa[111] = -0.1900223f;
      sa[112] = -0.32576796f;
      sa[113] = 0.05934456f;
      sa[114] = 0.043637823f;
      sa[115] = -0.078205556f;
      sa[116] = 0.2935762f;
      sa[117] = 0.030791262f;
      sa[118] = -0.3508395f;
      sa[119] = -0.20688209f;
      sa[120] = -0.07251778f;
      sa[121] = 0.30049363f;
      sa[122] = -0.0035833025f;
      sa[123] = 0.104104884f;
      sa[124] = -0.20687944f;
      sa[125] = 0.19329298f;
      sa[126] = -0.25838637f;
      sa[127] = 0.1388564f;
      sa[128] = -0.26616037f;
      sa[129] = 0.21624595f;
      sa[130] = -0.10115716f;
      sa[131] = 0.23238987f;
      sa[132] = 0.10794606f;
      sa[133] = 0.17581812f;
      sa[134] = 0.21320459f;
      sa[135] = -0.31925812f;
      sa[136] = 0.1554737f;
      sa[137] = -0.13567491f;
      sa[138] = 0.0021524956f;
      sa[139] = 0.32370308f;
      sa[140] = -0.14304489f;
      sa[141] = -0.02641395f;
      sa[142] = 0.03595848f;
      sa[143] = -0.23533672f;
      sa[144] = 0.2601554f;
      sa[145] = -0.21663003f;
      sa[146] = 0.033182226f;
      sa[147] = -0.081934415f;
      sa[148] = -0.22794594f;
      sa[149] = 0.29603168f;
      sa[150] = -0.25027394f;
      sa[151] = -0.43159223f;
      sa[152] = 0.42207056f;
      sa[153] = -0.13629979f;
      sa[154] = 0.3862545f;
      sa[155] = -0.4367062f;
      sa[156] = -0.38519567f;
      sa[157] = -0.30324522f;
      sa[158] = -0.078988f;
      sa[159] = -0.19274734f;
      sa[160] = 0.32521874f;
      sa[161] = -0.27186114f;
      sa[162] = 0.40593654f;
      sa[163] = -0.2003932f;
      sa[164] = 0.17696479f;
      sa[165] = -0.13635793f;
      sa[166] = 0.38266313f;
      sa[167] = -0.37791398f;
      sa[168] = 0.29319015f;
      sa[169] = -0.39411095f;
      sa[170] = 0.3423941f;
      sa[171] = 0.25986543f;
      sa[172] = 0.37837756f;
      sa[173] = 0.3772951f;
      sa[174] = -0.056687254f;
      sa[175] = -0.010969106f;
      sa[176] = -0.23601933f;
      sa[177] = 0.023505729f;
      sa[178] = -0.27988216f;
      sa[179] = -0.088392034f;
      sa[180] = -0.40821934f;
      sa[181] = -0.22608583f;
      sa[182] = 0.11493149f;
      sa[183] = -0.29872808f;
      sa[184] = 0.40793377f;
      sa[185] = 0.3542273f;
      sa[186] = -0.122873634f;
      sa[187] = -0.2873683f;
      sa[188] = -0.14721793f;
      sa[189] = -0.2181039f;
      sa[190] = -0.41597927f;
      sa[191] = -0.27439183f;
      sa[192] = -0.043686252f;
      sa[193] = 0.10670179f;
      sa[194] = -0.2872941f;
      sa[195] = -0.24236304f;
      sa[196] = 0.16158803f;
      sa[197] = -0.20845975f;
      sa[198] = 0.029843248f;
      sa[199] = 0.38283858f;
      sa[200] = -0.038128383f;
      sa[201] = 0.25623786f;
      sa[202] = 0.17426942f;
      sa[203] = -0.40551972f;
      sa[204] = 0.13749287f;
      sa[205] = 0.36771894f;
      sa[206] = -0.15145424f;
      sa[207] = 0.13834873f;
      sa[208] = -0.21686503f;
      sa[209] = 0.18084316f;
      sa[210] = -0.107734025f;
      sa[211] = -0.2618946f;
      sa[212] = -0.38101232f;
      sa[213] = 0.031868912f;
      sa[214] = -0.34384412f;
      sa[215] = -0.034464423f;
      sa[216] = 0.15788627f;
      sa[217] = 0.34586886f;
      sa[218] = 0.03639574f;
      sa[219] = 0.10037889f;
      sa[220] = 0.15074717f;
      sa[221] = -0.035275143f;
      sa[222] = -0.27687725f;
      sa[223] = -0.30900392f;
      sa[224] = 0.28097153f;
      sa[225] = 0.057045106f;
      sa[226] = -0.028528798f;
      sa[227] = 0.06615829f;
      sa[228] = -0.12715611f;
      sa[229] = -0.22906926f;
      sa[230] = -0.2453292f;
      sa[231] = -0.10497503f;
      sa[232] = 0.43378136f;
      sa[233] = -0.18021204f;
      sa[234] = -0.14868942f;
      sa[235] = 0.022771982f;
      sa[236] = -0.36996135f;
      sa[237] = 0.42680088f;
      sa[238] = 0.16686371f;
      sa[239] = -0.08475014f;
      sa[240] = -0.079405695f;
      sa[241] = -0.4086374f;
      sa[242] = -0.24435341f;
      sa[243] = 0.35098878f;
      sa[244] = 0.21969864f;
      sa[245] = 0.29136017f;
      sa[246] = 0.19275433f;
      sa[247] = -0.3384017f;
      sa[248] = -0.2252344f;
      sa[249] = -0.002358027f;
      sa[250] = 0.22881511f;
      sa[251] = 0.41455978f;
      sa[252] = 0.21694358f;
      sa[253] = -0.3156871f;
      sa[254] = 0.39882046f;
      sa[255] = 0.16199234f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_05_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_Tanh_05_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.19407117f;
      sa[1] = -1.5368083f;
      sa[2] = -1.6001705f;
      sa[3] = 1.346398f;
      sa[4] = 0.4385486f;
      sa[5] = -0.21451563f;
      sa[6] = -1.6316253f;
      sa[7] = 1.5355223f;
      sa[8] = 1.8187637f;
      sa[9] = 0.22152103f;
      sa[10] = 1.6467241f;
      sa[11] = 1.5017526f;
      sa[12] = 1.9065466f;
      sa[13] = -0.52789515f;
      sa[14] = -1.9629529f;
      sa[15] = -0.6649259f;
      sa[16] = 0.76985896f;
      sa[17] = -0.76615715f;
      sa[18] = -1.5234919f;
      sa[19] = -0.87497735f;
      sa[20] = -1.94672f;
      sa[21] = 0.32210174f;
      sa[22] = -1.9852543f;
      sa[23] = -0.6278074f;
      sa[24] = -0.5775878f;
      sa[25] = 1.8538249f;
      sa[26] = -0.33030552f;
      sa[27] = 1.1913708f;
      sa[28] = 1.2186142f;
      sa[29] = -0.75086427f;
      sa[30] = 0.14190994f;
      sa[31] = 0.12058645f;
      sa[32] = 0.4884867f;
      sa[33] = 0.30761334f;
      sa[34] = -0.6146174f;
      sa[35] = 1.0503691f;
      sa[36] = 0.60149705f;
      sa[37] = -1.327714f;
      sa[38] = 0.56745374f;
      sa[39] = -0.20850721f;
      sa[40] = 0.22060089f;
      sa[41] = -0.7632913f;
      sa[42] = 0.5340566f;
      sa[43] = -0.0710006f;
      sa[44] = 1.0333035f;
      sa[45] = -2.0229125f;
      sa[46] = -2.1174545f;
      sa[47] = 0.034246396f;
      sa[48] = 1.6245637f;
      sa[49] = -0.23854144f;
      sa[50] = -0.48453325f;
      sa[51] = 1.8194386f;
      sa[52] = -1.7140776f;
      sa[53] = 0.944819f;
      sa[54] = 1.7990096f;
      sa[55] = 1.0971779f;
      sa[56] = -0.541466f;
      sa[57] = -0.056703936f;
      sa[58] = 1.0443323f;
      sa[59] = 0.86466956f;
      sa[60] = -1.3906721f;
      sa[61] = 0.93889254f;
      sa[62] = -0.3763189f;
      sa[63] = -0.83343303f;
      sa[64] = 0.90067667f;
      sa[65] = -0.9718303f;
      sa[66] = -1.776065f;
      sa[67] = -0.15072897f;
      sa[68] = 0.8984829f;
      sa[69] = -1.3796632f;
      sa[70] = -1.7114248f;
      sa[71] = -0.052156124f;
      sa[72] = -1.0527037f;
      sa[73] = -1.2151935f;
      sa[74] = -1.0862266f;
      sa[75] = 1.2493606f;
      sa[76] = 1.8673776f;
      sa[77] = -0.652132f;
      sa[78] = -1.4089887f;
      sa[79] = -0.38707837f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_05 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_05_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_05_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_05_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_Tanh_05_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


