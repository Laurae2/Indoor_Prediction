/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:47:07.925+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_03

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_03 > h2o_nn_16x16x6_ReLU_03.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_03.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_03", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_03 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_03_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_03_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_03_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_03_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_03_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_03_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_03.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_03_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.27956989247311825,0.13978494623655913,0.15053763440860216,0.27956989247311825,0.15053763440860216};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_03() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-7997371181368472576L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_03_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_03_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_03_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_03_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_03_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_03_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_03_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_03_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.632435704326304;
      sa[1] = 0.6135761562806796;
      sa[2] = 0.41534772801856473;
      sa[3] = 0.5074057927082478;
      sa[4] = 0.47283442554359234;
      sa[5] = 0.49297649286185824;
      sa[6] = 0.4455554083768627;
      sa[7] = 0.5675670091716816;
      sa[8] = 0.5477050581833066;
      sa[9] = 0.5697307563217734;
      sa[10] = 0.4424343429093582;
      sa[11] = 0.4316495758079064;
      sa[12] = 0.43714716494374567;
      sa[13] = 0.45702675276557614;
      sa[14] = 0.5354600230604556;
      sa[15] = 0.5334956753454217;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_03_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.0139510452705747;
      sa[1] = 1.003412782528536;
      sa[2] = 0.9742098643988067;
      sa[3] = 0.9399632429732526;
      sa[4] = 0.9924981924728518;
      sa[5] = 0.9863497039535333;
      sa[6] = 0.9709601167228041;
      sa[7] = 0.941967011764624;
      sa[8] = 0.9577973279984445;
      sa[9] = 1.013972237251819;
      sa[10] = 0.9465782438761029;
      sa[11] = 1.0345269228909546;
      sa[12] = 1.0130252124860266;
      sa[13] = 0.9813053988238934;
      sa[14] = 1.0281242500742616;
      sa[15] = 1.0566371178357665;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_03_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_03_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.023315597724619854;
      sa[1] = 0.010885497140091337;
      sa[2] = -0.023070863132927454;
      sa[3] = -0.010094350005876464;
      sa[4] = 0.012391144051768941;
    }
  }
}
class h2o_nn_16x16x6_ReLU_03_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_03_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.082008004f;
      sa[1] = 0.254036f;
      sa[2] = 0.18333215f;
      sa[3] = 0.1719215f;
      sa[4] = -0.14893873f;
      sa[5] = -0.13915424f;
      sa[6] = 0.008808787f;
      sa[7] = 0.3214216f;
      sa[8] = 0.16287287f;
      sa[9] = -0.1989516f;
      sa[10] = -0.17833833f;
      sa[11] = -0.2486322f;
      sa[12] = 0.13499181f;
      sa[13] = -0.22877029f;
      sa[14] = -0.1252927f;
      sa[15] = 0.03984697f;
      sa[16] = 0.09671258f;
      sa[17] = 0.15749575f;
      sa[18] = -0.2378021f;
      sa[19] = 0.15449333f;
      sa[20] = 0.29460433f;
      sa[21] = -0.29564583f;
      sa[22] = 0.31289703f;
      sa[23] = -0.14394759f;
      sa[24] = 0.2921574f;
      sa[25] = 0.19249658f;
      sa[26] = -0.2909231f;
      sa[27] = 0.35184753f;
      sa[28] = 0.29063705f;
      sa[29] = -0.27092585f;
      sa[30] = -0.14776912f;
      sa[31] = 0.20686062f;
      sa[32] = 0.19765833f;
      sa[33] = -0.31177562f;
      sa[34] = 0.090337716f;
      sa[35] = -0.1033427f;
      sa[36] = 0.115860134f;
      sa[37] = 0.27772802f;
      sa[38] = -0.11966722f;
      sa[39] = 0.18065773f;
      sa[40] = 0.066055186f;
      sa[41] = -0.059412323f;
      sa[42] = -0.12052832f;
      sa[43] = 0.06615455f;
      sa[44] = 0.27997777f;
      sa[45] = -0.2863984f;
      sa[46] = 0.032669153f;
      sa[47] = -0.014179089f;
      sa[48] = 0.2797153f;
      sa[49] = 0.30310538f;
      sa[50] = 0.2443529f;
      sa[51] = -0.27765167f;
      sa[52] = -0.11224013f;
      sa[53] = 0.22513631f;
      sa[54] = 0.2538006f;
      sa[55] = -0.009743088f;
      sa[56] = -0.15473904f;
      sa[57] = -0.28404728f;
      sa[58] = 0.32976696f;
      sa[59] = -0.17978899f;
      sa[60] = -0.33589685f;
      sa[61] = 0.18921417f;
      sa[62] = 0.14673449f;
      sa[63] = 0.0058795456f;
      sa[64] = 0.16990146f;
      sa[65] = 0.151483f;
      sa[66] = 0.04033814f;
      sa[67] = 0.17680885f;
      sa[68] = -0.10755967f;
      sa[69] = 0.16677994f;
      sa[70] = -0.14238636f;
      sa[71] = 0.3399359f;
      sa[72] = -0.16393195f;
      sa[73] = 0.23126325f;
      sa[74] = -0.19477127f;
      sa[75] = 0.08492775f;
      sa[76] = -0.23107906f;
      sa[77] = -0.09886576f;
      sa[78] = -0.094575755f;
      sa[79] = 0.12678146f;
      sa[80] = -0.25151587f;
      sa[81] = -0.10543715f;
      sa[82] = -8.23206E-4f;
      sa[83] = 0.13750555f;
      sa[84] = -0.05141291f;
      sa[85] = -0.22691707f;
      sa[86] = 0.13417895f;
      sa[87] = 0.24291952f;
      sa[88] = 0.27351487f;
      sa[89] = 0.08246415f;
      sa[90] = -0.12639542f;
      sa[91] = 0.1661752f;
      sa[92] = 0.09746609f;
      sa[93] = -0.23637259f;
      sa[94] = -0.20960353f;
      sa[95] = -0.27737162f;
      sa[96] = 0.15136907f;
      sa[97] = 0.060947035f;
      sa[98] = 0.22892572f;
      sa[99] = -0.11198271f;
      sa[100] = -0.078928806f;
      sa[101] = -0.21510212f;
      sa[102] = -0.30624014f;
      sa[103] = -0.10879448f;
      sa[104] = 0.0071704355f;
      sa[105] = -0.14103395f;
      sa[106] = -0.24016275f;
      sa[107] = 0.13815106f;
      sa[108] = 0.18517649f;
      sa[109] = -0.23806302f;
      sa[110] = -0.18126775f;
      sa[111] = 0.16264708f;
      sa[112] = 0.13208063f;
      sa[113] = 0.044147935f;
      sa[114] = -0.1686421f;
      sa[115] = -0.06352464f;
      sa[116] = -0.25540602f;
      sa[117] = -0.02259456f;
      sa[118] = -0.26958093f;
      sa[119] = -0.19013941f;
      sa[120] = 0.24262868f;
      sa[121] = 0.25887507f;
      sa[122] = 0.34057558f;
      sa[123] = 0.2874404f;
      sa[124] = 0.29840338f;
      sa[125] = 0.3093095f;
      sa[126] = -0.3071342f;
      sa[127] = -0.18338127f;
      sa[128] = 0.07950434f;
      sa[129] = 0.16293155f;
      sa[130] = -0.13486901f;
      sa[131] = 0.32856476f;
      sa[132] = 0.21540155f;
      sa[133] = -0.3085911f;
      sa[134] = 0.098349415f;
      sa[135] = -0.26300362f;
      sa[136] = -0.28836092f;
      sa[137] = -0.022191515f;
      sa[138] = 0.13894579f;
      sa[139] = -0.09960484f;
      sa[140] = -0.079925664f;
      sa[141] = -0.15956311f;
      sa[142] = 0.17592977f;
      sa[143] = -0.32413745f;
      sa[144] = 0.29024965f;
      sa[145] = -0.15089785f;
      sa[146] = -0.2685999f;
      sa[147] = 0.20984831f;
      sa[148] = 0.17893381f;
      sa[149] = 0.20238099f;
      sa[150] = 0.3139794f;
      sa[151] = -0.28181234f;
      sa[152] = 0.037806407f;
      sa[153] = 0.30045927f;
      sa[154] = 0.26865286f;
      sa[155] = -0.19016808f;
      sa[156] = 0.14159866f;
      sa[157] = -0.20681085f;
      sa[158] = 0.0970194f;
      sa[159] = 0.096200414f;
      sa[160] = 0.09357249f;
      sa[161] = 0.24167812f;
      sa[162] = -0.19100738f;
      sa[163] = -0.068151645f;
      sa[164] = 0.25069407f;
      sa[165] = -0.04346994f;
      sa[166] = -0.08205178f;
      sa[167] = -0.09880942f;
      sa[168] = 0.21531455f;
      sa[169] = 0.34600762f;
      sa[170] = 0.017815264f;
      sa[171] = -0.053785603f;
      sa[172] = -0.07028309f;
      sa[173] = -0.16521722f;
      sa[174] = -0.024283836f;
      sa[175] = -0.27070156f;
      sa[176] = -0.04244785f;
      sa[177] = -0.039461255f;
      sa[178] = -0.04940593f;
      sa[179] = 0.10180072f;
      sa[180] = -0.05335818f;
      sa[181] = -0.28436682f;
      sa[182] = -0.17775942f;
      sa[183] = 0.08730956f;
      sa[184] = 0.30517605f;
      sa[185] = 0.18144968f;
      sa[186] = -0.33521655f;
      sa[187] = 0.068745665f;
      sa[188] = -0.023505475f;
      sa[189] = 0.23673539f;
      sa[190] = 0.015622812f;
      sa[191] = -0.023607882f;
      sa[192] = -0.14141636f;
      sa[193] = 0.24847715f;
      sa[194] = 0.087906614f;
      sa[195] = 0.28799897f;
      sa[196] = 0.30684972f;
      sa[197] = -0.052106127f;
      sa[198] = 0.12943627f;
      sa[199] = -0.09974303f;
      sa[200] = 0.018211292f;
      sa[201] = -0.31381866f;
      sa[202] = 0.13827352f;
      sa[203] = -0.047535103f;
      sa[204] = -0.22232996f;
      sa[205] = 0.22674614f;
      sa[206] = 0.25395295f;
      sa[207] = 0.16407572f;
      sa[208] = -0.29412246f;
      sa[209] = -0.09547367f;
      sa[210] = -0.3144362f;
      sa[211] = -0.28997317f;
      sa[212] = 0.26198006f;
      sa[213] = -0.2775313f;
      sa[214] = -0.089977324f;
      sa[215] = 0.055176772f;
      sa[216] = 0.09234481f;
      sa[217] = 0.21339017f;
      sa[218] = -0.1808658f;
      sa[219] = 0.23751442f;
      sa[220] = -0.26625928f;
      sa[221] = 0.02168516f;
      sa[222] = 0.21891856f;
      sa[223] = 0.04448883f;
      sa[224] = 0.10119224f;
      sa[225] = 0.35384962f;
      sa[226] = -0.21045785f;
      sa[227] = 0.35086122f;
      sa[228] = 0.10923848f;
      sa[229] = 0.07561377f;
      sa[230] = 0.25684464f;
      sa[231] = -0.29514104f;
      sa[232] = -0.25074646f;
      sa[233] = 0.111469895f;
      sa[234] = 0.15607212f;
      sa[235] = -0.28350216f;
      sa[236] = -0.058332518f;
      sa[237] = -0.26563317f;
      sa[238] = -0.26428694f;
      sa[239] = 0.13305606f;
      sa[240] = 0.017913528f;
      sa[241] = -0.21793859f;
      sa[242] = -0.094023205f;
      sa[243] = -0.24533662f;
      sa[244] = -0.24372664f;
      sa[245] = -0.15878737f;
      sa[246] = -0.30715802f;
      sa[247] = -0.07798737f;
      sa[248] = 0.27498138f;
      sa[249] = 0.27494952f;
      sa[250] = -0.20836404f;
      sa[251] = -0.0911053f;
      sa[252] = -0.30886352f;
      sa[253] = -0.30865178f;
      sa[254] = -0.25822616f;
      sa[255] = 0.16614442f;
      sa[256] = -0.17542848f;
      sa[257] = 0.32006925f;
      sa[258] = -0.25341478f;
      sa[259] = -0.10911189f;
      sa[260] = -0.24394338f;
      sa[261] = -0.10331584f;
      sa[262] = -0.1317401f;
      sa[263] = 0.26637724f;
      sa[264] = -0.15579252f;
      sa[265] = 0.08292269f;
      sa[266] = -0.28647473f;
      sa[267] = -0.24085633f;
      sa[268] = 0.12655957f;
      sa[269] = -0.16516341f;
      sa[270] = -0.019061135f;
      sa[271] = 0.21347314f;
      sa[272] = -0.093214355f;
      sa[273] = -0.124060184f;
      sa[274] = 0.14238712f;
      sa[275] = 0.013609569f;
      sa[276] = 0.10799254f;
      sa[277] = -0.23968515f;
      sa[278] = -0.1333168f;
      sa[279] = 0.2338062f;
      sa[280] = -0.17927888f;
      sa[281] = 0.31947178f;
      sa[282] = -0.08977401f;
      sa[283] = -0.03327077f;
      sa[284] = 0.008848762f;
      sa[285] = -0.18107477f;
      sa[286] = 0.29512483f;
      sa[287] = 0.15046443f;
      sa[288] = -0.212006f;
      sa[289] = -0.19630633f;
      sa[290] = -0.13649368f;
      sa[291] = 0.043929555f;
      sa[292] = 0.15489452f;
      sa[293] = -0.087376334f;
      sa[294] = 0.111661285f;
      sa[295] = 0.14238557f;
      sa[296] = 0.25127095f;
      sa[297] = 0.19123389f;
      sa[298] = -0.06440201f;
      sa[299] = -0.04733233f;
      sa[300] = 0.009482484f;
      sa[301] = -0.056094922f;
      sa[302] = 0.20038565f;
      sa[303] = 0.046672646f;
      sa[304] = -0.23807907f;
      sa[305] = -0.07097468f;
      sa[306] = 0.25008503f;
      sa[307] = -0.22113861f;
      sa[308] = 0.106850155f;
      sa[309] = 0.17498657f;
      sa[310] = 0.33408222f;
      sa[311] = 0.32884714f;
      sa[312] = -0.25082356f;
      sa[313] = -0.20979719f;
      sa[314] = -0.1499107f;
      sa[315] = -0.04213157f;
      sa[316] = -0.020921232f;
      sa[317] = -0.090622805f;
      sa[318] = 0.10467188f;
      sa[319] = 0.30777332f;
      sa[320] = -0.03808262f;
      sa[321] = 0.18772814f;
      sa[322] = 0.18887489f;
      sa[323] = -0.22923793f;
      sa[324] = 0.009669919f;
      sa[325] = 0.307358f;
      sa[326] = -0.28205833f;
      sa[327] = 0.009564707f;
      sa[328] = -0.04216556f;
      sa[329] = 0.2902096f;
      sa[330] = -0.17296633f;
      sa[331] = 0.024880035f;
      sa[332] = -0.27572325f;
      sa[333] = 0.13134411f;
      sa[334] = -0.08388977f;
      sa[335] = 0.22680855f;
      sa[336] = -0.14687866f;
      sa[337] = -0.1471204f;
      sa[338] = 0.32326257f;
      sa[339] = -0.20083873f;
      sa[340] = -0.34849304f;
      sa[341] = -0.2805841f;
      sa[342] = 0.18893203f;
      sa[343] = -0.11023025f;
      sa[344] = -0.16283345f;
      sa[345] = 0.24115244f;
      sa[346] = 0.2472277f;
      sa[347] = -0.15943202f;
      sa[348] = 0.3215858f;
      sa[349] = -0.29989114f;
      sa[350] = -0.263677f;
      sa[351] = 0.15294327f;
      sa[352] = 0.23678577f;
      sa[353] = -0.016760439f;
      sa[354] = 0.11918927f;
      sa[355] = 0.1585822f;
      sa[356] = -0.15856245f;
      sa[357] = 0.23664133f;
      sa[358] = -0.31389534f;
      sa[359] = 0.0413843f;
      sa[360] = 0.08659488f;
      sa[361] = -0.031532418f;
      sa[362] = -0.15923992f;
      sa[363] = 0.23760094f;
      sa[364] = -0.13930123f;
      sa[365] = -0.24682853f;
      sa[366] = -0.011082087f;
      sa[367] = -0.3232274f;
      sa[368] = -0.2041098f;
      sa[369] = 0.3076422f;
      sa[370] = -0.20767044f;
      sa[371] = 0.13910276f;
      sa[372] = -0.021300545f;
      sa[373] = 0.30324987f;
      sa[374] = -0.1602228f;
      sa[375] = -0.31797916f;
      sa[376] = -0.31279033f;
      sa[377] = -0.21173438f;
      sa[378] = 0.32328644f;
      sa[379] = 0.0980817f;
      sa[380] = -0.1331455f;
      sa[381] = -0.11162256f;
      sa[382] = -0.05457812f;
      sa[383] = -0.12869705f;
      sa[384] = -0.15294075f;
      sa[385] = 0.1248994f;
      sa[386] = -0.26732627f;
      sa[387] = -0.2264732f;
      sa[388] = 0.09014846f;
      sa[389] = -0.008960393f;
      sa[390] = -0.0109136235f;
      sa[391] = -0.11301125f;
      sa[392] = 0.29323608f;
      sa[393] = 0.2543569f;
      sa[394] = -0.06912505f;
      sa[395] = 0.29802626f;
      sa[396] = 0.31462944f;
      sa[397] = -0.27077618f;
      sa[398] = 0.12922339f;
      sa[399] = 0.10570715f;
      sa[400] = 0.17290072f;
      sa[401] = 0.2431295f;
      sa[402] = -0.17019399f;
      sa[403] = 0.044630896f;
      sa[404] = 0.26323578f;
      sa[405] = -0.23909563f;
      sa[406] = -0.07548875f;
      sa[407] = 0.2106053f;
      sa[408] = -0.25408942f;
      sa[409] = -0.29328555f;
      sa[410] = -0.1475292f;
      sa[411] = 0.1559232f;
      sa[412] = -0.13445751f;
      sa[413] = 0.1261812f;
      sa[414] = 0.15737973f;
      sa[415] = 0.31802893f;
      sa[416] = -0.20783973f;
      sa[417] = 0.013045077f;
      sa[418] = -0.023227816f;
      sa[419] = 0.27354527f;
      sa[420] = 0.21264902f;
      sa[421] = 0.2760262f;
      sa[422] = 0.25371802f;
      sa[423] = -0.067993805f;
      sa[424] = 0.10124995f;
      sa[425] = -0.08932346f;
      sa[426] = -0.33375832f;
      sa[427] = 0.19175631f;
      sa[428] = -0.03211409f;
      sa[429] = -0.1258735f;
      sa[430] = 0.17116067f;
      sa[431] = -0.033714402f;
      sa[432] = -0.074188866f;
      sa[433] = 0.15967219f;
      sa[434] = 0.30755785f;
      sa[435] = 0.05739314f;
      sa[436] = -0.30051062f;
      sa[437] = -0.29482344f;
      sa[438] = -0.017379478f;
      sa[439] = -0.033636015f;
      sa[440] = 0.31277132f;
      sa[441] = -0.31173658f;
      sa[442] = 0.12479106f;
      sa[443] = 0.06736907f;
      sa[444] = -0.26080185f;
      sa[445] = 0.041958157f;
      sa[446] = 0.22330491f;
      sa[447] = 0.058683794f;
      sa[448] = 0.22280946f;
      sa[449] = 0.29870653f;
      sa[450] = -0.11027711f;
      sa[451] = 0.10709742f;
      sa[452] = 0.17607585f;
      sa[453] = -0.070427954f;
      sa[454] = -0.19830596f;
      sa[455] = -0.07866686f;
      sa[456] = -0.025403714f;
      sa[457] = 0.124308385f;
      sa[458] = -0.2383148f;
      sa[459] = 0.27636665f;
      sa[460] = 0.22622445f;
      sa[461] = 0.29555076f;
      sa[462] = 0.03993219f;
      sa[463] = 0.23213314f;
      sa[464] = -0.28394517f;
      sa[465] = 0.27475563f;
      sa[466] = -0.029984113f;
      sa[467] = 0.13030675f;
      sa[468] = 0.11812101f;
      sa[469] = 0.33416128f;
      sa[470] = 0.22184525f;
      sa[471] = 0.08846807f;
      sa[472] = 0.0031112249f;
      sa[473] = -0.12937175f;
      sa[474] = -0.021843007f;
      sa[475] = 0.10224267f;
      sa[476] = 0.28293133f;
      sa[477] = -0.18352872f;
      sa[478] = 0.1232929f;
      sa[479] = -0.15110938f;
      sa[480] = -0.33715442f;
      sa[481] = -0.23930399f;
      sa[482] = -0.28886142f;
      sa[483] = 0.22021942f;
      sa[484] = 0.25160715f;
      sa[485] = 0.15382963f;
      sa[486] = -0.027221387f;
      sa[487] = -0.20874313f;
      sa[488] = -0.22595653f;
      sa[489] = 0.07774734f;
      sa[490] = -0.018758751f;
      sa[491] = -0.2606052f;
      sa[492] = 0.23379706f;
      sa[493] = 0.29428655f;
      sa[494] = -0.25393057f;
      sa[495] = 0.1844848f;
      sa[496] = -0.015416864f;
      sa[497] = 0.057691265f;
      sa[498] = 0.172761f;
      sa[499] = 0.17259634f;
      sa[500] = -0.045253616f;
      sa[501] = 0.123589136f;
      sa[502] = 0.24755032f;
      sa[503] = 0.03545279f;
      sa[504] = -0.18610863f;
      sa[505] = -0.2469756f;
      sa[506] = 0.16969214f;
      sa[507] = -0.07866082f;
      sa[508] = 0.097518615f;
      sa[509] = 0.24603847f;
      sa[510] = 0.18657914f;
      sa[511] = -0.0056310566f;
      sa[512] = 0.07286361f;
      sa[513] = -0.10852228f;
      sa[514] = 0.26892456f;
      sa[515] = -0.24684635f;
      sa[516] = 0.022356262f;
      sa[517] = 0.104541145f;
      sa[518] = 0.15719774f;
      sa[519] = -0.11412809f;
      sa[520] = 0.22918461f;
      sa[521] = 0.14268804f;
      sa[522] = 0.110637575f;
      sa[523] = 0.23612191f;
      sa[524] = 0.19943917f;
      sa[525] = 0.1720548f;
      sa[526] = -0.005459631f;
      sa[527] = -0.1401482f;
      sa[528] = -0.03258303f;
      sa[529] = 0.10646892f;
      sa[530] = -0.18168609f;
      sa[531] = 0.05458783f;
      sa[532] = 0.14543945f;
      sa[533] = 0.124148704f;
      sa[534] = 0.14120065f;
      sa[535] = -0.12469787f;
      sa[536] = 0.106817745f;
      sa[537] = -0.21306564f;
      sa[538] = 0.21476856f;
      sa[539] = 0.2978816f;
      sa[540] = -0.26491085f;
      sa[541] = -0.16888924f;
      sa[542] = -0.050116282f;
      sa[543] = -0.32681555f;
      sa[544] = 0.16874932f;
      sa[545] = 0.13575585f;
      sa[546] = 0.093856804f;
      sa[547] = 0.2249226f;
      sa[548] = 0.0787599f;
      sa[549] = 0.17627381f;
      sa[550] = 0.029727904f;
      sa[551] = -0.16706735f;
      sa[552] = 0.057990823f;
      sa[553] = -0.044128988f;
      sa[554] = -0.15420538f;
      sa[555] = -0.14022736f;
      sa[556] = -0.18671544f;
      sa[557] = -0.24093494f;
      sa[558] = -0.24531157f;
      sa[559] = 0.17437999f;
      sa[560] = -0.32843944f;
      sa[561] = -0.10052863f;
      sa[562] = 0.21278317f;
      sa[563] = -0.063823104f;
      sa[564] = 0.33667275f;
      sa[565] = 0.076863065f;
      sa[566] = 0.27810693f;
      sa[567] = 0.062046062f;
      sa[568] = -0.07318494f;
      sa[569] = 0.03616004f;
      sa[570] = -0.008524459f;
      sa[571] = -0.051383205f;
      sa[572] = -0.16837576f;
      sa[573] = 0.082295045f;
      sa[574] = 0.30121836f;
      sa[575] = -0.22731438f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_03_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.36839005f;
      sa[1] = -0.020850709f;
      sa[2] = -0.1519613f;
      sa[3] = -0.23808631f;
      sa[4] = 0.055604335f;
      sa[5] = 0.076877914f;
      sa[6] = 0.3156192f;
      sa[7] = -0.16126978f;
      sa[8] = -0.23798773f;
      sa[9] = 0.18228465f;
      sa[10] = -0.048421882f;
      sa[11] = 0.122174025f;
      sa[12] = 0.0744478f;
      sa[13] = 0.04590097f;
      sa[14] = -0.28668657f;
      sa[15] = 0.32338408f;
      sa[16] = 0.43392214f;
      sa[17] = -0.11156298f;
      sa[18] = 0.012480526f;
      sa[19] = -0.12052126f;
      sa[20] = 0.32337585f;
      sa[21] = -3.7117297E-4f;
      sa[22] = -0.2828253f;
      sa[23] = 0.21596923f;
      sa[24] = -0.35793045f;
      sa[25] = 0.119131945f;
      sa[26] = -0.063541666f;
      sa[27] = 0.4080517f;
      sa[28] = -0.37116f;
      sa[29] = -0.11303575f;
      sa[30] = 0.11954518f;
      sa[31] = -0.1824197f;
      sa[32] = -0.33141133f;
      sa[33] = -0.40827414f;
      sa[34] = 0.0066704983f;
      sa[35] = 0.35876742f;
      sa[36] = -0.10366456f;
      sa[37] = -0.038048875f;
      sa[38] = 0.033028495f;
      sa[39] = 0.22795826f;
      sa[40] = -0.21765052f;
      sa[41] = -0.3747865f;
      sa[42] = -0.28311598f;
      sa[43] = -0.38413352f;
      sa[44] = -0.009159212f;
      sa[45] = -0.37824696f;
      sa[46] = 0.30787954f;
      sa[47] = 0.34292206f;
      sa[48] = -0.4014029f;
      sa[49] = -0.30361435f;
      sa[50] = 0.09309004f;
      sa[51] = -0.11559465f;
      sa[52] = 0.16950712f;
      sa[53] = 0.1947903f;
      sa[54] = -0.079628356f;
      sa[55] = 0.28971598f;
      sa[56] = -0.3036676f;
      sa[57] = -0.32335836f;
      sa[58] = 0.031594012f;
      sa[59] = -0.07632686f;
      sa[60] = 0.34188434f;
      sa[61] = -0.18994746f;
      sa[62] = -0.13514034f;
      sa[63] = 0.14791907f;
      sa[64] = 0.40277416f;
      sa[65] = -0.17798185f;
      sa[66] = 0.16915305f;
      sa[67] = 0.4177278f;
      sa[68] = 0.19220525f;
      sa[69] = -0.2809339f;
      sa[70] = -0.4134643f;
      sa[71] = -0.12952697f;
      sa[72] = -0.35534543f;
      sa[73] = 0.3096146f;
      sa[74] = 0.35299385f;
      sa[75] = -0.0252148f;
      sa[76] = 0.2522311f;
      sa[77] = 0.14638186f;
      sa[78] = -0.33826914f;
      sa[79] = 0.26544377f;
      sa[80] = -0.22026005f;
      sa[81] = 0.06423311f;
      sa[82] = 0.20592622f;
      sa[83] = -0.17264193f;
      sa[84] = -0.43646905f;
      sa[85] = -0.3555902f;
      sa[86] = 0.061223995f;
      sa[87] = 0.33940864f;
      sa[88] = -0.41902858f;
      sa[89] = -0.14461583f;
      sa[90] = -0.2872759f;
      sa[91] = 0.4102351f;
      sa[92] = -0.094626606f;
      sa[93] = 0.06476894f;
      sa[94] = -0.4166442f;
      sa[95] = -0.061813053f;
      sa[96] = -0.3294001f;
      sa[97] = 0.02999096f;
      sa[98] = -0.023109693f;
      sa[99] = 0.07100977f;
      sa[100] = -0.35583177f;
      sa[101] = -0.12920493f;
      sa[102] = 0.3416319f;
      sa[103] = 0.013291007f;
      sa[104] = -0.06152937f;
      sa[105] = -0.16814397f;
      sa[106] = 0.3791003f;
      sa[107] = 0.30607805f;
      sa[108] = 0.17558174f;
      sa[109] = 0.006385766f;
      sa[110] = 0.16809125f;
      sa[111] = -0.22073163f;
      sa[112] = -0.34027424f;
      sa[113] = 0.0046702386f;
      sa[114] = 0.041809056f;
      sa[115] = -0.11505268f;
      sa[116] = 0.26306832f;
      sa[117] = -0.036680926f;
      sa[118] = -0.35825023f;
      sa[119] = -0.22211434f;
      sa[120] = -0.11609681f;
      sa[121] = 0.27358422f;
      sa[122] = -0.03384349f;
      sa[123] = 0.06818639f;
      sa[124] = -0.21606925f;
      sa[125] = 0.1827265f;
      sa[126] = -0.293428f;
      sa[127] = 0.0901813f;
      sa[128] = -0.27162227f;
      sa[129] = 0.17660259f;
      sa[130] = -0.105314344f;
      sa[131] = 0.21390022f;
      sa[132] = 0.07006149f;
      sa[133] = 0.11901744f;
      sa[134] = 0.18134233f;
      sa[135] = -0.32382643f;
      sa[136] = 0.118131675f;
      sa[137] = -0.17199537f;
      sa[138] = -0.03330884f;
      sa[139] = 0.2966691f;
      sa[140] = -0.14593147f;
      sa[141] = -0.036553048f;
      sa[142] = 0.024592062f;
      sa[143] = -0.25123268f;
      sa[144] = 0.25236553f;
      sa[145] = -0.19681595f;
      sa[146] = 0.02303647f;
      sa[147] = -0.06384948f;
      sa[148] = -0.23917918f;
      sa[149] = 0.30940762f;
      sa[150] = -0.2687404f;
      sa[151] = -0.43137375f;
      sa[152] = 0.44027355f;
      sa[153] = -0.1389892f;
      sa[154] = 0.37716714f;
      sa[155] = -0.4202783f;
      sa[156] = -0.38431546f;
      sa[157] = -0.30929616f;
      sa[158] = -0.085024506f;
      sa[159] = -0.18434034f;
      sa[160] = 0.32839027f;
      sa[161] = -0.3275773f;
      sa[162] = 0.3987286f;
      sa[163] = -0.23045798f;
      sa[164] = 0.15428928f;
      sa[165] = -0.20794797f;
      sa[166] = 0.35810095f;
      sa[167] = -0.40349406f;
      sa[168] = 0.24196954f;
      sa[169] = -0.43142924f;
      sa[170] = 0.29671577f;
      sa[171] = 0.22002216f;
      sa[172] = 0.3810135f;
      sa[173] = 0.37357402f;
      sa[174] = -0.07192334f;
      sa[175] = -0.038278524f;
      sa[176] = -0.18681201f;
      sa[177] = 0.048323877f;
      sa[178] = -0.26552823f;
      sa[179] = -0.053973377f;
      sa[180] = -0.37212f;
      sa[181] = -0.23033419f;
      sa[182] = 0.104837835f;
      sa[183] = -0.25682136f;
      sa[184] = 0.41577417f;
      sa[185] = 0.34596977f;
      sa[186] = -0.12429505f;
      sa[187] = -0.2582183f;
      sa[188] = -0.121446416f;
      sa[189] = -0.19591585f;
      sa[190] = -0.37356365f;
      sa[191] = -0.25402045f;
      sa[192] = -0.02609157f;
      sa[193] = 0.11924701f;
      sa[194] = -0.283314f;
      sa[195] = -0.23189302f;
      sa[196] = 0.16061006f;
      sa[197] = -0.20598553f;
      sa[198] = 0.017016415f;
      sa[199] = 0.4089268f;
      sa[200] = -0.02702455f;
      sa[201] = 0.25249666f;
      sa[202] = 0.1720599f;
      sa[203] = -0.395721f;
      sa[204] = 0.15394199f;
      sa[205] = 0.38663206f;
      sa[206] = -0.13161154f;
      sa[207] = 0.15939187f;
      sa[208] = -0.22850536f;
      sa[209] = 0.16494821f;
      sa[210] = -0.118099846f;
      sa[211] = -0.2742457f;
      sa[212] = -0.37524778f;
      sa[213] = 0.018374082f;
      sa[214] = -0.33922073f;
      sa[215] = -0.04645811f;
      sa[216] = 0.14232685f;
      sa[217] = 0.3392473f;
      sa[218] = 0.036709275f;
      sa[219] = 0.09435218f;
      sa[220] = 0.13437939f;
      sa[221] = -0.05409476f;
      sa[222] = -0.29166517f;
      sa[223] = -0.33095086f;
      sa[224] = 0.30238944f;
      sa[225] = 0.084407605f;
      sa[226] = -0.03571545f;
      sa[227] = 0.07611253f;
      sa[228] = -0.082437575f;
      sa[229] = -0.19668718f;
      sa[230] = -0.23673418f;
      sa[231] = -0.10196112f;
      sa[232] = 0.4533192f;
      sa[233] = -0.16755548f;
      sa[234] = -0.1377665f;
      sa[235] = 0.060992062f;
      sa[236] = -0.36375266f;
      sa[237] = 0.43554837f;
      sa[238] = 0.20661375f;
      sa[239] = -0.06850203f;
      sa[240] = -0.06429558f;
      sa[241] = -0.35285676f;
      sa[242] = -0.2418342f;
      sa[243] = 0.38875377f;
      sa[244] = 0.24106584f;
      sa[245] = 0.3416525f;
      sa[246] = 0.19122924f;
      sa[247] = -0.33345115f;
      sa[248] = -0.1787808f;
      sa[249] = 0.020713255f;
      sa[250] = 0.24776389f;
      sa[251] = 0.44660002f;
      sa[252] = 0.23193124f;
      sa[253] = -0.30182546f;
      sa[254] = 0.42732266f;
      sa[255] = 0.19815536f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_03_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_ReLU_03_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.15654826f;
      sa[1] = -1.5445682f;
      sa[2] = -1.6035732f;
      sa[3] = 1.3407037f;
      sa[4] = 0.42816463f;
      sa[5] = -0.21218263f;
      sa[6] = -1.6611831f;
      sa[7] = 1.5029659f;
      sa[8] = 1.7846053f;
      sa[9] = 0.18949598f;
      sa[10] = 1.635588f;
      sa[11] = 1.4727867f;
      sa[12] = 1.8914977f;
      sa[13] = -0.56453574f;
      sa[14] = -1.9683871f;
      sa[15] = -0.6978041f;
      sa[16] = 0.76888424f;
      sa[17] = -0.743579f;
      sa[18] = -1.5076461f;
      sa[19] = -0.8590211f;
      sa[20] = -1.9454836f;
      sa[21] = 0.3252624f;
      sa[22] = -1.9853381f;
      sa[23] = -0.5946405f;
      sa[24] = -0.56102043f;
      sa[25] = 1.8640565f;
      sa[26] = -0.33709887f;
      sa[27] = 1.19695f;
      sa[28] = 1.2231168f;
      sa[29] = -0.72661465f;
      sa[30] = 0.1700347f;
      sa[31] = 0.13901658f;
      sa[32] = 0.46002227f;
      sa[33] = 0.26967254f;
      sa[34] = -0.62585896f;
      sa[35] = 1.041532f;
      sa[36] = 0.568147f;
      sa[37] = -1.3407942f;
      sa[38] = 0.55063826f;
      sa[39] = -0.21366327f;
      sa[40] = 0.20076983f;
      sa[41] = -0.78877646f;
      sa[42] = 0.5087337f;
      sa[43] = -0.16047914f;
      sa[44] = 1.0047164f;
      sa[45] = -2.0362499f;
      sa[46] = -2.1464353f;
      sa[47] = 0.007861745f;
      sa[48] = 1.6222448f;
      sa[49] = -0.26824266f;
      sa[50] = -0.4964739f;
      sa[51] = 1.7801589f;
      sa[52] = -1.7242198f;
      sa[53] = 0.9335718f;
      sa[54] = 1.8037698f;
      sa[55] = 1.0917951f;
      sa[56] = -0.54324764f;
      sa[57] = -0.05715682f;
      sa[58] = 1.0416819f;
      sa[59] = 0.8720393f;
      sa[60] = -1.4120201f;
      sa[61] = 0.9295094f;
      sa[62] = -0.40284526f;
      sa[63] = -0.8369011f;
      sa[64] = 0.91336423f;
      sa[65] = -0.98665357f;
      sa[66] = -1.7730907f;
      sa[67] = -0.16015716f;
      sa[68] = 0.87749773f;
      sa[69] = -1.3703302f;
      sa[70] = -1.6632099f;
      sa[71] = -0.033579763f;
      sa[72] = -0.9837307f;
      sa[73] = -1.1658736f;
      sa[74] = -1.0840874f;
      sa[75] = 1.280618f;
      sa[76] = 1.8725294f;
      sa[77] = -0.6212421f;
      sa[78] = -1.4091941f;
      sa[79] = -0.37397414f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_03 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_03_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_03_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_03_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_ReLU_03_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


