/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:48:18.126+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_08

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_08 > h2o_nn_16x16x6_ReLU_08.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_08.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_08", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_08 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_08_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_08_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_08_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_08_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_08_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_08_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_08_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_08_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_08_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_08_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_08_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_08_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_08.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_08_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.24528301886792453,0.12264150943396226,0.12264150943396226,0.1320754716981132,0.24528301886792453,0.1320754716981132};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_08() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-7426725342442147936L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_08_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_08_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_08_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_08_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_08_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_08_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_08_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_08_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_08_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_08_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_08_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.5939313567270118;
      sa[1] = 0.6724403680292999;
      sa[2] = 0.5668796657618469;
      sa[3] = 0.38948900809299386;
      sa[4] = 0.4833719626969505;
      sa[5] = 0.5582163718681444;
      sa[6] = 0.8968314777777914;
      sa[7] = 0.6169979152213354;
      sa[8] = 0.5627775917704285;
      sa[9] = 0.5510672883850604;
      sa[10] = 0.553940157140633;
      sa[11] = 0.4057864863410526;
      sa[12] = 0.2877203811337516;
      sa[13] = 0.4035120573061732;
      sa[14] = 0.5107759903784016;
      sa[15] = 0.5658340164004907;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_08_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_08_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.083023407575967;
      sa[1] = 1.0435359112277853;
      sa[2] = 0.8715707954360673;
      sa[3] = 1.005090712851035;
      sa[4] = 0.9498184824809732;
      sa[5] = 0.9669564557295954;
      sa[6] = 0.9782276154001782;
      sa[7] = 0.8451966853663639;
      sa[8] = 0.8738683044074997;
      sa[9] = 1.0166292834549766;
      sa[10] = 0.9154535209456568;
      sa[11] = 1.1182620680662037;
      sa[12] = 1.014392735298611;
      sa[13] = 0.8334783788138909;
      sa[14] = 0.9647246015325078;
      sa[15] = 0.9612421106468274;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_08_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_08_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.07105307518408198;
      sa[1] = 0.014256441674757956;
      sa[2] = -0.040532354474970556;
      sa[3] = -5.17663207095198E-4;
      sa[4] = 0.06864871284646151;
      sa[5] = -0.05476258699313701;
    }
  }
}
class h2o_nn_16x16x6_ReLU_08_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_08_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_08_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.10207037f;
      sa[1] = 0.18336341f;
      sa[2] = 0.07819293f;
      sa[3] = 0.12306014f;
      sa[4] = -0.118228175f;
      sa[5] = -0.15779035f;
      sa[6] = 0.014987036f;
      sa[7] = 0.37243038f;
      sa[8] = 0.14069764f;
      sa[9] = -0.12522918f;
      sa[10] = -0.18467483f;
      sa[11] = -0.2552606f;
      sa[12] = 0.099017024f;
      sa[13] = -0.28292498f;
      sa[14] = -0.16728316f;
      sa[15] = 0.054992978f;
      sa[16] = 0.048828144f;
      sa[17] = 0.19636393f;
      sa[18] = -0.21309534f;
      sa[19] = 0.06626817f;
      sa[20] = 0.29312545f;
      sa[21] = -0.26666087f;
      sa[22] = 0.321029f;
      sa[23] = -0.1107254f;
      sa[24] = 0.2272847f;
      sa[25] = 0.18037365f;
      sa[26] = -0.26759142f;
      sa[27] = 0.42423064f;
      sa[28] = 0.27379075f;
      sa[29] = -0.26055303f;
      sa[30] = -0.16709512f;
      sa[31] = 0.23957926f;
      sa[32] = 0.17471063f;
      sa[33] = -0.2962753f;
      sa[34] = 0.15280755f;
      sa[35] = -0.038165253f;
      sa[36] = 0.1763788f;
      sa[37] = 0.2690218f;
      sa[38] = -0.18886867f;
      sa[39] = 0.22329867f;
      sa[40] = 0.08311f;
      sa[41] = -0.06299317f;
      sa[42] = -0.10791733f;
      sa[43] = 0.05134492f;
      sa[44] = 0.3310841f;
      sa[45] = -0.3197708f;
      sa[46] = -0.074388444f;
      sa[47] = -0.08139354f;
      sa[48] = 0.26083753f;
      sa[49] = 0.27737403f;
      sa[50] = 0.24495068f;
      sa[51] = -0.31842947f;
      sa[52] = -0.11849592f;
      sa[53] = 0.17398629f;
      sa[54] = 0.3187826f;
      sa[55] = -0.13810013f;
      sa[56] = -0.14045443f;
      sa[57] = -0.25780475f;
      sa[58] = 0.3449507f;
      sa[59] = -0.19614264f;
      sa[60] = -0.39813536f;
      sa[61] = 0.11954459f;
      sa[62] = 0.21443926f;
      sa[63] = 0.05716927f;
      sa[64] = 0.16419892f;
      sa[65] = 0.169534f;
      sa[66] = 0.023885073f;
      sa[67] = 0.17232029f;
      sa[68] = -0.16927089f;
      sa[69] = 0.045930386f;
      sa[70] = 0.035042353f;
      sa[71] = 0.44303805f;
      sa[72] = -0.19118443f;
      sa[73] = 0.25307202f;
      sa[74] = -0.13692588f;
      sa[75] = 0.004713172f;
      sa[76] = -0.22927211f;
      sa[77] = -0.0452405f;
      sa[78] = -0.06522335f;
      sa[79] = 0.11703117f;
      sa[80] = -0.24375302f;
      sa[81] = -0.17535566f;
      sa[82] = -0.01953663f;
      sa[83] = 0.1325266f;
      sa[84] = 0.035129953f;
      sa[85] = -0.12950063f;
      sa[86] = 0.2083043f;
      sa[87] = 0.27780098f;
      sa[88] = 0.25516737f;
      sa[89] = 0.07691102f;
      sa[90] = -0.16178522f;
      sa[91] = 0.29572004f;
      sa[92] = 0.14159492f;
      sa[93] = -0.2330858f;
      sa[94] = -0.1866851f;
      sa[95] = -0.26028574f;
      sa[96] = 0.21403974f;
      sa[97] = 0.055229507f;
      sa[98] = 0.19199519f;
      sa[99] = -0.1785654f;
      sa[100] = -0.021609003f;
      sa[101] = -0.18911742f;
      sa[102] = -0.23575878f;
      sa[103] = -0.100232005f;
      sa[104] = -0.023284344f;
      sa[105] = -0.17258409f;
      sa[106] = -0.2524777f;
      sa[107] = 0.12765974f;
      sa[108] = 0.1903766f;
      sa[109] = -0.33063275f;
      sa[110] = -0.20888734f;
      sa[111] = 0.04089906f;
      sa[112] = 0.13388032f;
      sa[113] = -0.010083151f;
      sa[114] = -0.1960722f;
      sa[115] = -0.034140557f;
      sa[116] = -0.2850024f;
      sa[117] = 0.026845131f;
      sa[118] = -0.21790887f;
      sa[119] = -0.1276363f;
      sa[120] = 0.19696268f;
      sa[121] = 0.19253199f;
      sa[122] = 0.27427644f;
      sa[123] = 0.26122177f;
      sa[124] = 0.19799852f;
      sa[125] = 0.29205412f;
      sa[126] = -0.24022128f;
      sa[127] = -0.2729971f;
      sa[128] = 0.06824547f;
      sa[129] = 0.18012923f;
      sa[130] = -0.1403798f;
      sa[131] = 0.39571607f;
      sa[132] = 0.15550166f;
      sa[133] = -0.27503982f;
      sa[134] = 0.13140468f;
      sa[135] = -0.24412103f;
      sa[136] = -0.32313088f;
      sa[137] = -0.039484497f;
      sa[138] = 0.086098194f;
      sa[139] = -0.10799086f;
      sa[140] = -0.047396895f;
      sa[141] = -0.0916291f;
      sa[142] = 0.1400011f;
      sa[143] = -0.31600773f;
      sa[144] = 0.29962543f;
      sa[145] = -0.27501023f;
      sa[146] = -0.2949624f;
      sa[147] = 0.21092473f;
      sa[148] = 0.18063378f;
      sa[149] = 0.1561612f;
      sa[150] = 0.31239587f;
      sa[151] = -0.26885554f;
      sa[152] = 0.019825358f;
      sa[153] = 0.27732387f;
      sa[154] = 0.2423514f;
      sa[155] = -0.1634494f;
      sa[156] = 0.13251464f;
      sa[157] = -0.26093233f;
      sa[158] = 0.084481694f;
      sa[159] = 0.08212892f;
      sa[160] = -0.013895277f;
      sa[161] = 0.16576219f;
      sa[162] = -0.06587605f;
      sa[163] = -0.13623826f;
      sa[164] = 0.27056316f;
      sa[165] = -0.0144547345f;
      sa[166] = -0.05165715f;
      sa[167] = -0.034993082f;
      sa[168] = 0.16646315f;
      sa[169] = 0.3286091f;
      sa[170] = 0.092368804f;
      sa[171] = -0.11556771f;
      sa[172] = -0.08476632f;
      sa[173] = -0.17404394f;
      sa[174] = -0.06994628f;
      sa[175] = -0.2820982f;
      sa[176] = 0.0012995515f;
      sa[177] = 0.024673838f;
      sa[178] = -0.081948556f;
      sa[179] = 0.097532846f;
      sa[180] = -0.0511446f;
      sa[181] = -0.23027536f;
      sa[182] = -0.122141816f;
      sa[183] = 0.19933589f;
      sa[184] = 0.33040065f;
      sa[185] = 0.22590782f;
      sa[186] = -0.2992459f;
      sa[187] = 0.08846356f;
      sa[188] = -0.005036165f;
      sa[189] = 0.21594888f;
      sa[190] = 0.019331172f;
      sa[191] = -0.0013820574f;
      sa[192] = -0.10373124f;
      sa[193] = 0.29935727f;
      sa[194] = 0.1380014f;
      sa[195] = 0.3706921f;
      sa[196] = 0.4138129f;
      sa[197] = -0.038093876f;
      sa[198] = 0.08873394f;
      sa[199] = -0.27251378f;
      sa[200] = 0.036201958f;
      sa[201] = -0.30878967f;
      sa[202] = 0.15238704f;
      sa[203] = -0.065673f;
      sa[204] = -0.18191716f;
      sa[205] = 0.22191651f;
      sa[206] = 0.24593322f;
      sa[207] = 0.11228326f;
      sa[208] = -0.25894225f;
      sa[209] = -0.06799159f;
      sa[210] = -0.26770425f;
      sa[211] = -0.24098945f;
      sa[212] = 0.2748049f;
      sa[213] = -0.26669052f;
      sa[214] = -0.17901921f;
      sa[215] = -0.09248823f;
      sa[216] = 0.08740086f;
      sa[217] = 0.15774359f;
      sa[218] = -0.11515406f;
      sa[219] = 0.100110486f;
      sa[220] = -0.20145167f;
      sa[221] = 0.16281122f;
      sa[222] = 0.30199015f;
      sa[223] = 0.09121624f;
      sa[224] = 0.13714108f;
      sa[225] = 0.3036867f;
      sa[226] = -0.21549545f;
      sa[227] = 0.3714438f;
      sa[228] = 0.24945673f;
      sa[229] = 0.2335062f;
      sa[230] = 0.3973554f;
      sa[231] = -0.20349215f;
      sa[232] = -0.3006201f;
      sa[233] = 0.05845616f;
      sa[234] = 0.11801416f;
      sa[235] = -0.19643337f;
      sa[236] = 0.022163158f;
      sa[237] = -0.21932842f;
      sa[238] = -0.20377348f;
      sa[239] = 0.16287114f;
      sa[240] = 0.1566719f;
      sa[241] = -0.20397249f;
      sa[242] = -0.13578114f;
      sa[243] = -0.35475394f;
      sa[244] = -0.13457872f;
      sa[245] = -0.064701185f;
      sa[246] = -0.17880698f;
      sa[247] = -0.0044162204f;
      sa[248] = 0.20994908f;
      sa[249] = 0.17550877f;
      sa[250] = -0.30838054f;
      sa[251] = -0.13845693f;
      sa[252] = -0.22673501f;
      sa[253] = -0.31691357f;
      sa[254] = -0.34180644f;
      sa[255] = 0.15755826f;
      sa[256] = -0.17191717f;
      sa[257] = 0.29236454f;
      sa[258] = -0.25800648f;
      sa[259] = -0.12290224f;
      sa[260] = -0.14172195f;
      sa[261] = -0.072332166f;
      sa[262] = -0.25639486f;
      sa[263] = 0.33246708f;
      sa[264] = -0.15089776f;
      sa[265] = 0.05791181f;
      sa[266] = -0.2892651f;
      sa[267] = -0.24826032f;
      sa[268] = 0.09849688f;
      sa[269] = -0.22741525f;
      sa[270] = 0.07053302f;
      sa[271] = 0.13552243f;
      sa[272] = -0.049476396f;
      sa[273] = -0.091933385f;
      sa[274] = 0.16173406f;
      sa[275] = 0.0208211f;
      sa[276] = -0.0067549516f;
      sa[277] = -0.42406657f;
      sa[278] = -0.0713689f;
      sa[279] = 0.15903199f;
      sa[280] = -0.16994463f;
      sa[281] = 0.33124128f;
      sa[282] = -0.11885359f;
      sa[283] = -0.027495353f;
      sa[284] = -0.02822037f;
      sa[285] = -0.27241072f;
      sa[286] = 0.42834726f;
      sa[287] = 0.255327f;
      sa[288] = -0.28491047f;
      sa[289] = -0.18198608f;
      sa[290] = -0.119203456f;
      sa[291] = 0.29589367f;
      sa[292] = 0.1646419f;
      sa[293] = -0.050122783f;
      sa[294] = 0.12522608f;
      sa[295] = 0.12793353f;
      sa[296] = 0.21014066f;
      sa[297] = 0.09942036f;
      sa[298] = -0.0857277f;
      sa[299] = -0.3480099f;
      sa[300] = 0.008052552f;
      sa[301] = -0.044054165f;
      sa[302] = 0.2036644f;
      sa[303] = 0.031016286f;
      sa[304] = -0.18214084f;
      sa[305] = -0.06375553f;
      sa[306] = 0.17183906f;
      sa[307] = -0.2258967f;
      sa[308] = 0.07725441f;
      sa[309] = 0.14260907f;
      sa[310] = 0.32264963f;
      sa[311] = 0.2566607f;
      sa[312] = -0.24137798f;
      sa[313] = -0.21576448f;
      sa[314] = -0.1668504f;
      sa[315] = 0.113849156f;
      sa[316] = -0.022798937f;
      sa[317] = -0.08595893f;
      sa[318] = 0.13721532f;
      sa[319] = 0.30049673f;
      sa[320] = 0.027195299f;
      sa[321] = 0.13259509f;
      sa[322] = 0.22577037f;
      sa[323] = -0.28030393f;
      sa[324] = 0.061390854f;
      sa[325] = 0.20121634f;
      sa[326] = -0.37323043f;
      sa[327] = 0.019664837f;
      sa[328] = -0.026284534f;
      sa[329] = 0.24467199f;
      sa[330] = -0.17366542f;
      sa[331] = 0.046473864f;
      sa[332] = -0.27292293f;
      sa[333] = 0.15350758f;
      sa[334] = -0.14769565f;
      sa[335] = 0.2172221f;
      sa[336] = -0.18161958f;
      sa[337] = -0.20567128f;
      sa[338] = 0.28582913f;
      sa[339] = -0.23394291f;
      sa[340] = -0.4784233f;
      sa[341] = -0.35144007f;
      sa[342] = 0.34802523f;
      sa[343] = -0.32438144f;
      sa[344] = -0.15792064f;
      sa[345] = 0.28080577f;
      sa[346] = 0.27641258f;
      sa[347] = -0.116669305f;
      sa[348] = 0.23834316f;
      sa[349] = -0.35513332f;
      sa[350] = -0.1828699f;
      sa[351] = 0.18108073f;
      sa[352] = 0.21020089f;
      sa[353] = -0.02654245f;
      sa[354] = 0.07210742f;
      sa[355] = 0.14873643f;
      sa[356] = -0.16432157f;
      sa[357] = 0.2299391f;
      sa[358] = -0.21929085f;
      sa[359] = 0.14398651f;
      sa[360] = 0.0982553f;
      sa[361] = -0.13488835f;
      sa[362] = -0.11407248f;
      sa[363] = 0.15255384f;
      sa[364] = -0.123413734f;
      sa[365] = -0.22862276f;
      sa[366] = 0.01593772f;
      sa[367] = -0.2831566f;
      sa[368] = -0.19955103f;
      sa[369] = 0.23096257f;
      sa[370] = -0.20697863f;
      sa[371] = 0.20939045f;
      sa[372] = 0.016372822f;
      sa[373] = 0.33279553f;
      sa[374] = -0.11458352f;
      sa[375] = -0.2812946f;
      sa[376] = -0.42435458f;
      sa[377] = -0.303202f;
      sa[378] = 0.40134972f;
      sa[379] = 0.09042197f;
      sa[380] = -0.10625732f;
      sa[381] = -0.09278508f;
      sa[382] = -0.023950938f;
      sa[383] = -0.07319009f;
      sa[384] = -0.12541096f;
      sa[385] = 0.133551f;
      sa[386] = -0.19151092f;
      sa[387] = -0.33671656f;
      sa[388] = 0.11376138f;
      sa[389] = 0.0063793594f;
      sa[390] = 0.0021534024f;
      sa[391] = -0.09202932f;
      sa[392] = 0.31311023f;
      sa[393] = 0.36400986f;
      sa[394] = -0.18074182f;
      sa[395] = 0.21365982f;
      sa[396] = 0.33165804f;
      sa[397] = -0.097193025f;
      sa[398] = 0.20082955f;
      sa[399] = -0.0807733f;
      sa[400] = 0.16970342f;
      sa[401] = 0.28386214f;
      sa[402] = -0.17286186f;
      sa[403] = 0.045936458f;
      sa[404] = 0.29342702f;
      sa[405] = -0.17583455f;
      sa[406] = 0.01592596f;
      sa[407] = 0.4326829f;
      sa[408] = -0.23513861f;
      sa[409] = -0.23270445f;
      sa[410] = -0.12681286f;
      sa[411] = 0.1867266f;
      sa[412] = -0.019436484f;
      sa[413] = 0.20688169f;
      sa[414] = 0.05348316f;
      sa[415] = 0.471742f;
      sa[416] = -0.20854628f;
      sa[417] = 0.00981675f;
      sa[418] = -0.04253151f;
      sa[419] = 0.2735503f;
      sa[420] = 0.28411916f;
      sa[421] = 0.36217725f;
      sa[422] = 0.1795485f;
      sa[423] = -0.109668754f;
      sa[424] = 0.12595104f;
      sa[425] = -0.07003596f;
      sa[426] = -0.29218644f;
      sa[427] = 0.21105735f;
      sa[428] = -0.06285024f;
      sa[429] = -0.09951956f;
      sa[430] = 0.11090977f;
      sa[431] = -0.08250559f;
      sa[432] = -0.08945098f;
      sa[433] = 0.18322846f;
      sa[434] = 0.3772387f;
      sa[435] = 0.044068705f;
      sa[436] = -0.34666982f;
      sa[437] = -0.3387063f;
      sa[438] = -0.04411089f;
      sa[439] = -0.080447115f;
      sa[440] = 0.31418008f;
      sa[441] = -0.27757815f;
      sa[442] = 0.12668948f;
      sa[443] = 0.1951097f;
      sa[444] = -0.29908878f;
      sa[445] = 0.005561306f;
      sa[446] = 0.19973373f;
      sa[447] = 0.00972336f;
      sa[448] = 0.21633898f;
      sa[449] = 0.32518417f;
      sa[450] = -0.07321247f;
      sa[451] = 0.14326088f;
      sa[452] = 0.13728388f;
      sa[453] = -0.11237109f;
      sa[454] = -0.22827004f;
      sa[455] = -0.11377267f;
      sa[456] = 0.060067195f;
      sa[457] = 0.13832073f;
      sa[458] = -0.21677312f;
      sa[459] = 0.17187458f;
      sa[460] = 0.17921609f;
      sa[461] = 0.23983905f;
      sa[462] = -0.018477637f;
      sa[463] = 0.15833327f;
      sa[464] = -0.27775547f;
      sa[465] = 0.2794366f;
      sa[466] = -0.036737762f;
      sa[467] = 0.11994628f;
      sa[468] = 0.12265111f;
      sa[469] = 0.2900375f;
      sa[470] = 0.21094473f;
      sa[471] = 0.021275591f;
      sa[472] = 0.0144106f;
      sa[473] = -0.14480032f;
      sa[474] = -0.023388194f;
      sa[475] = 0.14227355f;
      sa[476] = 0.27025813f;
      sa[477] = -0.13483149f;
      sa[478] = 0.15921585f;
      sa[479] = -0.20430179f;
      sa[480] = -0.36519995f;
      sa[481] = -0.27032384f;
      sa[482] = -0.31215402f;
      sa[483] = 0.20686232f;
      sa[484] = 0.22558951f;
      sa[485] = 0.20276116f;
      sa[486] = -0.016600834f;
      sa[487] = -0.17386039f;
      sa[488] = -0.2327723f;
      sa[489] = 0.09173909f;
      sa[490] = -0.01603489f;
      sa[491] = -0.19035754f;
      sa[492] = 0.21080714f;
      sa[493] = 0.3365145f;
      sa[494] = -0.24802598f;
      sa[495] = 0.30098853f;
      sa[496] = -0.029492019f;
      sa[497] = 0.057720546f;
      sa[498] = 0.15533625f;
      sa[499] = 0.16694166f;
      sa[500] = -0.056176342f;
      sa[501] = 0.12758504f;
      sa[502] = 0.28839257f;
      sa[503] = 0.11031508f;
      sa[504] = -0.14968845f;
      sa[505] = -0.19742945f;
      sa[506] = 0.20131317f;
      sa[507] = -0.15050952f;
      sa[508] = 0.13039446f;
      sa[509] = 0.31033465f;
      sa[510] = 0.20079376f;
      sa[511] = 0.078535385f;
      sa[512] = 0.09218516f;
      sa[513] = 0.004516582f;
      sa[514] = 0.3277231f;
      sa[515] = -0.07238819f;
      sa[516] = 0.03237476f;
      sa[517] = 0.14722738f;
      sa[518] = 0.162563f;
      sa[519] = -0.032713126f;
      sa[520] = 0.29507107f;
      sa[521] = 0.28315377f;
      sa[522] = 0.058685273f;
      sa[523] = 0.17689683f;
      sa[524] = 0.20150286f;
      sa[525] = 0.18267074f;
      sa[526] = -0.02011428f;
      sa[527] = -0.11172437f;
      sa[528] = -0.029252578f;
      sa[529] = 0.16763294f;
      sa[530] = -0.21616693f;
      sa[531] = 0.06820198f;
      sa[532] = 0.16933931f;
      sa[533] = 0.15217677f;
      sa[534] = 0.18446115f;
      sa[535] = -0.04777182f;
      sa[536] = 0.09506418f;
      sa[537] = -0.13016865f;
      sa[538] = 0.13478257f;
      sa[539] = 0.22691299f;
      sa[540] = -0.2203804f;
      sa[541] = -0.27617723f;
      sa[542] = -0.1444853f;
      sa[543] = -0.3800422f;
      sa[544] = 0.19329356f;
      sa[545] = 0.08163902f;
      sa[546] = 0.10107986f;
      sa[547] = 0.25359884f;
      sa[548] = 0.07604733f;
      sa[549] = 0.18963449f;
      sa[550] = -0.003018799f;
      sa[551] = -0.19228159f;
      sa[552] = 0.033681683f;
      sa[553] = -0.105736904f;
      sa[554] = -0.18058503f;
      sa[555] = -0.17596868f;
      sa[556] = -0.31962958f;
      sa[557] = -0.3223904f;
      sa[558] = -0.05997469f;
      sa[559] = 0.08657072f;
      sa[560] = -0.3067397f;
      sa[561] = -0.038535822f;
      sa[562] = 0.2670763f;
      sa[563] = 0.03652315f;
      sa[564] = 0.2517328f;
      sa[565] = 0.052210893f;
      sa[566] = 0.3420496f;
      sa[567] = 0.08912965f;
      sa[568] = -0.0946516f;
      sa[569] = 0.031554908f;
      sa[570] = -0.059335202f;
      sa[571] = -0.06420549f;
      sa[572] = -0.18019763f;
      sa[573] = 0.0786102f;
      sa[574] = 0.38909686f;
      sa[575] = -0.10979561f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_08_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_08_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.43033484f;
      sa[1] = 0.07529336f;
      sa[2] = -0.10439376f;
      sa[3] = -0.19143519f;
      sa[4] = 0.08158765f;
      sa[5] = 0.099376015f;
      sa[6] = 0.26500174f;
      sa[7] = 0.021147182f;
      sa[8] = -0.21476759f;
      sa[9] = 0.18586692f;
      sa[10] = -0.10812516f;
      sa[11] = 0.16246787f;
      sa[12] = 0.104442604f;
      sa[13] = 0.074433096f;
      sa[14] = -0.24194904f;
      sa[15] = 0.3723741f;
      sa[16] = 0.39034224f;
      sa[17] = -0.08089761f;
      sa[18] = 0.034128953f;
      sa[19] = -0.10260234f;
      sa[20] = 0.34863934f;
      sa[21] = 0.005481494f;
      sa[22] = -0.2054609f;
      sa[23] = 0.13021189f;
      sa[24] = -0.340259f;
      sa[25] = 0.20617564f;
      sa[26] = -0.035187684f;
      sa[27] = 0.4371108f;
      sa[28] = -0.3588253f;
      sa[29] = -0.129665f;
      sa[30] = 0.102574915f;
      sa[31] = -0.19656251f;
      sa[32] = -0.3359926f;
      sa[33] = -0.46916044f;
      sa[34] = 0.0015870038f;
      sa[35] = 0.2605252f;
      sa[36] = -0.11053441f;
      sa[37] = -0.08284685f;
      sa[38] = 0.019070657f;
      sa[39] = 0.10842512f;
      sa[40] = -0.2905677f;
      sa[41] = -0.46486238f;
      sa[42] = -0.31435728f;
      sa[43] = -0.4292346f;
      sa[44] = 0.0148921795f;
      sa[45] = -0.35745606f;
      sa[46] = 0.2856988f;
      sa[47] = 0.24384215f;
      sa[48] = -0.3409316f;
      sa[49] = -0.28463107f;
      sa[50] = 0.1753423f;
      sa[51] = -0.07813491f;
      sa[52] = 0.20120755f;
      sa[53] = 0.22261319f;
      sa[54] = -0.092274055f;
      sa[55] = 0.3299152f;
      sa[56] = -0.29379353f;
      sa[57] = -0.32876572f;
      sa[58] = 0.045980394f;
      sa[59] = -0.03660246f;
      sa[60] = 0.37163946f;
      sa[61] = -0.16286415f;
      sa[62] = -0.08903486f;
      sa[63] = 0.1874423f;
      sa[64] = 0.35654345f;
      sa[65] = -0.20088397f;
      sa[66] = 0.10559284f;
      sa[67] = 0.3802765f;
      sa[68] = 0.17248408f;
      sa[69] = -0.3064094f;
      sa[70] = -0.42702696f;
      sa[71] = -0.11110368f;
      sa[72] = -0.36285764f;
      sa[73] = 0.31242964f;
      sa[74] = 0.39896083f;
      sa[75] = -0.033118952f;
      sa[76] = 0.2164102f;
      sa[77] = 0.11628689f;
      sa[78] = -0.36489815f;
      sa[79] = 0.27582055f;
      sa[80] = -0.16180915f;
      sa[81] = 0.043225408f;
      sa[82] = 0.27540225f;
      sa[83] = -0.18333587f;
      sa[84] = -0.443312f;
      sa[85] = -0.3635222f;
      sa[86] = 0.060677946f;
      sa[87] = 0.30828857f;
      sa[88] = -0.45770934f;
      sa[89] = -0.18919663f;
      sa[90] = -0.30801037f;
      sa[91] = 0.3959443f;
      sa[92] = -0.057773367f;
      sa[93] = 0.10205556f;
      sa[94] = -0.41431758f;
      sa[95] = -0.11135373f;
      sa[96] = -0.2976182f;
      sa[97] = 0.014208584f;
      sa[98] = 0.04039361f;
      sa[99] = 0.06877932f;
      sa[100] = -0.33647573f;
      sa[101] = -0.16720265f;
      sa[102] = 0.3344007f;
      sa[103] = -0.035295557f;
      sa[104] = -0.11722664f;
      sa[105] = -0.19110125f;
      sa[106] = 0.34413758f;
      sa[107] = 0.33481702f;
      sa[108] = 0.22113395f;
      sa[109] = 0.041991923f;
      sa[110] = 0.19314028f;
      sa[111] = -0.22373182f;
      sa[112] = -0.2794722f;
      sa[113] = -0.076530926f;
      sa[114] = 0.0038695922f;
      sa[115] = -0.175291f;
      sa[116] = 0.26807615f;
      sa[117] = -0.05398073f;
      sa[118] = -0.4255482f;
      sa[119] = -0.27171695f;
      sa[120] = -0.2114524f;
      sa[121] = 0.13106969f;
      sa[122] = -0.09048111f;
      sa[123] = 0.038577184f;
      sa[124] = -0.20388128f;
      sa[125] = 0.23159927f;
      sa[126] = -0.2609291f;
      sa[127] = 0.035451137f;
      sa[128] = -0.3163763f;
      sa[129] = 0.07111545f;
      sa[130] = -0.06294781f;
      sa[131] = 0.16911452f;
      sa[132] = 0.03401072f;
      sa[133] = 0.10100248f;
      sa[134] = 0.17385957f;
      sa[135] = -0.43025112f;
      sa[136] = 0.07036435f;
      sa[137] = -0.23141411f;
      sa[138] = -0.0015879978f;
      sa[139] = 0.2626991f;
      sa[140] = -0.17984484f;
      sa[141] = -0.08199806f;
      sa[142] = -0.011676449f;
      sa[143] = -0.30016413f;
      sa[144] = 0.2675332f;
      sa[145] = -0.23798871f;
      sa[146] = 0.045277063f;
      sa[147] = -0.019640509f;
      sa[148] = -0.23197706f;
      sa[149] = 0.3315512f;
      sa[150] = -0.18028161f;
      sa[151] = -0.5763542f;
      sa[152] = 0.462762f;
      sa[153] = -0.12526214f;
      sa[154] = 0.3637199f;
      sa[155] = -0.47576275f;
      sa[156] = -0.3700733f;
      sa[157] = -0.30783942f;
      sa[158] = -0.13061649f;
      sa[159] = -0.23126861f;
      sa[160] = 0.36856464f;
      sa[161] = -0.37883335f;
      sa[162] = 0.4946415f;
      sa[163] = -0.24797109f;
      sa[164] = 0.14869642f;
      sa[165] = -0.2122619f;
      sa[166] = 0.29800946f;
      sa[167] = -0.3942049f;
      sa[168] = 0.19916017f;
      sa[169] = -0.50850755f;
      sa[170] = 0.29296398f;
      sa[171] = 0.20910051f;
      sa[172] = 0.39438802f;
      sa[173] = 0.38680607f;
      sa[174] = -0.05525022f;
      sa[175] = -0.016097462f;
      sa[176] = 0.20416416f;
      sa[177] = 0.13884634f;
      sa[178] = -0.2225191f;
      sa[179] = 0.10419384f;
      sa[180] = -0.36696497f;
      sa[181] = -0.14652433f;
      sa[182] = 0.050434846f;
      sa[183] = 0.047312323f;
      sa[184] = 0.47738495f;
      sa[185] = 0.34333968f;
      sa[186] = -0.13804334f;
      sa[187] = -0.24319181f;
      sa[188] = -0.14037146f;
      sa[189] = -0.18078966f;
      sa[190] = -0.19419451f;
      sa[191] = -0.090179294f;
      sa[192] = -0.07760295f;
      sa[193] = 0.14516547f;
      sa[194] = -0.34785748f;
      sa[195] = -0.23255458f;
      sa[196] = 0.14772962f;
      sa[197] = -0.17498587f;
      sa[198] = 0.06701491f;
      sa[199] = 0.43888354f;
      sa[200] = 0.038140893f;
      sa[201] = 0.3159633f;
      sa[202] = 0.24658273f;
      sa[203] = -0.4110544f;
      sa[204] = 0.10327999f;
      sa[205] = 0.33441472f;
      sa[206] = -0.1622257f;
      sa[207] = 0.16683835f;
      sa[208] = -0.24246985f;
      sa[209] = 0.07531473f;
      sa[210] = -0.14014047f;
      sa[211] = -0.36799994f;
      sa[212] = -0.4065923f;
      sa[213] = -0.06717961f;
      sa[214] = -0.398927f;
      sa[215] = -0.1312881f;
      sa[216] = 0.039461903f;
      sa[217] = 0.19187926f;
      sa[218] = -0.017856572f;
      sa[219] = 0.04859091f;
      sa[220] = 0.14495052f;
      sa[221] = -0.036111336f;
      sa[222] = -0.32871446f;
      sa[223] = -0.41114545f;
      sa[224] = 0.31249934f;
      sa[225] = 0.04790463f;
      sa[226] = -0.06100297f;
      sa[227] = 0.042279962f;
      sa[228] = -0.10101755f;
      sa[229] = -0.21751575f;
      sa[230] = -0.29022783f;
      sa[231] = -0.18041961f;
      sa[232] = 0.39226386f;
      sa[233] = -0.28033042f;
      sa[234] = -0.26090568f;
      sa[235] = 0.01193604f;
      sa[236] = -0.3450235f;
      sa[237] = 0.46966597f;
      sa[238] = 0.17469957f;
      sa[239] = -0.116321f;
      sa[240] = -0.15265104f;
      sa[241] = -0.41986105f;
      sa[242] = -0.3277564f;
      sa[243] = 0.32699096f;
      sa[244] = 0.21016972f;
      sa[245] = 0.3080005f;
      sa[246] = 0.30936247f;
      sa[247] = -0.46205834f;
      sa[248] = -0.20893441f;
      sa[249] = 0.05270817f;
      sa[250] = 0.27811036f;
      sa[251] = 0.40154678f;
      sa[252] = 0.19756418f;
      sa[253] = -0.3332474f;
      sa[254] = 0.36459976f;
      sa[255] = 0.12207644f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_08_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_ReLU_08_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.07950916f;
      sa[1] = -1.5643529f;
      sa[2] = -1.5384877f;
      sa[3] = 1.2955986f;
      sa[4] = 0.4042654f;
      sa[5] = -0.2216299f;
      sa[6] = -1.6762756f;
      sa[7] = 1.4416142f;
      sa[8] = 1.6764917f;
      sa[9] = 0.20845273f;
      sa[10] = 1.5732126f;
      sa[11] = 1.3749136f;
      sa[12] = 1.7586311f;
      sa[13] = -0.5690598f;
      sa[14] = -1.9573408f;
      sa[15] = -0.7394386f;
      sa[16] = 0.7575301f;
      sa[17] = -0.7789979f;
      sa[18] = -1.474041f;
      sa[19] = -0.864083f;
      sa[20] = -1.9104712f;
      sa[21] = 0.30327502f;
      sa[22] = -1.93029f;
      sa[23] = -0.5827953f;
      sa[24] = -0.5245333f;
      sa[25] = 1.8540155f;
      sa[26] = -0.325557f;
      sa[27] = 1.1919874f;
      sa[28] = 1.1981187f;
      sa[29] = -0.71085924f;
      sa[30] = 0.15567976f;
      sa[31] = 0.15034312f;
      sa[32] = 0.4574447f;
      sa[33] = 0.0778015f;
      sa[34] = -0.6837289f;
      sa[35] = 0.9453996f;
      sa[36] = 0.49159962f;
      sa[37] = -1.3230731f;
      sa[38] = 0.5795584f;
      sa[39] = -0.19381641f;
      sa[40] = 0.23715526f;
      sa[41] = -0.69891715f;
      sa[42] = 0.515218f;
      sa[43] = -0.029172938f;
      sa[44] = 0.9596379f;
      sa[45] = -1.9562039f;
      sa[46] = -2.2899938f;
      sa[47] = 0.05344808f;
      sa[48] = 1.5875058f;
      sa[49] = -0.22246411f;
      sa[50] = -0.48078775f;
      sa[51] = 1.7733617f;
      sa[52] = -1.6519655f;
      sa[53] = 0.9437653f;
      sa[54] = 1.7464534f;
      sa[55] = 1.0707704f;
      sa[56] = -0.5526582f;
      sa[57] = -0.15658864f;
      sa[58] = 1.038311f;
      sa[59] = 0.7740948f;
      sa[60] = -1.3912772f;
      sa[61] = 0.8981251f;
      sa[62] = -0.352287f;
      sa[63] = -0.82230943f;
      sa[64] = 0.98484915f;
      sa[65] = -0.897497f;
      sa[66] = -1.7281169f;
      sa[67] = -0.11512118f;
      sa[68] = 0.8898315f;
      sa[69] = -1.3374242f;
      sa[70] = -1.5932543f;
      sa[71] = -0.025877463f;
      sa[72] = -0.9451785f;
      sa[73] = -1.1459914f;
      sa[74] = -1.09729f;
      sa[75] = 1.3605579f;
      sa[76] = 1.9157603f;
      sa[77] = -0.59310716f;
      sa[78] = -1.320637f;
      sa[79] = -0.35162294f;
      sa[80] = 0.57893634f;
      sa[81] = -1.6265638f;
      sa[82] = -0.19739608f;
      sa[83] = -1.3665043f;
      sa[84] = 1.5672858f;
      sa[85] = 1.061147f;
      sa[86] = -1.9346104f;
      sa[87] = 1.0352926f;
      sa[88] = -1.5795085f;
      sa[89] = -1.0869778f;
      sa[90] = 0.25902832f;
      sa[91] = 0.034877498f;
      sa[92] = 1.3317606f;
      sa[93] = 1.8738521f;
      sa[94] = 1.5598115f;
      sa[95] = 0.65637684f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_08 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_08_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_08_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_08_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_ReLU_08_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


