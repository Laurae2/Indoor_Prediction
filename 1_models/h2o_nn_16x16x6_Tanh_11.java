/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:49:11.249+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_11

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_11 > h2o_nn_16x16x6_Tanh_11.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_11.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_11", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_11 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_11_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_11_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_11_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_11_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_11_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_11_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_11_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_11_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_11_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_11_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_11_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_11_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_11.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_11_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.2548076923076923,0.18269230769230768,0.057692307692307696,0.125,0.2548076923076923,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_11() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-8900740582771053568L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_11_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_11_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_11_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_11_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_11_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_11_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_11_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_11_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_11_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_11_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_11_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.04717640680366739;
      sa[1] = -0.23986415483542073;
      sa[2] = 0.19159496808805584;
      sa[3] = -0.28295062224436235;
      sa[4] = 0.0859360454997997;
      sa[5] = 0.061663442844360455;
      sa[6] = 0.2899849452932633;
      sa[7] = -0.02369710459062781;
      sa[8] = -0.11876942586439719;
      sa[9] = 0.11746484750998487;
      sa[10] = 0.019293112477070357;
      sa[11] = -0.05346103805165367;
      sa[12] = 0.25709097723051855;
      sa[13] = 0.06880848206311352;
      sa[14] = -0.1563669270343051;
      sa[15] = -0.04862013570460047;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_11_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_11_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.05180279311915806;
      sa[1] = -0.05944130333755385;
      sa[2] = -0.12203518052295954;
      sa[3] = 0.11362082426733965;
      sa[4] = 0.09225603664332939;
      sa[5] = -0.014448073466299623;
      sa[6] = 0.04584928730597973;
      sa[7] = 0.07810811861674469;
      sa[8] = -0.08698985673018944;
      sa[9] = -0.05298536475946801;
      sa[10] = 0.3414798563126652;
      sa[11] = 0.2720226555967916;
      sa[12] = -0.02599491533816319;
      sa[13] = 0.1278765925270116;
      sa[14] = -0.026120528207297804;
      sa[15] = -0.1460035103273046;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_11_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_11_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.058430940635836884;
      sa[1] = -0.21320313684472394;
      sa[2] = -0.10862372725771012;
      sa[3] = 0.02753640102257595;
      sa[4] = 0.04756611484960131;
      sa[5] = -0.08924259904935886;
    }
  }
}
class h2o_nn_16x16x6_Tanh_11_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_11_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_11_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.052717716f;
      sa[1] = 0.27021596f;
      sa[2] = 0.3981312f;
      sa[3] = -0.15931018f;
      sa[4] = -0.24977651f;
      sa[5] = -0.2856159f;
      sa[6] = -0.017898235f;
      sa[7] = 0.26180345f;
      sa[8] = 0.09450949f;
      sa[9] = -0.121644184f;
      sa[10] = -0.17060007f;
      sa[11] = -0.19147372f;
      sa[12] = 0.124987096f;
      sa[13] = -0.32725367f;
      sa[14] = -0.06246269f;
      sa[15] = 0.15212764f;
      sa[16] = 0.2048104f;
      sa[17] = 0.21064015f;
      sa[18] = -0.04111467f;
      sa[19] = -0.06390013f;
      sa[20] = 0.30326688f;
      sa[21] = -0.33157656f;
      sa[22] = 0.3152412f;
      sa[23] = 0.160578f;
      sa[24] = 0.38632238f;
      sa[25] = 0.21232887f;
      sa[26] = -0.24926527f;
      sa[27] = 0.14838229f;
      sa[28] = 0.22803451f;
      sa[29] = -0.3884664f;
      sa[30] = -0.29089898f;
      sa[31] = 0.19603014f;
      sa[32] = 0.19008845f;
      sa[33] = -0.21599212f;
      sa[34] = -0.110137045f;
      sa[35] = -0.21396512f;
      sa[36] = 0.09685294f;
      sa[37] = 0.23854978f;
      sa[38] = -0.24385777f;
      sa[39] = 0.3693637f;
      sa[40] = 0.025005287f;
      sa[41] = -0.084482096f;
      sa[42] = -0.195908f;
      sa[43] = 0.12419244f;
      sa[44] = 0.32413515f;
      sa[45] = -0.5060463f;
      sa[46] = 0.0070542595f;
      sa[47] = -0.1794687f;
      sa[48] = 0.23697677f;
      sa[49] = 0.27123752f;
      sa[50] = 0.24230939f;
      sa[51] = -0.12724066f;
      sa[52] = 0.0388912f;
      sa[53] = 0.20500073f;
      sa[54] = 0.41195226f;
      sa[55] = -0.032424532f;
      sa[56] = -0.19825044f;
      sa[57] = -0.34317875f;
      sa[58] = 0.13448031f;
      sa[59] = 0.03016709f;
      sa[60] = -0.44732013f;
      sa[61] = 0.3566037f;
      sa[62] = 0.2654476f;
      sa[63] = -0.4930212f;
      sa[64] = 0.23058383f;
      sa[65] = 0.2459501f;
      sa[66] = 0.040848605f;
      sa[67] = 0.2838936f;
      sa[68] = -0.24669212f;
      sa[69] = -0.10588898f;
      sa[70] = 0.04937798f;
      sa[71] = 0.528933f;
      sa[72] = -0.15599969f;
      sa[73] = 0.21100225f;
      sa[74] = -0.19071066f;
      sa[75] = 0.06703504f;
      sa[76] = -0.12743014f;
      sa[77] = 0.052718263f;
      sa[78] = -0.022009017f;
      sa[79] = 0.13790008f;
      sa[80] = -0.27138272f;
      sa[81] = -0.06517598f;
      sa[82] = -0.033357654f;
      sa[83] = 0.13942672f;
      sa[84] = -0.018187076f;
      sa[85] = -0.12568198f;
      sa[86] = 0.112858005f;
      sa[87] = 0.1174063f;
      sa[88] = 0.21480198f;
      sa[89] = 0.07210421f;
      sa[90] = -0.28006166f;
      sa[91] = 0.3443407f;
      sa[92] = 0.13209188f;
      sa[93] = -0.17979637f;
      sa[94] = -0.13360989f;
      sa[95] = -0.41902125f;
      sa[96] = 0.17589138f;
      sa[97] = -0.06937599f;
      sa[98] = 0.19987616f;
      sa[99] = 0.15180783f;
      sa[100] = -0.028357897f;
      sa[101] = -0.17095609f;
      sa[102] = -0.19034475f;
      sa[103] = -0.13962597f;
      sa[104] = 0.0075926674f;
      sa[105] = -0.17331491f;
      sa[106] = -0.24074586f;
      sa[107] = 0.07335081f;
      sa[108] = 0.19115572f;
      sa[109] = -0.21079294f;
      sa[110] = -0.21836677f;
      sa[111] = 0.19174398f;
      sa[112] = -0.11530648f;
      sa[113] = -0.0493432f;
      sa[114] = -0.24972169f;
      sa[115] = 0.20196171f;
      sa[116] = -0.22385441f;
      sa[117] = 0.0025417742f;
      sa[118] = -0.05141012f;
      sa[119] = 0.03555839f;
      sa[120] = 0.21664563f;
      sa[121] = 0.2459205f;
      sa[122] = 0.4913227f;
      sa[123] = 0.48908204f;
      sa[124] = 0.321027f;
      sa[125] = 0.22280888f;
      sa[126] = -0.17902368f;
      sa[127] = -0.62402886f;
      sa[128] = -0.009016786f;
      sa[129] = -0.01730938f;
      sa[130] = -0.08934123f;
      sa[131] = 0.4656867f;
      sa[132] = 0.20439117f;
      sa[133] = -0.060383677f;
      sa[134] = 0.13158053f;
      sa[135] = -0.73223037f;
      sa[136] = -0.46995246f;
      sa[137] = -0.3347057f;
      sa[138] = -0.02407596f;
      sa[139] = -0.11908031f;
      sa[140] = -0.09109078f;
      sa[141] = -0.11885295f;
      sa[142] = 0.31808388f;
      sa[143] = -0.27430344f;
      sa[144] = 0.28785405f;
      sa[145] = -0.17794809f;
      sa[146] = -0.47693628f;
      sa[147] = 0.44666034f;
      sa[148] = 0.084481865f;
      sa[149] = 0.15213998f;
      sa[150] = 0.24402668f;
      sa[151] = -0.17320876f;
      sa[152] = 0.053938728f;
      sa[153] = 0.2632369f;
      sa[154] = 0.31087255f;
      sa[155] = -0.34728748f;
      sa[156] = 0.17561984f;
      sa[157] = -0.21910268f;
      sa[158] = 0.16398948f;
      sa[159] = 0.2606714f;
      sa[160] = -0.09153018f;
      sa[161] = 0.12961775f;
      sa[162] = -0.0606783f;
      sa[163] = -0.1750128f;
      sa[164] = 0.26730683f;
      sa[165] = -0.07136087f;
      sa[166] = -0.07898865f;
      sa[167] = -0.08688191f;
      sa[168] = 0.12058212f;
      sa[169] = 0.35239154f;
      sa[170] = 0.14479066f;
      sa[171] = -0.0024200936f;
      sa[172] = -0.11368906f;
      sa[173] = -0.21086295f;
      sa[174] = -0.08432153f;
      sa[175] = -0.3148644f;
      sa[176] = 0.008014654f;
      sa[177] = -0.14135593f;
      sa[178] = 0.007830009f;
      sa[179] = 0.07309999f;
      sa[180] = 0.025499403f;
      sa[181] = -0.31537196f;
      sa[182] = -0.27331185f;
      sa[183] = 0.12833315f;
      sa[184] = 0.37386277f;
      sa[185] = 0.18609124f;
      sa[186] = -0.3490651f;
      sa[187] = -0.09279728f;
      sa[188] = 0.055892244f;
      sa[189] = 0.05595002f;
      sa[190] = -0.14106812f;
      sa[191] = -0.08464556f;
      sa[192] = -0.13789362f;
      sa[193] = 0.24073216f;
      sa[194] = 0.040921837f;
      sa[195] = 0.23906584f;
      sa[196] = 0.15870221f;
      sa[197] = -0.22534071f;
      sa[198] = -0.12966171f;
      sa[199] = 0.028757388f;
      sa[200] = 0.06521119f;
      sa[201] = -0.23869501f;
      sa[202] = 0.11457332f;
      sa[203] = -0.11661713f;
      sa[204] = -0.24122596f;
      sa[205] = -0.029914718f;
      sa[206] = 0.15314102f;
      sa[207] = 0.3016022f;
      sa[208] = -0.18096825f;
      sa[209] = 0.026168104f;
      sa[210] = -0.25771192f;
      sa[211] = -0.30467513f;
      sa[212] = 0.1855809f;
      sa[213] = -0.35462812f;
      sa[214] = -0.08613645f;
      sa[215] = 0.02509542f;
      sa[216] = 0.123577215f;
      sa[217] = 0.25751317f;
      sa[218] = -0.0791482f;
      sa[219] = 0.42969513f;
      sa[220] = -0.12359202f;
      sa[221] = 0.22486277f;
      sa[222] = 0.4059032f;
      sa[223] = 0.059033856f;
      sa[224] = 0.19895384f;
      sa[225] = 0.26410136f;
      sa[226] = -0.2058319f;
      sa[227] = 0.73798347f;
      sa[228] = 0.17688558f;
      sa[229] = 0.24493666f;
      sa[230] = 0.41164383f;
      sa[231] = -0.20252581f;
      sa[232] = -0.18345998f;
      sa[233] = 0.035502687f;
      sa[234] = -0.29506937f;
      sa[235] = -0.33428904f;
      sa[236] = -0.008741027f;
      sa[237] = -0.18870609f;
      sa[238] = -0.0913438f;
      sa[239] = 0.054544628f;
      sa[240] = 0.103535935f;
      sa[241] = -0.20485735f;
      sa[242] = -0.19606677f;
      sa[243] = -0.32630706f;
      sa[244] = -0.16224028f;
      sa[245] = -0.07708857f;
      sa[246] = -0.16782947f;
      sa[247] = -0.009739166f;
      sa[248] = 0.087515526f;
      sa[249] = 0.3114383f;
      sa[250] = -0.30915463f;
      sa[251] = -0.22808746f;
      sa[252] = -0.250111f;
      sa[253] = -0.3130178f;
      sa[254] = -0.5781972f;
      sa[255] = 0.6688548f;
      sa[256] = -0.25478226f;
      sa[257] = 0.4757117f;
      sa[258] = -0.24111988f;
      sa[259] = 0.06342804f;
      sa[260] = 0.029367328f;
      sa[261] = -0.46868467f;
      sa[262] = -0.26513425f;
      sa[263] = 0.35944712f;
      sa[264] = -0.052397486f;
      sa[265] = 0.3930633f;
      sa[266] = -0.11422099f;
      sa[267] = -0.123895995f;
      sa[268] = 0.10814817f;
      sa[269] = -0.44600284f;
      sa[270] = -0.036123842f;
      sa[271] = -0.102615215f;
      sa[272] = -0.16489355f;
      sa[273] = -0.28076845f;
      sa[274] = 0.20919885f;
      sa[275] = -0.17452732f;
      sa[276] = 0.022175413f;
      sa[277] = -0.15696996f;
      sa[278] = -0.11385761f;
      sa[279] = -0.29914126f;
      sa[280] = -0.2799914f;
      sa[281] = 0.20186873f;
      sa[282] = 0.007939137f;
      sa[283] = -0.06874936f;
      sa[284] = 0.048029076f;
      sa[285] = -0.41721112f;
      sa[286] = 0.61851376f;
      sa[287] = 0.24134077f;
      sa[288] = -0.21543764f;
      sa[289] = -0.19755973f;
      sa[290] = -0.033343438f;
      sa[291] = -0.2590214f;
      sa[292] = 0.110203795f;
      sa[293] = -0.28199038f;
      sa[294] = 0.030640678f;
      sa[295] = -0.20729096f;
      sa[296] = 0.18364722f;
      sa[297] = 0.31975827f;
      sa[298] = -0.06438864f;
      sa[299] = -0.17695753f;
      sa[300] = -0.013783619f;
      sa[301] = -0.26475808f;
      sa[302] = 0.080287956f;
      sa[303] = 0.019370664f;
      sa[304] = -0.15429595f;
      sa[305] = 0.08098304f;
      sa[306] = 0.34582022f;
      sa[307] = 0.027802726f;
      sa[308] = 0.1330256f;
      sa[309] = 0.19292936f;
      sa[310] = 0.21939604f;
      sa[311] = 0.4077355f;
      sa[312] = -0.19861042f;
      sa[313] = -0.24394432f;
      sa[314] = -0.11527646f;
      sa[315] = 0.16597714f;
      sa[316] = 0.044120032f;
      sa[317] = -0.050418828f;
      sa[318] = 0.026032234f;
      sa[319] = 0.3261859f;
      sa[320] = -0.14123932f;
      sa[321] = 0.26592907f;
      sa[322] = 0.12081624f;
      sa[323] = -0.11601327f;
      sa[324] = -0.05648758f;
      sa[325] = 0.26028845f;
      sa[326] = -0.33991522f;
      sa[327] = 0.094977185f;
      sa[328] = -0.090279385f;
      sa[329] = 0.21934283f;
      sa[330] = -0.18940341f;
      sa[331] = 0.15794519f;
      sa[332] = -0.29452997f;
      sa[333] = 0.14738445f;
      sa[334] = -0.050745904f;
      sa[335] = 0.15067369f;
      sa[336] = -0.09686008f;
      sa[337] = -0.16198993f;
      sa[338] = 0.41681314f;
      sa[339] = -0.06690204f;
      sa[340] = -0.45425373f;
      sa[341] = -0.30366096f;
      sa[342] = 0.4730568f;
      sa[343] = -0.3256878f;
      sa[344] = -0.12957063f;
      sa[345] = 0.23325229f;
      sa[346] = 0.26717144f;
      sa[347] = -0.032390427f;
      sa[348] = 0.25839928f;
      sa[349] = -0.2400367f;
      sa[350] = -0.12820718f;
      sa[351] = -0.033839345f;
      sa[352] = 0.21181361f;
      sa[353] = -0.046479307f;
      sa[354] = 0.03876268f;
      sa[355] = 0.16616634f;
      sa[356] = -0.092144914f;
      sa[357] = 0.2005632f;
      sa[358] = -0.22160296f;
      sa[359] = 0.13244735f;
      sa[360] = 0.16457789f;
      sa[361] = -0.119661495f;
      sa[362] = -0.6104764f;
      sa[363] = 0.1781825f;
      sa[364] = -0.25175685f;
      sa[365] = -0.44021124f;
      sa[366] = -0.18021849f;
      sa[367] = -0.47946516f;
      sa[368] = -0.21661833f;
      sa[369] = 0.1342469f;
      sa[370] = -0.21784632f;
      sa[371] = 0.07721391f;
      sa[372] = -0.10956674f;
      sa[373] = 0.13699414f;
      sa[374] = -0.34929928f;
      sa[375] = -0.557002f;
      sa[376] = -0.48329267f;
      sa[377] = -0.40726486f;
      sa[378] = 0.22820507f;
      sa[379] = 0.046672646f;
      sa[380] = -0.1471201f;
      sa[381] = -0.10844894f;
      sa[382] = -0.18045184f;
      sa[383] = -0.6745483f;
      sa[384] = -0.27199635f;
      sa[385] = 0.0774093f;
      sa[386] = -0.2702278f;
      sa[387] = 0.12525807f;
      sa[388] = 0.042752817f;
      sa[389] = -0.019676622f;
      sa[390] = -0.18156374f;
      sa[391] = -0.44595456f;
      sa[392] = 0.3845368f;
      sa[393] = 0.24576521f;
      sa[394] = -0.23613463f;
      sa[395] = 0.044111066f;
      sa[396] = 0.29614955f;
      sa[397] = -0.23943366f;
      sa[398] = 0.036792994f;
      sa[399] = 0.33205396f;
      sa[400] = 0.25597185f;
      sa[401] = 0.39034268f;
      sa[402] = -0.12659469f;
      sa[403] = 0.10227304f;
      sa[404] = 0.25310063f;
      sa[405] = -0.25162354f;
      sa[406] = -0.067054115f;
      sa[407] = 0.26152185f;
      sa[408] = -0.26609528f;
      sa[409] = -0.18897492f;
      sa[410] = -0.20658283f;
      sa[411] = -0.040987503f;
      sa[412] = -0.11436292f;
      sa[413] = 0.120926075f;
      sa[414] = -0.19016714f;
      sa[415] = 0.3513744f;
      sa[416] = -0.25477794f;
      sa[417] = 0.014631155f;
      sa[418] = -0.0055082254f;
      sa[419] = 0.12456693f;
      sa[420] = 0.23244633f;
      sa[421] = 0.2719473f;
      sa[422] = 0.18835066f;
      sa[423] = -0.029926568f;
      sa[424] = 0.09881614f;
      sa[425] = -0.07032555f;
      sa[426] = -0.23701383f;
      sa[427] = 0.19109902f;
      sa[428] = 0.027437612f;
      sa[429] = -0.113951884f;
      sa[430] = 0.20630057f;
      sa[431] = -0.10048492f;
      sa[432] = -0.081112705f;
      sa[433] = 0.050810654f;
      sa[434] = 0.07532294f;
      sa[435] = 0.219409f;
      sa[436] = -0.16146947f;
      sa[437] = -0.08744425f;
      sa[438] = 0.0010918658f;
      sa[439] = -0.017694095f;
      sa[440] = 0.33975062f;
      sa[441] = -0.60170203f;
      sa[442] = 0.03713636f;
      sa[443] = 0.06833565f;
      sa[444] = -0.25632194f;
      sa[445] = 0.15993202f;
      sa[446] = 0.13976826f;
      sa[447] = -0.14058715f;
      sa[448] = -0.011471035f;
      sa[449] = 0.12700993f;
      sa[450] = -0.21495903f;
      sa[451] = 0.16094495f;
      sa[452] = 0.18698871f;
      sa[453] = -0.024849216f;
      sa[454] = -0.16114713f;
      sa[455] = -0.32334125f;
      sa[456] = -0.10887365f;
      sa[457] = -0.035937816f;
      sa[458] = -0.20454602f;
      sa[459] = 0.5276003f;
      sa[460] = 0.26595607f;
      sa[461] = 0.390177f;
      sa[462] = 0.23600934f;
      sa[463] = 0.17806318f;
      sa[464] = -0.1588772f;
      sa[465] = 0.1536301f;
      sa[466] = 0.0038683051f;
      sa[467] = 0.061235946f;
      sa[468] = -0.057229113f;
      sa[469] = 0.38259497f;
      sa[470] = 0.3250268f;
      sa[471] = 0.113371514f;
      sa[472] = 0.0025717157f;
      sa[473] = -0.08409142f;
      sa[474] = -8.1208994E-4f;
      sa[475] = 0.3219855f;
      sa[476] = 0.080459766f;
      sa[477] = 0.007440661f;
      sa[478] = 0.3420314f;
      sa[479] = -0.12089165f;
      sa[480] = -0.2707093f;
      sa[481] = -0.19002688f;
      sa[482] = -0.21234377f;
      sa[483] = 0.28401464f;
      sa[484] = 0.36012957f;
      sa[485] = 0.41317105f;
      sa[486] = 0.3521004f;
      sa[487] = -0.21468228f;
      sa[488] = -0.23047699f;
      sa[489] = 0.029421005f;
      sa[490] = 0.05989959f;
      sa[491] = -0.16359824f;
      sa[492] = 0.24856755f;
      sa[493] = 0.3749311f;
      sa[494] = -0.0866656f;
      sa[495] = 0.15742216f;
      sa[496] = -0.06515738f;
      sa[497] = -0.021416293f;
      sa[498] = 0.17986068f;
      sa[499] = 0.19084355f;
      sa[500] = 0.028546786f;
      sa[501] = 0.14350377f;
      sa[502] = 0.45905924f;
      sa[503] = 0.1185225f;
      sa[504] = -0.11724808f;
      sa[505] = -0.12819806f;
      sa[506] = 0.53452045f;
      sa[507] = -0.36200064f;
      sa[508] = 0.035961f;
      sa[509] = 0.181128f;
      sa[510] = 0.21396534f;
      sa[511] = -0.36667168f;
      sa[512] = 0.081735104f;
      sa[513] = -0.13801467f;
      sa[514] = 0.13934126f;
      sa[515] = -0.08973057f;
      sa[516] = -0.05236394f;
      sa[517] = 0.049404837f;
      sa[518] = 0.11686135f;
      sa[519] = -0.17470978f;
      sa[520] = 0.3343797f;
      sa[521] = 0.15868539f;
      sa[522] = 0.008715937f;
      sa[523] = 0.21657047f;
      sa[524] = 0.15668139f;
      sa[525] = 0.14096351f;
      sa[526] = -0.018212406f;
      sa[527] = -0.13441074f;
      sa[528] = 0.06925455f;
      sa[529] = 0.11300452f;
      sa[530] = -0.26638278f;
      sa[531] = 0.016880943f;
      sa[532] = 0.09085173f;
      sa[533] = 0.044505708f;
      sa[534] = 0.06720624f;
      sa[535] = -0.14032756f;
      sa[536] = -0.034060627f;
      sa[537] = 0.05425722f;
      sa[538] = 0.028401125f;
      sa[539] = 0.16781762f;
      sa[540] = -0.326335f;
      sa[541] = -0.16928662f;
      sa[542] = -0.23201862f;
      sa[543] = -0.20753735f;
      sa[544] = 0.024200177f;
      sa[545] = 0.050377805f;
      sa[546] = -0.02813405f;
      sa[547] = 0.38098216f;
      sa[548] = 0.0161025f;
      sa[549] = 0.26238355f;
      sa[550] = 0.13173172f;
      sa[551] = -0.22404386f;
      sa[552] = 0.009406063f;
      sa[553] = -0.1068567f;
      sa[554] = -0.16803549f;
      sa[555] = -0.1372829f;
      sa[556] = -0.36603805f;
      sa[557] = -0.2714707f;
      sa[558] = -0.0959699f;
      sa[559] = 0.07826238f;
      sa[560] = -0.41236624f;
      sa[561] = -0.22129628f;
      sa[562] = 0.15547933f;
      sa[563] = -0.1365204f;
      sa[564] = 0.27545783f;
      sa[565] = 0.07506733f;
      sa[566] = 0.3850453f;
      sa[567] = 0.09887119f;
      sa[568] = -0.18260144f;
      sa[569] = -0.11691502f;
      sa[570] = -0.11848779f;
      sa[571] = -0.16094416f;
      sa[572] = -0.058237184f;
      sa[573] = 0.04656444f;
      sa[574] = 0.39356232f;
      sa[575] = -0.2207907f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_11_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_11_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.32353145f;
      sa[1] = 0.16331536f;
      sa[2] = -0.17895532f;
      sa[3] = -0.038489003f;
      sa[4] = 0.0775548f;
      sa[5] = 0.06580346f;
      sa[6] = 0.3423832f;
      sa[7] = 0.073921025f;
      sa[8] = -0.3885107f;
      sa[9] = 0.13274746f;
      sa[10] = -0.12934625f;
      sa[11] = 0.19312693f;
      sa[12] = 0.15583107f;
      sa[13] = 0.070876844f;
      sa[14] = -0.34286803f;
      sa[15] = 0.2820041f;
      sa[16] = 0.4469713f;
      sa[17] = -0.32383478f;
      sa[18] = 0.015259753f;
      sa[19] = 0.03900598f;
      sa[20] = 0.19673853f;
      sa[21] = -0.14285083f;
      sa[22] = -0.05800486f;
      sa[23] = 0.25757495f;
      sa[24] = -0.61241406f;
      sa[25] = 0.24304296f;
      sa[26] = -0.04645615f;
      sa[27] = 0.43555862f;
      sa[28] = -0.24903558f;
      sa[29] = -0.3085959f;
      sa[30] = -0.12289175f;
      sa[31] = -0.33346826f;
      sa[32] = -0.20534791f;
      sa[33] = -0.8549173f;
      sa[34] = 0.1326265f;
      sa[35] = 0.5128001f;
      sa[36] = -0.11451373f;
      sa[37] = -0.11589147f;
      sa[38] = 0.22049052f;
      sa[39] = 0.090404674f;
      sa[40] = -0.26640397f;
      sa[41] = -0.32130796f;
      sa[42] = -0.32675418f;
      sa[43] = -0.63002217f;
      sa[44] = -0.13888058f;
      sa[45] = -0.1694544f;
      sa[46] = 0.2501438f;
      sa[47] = 0.33861652f;
      sa[48] = -0.41678333f;
      sa[49] = -0.27289408f;
      sa[50] = 0.10339247f;
      sa[51] = -0.15171185f;
      sa[52] = 0.20208941f;
      sa[53] = 0.3158258f;
      sa[54] = -0.019999512f;
      sa[55] = 0.71256274f;
      sa[56] = -0.36950058f;
      sa[57] = -0.29632035f;
      sa[58] = 0.1770392f;
      sa[59] = 0.08134219f;
      sa[60] = 0.606959f;
      sa[61] = -0.3209035f;
      sa[62] = -0.14661764f;
      sa[63] = 0.328945f;
      sa[64] = 0.335086f;
      sa[65] = -0.1561473f;
      sa[66] = 0.1262828f;
      sa[67] = 0.4980833f;
      sa[68] = 0.41974533f;
      sa[69] = -0.21591488f;
      sa[70] = -0.38232276f;
      sa[71] = -0.18837109f;
      sa[72] = -0.21092573f;
      sa[73] = 0.37641114f;
      sa[74] = 0.35154232f;
      sa[75] = -0.049737133f;
      sa[76] = 0.05109108f;
      sa[77] = 0.2560283f;
      sa[78] = -0.4626496f;
      sa[79] = 0.3181638f;
      sa[80] = -0.15380296f;
      sa[81] = -0.07068005f;
      sa[82] = 0.28704035f;
      sa[83] = -0.25644085f;
      sa[84] = -0.49431384f;
      sa[85] = -0.40525156f;
      sa[86] = 0.0356393f;
      sa[87] = 0.284845f;
      sa[88] = -0.42607242f;
      sa[89] = -0.23056449f;
      sa[90] = -0.48144245f;
      sa[91] = 0.27673438f;
      sa[92] = 0.027713122f;
      sa[93] = 0.2621677f;
      sa[94] = -0.17503162f;
      sa[95] = -0.068452604f;
      sa[96] = -0.29411533f;
      sa[97] = -0.042330325f;
      sa[98] = -0.023696946f;
      sa[99] = 0.19350538f;
      sa[100] = -0.3290617f;
      sa[101] = -0.12099539f;
      sa[102] = 0.44117936f;
      sa[103] = 0.19431284f;
      sa[104] = -0.20931008f;
      sa[105] = -0.16432293f;
      sa[106] = 0.38221583f;
      sa[107] = 0.3865995f;
      sa[108] = 0.32534337f;
      sa[109] = 0.0034009614f;
      sa[110] = 0.13170564f;
      sa[111] = -0.18552792f;
      sa[112] = -0.2856377f;
      sa[113] = -0.08562071f;
      sa[114] = 0.08402298f;
      sa[115] = -0.29931352f;
      sa[116] = 0.47434518f;
      sa[117] = 0.2770448f;
      sa[118] = -0.41726717f;
      sa[119] = 0.0075508184f;
      sa[120] = -0.12337203f;
      sa[121] = 0.14063627f;
      sa[122] = 0.060703147f;
      sa[123] = 0.1760405f;
      sa[124] = -0.22618909f;
      sa[125] = 0.4781932f;
      sa[126] = -0.16925412f;
      sa[127] = 0.3717778f;
      sa[128] = -0.19415833f;
      sa[129] = 0.0035883128f;
      sa[130] = 0.026243655f;
      sa[131] = -0.7251777f;
      sa[132] = -0.11770693f;
      sa[133] = 0.11741819f;
      sa[134] = 0.19447899f;
      sa[135] = -0.5180922f;
      sa[136] = 0.14152254f;
      sa[137] = -0.1530918f;
      sa[138] = 0.1673299f;
      sa[139] = 0.32910174f;
      sa[140] = 0.09743499f;
      sa[141] = -0.10243244f;
      sa[142] = 0.15503222f;
      sa[143] = -0.11629358f;
      sa[144] = 0.3402493f;
      sa[145] = -0.38850674f;
      sa[146] = 0.04654415f;
      sa[147] = -0.4702236f;
      sa[148] = -0.5235455f;
      sa[149] = 0.14219394f;
      sa[150] = -0.2790677f;
      sa[151] = -0.645604f;
      sa[152] = 0.4441261f;
      sa[153] = -0.04761235f;
      sa[154] = 0.37920383f;
      sa[155] = -0.5963418f;
      sa[156] = -0.20801388f;
      sa[157] = -0.43400863f;
      sa[158] = 0.1486916f;
      sa[159] = -0.23920982f;
      sa[160] = 0.36377832f;
      sa[161] = -0.4763538f;
      sa[162] = 0.47076255f;
      sa[163] = -0.64388037f;
      sa[164] = 0.05599621f;
      sa[165] = -0.1061881f;
      sa[166] = 0.37946367f;
      sa[167] = -0.44831526f;
      sa[168] = 0.32270503f;
      sa[169] = -0.35606954f;
      sa[170] = 0.36823577f;
      sa[171] = 0.1491444f;
      sa[172] = 0.6736181f;
      sa[173] = 0.34096357f;
      sa[174] = 0.062456056f;
      sa[175] = 0.053052988f;
      sa[176] = -0.4517349f;
      sa[177] = 0.31861824f;
      sa[178] = -0.4132881f;
      sa[179] = -0.015344908f;
      sa[180] = -0.4151681f;
      sa[181] = -0.37518248f;
      sa[182] = 0.15390056f;
      sa[183] = -0.16413194f;
      sa[184] = 0.51916707f;
      sa[185] = 0.4627259f;
      sa[186] = -0.0610845f;
      sa[187] = -0.06535589f;
      sa[188] = -0.04384971f;
      sa[189] = -0.5629517f;
      sa[190] = -0.42980114f;
      sa[191] = -0.3312846f;
      sa[192] = -0.069794886f;
      sa[193] = 0.16135724f;
      sa[194] = -0.28738686f;
      sa[195] = -0.3416914f;
      sa[196] = 0.17201495f;
      sa[197] = -0.19388326f;
      sa[198] = -0.03027904f;
      sa[199] = 0.26454863f;
      sa[200] = 0.10075265f;
      sa[201] = 0.27608722f;
      sa[202] = 0.21515782f;
      sa[203] = -0.42819738f;
      sa[204] = -0.014428096f;
      sa[205] = 0.34033754f;
      sa[206] = -0.14329979f;
      sa[207] = 0.16142394f;
      sa[208] = -0.24027522f;
      sa[209] = 0.24107823f;
      sa[210] = -0.18837003f;
      sa[211] = -0.12801927f;
      sa[212] = -0.23153543f;
      sa[213] = 0.09057273f;
      sa[214] = -0.4062634f;
      sa[215] = 0.056845732f;
      sa[216] = 0.22214483f;
      sa[217] = 0.2530408f;
      sa[218] = -0.13047393f;
      sa[219] = 0.11706436f;
      sa[220] = 0.14656027f;
      sa[221] = 0.1482783f;
      sa[222] = -0.1727423f;
      sa[223] = -0.23625275f;
      sa[224] = 0.29088697f;
      sa[225] = 0.03770008f;
      sa[226] = -0.04404046f;
      sa[227] = 0.21504568f;
      sa[228] = -0.05657547f;
      sa[229] = -0.28707373f;
      sa[230] = -0.29153648f;
      sa[231] = -0.2893963f;
      sa[232] = 0.5019513f;
      sa[233] = -0.2317416f;
      sa[234] = -0.43511903f;
      sa[235] = -0.14390868f;
      sa[236] = -0.6373906f;
      sa[237] = 0.6254481f;
      sa[238] = 0.31988677f;
      sa[239] = -0.12655206f;
      sa[240] = 0.07178577f;
      sa[241] = -0.68572015f;
      sa[242] = -0.16895665f;
      sa[243] = 0.33348095f;
      sa[244] = 0.12383856f;
      sa[245] = 0.17654496f;
      sa[246] = 0.20828378f;
      sa[247] = -0.7222418f;
      sa[248] = -0.16771963f;
      sa[249] = 0.048468057f;
      sa[250] = 0.12942599f;
      sa[251] = 0.19689812f;
      sa[252] = -0.06283817f;
      sa[253] = -0.11682365f;
      sa[254] = 0.40664232f;
      sa[255] = 0.082435854f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_11_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_Tanh_11_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.175838f;
      sa[1] = -1.4886466f;
      sa[2] = -1.6849908f;
      sa[3] = 1.5602199f;
      sa[4] = 0.39191967f;
      sa[5] = -0.2060788f;
      sa[6] = -1.6582268f;
      sa[7] = 1.6211265f;
      sa[8] = 1.815468f;
      sa[9] = 0.52559286f;
      sa[10] = 1.88929f;
      sa[11] = 1.356643f;
      sa[12] = 1.9299226f;
      sa[13] = -0.50547546f;
      sa[14] = -1.9266211f;
      sa[15] = -0.6415924f;
      sa[16] = 0.67003495f;
      sa[17] = -0.79741454f;
      sa[18] = -1.4684771f;
      sa[19] = -1.2701055f;
      sa[20] = -1.9610589f;
      sa[21] = 0.3166321f;
      sa[22] = -2.1199267f;
      sa[23] = -0.7436526f;
      sa[24] = -0.48627445f;
      sa[25] = 2.157008f;
      sa[26] = -0.18239596f;
      sa[27] = 1.2945677f;
      sa[28] = 1.0875252f;
      sa[29] = -0.6706416f;
      sa[30] = 0.31259608f;
      sa[31] = 0.07214771f;
      sa[32] = 0.5919075f;
      sa[33] = 0.25911283f;
      sa[34] = -0.56125975f;
      sa[35] = 0.88534343f;
      sa[36] = 0.6565459f;
      sa[37] = -1.2719536f;
      sa[38] = 0.58292335f;
      sa[39] = -0.24662551f;
      sa[40] = 0.24184631f;
      sa[41] = -0.5437774f;
      sa[42] = 0.6155966f;
      sa[43] = -0.026423668f;
      sa[44] = 0.98531604f;
      sa[45] = -2.0750027f;
      sa[46] = -2.122758f;
      sa[47] = 0.15988727f;
      sa[48] = 1.6200645f;
      sa[49] = -0.11949928f;
      sa[50] = -0.41526264f;
      sa[51] = 1.9130259f;
      sa[52] = -1.7061282f;
      sa[53] = 1.0550449f;
      sa[54] = 1.8930924f;
      sa[55] = 1.0233572f;
      sa[56] = -0.64856774f;
      sa[57] = -0.32210013f;
      sa[58] = 0.9464261f;
      sa[59] = 0.7393428f;
      sa[60] = -1.353093f;
      sa[61] = 0.8565477f;
      sa[62] = -0.43354428f;
      sa[63] = -0.8665058f;
      sa[64] = 0.8138891f;
      sa[65] = -0.9214869f;
      sa[66] = -1.8432903f;
      sa[67] = 0.048997115f;
      sa[68] = 0.9000214f;
      sa[69] = -1.3010012f;
      sa[70] = -1.5200129f;
      sa[71] = 0.08950813f;
      sa[72] = -1.0494182f;
      sa[73] = -1.8603054f;
      sa[74] = -1.6331831f;
      sa[75] = 1.2919134f;
      sa[76] = 1.8839933f;
      sa[77] = -0.52156407f;
      sa[78] = -1.5319688f;
      sa[79] = -0.67917746f;
      sa[80] = 0.62672806f;
      sa[81] = -1.6196669f;
      sa[82] = -0.06424254f;
      sa[83] = -1.5371153f;
      sa[84] = 1.6691076f;
      sa[85] = 0.945958f;
      sa[86] = -1.9995608f;
      sa[87] = 1.215681f;
      sa[88] = -1.5824707f;
      sa[89] = -0.7680676f;
      sa[90] = 0.35729846f;
      sa[91] = 0.15187593f;
      sa[92] = 1.3897069f;
      sa[93] = 1.6857399f;
      sa[94] = 1.855266f;
      sa[95] = 0.74074763f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_11 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_11_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_11_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_11_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_Tanh_11_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


