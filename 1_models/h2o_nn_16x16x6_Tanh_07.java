/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:48:02.812+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_07

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_07 > h2o_nn_16x16x6_Tanh_07.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_07.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_07", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_07 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_07_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_07_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_07_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_07_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_07_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_07_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_07_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_07_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_07_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_07_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_07_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_07_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_07.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_07_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25,0.25,0.125,0.25,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_07() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-2840311106982902176L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_07_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_07_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_07_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_07_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_07_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_07_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_07_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_07_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_07_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_07_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_07_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.028883824528957994;
      sa[1] = -0.010174714365960656;
      sa[2] = -0.01019513250751733;
      sa[3] = -0.0038732057853144036;
      sa[4] = 0.005320050832135244;
      sa[5] = 0.04923921703563803;
      sa[6] = 0.07129644355834443;
      sa[7] = -0.018075858167443486;
      sa[8] = 0.0010153006431255105;
      sa[9] = -0.043996084731674996;
      sa[10] = 0.03038475905467831;
      sa[11] = -0.009545853011664876;
      sa[12] = 0.045344442629594695;
      sa[13] = -0.011926807081560796;
      sa[14] = 0.024055119848151493;
      sa[15] = 0.0020560074314573814;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_07_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_07_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.0041927338662833815;
      sa[1] = -0.0022442697071586165;
      sa[2] = 0.008405636423973573;
      sa[3] = 0.013723061854296253;
      sa[4] = -3.618254361136531E-4;
      sa[5] = -0.00633694514907529;
      sa[6] = 0.0029311917955782293;
      sa[7] = 0.0039706490562911;
      sa[8] = 0.03159732172251913;
      sa[9] = -0.006512956149821425;
      sa[10] = 0.012025919691132566;
      sa[11] = 0.004893673055755978;
      sa[12] = 0.01758498633832597;
      sa[13] = -0.004534683275464272;
      sa[14] = -0.009353520774192808;
      sa[15] = 0.016649453819303297;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_07_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_07_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.0014202268338483098;
      sa[1] = -0.022321435667838833;
      sa[2] = 0.005080833792478453;
      sa[3] = -0.010614417453400863;
      sa[4] = -0.08688358878118847;
    }
  }
}
class h2o_nn_16x16x6_Tanh_07_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_07_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_07_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.059512444f;
      sa[1] = 0.2964193f;
      sa[2] = 0.21496151f;
      sa[3] = 0.12835726f;
      sa[4] = -0.20561221f;
      sa[5] = -0.20183104f;
      sa[6] = -0.05590861f;
      sa[7] = 0.2579999f;
      sa[8] = 0.13933024f;
      sa[9] = -0.15668704f;
      sa[10] = -0.16173868f;
      sa[11] = -0.1813132f;
      sa[12] = 0.09712835f;
      sa[13] = -0.28755236f;
      sa[14] = -0.19040146f;
      sa[15] = -0.0048033088f;
      sa[16] = 0.15108283f;
      sa[17] = 0.19152367f;
      sa[18] = -0.24277636f;
      sa[19] = 0.18592314f;
      sa[20] = 0.2666171f;
      sa[21] = -0.34064493f;
      sa[22] = 0.25774935f;
      sa[23] = -0.17302988f;
      sa[24] = 0.32999092f;
      sa[25] = 0.18455599f;
      sa[26] = -0.30228022f;
      sa[27] = 0.3308184f;
      sa[28] = 0.26612443f;
      sa[29] = -0.31168032f;
      sa[30] = -0.19027796f;
      sa[31] = 0.1821725f;
      sa[32] = 0.15282126f;
      sa[33] = -0.25931105f;
      sa[34] = 0.09778837f;
      sa[35] = -0.08171621f;
      sa[36] = 0.11481954f;
      sa[37] = 0.32118806f;
      sa[38] = -0.07586818f;
      sa[39] = 0.17974886f;
      sa[40] = 0.010475115f;
      sa[41] = -0.09777761f;
      sa[42] = -0.16458756f;
      sa[43] = 0.033009466f;
      sa[44] = 0.28472808f;
      sa[45] = -0.23669091f;
      sa[46] = 0.055242103f;
      sa[47] = 0.064444624f;
      sa[48] = 0.2550746f;
      sa[49] = 0.27991718f;
      sa[50] = 0.22345968f;
      sa[51] = -0.30335113f;
      sa[52] = -0.06518199f;
      sa[53] = 0.27075633f;
      sa[54] = 0.2204954f;
      sa[55] = 0.01919125f;
      sa[56] = -0.1816161f;
      sa[57] = -0.32634115f;
      sa[58] = 0.2913738f;
      sa[59] = -0.19490999f;
      sa[60] = -0.30403012f;
      sa[61] = 0.20214432f;
      sa[62] = 0.12023539f;
      sa[63] = -0.03226328f;
      sa[64] = 0.14801252f;
      sa[65] = 0.11705181f;
      sa[66] = 0.010004104f;
      sa[67] = 0.14629716f;
      sa[68] = -0.13739854f;
      sa[69] = 0.1737135f;
      sa[70] = -0.13778251f;
      sa[71] = 0.32818156f;
      sa[72] = -0.16007829f;
      sa[73] = 0.19077885f;
      sa[74] = -0.24421999f;
      sa[75] = 0.11478548f;
      sa[76] = -0.20207317f;
      sa[77] = -0.06491349f;
      sa[78] = -0.069543645f;
      sa[79] = 0.1505383f;
      sa[80] = -0.2397786f;
      sa[81] = -0.20625395f;
      sa[82] = -0.048691012f;
      sa[83] = 0.06899187f;
      sa[84] = -0.0295463f;
      sa[85] = -0.19567794f;
      sa[86] = 0.16198829f;
      sa[87] = 0.25861138f;
      sa[88] = 0.23359632f;
      sa[89] = 0.005895975f;
      sa[90] = -0.11728587f;
      sa[91] = 0.1582209f;
      sa[92] = 0.10936917f;
      sa[93] = -0.21951815f;
      sa[94] = -0.1946373f;
      sa[95] = -0.28291544f;
      sa[96] = 0.11350638f;
      sa[97] = 0.014916144f;
      sa[98] = 0.24063498f;
      sa[99] = -0.09119275f;
      sa[100] = -0.061571386f;
      sa[101] = -0.18947716f;
      sa[102] = -0.27530017f;
      sa[103] = -0.113235086f;
      sa[104] = 0.046093162f;
      sa[105] = -0.21060507f;
      sa[106] = -0.23875965f;
      sa[107] = 0.13703236f;
      sa[108] = 0.16415249f;
      sa[109] = -0.2552608f;
      sa[110] = -0.17476158f;
      sa[111] = 0.21947017f;
      sa[112] = 0.14668866f;
      sa[113] = 0.04311386f;
      sa[114] = -0.15961866f;
      sa[115] = -0.052013133f;
      sa[116] = -0.28436765f;
      sa[117] = -0.022554856f;
      sa[118] = -0.28574985f;
      sa[119] = -0.1567645f;
      sa[120] = 0.23201261f;
      sa[121] = 0.24859187f;
      sa[122] = 0.33295453f;
      sa[123] = 0.2726404f;
      sa[124] = 0.2664175f;
      sa[125] = 0.29084703f;
      sa[126] = -0.2861905f;
      sa[127] = -0.24434139f;
      sa[128] = 0.06896784f;
      sa[129] = 0.16869187f;
      sa[130] = -0.12471422f;
      sa[131] = 0.31207013f;
      sa[132] = 0.19321737f;
      sa[133] = -0.32620874f;
      sa[134] = 0.10638828f;
      sa[135] = -0.29399678f;
      sa[136] = -0.30292088f;
      sa[137] = -0.028381977f;
      sa[138] = 0.12937383f;
      sa[139] = -0.10726868f;
      sa[140] = -0.015064437f;
      sa[141] = -0.13185844f;
      sa[142] = 0.18134384f;
      sa[143] = -0.35843822f;
      sa[144] = 0.3031981f;
      sa[145] = -0.16805723f;
      sa[146] = -0.28983545f;
      sa[147] = 0.2146728f;
      sa[148] = 0.19732265f;
      sa[149] = 0.21125656f;
      sa[150] = 0.32879823f;
      sa[151] = -0.27027893f;
      sa[152] = 0.043649323f;
      sa[153] = 0.291399f;
      sa[154] = 0.25309712f;
      sa[155] = -0.19591543f;
      sa[156] = 0.1477628f;
      sa[157] = -0.20356756f;
      sa[158] = 0.097914115f;
      sa[159] = 0.08854035f;
      sa[160] = 0.049196776f;
      sa[161] = 0.20004085f;
      sa[162] = -0.17622282f;
      sa[163] = -0.083864756f;
      sa[164] = 0.26712522f;
      sa[165] = -0.01556695f;
      sa[166] = -0.05832251f;
      sa[167] = -0.11299671f;
      sa[168] = 0.17251574f;
      sa[169] = 0.3306675f;
      sa[170] = 0.024743453f;
      sa[171] = -0.031387858f;
      sa[172] = -0.061774895f;
      sa[173] = -0.15079816f;
      sa[174] = -0.015544215f;
      sa[175] = -0.27292335f;
      sa[176] = -0.02538647f;
      sa[177] = -0.047755722f;
      sa[178] = -0.010458977f;
      sa[179] = 0.12764466f;
      sa[180] = -0.051938113f;
      sa[181] = -0.3002083f;
      sa[182] = -0.20874715f;
      sa[183] = 0.017966917f;
      sa[184] = 0.32369936f;
      sa[185] = 0.18621626f;
      sa[186] = -0.33450362f;
      sa[187] = 0.059371904f;
      sa[188] = -0.018818166f;
      sa[189] = 0.21472147f;
      sa[190] = 0.012623066f;
      sa[191] = -0.13822107f;
      sa[192] = -0.1415664f;
      sa[193] = 0.24745409f;
      sa[194] = 0.077149086f;
      sa[195] = 0.2774537f;
      sa[196] = 0.29031542f;
      sa[197] = -0.092217304f;
      sa[198] = 0.12325265f;
      sa[199] = -0.036299743f;
      sa[200] = 0.044259403f;
      sa[201] = -0.2741775f;
      sa[202] = 0.14604475f;
      sa[203] = -0.028087147f;
      sa[204] = -0.23290817f;
      sa[205] = 0.22152731f;
      sa[206] = 0.24465033f;
      sa[207] = 0.24216154f;
      sa[208] = -0.27443725f;
      sa[209] = -0.068803154f;
      sa[210] = -0.30510923f;
      sa[211] = -0.28154266f;
      sa[212] = 0.2052991f;
      sa[213] = -0.3605533f;
      sa[214] = -0.058849126f;
      sa[215] = 0.14238991f;
      sa[216] = 0.068944834f;
      sa[217] = 0.17786202f;
      sa[218] = -0.18777214f;
      sa[219] = 0.35566303f;
      sa[220] = -0.20910726f;
      sa[221] = 0.0729915f;
      sa[222] = 0.28370023f;
      sa[223] = 0.10799564f;
      sa[224] = 0.08611315f;
      sa[225] = 0.31085253f;
      sa[226] = -0.2600126f;
      sa[227] = 0.31752676f;
      sa[228] = 0.13939805f;
      sa[229] = 0.1156075f;
      sa[230] = 0.30651113f;
      sa[231] = -0.24599823f;
      sa[232] = -0.270187f;
      sa[233] = 0.07277305f;
      sa[234] = 0.17642967f;
      sa[235] = -0.36135498f;
      sa[236] = -0.045096666f;
      sa[237] = -0.24261855f;
      sa[238] = -0.22119454f;
      sa[239] = 0.15506831f;
      sa[240] = 0.020664174f;
      sa[241] = -0.24383484f;
      sa[242] = -0.07455535f;
      sa[243] = -0.31881922f;
      sa[244] = -0.22800404f;
      sa[245] = -0.13394116f;
      sa[246] = -0.27387208f;
      sa[247] = -0.04664864f;
      sa[248] = 0.3921533f;
      sa[249] = 0.32529917f;
      sa[250] = -0.2762328f;
      sa[251] = -0.19895373f;
      sa[252] = -0.34605747f;
      sa[253] = -0.32241923f;
      sa[254] = -0.21936984f;
      sa[255] = 0.29073045f;
      sa[256] = -0.19378403f;
      sa[257] = 0.30703008f;
      sa[258] = -0.26023334f;
      sa[259] = -0.11015994f;
      sa[260] = -0.29118386f;
      sa[261] = -0.11443137f;
      sa[262] = -0.14678438f;
      sa[263] = 0.40371335f;
      sa[264] = -0.17773916f;
      sa[265] = 0.06696869f;
      sa[266] = -0.29465646f;
      sa[267] = -0.25648022f;
      sa[268] = 0.12139112f;
      sa[269] = -0.18387891f;
      sa[270] = 0.0050977548f;
      sa[271] = 0.14918894f;
      sa[272] = -0.13250121f;
      sa[273] = -0.16008054f;
      sa[274] = 0.122856684f;
      sa[275] = -0.02653552f;
      sa[276] = 0.113673754f;
      sa[277] = -0.25114962f;
      sa[278] = -0.116506785f;
      sa[279] = 0.15125175f;
      sa[280] = -0.21093987f;
      sa[281] = 0.28968272f;
      sa[282] = -0.10954011f;
      sa[283] = -0.057315446f;
      sa[284] = 0.13764256f;
      sa[285] = -0.076704815f;
      sa[286] = 0.20830587f;
      sa[287] = 0.027903983f;
      sa[288] = -0.18279587f;
      sa[289] = -0.16212337f;
      sa[290] = -0.121207364f;
      sa[291] = -0.06312995f;
      sa[292] = 0.12537682f;
      sa[293] = -0.11306508f;
      sa[294] = 0.075671084f;
      sa[295] = 0.098941304f;
      sa[296] = 0.2761998f;
      sa[297] = 0.22308505f;
      sa[298] = -0.0316442f;
      sa[299] = -0.09642215f;
      sa[300] = -0.005097326f;
      sa[301] = -0.07285718f;
      sa[302] = 0.17192653f;
      sa[303] = 0.02789435f;
      sa[304] = -0.1860167f;
      sa[305] = -0.024044197f;
      sa[306] = 0.21655105f;
      sa[307] = -0.1270374f;
      sa[308] = 0.11150893f;
      sa[309] = 0.17192663f;
      sa[310] = 0.310421f;
      sa[311] = 0.347344f;
      sa[312] = -0.22137448f;
      sa[313] = -0.18258233f;
      sa[314] = -0.17915684f;
      sa[315] = 0.04035353f;
      sa[316] = -0.015983136f;
      sa[317] = -0.094851345f;
      sa[318] = 0.09101526f;
      sa[319] = 0.30274126f;
      sa[320] = -0.14361042f;
      sa[321] = 0.09795492f;
      sa[322] = 0.25255f;
      sa[323] = -0.10914881f;
      sa[324] = -0.0016396774f;
      sa[325] = 0.32293543f;
      sa[326] = -0.2525691f;
      sa[327] = 0.051401537f;
      sa[328] = -0.08415333f;
      sa[329] = 0.25681388f;
      sa[330] = -0.20214619f;
      sa[331] = 0.009110211f;
      sa[332] = -0.29486063f;
      sa[333] = 0.21623343f;
      sa[334] = -0.054745555f;
      sa[335] = 0.30024707f;
      sa[336] = -0.17062268f;
      sa[337] = -0.17198911f;
      sa[338] = 0.30012512f;
      sa[339] = -0.22467649f;
      sa[340] = -0.33752185f;
      sa[341] = -0.2053082f;
      sa[342] = 0.1829353f;
      sa[343] = -0.13255118f;
      sa[344] = -0.19311744f;
      sa[345] = 0.20207387f;
      sa[346] = 0.22304048f;
      sa[347] = -0.18543853f;
      sa[348] = 0.3245826f;
      sa[349] = -0.21678753f;
      sa[350] = -0.274331f;
      sa[351] = 0.10159954f;
      sa[352] = 0.20087637f;
      sa[353] = -0.06326116f;
      sa[354] = 0.082226485f;
      sa[355] = 0.123393476f;
      sa[356] = -0.11279829f;
      sa[357] = 0.3018905f;
      sa[358] = -0.3119233f;
      sa[359] = 0.009162514f;
      sa[360] = 0.10403849f;
      sa[361] = -0.053398155f;
      sa[362] = -0.20816766f;
      sa[363] = 0.24792358f;
      sa[364] = -0.10064123f;
      sa[365] = -0.22231108f;
      sa[366] = 0.01937965f;
      sa[367] = -0.306201f;
      sa[368] = -0.18780571f;
      sa[369] = 0.26742858f;
      sa[370] = -0.24443263f;
      sa[371] = 0.0627948f;
      sa[372] = 0.0016756973f;
      sa[373] = 0.32406235f;
      sa[374] = -0.13951623f;
      sa[375] = -0.32066447f;
      sa[376] = -0.34905013f;
      sa[377] = -0.2749719f;
      sa[378] = 0.35430026f;
      sa[379] = 0.09088706f;
      sa[380] = -0.09729256f;
      sa[381] = -0.06611391f;
      sa[382] = -0.01306031f;
      sa[383] = -0.12920317f;
      sa[384] = -0.19453387f;
      sa[385] = 0.09553976f;
      sa[386] = -0.25221524f;
      sa[387] = -0.17436196f;
      sa[388] = 0.11626603f;
      sa[389] = 0.025014848f;
      sa[390] = 0.013025642f;
      sa[391] = -0.10359732f;
      sa[392] = 0.3124662f;
      sa[393] = 0.22586262f;
      sa[394] = -0.032456543f;
      sa[395] = 0.3371103f;
      sa[396] = 0.3053331f;
      sa[397] = -0.29677466f;
      sa[398] = 0.11076127f;
      sa[399] = 0.15103321f;
      sa[400] = 0.20942123f;
      sa[401] = 0.28211373f;
      sa[402] = -0.13572977f;
      sa[403] = 0.08403891f;
      sa[404] = 0.2576214f;
      sa[405] = -0.29940912f;
      sa[406] = -0.1092912f;
      sa[407] = 0.14799587f;
      sa[408] = -0.24048021f;
      sa[409] = -0.26512778f;
      sa[410] = -0.12189761f;
      sa[411] = 0.18562546f;
      sa[412] = -0.16144857f;
      sa[413] = 0.055400748f;
      sa[414] = 0.16591887f;
      sa[415] = 0.2854609f;
      sa[416] = -0.20543145f;
      sa[417] = 0.027857058f;
      sa[418] = -0.0073479624f;
      sa[419] = 0.27622524f;
      sa[420] = 0.20257758f;
      sa[421] = 0.2578148f;
      sa[422] = 0.2644702f;
      sa[423] = -0.064859256f;
      sa[424] = 0.10570505f;
      sa[425] = -0.07365061f;
      sa[426] = -0.31166843f;
      sa[427] = 0.20635481f;
      sa[428] = 0.026621317f;
      sa[429] = -0.13795067f;
      sa[430] = 0.13510187f;
      sa[431] = -0.06823303f;
      sa[432] = -0.0541146f;
      sa[433] = 0.12307807f;
      sa[434] = 0.2766869f;
      sa[435] = 0.105863325f;
      sa[436] = -0.26016465f;
      sa[437] = -0.25668663f;
      sa[438] = 0.03133718f;
      sa[439] = 0.020580556f;
      sa[440] = 0.32621664f;
      sa[441] = -0.347803f;
      sa[442] = 0.10654772f;
      sa[443] = 0.023082785f;
      sa[444] = -0.2274657f;
      sa[445] = 0.07888841f;
      sa[446] = 0.26668233f;
      sa[447] = 0.07529318f;
      sa[448] = 0.17882037f;
      sa[449] = 0.24078596f;
      sa[450] = -0.09091186f;
      sa[451] = 0.06282012f;
      sa[452] = 0.20939234f;
      sa[453] = -0.031535197f;
      sa[454] = -0.15359892f;
      sa[455] = -0.062700614f;
      sa[456] = -0.06539705f;
      sa[457] = 0.11314992f;
      sa[458] = -0.22119479f;
      sa[459] = 0.28876227f;
      sa[460] = 0.2540256f;
      sa[461] = 0.33025658f;
      sa[462] = 0.073161416f;
      sa[463] = 0.24768868f;
      sa[464] = -0.23769845f;
      sa[465] = 0.27325216f;
      sa[466] = -0.017470233f;
      sa[467] = 0.11049721f;
      sa[468] = 0.1580433f;
      sa[469] = 0.31077424f;
      sa[470] = 0.18826936f;
      sa[471] = 0.071140416f;
      sa[472] = 0.005497532f;
      sa[473] = -0.13032965f;
      sa[474] = -0.021305036f;
      sa[475] = 0.099259146f;
      sa[476] = 0.31800514f;
      sa[477] = -0.19873671f;
      sa[478] = 0.14354874f;
      sa[479] = -0.19395499f;
      sa[480] = -0.32500342f;
      sa[481] = -0.2349986f;
      sa[482] = -0.28048915f;
      sa[483] = 0.20945546f;
      sa[484] = 0.21611473f;
      sa[485] = 0.117287666f;
      sa[486] = -0.01602168f;
      sa[487] = -0.17118172f;
      sa[488] = -0.20213675f;
      sa[489] = 0.09924717f;
      sa[490] = 7.040921E-4f;
      sa[491] = -0.28186584f;
      sa[492] = 0.19081579f;
      sa[493] = 0.29632097f;
      sa[494] = -0.245031f;
      sa[495] = 0.22800727f;
      sa[496] = 0.0014940131f;
      sa[497] = 0.07516086f;
      sa[498] = 0.18243787f;
      sa[499] = 0.15915142f;
      sa[500] = -0.089750476f;
      sa[501] = -0.0020064306f;
      sa[502] = 0.31561637f;
      sa[503] = 0.11343945f;
      sa[504] = -0.22306281f;
      sa[505] = -0.25604585f;
      sa[506] = 0.20284133f;
      sa[507] = -0.0994857f;
      sa[508] = 0.09540295f;
      sa[509] = 0.23699152f;
      sa[510] = 0.1792053f;
      sa[511] = -0.016717037f;
      sa[512] = 0.048126567f;
      sa[513] = -0.117132306f;
      sa[514] = 0.265755f;
      sa[515] = -0.25282001f;
      sa[516] = 0.01245958f;
      sa[517] = 0.09178406f;
      sa[518] = 0.13818403f;
      sa[519] = -0.12222216f;
      sa[520] = 0.23521206f;
      sa[521] = 0.13976775f;
      sa[522] = 0.118160084f;
      sa[523] = 0.23775788f;
      sa[524] = 0.19059646f;
      sa[525] = 0.16115956f;
      sa[526] = -0.019342473f;
      sa[527] = -0.12700891f;
      sa[528] = 0.0019004975f;
      sa[529] = 0.11545229f;
      sa[530] = -0.17769851f;
      sa[531] = 0.05291818f;
      sa[532] = 0.13997123f;
      sa[533] = 0.11485143f;
      sa[534] = 0.12998724f;
      sa[535] = -0.12223113f;
      sa[536] = 0.10552108f;
      sa[537] = -0.17679574f;
      sa[538] = 0.19182697f;
      sa[539] = 0.2851295f;
      sa[540] = -0.2788952f;
      sa[541] = -0.1797494f;
      sa[542] = -0.04695069f;
      sa[543] = -0.2784171f;
      sa[544] = 0.16598539f;
      sa[545] = 0.11926236f;
      sa[546] = 0.08750255f;
      sa[547] = 0.2095451f;
      sa[548] = 0.064510584f;
      sa[549] = 0.1778558f;
      sa[550] = 0.011950076f;
      sa[551] = -0.111300856f;
      sa[552] = 0.043934416f;
      sa[553] = -0.062417615f;
      sa[554] = -0.16988783f;
      sa[555] = -0.17467321f;
      sa[556] = -0.23078233f;
      sa[557] = -0.26720664f;
      sa[558] = -0.23453556f;
      sa[559] = 0.13624229f;
      sa[560] = -0.33874756f;
      sa[561] = -0.101077415f;
      sa[562] = 0.21297242f;
      sa[563] = -0.10889264f;
      sa[564] = 0.29890272f;
      sa[565] = 0.052113246f;
      sa[566] = 0.28271273f;
      sa[567] = 0.0301586f;
      sa[568] = -0.087553106f;
      sa[569] = 0.025855146f;
      sa[570] = -0.023236396f;
      sa[571] = -0.073882714f;
      sa[572] = -0.11833342f;
      sa[573] = 0.1076511f;
      sa[574] = 0.32784948f;
      sa[575] = -0.2392387f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_07_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_07_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.33315453f;
      sa[1] = -0.03243349f;
      sa[2] = -0.120127864f;
      sa[3] = -0.20886171f;
      sa[4] = 0.05854414f;
      sa[5] = 0.06827978f;
      sa[6] = 0.36392587f;
      sa[7] = -0.19759595f;
      sa[8] = -0.26700398f;
      sa[9] = 0.19872718f;
      sa[10] = -0.038508397f;
      sa[11] = 0.097410046f;
      sa[12] = 0.030973464f;
      sa[13] = 0.005602996f;
      sa[14] = -0.36659318f;
      sa[15] = 0.26868927f;
      sa[16] = 0.41729406f;
      sa[17] = -0.12717707f;
      sa[18] = 0.028039161f;
      sa[19] = -0.06660546f;
      sa[20] = 0.29412046f;
      sa[21] = -0.009157197f;
      sa[22] = -0.23081249f;
      sa[23] = 0.21555133f;
      sa[24] = -0.37355682f;
      sa[25] = 0.14646585f;
      sa[26] = -0.04607351f;
      sa[27] = 0.39052716f;
      sa[28] = -0.42289412f;
      sa[29] = -0.14857095f;
      sa[30] = 0.07790413f;
      sa[31] = -0.21802674f;
      sa[32] = -0.31251028f;
      sa[33] = -0.39950234f;
      sa[34] = 0.035969313f;
      sa[35] = 0.3988773f;
      sa[36] = -0.113153666f;
      sa[37] = -0.006701364f;
      sa[38] = 0.07101862f;
      sa[39] = 0.23399836f;
      sa[40] = -0.20591292f;
      sa[41] = -0.35377425f;
      sa[42] = -0.23538129f;
      sa[43] = -0.39208528f;
      sa[44] = -0.04460572f;
      sa[45] = -0.37568417f;
      sa[46] = 0.31200054f;
      sa[47] = 0.34032956f;
      sa[48] = -0.35979033f;
      sa[49] = -0.26474428f;
      sa[50] = 0.095120594f;
      sa[51] = -0.080985546f;
      sa[52] = 0.20020337f;
      sa[53] = 0.2828071f;
      sa[54] = -0.05708932f;
      sa[55] = 0.34386638f;
      sa[56] = -0.24745038f;
      sa[57] = -0.3568366f;
      sa[58] = 0.11305492f;
      sa[59] = -0.014120468f;
      sa[60] = 0.2983964f;
      sa[61] = -0.17910972f;
      sa[62] = -0.0730569f;
      sa[63] = 0.1937282f;
      sa[64] = 0.3741647f;
      sa[65] = -0.17721665f;
      sa[66] = 0.14737822f;
      sa[67] = 0.42356804f;
      sa[68] = 0.19296575f;
      sa[69] = -0.26494062f;
      sa[70] = -0.3773189f;
      sa[71] = -0.09569384f;
      sa[72] = -0.31871304f;
      sa[73] = 0.31937963f;
      sa[74] = 0.3951925f;
      sa[75] = -0.008949903f;
      sa[76] = 0.19349167f;
      sa[77] = 0.10108897f;
      sa[78] = -0.35318476f;
      sa[79] = 0.26959088f;
      sa[80] = -0.19490533f;
      sa[81] = 0.07761308f;
      sa[82] = 0.22742623f;
      sa[83] = -0.17693816f;
      sa[84] = -0.42559206f;
      sa[85] = -0.33939552f;
      sa[86] = 0.039459478f;
      sa[87] = 0.33056614f;
      sa[88] = -0.42886227f;
      sa[89] = -0.15196393f;
      sa[90] = -0.3055093f;
      sa[91] = 0.41291264f;
      sa[92] = -0.046357118f;
      sa[93] = 0.10555545f;
      sa[94] = -0.39234078f;
      sa[95] = -0.044450648f;
      sa[96] = -0.3087489f;
      sa[97] = 0.043322008f;
      sa[98] = 0.054844197f;
      sa[99] = 0.12245403f;
      sa[100] = -0.34867233f;
      sa[101] = -0.08721549f;
      sa[102] = 0.4173418f;
      sa[103] = 0.016438214f;
      sa[104] = -0.045332346f;
      sa[105] = -0.1318142f;
      sa[106] = 0.46843046f;
      sa[107] = 0.295571f;
      sa[108] = 0.12802903f;
      sa[109] = 0.0077221473f;
      sa[110] = 0.1487132f;
      sa[111] = -0.2315762f;
      sa[112] = -0.29233915f;
      sa[113] = 0.054089878f;
      sa[114] = 0.040459517f;
      sa[115] = -0.1102907f;
      sa[116] = 0.32868135f;
      sa[117] = 0.056561943f;
      sa[118] = -0.3698993f;
      sa[119] = -0.19004495f;
      sa[120] = -0.06508567f;
      sa[121] = 0.25139278f;
      sa[122] = 0.0011938001f;
      sa[123] = 0.11390179f;
      sa[124] = -0.2368718f;
      sa[125] = 0.2111139f;
      sa[126] = -0.21877584f;
      sa[127] = 0.15148334f;
      sa[128] = -0.21017225f;
      sa[129] = 0.21642758f;
      sa[130] = -0.12811297f;
      sa[131] = 0.17197442f;
      sa[132] = 0.06930742f;
      sa[133] = 0.18415253f;
      sa[134] = 0.109294444f;
      sa[135] = -0.24849482f;
      sa[136] = 0.17608356f;
      sa[137] = -0.2198625f;
      sa[138] = -0.02236516f;
      sa[139] = 0.36063352f;
      sa[140] = -0.123711474f;
      sa[141] = 0.005829884f;
      sa[142] = 0.15729336f;
      sa[143] = -0.14447786f;
      sa[144] = 0.30135688f;
      sa[145] = -0.19971615f;
      sa[146] = 0.023012672f;
      sa[147] = -0.17598169f;
      sa[148] = -0.24056476f;
      sa[149] = 0.28276828f;
      sa[150] = -0.38349614f;
      sa[151] = -0.42958584f;
      sa[152] = 0.39397162f;
      sa[153] = -0.18499602f;
      sa[154] = 0.30443376f;
      sa[155] = -0.42378756f;
      sa[156] = -0.28534657f;
      sa[157] = -0.21106824f;
      sa[158] = -0.0038522119f;
      sa[159] = -0.09705572f;
      sa[160] = 0.3932494f;
      sa[161] = -0.27538398f;
      sa[162] = 0.39581382f;
      sa[163] = -0.23707512f;
      sa[164] = 0.16788572f;
      sa[165] = -0.1183711f;
      sa[166] = 0.31657842f;
      sa[167] = -0.34014156f;
      sa[168] = 0.29515973f;
      sa[169] = -0.46243468f;
      sa[170] = 0.3242271f;
      sa[171] = 0.2645531f;
      sa[172] = 0.38402778f;
      sa[173] = 0.41944307f;
      sa[174] = 0.034323007f;
      sa[175] = 0.039240196f;
      sa[176] = -0.20916836f;
      sa[177] = 0.041857786f;
      sa[178] = -0.28506127f;
      sa[179] = -0.107893065f;
      sa[180] = -0.36427376f;
      sa[181] = -0.24811767f;
      sa[182] = 0.06768172f;
      sa[183] = -0.28272212f;
      sa[184] = 0.40519193f;
      sa[185] = 0.31403363f;
      sa[186] = -0.15031835f;
      sa[187] = -0.26398888f;
      sa[188] = -0.069271915f;
      sa[189] = -0.18090357f;
      sa[190] = -0.3819635f;
      sa[191] = -0.26024377f;
      sa[192] = -0.053539343f;
      sa[193] = 0.11458443f;
      sa[194] = -0.3280981f;
      sa[195] = -0.26118067f;
      sa[196] = 0.14671107f;
      sa[197] = -0.22673917f;
      sa[198] = -0.016212147f;
      sa[199] = 0.41672587f;
      sa[200] = -0.0147858495f;
      sa[201] = 0.23660636f;
      sa[202] = 0.15063547f;
      sa[203] = -0.3815258f;
      sa[204] = 0.17411317f;
      sa[205] = 0.36881196f;
      sa[206] = -0.114105165f;
      sa[207] = 0.17704067f;
      sa[208] = -0.20570095f;
      sa[209] = 0.18155043f;
      sa[210] = -0.094127506f;
      sa[211] = -0.25365695f;
      sa[212] = -0.34148815f;
      sa[213] = 0.041920558f;
      sa[214] = -0.31783193f;
      sa[215] = -0.070115365f;
      sa[216] = 0.1440925f;
      sa[217] = 0.3420579f;
      sa[218] = 0.041976128f;
      sa[219] = 0.099130794f;
      sa[220] = 0.13287187f;
      sa[221] = -0.02926944f;
      sa[222] = -0.29367796f;
      sa[223] = -0.342013f;
      sa[224] = 0.28761792f;
      sa[225] = 0.06865765f;
      sa[226] = -0.016346984f;
      sa[227] = 0.067322314f;
      sa[228] = -0.110126376f;
      sa[229] = -0.23070894f;
      sa[230] = -0.2588652f;
      sa[231] = -0.14502151f;
      sa[232] = 0.40854493f;
      sa[233] = -0.1769889f;
      sa[234] = -0.17971648f;
      sa[235] = 0.03571319f;
      sa[236] = -0.30904174f;
      sa[237] = 0.450175f;
      sa[238] = 0.15611355f;
      sa[239] = -0.09649581f;
      sa[240] = -0.10172455f;
      sa[241] = -0.39980122f;
      sa[242] = -0.2541409f;
      sa[243] = 0.35448432f;
      sa[244] = 0.17100242f;
      sa[245] = 0.26608348f;
      sa[246] = 0.161743f;
      sa[247] = -0.336513f;
      sa[248] = -0.22209129f;
      sa[249] = 0.01792337f;
      sa[250] = 0.19690193f;
      sa[251] = 0.4144087f;
      sa[252] = 0.27685222f;
      sa[253] = -0.3208515f;
      sa[254] = 0.40670192f;
      sa[255] = 0.18794289f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_07_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_Tanh_07_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.13849981f;
      sa[1] = -1.4487553f;
      sa[2] = -1.5744554f;
      sa[3] = 1.3844142f;
      sa[4] = 0.44201288f;
      sa[5] = -0.24206011f;
      sa[6] = -1.7131599f;
      sa[7] = 1.5322973f;
      sa[8] = 1.7872967f;
      sa[9] = 0.24169837f;
      sa[10] = 1.6496924f;
      sa[11] = 1.4135338f;
      sa[12] = 1.9391261f;
      sa[13] = -0.55390394f;
      sa[14] = -1.8352563f;
      sa[15] = -0.67283356f;
      sa[16] = 0.7537538f;
      sa[17] = -0.75221455f;
      sa[18] = -1.5240256f;
      sa[19] = -0.86855024f;
      sa[20] = -1.9069391f;
      sa[21] = 0.3407247f;
      sa[22] = -2.0759127f;
      sa[23] = -0.5776908f;
      sa[24] = -0.61672497f;
      sa[25] = 1.8268976f;
      sa[26] = -0.33254442f;
      sa[27] = 1.1748492f;
      sa[28] = 1.2379534f;
      sa[29] = -0.71474963f;
      sa[30] = 0.24055718f;
      sa[31] = 0.06358476f;
      sa[32] = 0.48461694f;
      sa[33] = 0.28127426f;
      sa[34] = -0.60283816f;
      sa[35] = 1.0574214f;
      sa[36] = 0.57785946f;
      sa[37] = -1.3154455f;
      sa[38] = 0.6016791f;
      sa[39] = -0.20902945f;
      sa[40] = 0.21854757f;
      sa[41] = -0.73810524f;
      sa[42] = 0.5113208f;
      sa[43] = -0.04782868f;
      sa[44] = 1.0344933f;
      sa[45] = -2.0042768f;
      sa[46] = -2.1406014f;
      sa[47] = 0.03522149f;
      sa[48] = 1.6449426f;
      sa[49] = -0.26222154f;
      sa[50] = -0.49898142f;
      sa[51] = 1.7773298f;
      sa[52] = -1.7116872f;
      sa[53] = 0.9347644f;
      sa[54] = 1.8336095f;
      sa[55] = 1.0891646f;
      sa[56] = -0.5248614f;
      sa[57] = -0.03761535f;
      sa[58] = 1.0595204f;
      sa[59] = 0.891859f;
      sa[60] = -1.4135408f;
      sa[61] = 0.8891017f;
      sa[62] = -0.42790863f;
      sa[63] = -0.82324916f;
      sa[64] = 1.0157356f;
      sa[65] = -1.0315303f;
      sa[66] = -1.8153135f;
      sa[67] = -0.16452247f;
      sa[68] = 0.8494979f;
      sa[69] = -1.3466004f;
      sa[70] = -1.5680048f;
      sa[71] = -0.057549074f;
      sa[72] = -0.96903616f;
      sa[73] = -1.2521017f;
      sa[74] = -1.0624777f;
      sa[75] = 1.3130718f;
      sa[76] = 1.8420091f;
      sa[77] = -0.66513354f;
      sa[78] = -1.6382616f;
      sa[79] = -0.3720391f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_07 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_07_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_07_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_07_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_Tanh_07_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


