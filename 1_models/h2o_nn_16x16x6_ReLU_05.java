/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:47:32.937+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_05

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_05 > h2o_nn_16x16x6_ReLU_05.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_05.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_05", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_05 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_05_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_05_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_05_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_05_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_05_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_05_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_05_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_05_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_05_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_05_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_05_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_05_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_05.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_05_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.29347826086956524,0.13043478260869565,0.14130434782608695,0.29347826086956524,0.14130434782608695};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_05() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-7636273418728853752L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_05_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_05_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_05_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_05_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_05_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_05_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_05_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_05_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_05_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_05_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_05_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.5864323531318297;
      sa[1] = 0.648261894553166;
      sa[2] = 0.42322524025140495;
      sa[3] = 0.4937836912982106;
      sa[4] = 0.46470550981874564;
      sa[5] = 0.4668021734804011;
      sa[6] = 0.4226052219678976;
      sa[7] = 0.6273055404934269;
      sa[8] = 0.5483933881989734;
      sa[9] = 0.6093380155212349;
      sa[10] = 0.4346338530215319;
      sa[11] = 0.40509989595800694;
      sa[12] = 0.4518012946421706;
      sa[13] = 0.4496559961608264;
      sa[14] = 0.5410058010382105;
      sa[15] = 0.5246819249755837;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_05_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_05_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.0134995230064678;
      sa[1] = 1.001963107326075;
      sa[2] = 0.9696257968686637;
      sa[3] = 0.9495700948296633;
      sa[4] = 0.990374237655404;
      sa[5] = 0.9963195124647743;
      sa[6] = 0.9616148318864891;
      sa[7] = 0.9530772396563417;
      sa[8] = 0.9396902468614019;
      sa[9] = 1.0155527300667668;
      sa[10] = 0.927892193373338;
      sa[11] = 1.0176654484658334;
      sa[12] = 1.0156172741433986;
      sa[13] = 0.9893313697230012;
      sa[14] = 1.0322908025564066;
      sa[15] = 1.0324819210967067;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_05_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_05_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.024650870817451584;
      sa[1] = 0.010516388107741938;
      sa[2] = -0.009681281173256846;
      sa[3] = -0.011592247571721268;
      sa[4] = 0.011711556375509236;
    }
  }
}
class h2o_nn_16x16x6_ReLU_05_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_05_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_05_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.09119851f;
      sa[1] = 0.26202953f;
      sa[2] = 0.21442677f;
      sa[3] = 0.16137306f;
      sa[4] = -0.15937233f;
      sa[5] = -0.16402695f;
      sa[6] = -0.011892189f;
      sa[7] = 0.30180082f;
      sa[8] = 0.15832704f;
      sa[9] = -0.18020785f;
      sa[10] = -0.17558576f;
      sa[11] = -0.24267718f;
      sa[12] = 0.11925024f;
      sa[13] = -0.25835815f;
      sa[14] = -0.15348914f;
      sa[15] = 0.021351473f;
      sa[16] = 0.10422624f;
      sa[17] = 0.16868967f;
      sa[18] = -0.23374866f;
      sa[19] = 0.17491625f;
      sa[20] = 0.28583914f;
      sa[21] = -0.30460235f;
      sa[22] = 0.29291666f;
      sa[23] = -0.15793759f;
      sa[24] = 0.33004865f;
      sa[25] = 0.18538304f;
      sa[26] = -0.28442731f;
      sa[27] = 0.32188013f;
      sa[28] = 0.28591606f;
      sa[29] = -0.27427158f;
      sa[30] = -0.15891759f;
      sa[31] = 0.20214538f;
      sa[32] = 0.20663011f;
      sa[33] = -0.32275918f;
      sa[34] = 0.0963261f;
      sa[35] = -0.09493956f;
      sa[36] = 0.08091836f;
      sa[37] = 0.2918315f;
      sa[38] = -0.087353274f;
      sa[39] = 0.16937001f;
      sa[40] = 0.07217782f;
      sa[41] = -0.05453002f;
      sa[42] = -0.116462916f;
      sa[43] = 0.0608528f;
      sa[44] = 0.24647067f;
      sa[45] = -0.2612795f;
      sa[46] = 0.010138245f;
      sa[47] = -0.012132961f;
      sa[48] = 0.29185405f;
      sa[49] = 0.31453997f;
      sa[50] = 0.25744075f;
      sa[51] = -0.28489515f;
      sa[52] = -0.09301216f;
      sa[53] = 0.25036994f;
      sa[54] = 0.2855713f;
      sa[55] = 0.014735198f;
      sa[56] = -0.14347169f;
      sa[57] = -0.2692885f;
      sa[58] = 0.3318575f;
      sa[59] = -0.17617933f;
      sa[60] = -0.2889043f;
      sa[61] = 0.1709803f;
      sa[62] = 0.176206f;
      sa[63] = -4.3043724E-4f;
      sa[64] = 0.1886769f;
      sa[65] = 0.17261398f;
      sa[66] = 0.052821666f;
      sa[67] = 0.1826961f;
      sa[68] = -0.09169434f;
      sa[69] = 0.16720302f;
      sa[70] = -0.14754452f;
      sa[71] = 0.33579054f;
      sa[72] = -0.16003792f;
      sa[73] = 0.22121446f;
      sa[74] = -0.21161528f;
      sa[75] = 0.101999186f;
      sa[76] = -0.22984348f;
      sa[77] = -0.08610288f;
      sa[78] = -0.087009005f;
      sa[79] = 0.13976073f;
      sa[80] = -0.24069235f;
      sa[81] = -0.1224095f;
      sa[82] = -0.008824688f;
      sa[83] = 0.13451694f;
      sa[84] = -0.035760265f;
      sa[85] = -0.20754434f;
      sa[86] = 0.15006019f;
      sa[87] = 0.26041383f;
      sa[88] = 0.26305658f;
      sa[89] = 0.07094924f;
      sa[90] = -0.13604036f;
      sa[91] = 0.15063705f;
      sa[92] = 0.10655187f;
      sa[93] = -0.23546477f;
      sa[94] = -0.20079155f;
      sa[95] = -0.2677876f;
      sa[96] = 0.12884696f;
      sa[97] = 0.058935344f;
      sa[98] = 0.21252982f;
      sa[99] = -0.103491746f;
      sa[100] = -0.0692229f;
      sa[101] = -0.21317273f;
      sa[102] = -0.2935636f;
      sa[103] = -0.09953853f;
      sa[104] = 0.004922135f;
      sa[105] = -0.12850083f;
      sa[106] = -0.24555096f;
      sa[107] = 0.13143829f;
      sa[108] = 0.21450113f;
      sa[109] = -0.24354339f;
      sa[110] = -0.19188902f;
      sa[111] = 0.18352315f;
      sa[112] = 0.13856341f;
      sa[113] = 0.04170253f;
      sa[114] = -0.16824774f;
      sa[115] = -0.05918485f;
      sa[116] = -0.24137983f;
      sa[117] = -0.018354043f;
      sa[118] = -0.27218238f;
      sa[119] = -0.19079733f;
      sa[120] = 0.230434f;
      sa[121] = 0.24791612f;
      sa[122] = 0.3298742f;
      sa[123] = 0.27683958f;
      sa[124] = 0.29965118f;
      sa[125] = 0.3043229f;
      sa[126] = -0.30429676f;
      sa[127] = -0.19606732f;
      sa[128] = 0.07649166f;
      sa[129] = 0.16900796f;
      sa[130] = -0.13220946f;
      sa[131] = 0.32503995f;
      sa[132] = 0.19011202f;
      sa[133] = -0.3148984f;
      sa[134] = 0.09927977f;
      sa[135] = -0.2645045f;
      sa[136] = -0.29705247f;
      sa[137] = -0.024029208f;
      sa[138] = 0.12970679f;
      sa[139] = -0.104172945f;
      sa[140] = -0.07669318f;
      sa[141] = -0.16054322f;
      sa[142] = 0.18174165f;
      sa[143] = -0.3285783f;
      sa[144] = 0.31162146f;
      sa[145] = -0.14840959f;
      sa[146] = -0.27812162f;
      sa[147] = 0.22163309f;
      sa[148] = 0.17949115f;
      sa[149] = 0.20525546f;
      sa[150] = 0.31319156f;
      sa[151] = -0.28173903f;
      sa[152] = 0.054645f;
      sa[153] = 0.30509478f;
      sa[154] = 0.2714266f;
      sa[155] = -0.18388833f;
      sa[156] = 0.13572612f;
      sa[157] = -0.20948924f;
      sa[158] = 0.09083698f;
      sa[159] = 0.092108205f;
      sa[160] = 0.09981406f;
      sa[161] = 0.24326484f;
      sa[162] = -0.19507203f;
      sa[163] = -0.06605802f;
      sa[164] = 0.24956797f;
      sa[165] = -0.042250562f;
      sa[166] = -0.0819584f;
      sa[167] = -0.10227862f;
      sa[168] = 0.2040238f;
      sa[169] = 0.34915483f;
      sa[170] = 0.016978407f;
      sa[171] = -0.03993536f;
      sa[172] = -0.07295728f;
      sa[173] = -0.16442902f;
      sa[174] = -0.023815844f;
      sa[175] = -0.272593f;
      sa[176] = -0.031710345f;
      sa[177] = -0.036131933f;
      sa[178] = -0.05387181f;
      sa[179] = 0.09968203f;
      sa[180] = -0.056505162f;
      sa[181] = -0.30150193f;
      sa[182] = -0.14726095f;
      sa[183] = 0.083137184f;
      sa[184] = 0.30397594f;
      sa[185] = 0.17812587f;
      sa[186] = -0.3313467f;
      sa[187] = 0.07592114f;
      sa[188] = -0.02944793f;
      sa[189] = 0.24959843f;
      sa[190] = 0.03830301f;
      sa[191] = -0.030512711f;
      sa[192] = -0.15225622f;
      sa[193] = 0.2412814f;
      sa[194] = 0.0838676f;
      sa[195] = 0.28060266f;
      sa[196] = 0.2914088f;
      sa[197] = -0.03546107f;
      sa[198] = 0.11536997f;
      sa[199] = -0.082048744f;
      sa[200] = 0.008106423f;
      sa[201] = -0.3185501f;
      sa[202] = 0.13448754f;
      sa[203] = -0.04328215f;
      sa[204] = -0.21507291f;
      sa[205] = 0.24011257f;
      sa[206] = 0.2283063f;
      sa[207] = 0.15874349f;
      sa[208] = -0.30536076f;
      sa[209] = -0.10539271f;
      sa[210] = -0.3244611f;
      sa[211] = -0.30225047f;
      sa[212] = 0.26633546f;
      sa[213] = -0.28075504f;
      sa[214] = -0.090892f;
      sa[215] = 0.062274575f;
      sa[216] = 0.08649273f;
      sa[217] = 0.20834315f;
      sa[218] = -0.19539742f;
      sa[219] = 0.24547671f;
      sa[220] = -0.2734382f;
      sa[221] = 0.020209808f;
      sa[222] = 0.21021011f;
      sa[223] = 0.044293396f;
      sa[224] = 0.096651584f;
      sa[225] = 0.3440125f;
      sa[226] = -0.22516264f;
      sa[227] = 0.34796542f;
      sa[228] = 0.10645355f;
      sa[229] = 0.071323015f;
      sa[230] = 0.25211135f;
      sa[231] = -0.29119667f;
      sa[232] = -0.24413608f;
      sa[233] = 0.110585056f;
      sa[234] = 0.14047785f;
      sa[235] = -0.29493925f;
      sa[236] = -0.063624084f;
      sa[237] = -0.27462116f;
      sa[238] = -0.2659645f;
      sa[239] = 0.12959462f;
      sa[240] = 0.004454995f;
      sa[241] = -0.22481659f;
      sa[242] = -0.10254988f;
      sa[243] = -0.23012118f;
      sa[244] = -0.24876267f;
      sa[245] = -0.16747987f;
      sa[246] = -0.31143102f;
      sa[247] = -0.077348515f;
      sa[248] = 0.26574686f;
      sa[249] = 0.27033186f;
      sa[250] = -0.19943053f;
      sa[251] = -0.0879682f;
      sa[252] = -0.2956457f;
      sa[253] = -0.30946907f;
      sa[254] = -0.26478896f;
      sa[255] = 0.17595287f;
      sa[256] = -0.15599532f;
      sa[257] = 0.3349351f;
      sa[258] = -0.24063225f;
      sa[259] = -0.09559227f;
      sa[260] = -0.23875204f;
      sa[261] = -0.12144965f;
      sa[262] = -0.16005726f;
      sa[263] = 0.2587581f;
      sa[264] = -0.13702181f;
      sa[265] = 0.0976262f;
      sa[266] = -0.27416983f;
      sa[267] = -0.22655506f;
      sa[268] = 0.13218102f;
      sa[269] = -0.18570131f;
      sa[270] = 0.0017678826f;
      sa[271] = 0.23892973f;
      sa[272] = -0.063382685f;
      sa[273] = -0.09502576f;
      sa[274] = 0.16283855f;
      sa[275] = 0.02830162f;
      sa[276] = 0.11018238f;
      sa[277] = -0.26152724f;
      sa[278] = -0.10832356f;
      sa[279] = 0.23285784f;
      sa[280] = -0.1498288f;
      sa[281] = 0.35242036f;
      sa[282] = -0.06483713f;
      sa[283] = -0.007375299f;
      sa[284] = 0.005727432f;
      sa[285] = -0.19987574f;
      sa[286] = 0.30106556f;
      sa[287] = 0.16016223f;
      sa[288] = -0.23152506f;
      sa[289] = -0.1967147f;
      sa[290] = -0.10376125f;
      sa[291] = 0.04223448f;
      sa[292] = 0.15368429f;
      sa[293] = -0.08792879f;
      sa[294] = 0.11343413f;
      sa[295] = 0.13570327f;
      sa[296] = 0.23527193f;
      sa[297] = 0.21465714f;
      sa[298] = -0.05353205f;
      sa[299] = -0.04076378f;
      sa[300] = 0.005561971f;
      sa[301] = -0.053501055f;
      sa[302] = 0.20222525f;
      sa[303] = 0.039006326f;
      sa[304] = -0.24095352f;
      sa[305] = -0.044241216f;
      sa[306] = 0.25257346f;
      sa[307] = -0.1953988f;
      sa[308] = 0.100311816f;
      sa[309] = 0.17179945f;
      sa[310] = 0.32785246f;
      sa[311] = 0.32827985f;
      sa[312] = -0.22380775f;
      sa[313] = -0.19993767f;
      sa[314] = -0.14613953f;
      sa[315] = -0.04346245f;
      sa[316] = -0.023385935f;
      sa[317] = -0.094995916f;
      sa[318] = 0.10057266f;
      sa[319] = 0.29839557f;
      sa[320] = -0.012098403f;
      sa[321] = 0.1920358f;
      sa[322] = 0.18751276f;
      sa[323] = -0.21822971f;
      sa[324] = 0.0073766615f;
      sa[325] = 0.32217026f;
      sa[326] = -0.26842585f;
      sa[327] = -7.8736764E-4f;
      sa[328] = -0.02543026f;
      sa[329] = 0.29695812f;
      sa[330] = -0.16808702f;
      sa[331] = 0.032700565f;
      sa[332] = -0.28109622f;
      sa[333] = 0.14635047f;
      sa[334] = -0.090408355f;
      sa[335] = 0.2298599f;
      sa[336] = -0.13757387f;
      sa[337] = -0.14126453f;
      sa[338] = 0.32267693f;
      sa[339] = -0.19685762f;
      sa[340] = -0.33307514f;
      sa[341] = -0.26963022f;
      sa[342] = 0.20726727f;
      sa[343] = -0.093035445f;
      sa[344] = -0.14345999f;
      sa[345] = 0.2642604f;
      sa[346] = 0.25102374f;
      sa[347] = -0.14624643f;
      sa[348] = 0.33835542f;
      sa[349] = -0.30885747f;
      sa[350] = -0.24302919f;
      sa[351] = 0.15650827f;
      sa[352] = 0.26265165f;
      sa[353] = 0.015311808f;
      sa[354] = 0.1409384f;
      sa[355] = 0.1775622f;
      sa[356] = -0.14516331f;
      sa[357] = 0.23285013f;
      sa[358] = -0.3158933f;
      sa[359] = 0.03530956f;
      sa[360] = 0.099023744f;
      sa[361] = -0.024596076f;
      sa[362] = -0.175264f;
      sa[363] = 0.24092887f;
      sa[364] = -0.14162734f;
      sa[365] = -0.24562494f;
      sa[366] = -0.014690697f;
      sa[367] = -0.3187382f;
      sa[368] = -0.19621524f;
      sa[369] = 0.31084716f;
      sa[370] = -0.2103955f;
      sa[371] = 0.14257225f;
      sa[372] = -0.021832941f;
      sa[373] = 0.30597156f;
      sa[374] = -0.15949188f;
      sa[375] = -0.31297082f;
      sa[376] = -0.30614853f;
      sa[377] = -0.21380325f;
      sa[378] = 0.31041613f;
      sa[379] = 0.09385368f;
      sa[380] = -0.12823828f;
      sa[381] = -0.107657224f;
      sa[382] = -0.04884594f;
      sa[383] = -0.12158042f;
      sa[384] = -0.1607884f;
      sa[385] = 0.12537631f;
      sa[386] = -0.27959433f;
      sa[387] = -0.20037825f;
      sa[388] = 0.092015855f;
      sa[389] = -0.0056929793f;
      sa[390] = -0.007517401f;
      sa[391] = -0.10923596f;
      sa[392] = 0.30500582f;
      sa[393] = 0.26412392f;
      sa[394] = -0.06741876f;
      sa[395] = 0.30222595f;
      sa[396] = 0.31396633f;
      sa[397] = -0.28078473f;
      sa[398] = 0.11022431f;
      sa[399] = 0.11987514f;
      sa[400] = 0.17128499f;
      sa[401] = 0.25402254f;
      sa[402] = -0.16729954f;
      sa[403] = 0.04975158f;
      sa[404] = 0.2633652f;
      sa[405] = -0.2549791f;
      sa[406] = -0.07783455f;
      sa[407] = 0.20695677f;
      sa[408] = -0.25390834f;
      sa[409] = -0.28740144f;
      sa[410] = -0.14557472f;
      sa[411] = 0.16292267f;
      sa[412] = -0.1414824f;
      sa[413] = 0.11499962f;
      sa[414] = 0.14677121f;
      sa[415] = 0.29261082f;
      sa[416] = -0.21511643f;
      sa[417] = 0.00353488f;
      sa[418] = -0.02161488f;
      sa[419] = 0.26980677f;
      sa[420] = 0.18340999f;
      sa[421] = 0.2826792f;
      sa[422] = 0.24780533f;
      sa[423] = -0.05354849f;
      sa[424] = 0.094119556f;
      sa[425] = -0.105983965f;
      sa[426] = -0.34021476f;
      sa[427] = 0.18766439f;
      sa[428] = -0.045505024f;
      sa[429] = -0.12553844f;
      sa[430] = 0.17217201f;
      sa[431] = -0.02954664f;
      sa[432] = -0.06189257f;
      sa[433] = 0.16354975f;
      sa[434] = 0.2837616f;
      sa[435] = 0.06554824f;
      sa[436] = -0.2960843f;
      sa[437] = -0.28342065f;
      sa[438] = -0.012730786f;
      sa[439] = -0.019145345f;
      sa[440] = 0.32133588f;
      sa[441] = -0.32069448f;
      sa[442] = 0.12648368f;
      sa[443] = 0.06879494f;
      sa[444] = -0.2511867f;
      sa[445] = 0.05535566f;
      sa[446] = 0.23130146f;
      sa[447] = 0.07099924f;
      sa[448] = 0.22568701f;
      sa[449] = 0.28950867f;
      sa[450] = -0.12042726f;
      sa[451] = 0.09643396f;
      sa[452] = 0.18950166f;
      sa[453] = -0.06006879f;
      sa[454] = -0.18896179f;
      sa[455] = -0.06298103f;
      sa[456] = -0.046319176f;
      sa[457] = 0.12348947f;
      sa[458] = -0.24373339f;
      sa[459] = 0.30525398f;
      sa[460] = 0.23763499f;
      sa[461] = 0.306875f;
      sa[462] = 0.0534665f;
      sa[463] = 0.24311367f;
      sa[464] = -0.2824921f;
      sa[465] = 0.2810578f;
      sa[466] = -0.0323677f;
      sa[467] = 0.12537211f;
      sa[468] = 0.10188336f;
      sa[469] = 0.34637254f;
      sa[470] = 0.21893014f;
      sa[471] = 0.07861612f;
      sa[472] = 0.0035950681f;
      sa[473] = -0.12488683f;
      sa[474] = -0.024957081f;
      sa[475] = 0.10193742f;
      sa[476] = 0.25720945f;
      sa[477] = -0.17466316f;
      sa[478] = 0.120154835f;
      sa[479] = -0.14995822f;
      sa[480] = -0.33163157f;
      sa[481] = -0.2333419f;
      sa[482] = -0.28717124f;
      sa[483] = 0.2285977f;
      sa[484] = 0.27376634f;
      sa[485] = 0.16350576f;
      sa[486] = -0.033499043f;
      sa[487] = -0.20873623f;
      sa[488] = -0.21851332f;
      sa[489] = 0.0822696f;
      sa[490] = -0.015791032f;
      sa[491] = -0.25758097f;
      sa[492] = 0.2433696f;
      sa[493] = 0.29118216f;
      sa[494] = -0.25143743f;
      sa[495] = 0.1976407f;
      sa[496] = -0.008024421f;
      sa[497] = 0.06512606f;
      sa[498] = 0.18100813f;
      sa[499] = 0.18446714f;
      sa[500] = -0.026531372f;
      sa[501] = 0.13716254f;
      sa[502] = 0.2428719f;
      sa[503] = 0.03490696f;
      sa[504] = -0.17680432f;
      sa[505] = -0.26077694f;
      sa[506] = 0.19013357f;
      sa[507] = -0.057127956f;
      sa[508] = 0.10160116f;
      sa[509] = 0.24754207f;
      sa[510] = 0.19454758f;
      sa[511] = -0.002029295f;
      sa[512] = 0.07705162f;
      sa[513] = -0.11230881f;
      sa[514] = 0.26682493f;
      sa[515] = -0.25035435f;
      sa[516] = 0.017533462f;
      sa[517] = 0.10298523f;
      sa[518] = 0.15788448f;
      sa[519] = -0.119748645f;
      sa[520] = 0.21968651f;
      sa[521] = 0.13779686f;
      sa[522] = 0.11788191f;
      sa[523] = 0.23868127f;
      sa[524] = 0.19460912f;
      sa[525] = 0.16873312f;
      sa[526] = -0.008314425f;
      sa[527] = -0.13495229f;
      sa[528] = -0.035568047f;
      sa[529] = 0.11359496f;
      sa[530] = -0.18610577f;
      sa[531] = 0.038268503f;
      sa[532] = 0.13885431f;
      sa[533] = 0.11679541f;
      sa[534] = 0.13316086f;
      sa[535] = -0.13332495f;
      sa[536] = 0.098544076f;
      sa[537] = -0.22364795f;
      sa[538] = 0.21560189f;
      sa[539] = 0.29649466f;
      sa[540] = -0.25378796f;
      sa[541] = -0.16431183f;
      sa[542] = -0.05260729f;
      sa[543] = -0.3343216f;
      sa[544] = 0.16929048f;
      sa[545] = 0.12510462f;
      sa[546] = 0.085856445f;
      sa[547] = 0.21698529f;
      sa[548] = 0.09411695f;
      sa[549] = 0.18364231f;
      sa[550] = 0.025829636f;
      sa[551] = -0.15880838f;
      sa[552] = 0.047825485f;
      sa[553] = -0.055974483f;
      sa[554] = -0.16659066f;
      sa[555] = -0.15163904f;
      sa[556] = -0.17684688f;
      sa[557] = -0.24015564f;
      sa[558] = -0.241931f;
      sa[559] = 0.17951287f;
      sa[560] = -0.32923344f;
      sa[561] = -0.096514285f;
      sa[562] = 0.20870967f;
      sa[563] = -0.06966786f;
      sa[564] = 0.3353151f;
      sa[565] = 0.066135414f;
      sa[566] = 0.28428623f;
      sa[567] = 0.059350785f;
      sa[568] = -0.07514809f;
      sa[569] = 0.04137703f;
      sa[570] = -0.012510217f;
      sa[571] = -0.04686754f;
      sa[572] = -0.16270934f;
      sa[573] = 0.07921488f;
      sa[574] = 0.30588043f;
      sa[575] = -0.2277334f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_05_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_05_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.36997515f;
      sa[1] = -0.023710927f;
      sa[2] = -0.14680132f;
      sa[3] = -0.23654757f;
      sa[4] = 0.035889804f;
      sa[5] = 0.06219709f;
      sa[6] = 0.30809903f;
      sa[7] = -0.16094276f;
      sa[8] = -0.23937933f;
      sa[9] = 0.18754922f;
      sa[10] = -0.05091902f;
      sa[11] = 0.11893479f;
      sa[12] = 0.080335565f;
      sa[13] = 0.035648786f;
      sa[14] = -0.31200555f;
      sa[15] = 0.32425487f;
      sa[16] = 0.43099785f;
      sa[17] = -0.108291276f;
      sa[18] = 0.010187077f;
      sa[19] = -0.1150917f;
      sa[20] = 0.32195196f;
      sa[21] = -0.005502024f;
      sa[22] = -0.28871125f;
      sa[23] = 0.22481294f;
      sa[24] = -0.35509038f;
      sa[25] = 0.11561113f;
      sa[26] = -0.065667525f;
      sa[27] = 0.41152623f;
      sa[28] = -0.37700588f;
      sa[29] = -0.11995082f;
      sa[30] = 0.11891825f;
      sa[31] = -0.18138063f;
      sa[32] = -0.33264476f;
      sa[33] = -0.40458563f;
      sa[34] = -0.004889996f;
      sa[35] = 0.3551292f;
      sa[36] = -0.09949654f;
      sa[37] = -0.031938385f;
      sa[38] = 0.022418788f;
      sa[39] = 0.22839059f;
      sa[40] = -0.2174261f;
      sa[41] = -0.38764954f;
      sa[42] = -0.28613043f;
      sa[43] = -0.3878536f;
      sa[44] = -0.009738829f;
      sa[45] = -0.3730091f;
      sa[46] = 0.31921262f;
      sa[47] = 0.34803045f;
      sa[48] = -0.42881718f;
      sa[49] = -0.3119031f;
      sa[50] = 0.09092455f;
      sa[51] = -0.10695156f;
      sa[52] = 0.18675433f;
      sa[53] = 0.206041f;
      sa[54] = -0.08230015f;
      sa[55] = 0.28201494f;
      sa[56] = -0.2967236f;
      sa[57] = -0.32356146f;
      sa[58] = 0.027263366f;
      sa[59] = -0.07754943f;
      sa[60] = 0.33515516f;
      sa[61] = -0.19723353f;
      sa[62] = -0.13296396f;
      sa[63] = 0.16028278f;
      sa[64] = 0.4109502f;
      sa[65] = -0.17870933f;
      sa[66] = 0.16111448f;
      sa[67] = 0.41913792f;
      sa[68] = 0.1953554f;
      sa[69] = -0.2753391f;
      sa[70] = -0.4155108f;
      sa[71] = -0.12561421f;
      sa[72] = -0.355403f;
      sa[73] = 0.30639854f;
      sa[74] = 0.34864533f;
      sa[75] = -0.02665711f;
      sa[76] = 0.26074657f;
      sa[77] = 0.1530926f;
      sa[78] = -0.34492242f;
      sa[79] = 0.26169407f;
      sa[80] = -0.22248414f;
      sa[81] = 0.072399855f;
      sa[82] = 0.21354385f;
      sa[83] = -0.16502413f;
      sa[84] = -0.43346927f;
      sa[85] = -0.3485475f;
      sa[86] = 0.059861027f;
      sa[87] = 0.34524494f;
      sa[88] = -0.41060048f;
      sa[89] = -0.13718334f;
      sa[90] = -0.28055066f;
      sa[91] = 0.41275692f;
      sa[92] = -0.098284446f;
      sa[93] = 0.06276451f;
      sa[94] = -0.41132256f;
      sa[95] = -0.054514952f;
      sa[96] = -0.33316797f;
      sa[97] = 0.03322519f;
      sa[98] = -0.030047745f;
      sa[99] = 0.06988564f;
      sa[100] = -0.35780948f;
      sa[101] = -0.12460723f;
      sa[102] = 0.32728994f;
      sa[103] = 0.013283707f;
      sa[104] = -0.062953115f;
      sa[105] = -0.18048228f;
      sa[106] = 0.3744302f;
      sa[107] = 0.30094033f;
      sa[108] = 0.17497748f;
      sa[109] = 0.014152914f;
      sa[110] = 0.17077346f;
      sa[111] = -0.22036722f;
      sa[112] = -0.36363313f;
      sa[113] = 0.004669918f;
      sa[114] = 0.04126078f;
      sa[115] = -0.0975122f;
      sa[116] = 0.29087925f;
      sa[117] = -0.007310162f;
      sa[118] = -0.35834447f;
      sa[119] = -0.23018825f;
      sa[120] = -0.106598414f;
      sa[121] = 0.28002563f;
      sa[122] = -0.034625348f;
      sa[123] = 0.06457994f;
      sa[124] = -0.2281941f;
      sa[125] = 0.16713724f;
      sa[126] = -0.2939767f;
      sa[127] = 0.10270933f;
      sa[128] = -0.3114806f;
      sa[129] = 0.16741346f;
      sa[130] = -0.11329676f;
      sa[131] = 0.21262649f;
      sa[132] = 0.08743897f;
      sa[133] = 0.14180808f;
      sa[134] = 0.18178448f;
      sa[135] = -0.32988507f;
      sa[136] = 0.11933397f;
      sa[137] = -0.17839515f;
      sa[138] = -0.034457512f;
      sa[139] = 0.2828109f;
      sa[140] = -0.16447167f;
      sa[141] = -0.050985776f;
      sa[142] = 0.038794324f;
      sa[143] = -0.25151163f;
      sa[144] = 0.2425959f;
      sa[145] = -0.19494547f;
      sa[146] = 0.030190684f;
      sa[147] = -0.071450144f;
      sa[148] = -0.22311647f;
      sa[149] = 0.31254387f;
      sa[150] = -0.2678668f;
      sa[151] = -0.43329984f;
      sa[152] = 0.4358025f;
      sa[153] = -0.14238803f;
      sa[154] = 0.3816559f;
      sa[155] = -0.41180488f;
      sa[156] = -0.39259413f;
      sa[157] = -0.31886026f;
      sa[158] = -0.06954493f;
      sa[159] = -0.1737915f;
      sa[160] = 0.29625627f;
      sa[161] = -0.35057825f;
      sa[162] = 0.39269608f;
      sa[163] = -0.22954802f;
      sa[164] = 0.15793554f;
      sa[165] = -0.18914834f;
      sa[166] = 0.35898793f;
      sa[167] = -0.4375853f;
      sa[168] = 0.24468149f;
      sa[169] = -0.4328651f;
      sa[170] = 0.2957929f;
      sa[171] = 0.19908145f;
      sa[172] = 0.36916384f;
      sa[173] = 0.36056465f;
      sa[174] = -0.116102695f;
      sa[175] = -0.03806052f;
      sa[176] = -0.21251415f;
      sa[177] = 0.04406295f;
      sa[178] = -0.27061456f;
      sa[179] = -0.06688387f;
      sa[180] = -0.37550887f;
      sa[181] = -0.23773454f;
      sa[182] = 0.108959526f;
      sa[183] = -0.27704987f;
      sa[184] = 0.40478164f;
      sa[185] = 0.34391332f;
      sa[186] = -0.12241989f;
      sa[187] = -0.2612588f;
      sa[188] = -0.12868138f;
      sa[189] = -0.20348929f;
      sa[190] = -0.39981323f;
      sa[191] = -0.26785913f;
      sa[192] = -0.020583168f;
      sa[193] = 0.11870719f;
      sa[194] = -0.28360185f;
      sa[195] = -0.2317447f;
      sa[196] = 0.16580772f;
      sa[197] = -0.20394681f;
      sa[198] = 0.02834425f;
      sa[199] = 0.4075703f;
      sa[200] = -0.027016768f;
      sa[201] = 0.25707301f;
      sa[202] = 0.17454863f;
      sa[203] = -0.39227656f;
      sa[204] = 0.153283f;
      sa[205] = 0.37827826f;
      sa[206] = -0.12965222f;
      sa[207] = 0.15736029f;
      sa[208] = -0.21596481f;
      sa[209] = 0.17074674f;
      sa[210] = -0.113081396f;
      sa[211] = -0.26851085f;
      sa[212] = -0.37104738f;
      sa[213] = 0.023384904f;
      sa[214] = -0.3510408f;
      sa[215] = -0.050226893f;
      sa[216] = 0.14605445f;
      sa[217] = 0.33638826f;
      sa[218] = 0.033066873f;
      sa[219] = 0.09319326f;
      sa[220] = 0.14740439f;
      sa[221] = -0.03588836f;
      sa[222] = -0.28852096f;
      sa[223] = -0.32542285f;
      sa[224] = 0.2989195f;
      sa[225] = 0.08765677f;
      sa[226] = -0.024643205f;
      sa[227] = 0.074907705f;
      sa[228] = -0.11106037f;
      sa[229] = -0.20818245f;
      sa[230] = -0.2337972f;
      sa[231] = -0.10409485f;
      sa[232] = 0.45175618f;
      sa[233] = -0.16244875f;
      sa[234] = -0.13343208f;
      sa[235] = 0.061333492f;
      sa[236] = -0.36142f;
      sa[237] = 0.43359405f;
      sa[238] = 0.17749962f;
      sa[239] = -0.06782221f;
      sa[240] = -0.0717435f;
      sa[241] = -0.36637262f;
      sa[242] = -0.24444175f;
      sa[243] = 0.36620784f;
      sa[244] = 0.21761389f;
      sa[245] = 0.31959575f;
      sa[246] = 0.18996567f;
      sa[247] = -0.32670102f;
      sa[248] = -0.19762245f;
      sa[249] = 0.0073330286f;
      sa[250] = 0.2484495f;
      sa[251] = 0.4428349f;
      sa[252] = 0.22359668f;
      sa[253] = -0.31101325f;
      sa[254] = 0.42187673f;
      sa[255] = 0.18913963f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_05_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_ReLU_05_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.15408121f;
      sa[1] = -1.5567964f;
      sa[2] = -1.6006205f;
      sa[3] = 1.3404853f;
      sa[4] = 0.42378932f;
      sa[5] = -0.22055265f;
      sa[6] = -1.6674184f;
      sa[7] = 1.5027993f;
      sa[8] = 1.7829694f;
      sa[9] = 0.1906034f;
      sa[10] = 1.633563f;
      sa[11] = 1.4736909f;
      sa[12] = 1.8874724f;
      sa[13] = -0.57120514f;
      sa[14] = -1.9726968f;
      sa[15] = -0.6979872f;
      sa[16] = 0.76798654f;
      sa[17] = -0.7443685f;
      sa[18] = -1.5063856f;
      sa[19] = -0.8591997f;
      sa[20] = -1.9465113f;
      sa[21] = 0.32446402f;
      sa[22] = -1.9848744f;
      sa[23] = -0.5976502f;
      sa[24] = -0.5615985f;
      sa[25] = 1.8621964f;
      sa[26] = -0.33710992f;
      sa[27] = 1.1950992f;
      sa[28] = 1.2237976f;
      sa[29] = -0.7282225f;
      sa[30] = 0.1693222f;
      sa[31] = 0.13921972f;
      sa[32] = 0.46888262f;
      sa[33] = 0.28489697f;
      sa[34] = -0.6183615f;
      sa[35] = 1.0509323f;
      sa[36] = 0.5717793f;
      sa[37] = -1.3429456f;
      sa[38] = 0.5663219f;
      sa[39] = -0.2071186f;
      sa[40] = 0.21394859f;
      sa[41] = -0.75827837f;
      sa[42] = 0.5147664f;
      sa[43] = -0.12789369f;
      sa[44] = 1.0156366f;
      sa[45] = -2.0253124f;
      sa[46] = -2.128141f;
      sa[47] = 0.028905105f;
      sa[48] = 1.6127603f;
      sa[49] = -0.2709838f;
      sa[50] = -0.49799138f;
      sa[51] = 1.7794553f;
      sa[52] = -1.7252226f;
      sa[53] = 0.9361052f;
      sa[54] = 1.7987275f;
      sa[55] = 1.088993f;
      sa[56] = -0.5470319f;
      sa[57] = -0.05733208f;
      sa[58] = 1.032794f;
      sa[59] = 0.870019f;
      sa[60] = -1.4119121f;
      sa[61] = 0.9267522f;
      sa[62] = -0.40204206f;
      sa[63] = -0.8396134f;
      sa[64] = 0.91305345f;
      sa[65] = -0.98892254f;
      sa[66] = -1.7784911f;
      sa[67] = -0.16244696f;
      sa[68] = 0.8785039f;
      sa[69] = -1.3701388f;
      sa[70] = -1.6624626f;
      sa[71] = -0.032732315f;
      sa[72] = -0.98548365f;
      sa[73] = -1.1686974f;
      sa[74] = -1.0843314f;
      sa[75] = 1.2783519f;
      sa[76] = 1.8721255f;
      sa[77] = -0.61114f;
      sa[78] = -1.4114581f;
      sa[79] = -0.37720364f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_05 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_05_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_05_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_05_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_ReLU_05_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


