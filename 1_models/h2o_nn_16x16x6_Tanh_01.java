/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:46:44.250+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_01

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_01 > h2o_nn_16x16x6_Tanh_01.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_01.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_01", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_01 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_01_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_01_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_01_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_01_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_01_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_01_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_01_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_01_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_01_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_01_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_01_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_01_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_01.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_01_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25,0.25,0.125,0.25,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_01() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(1976451171446480528L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_01_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_01_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_01_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_01_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_01_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_01_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_01_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_01_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_01_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_01_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_01_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.03918052973534368;
      sa[1] = -0.018428109174438094;
      sa[2] = -0.0012776885858111387;
      sa[3] = -0.00660242093593035;
      sa[4] = 0.011495180363858347;
      sa[5] = 0.07604790558712832;
      sa[6] = 0.06897016305512504;
      sa[7] = -0.01712051432855193;
      sa[8] = -0.0013557998580874826;
      sa[9] = -0.06185129748686059;
      sa[10] = 0.04847538636876575;
      sa[11] = -0.008988418261869554;
      sa[12] = 0.059989594733681074;
      sa[13] = 7.670766496845477E-4;
      sa[14] = 0.028196652630122318;
      sa[15] = 0.011765057608601259;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_01_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_01_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.008462790687490618;
      sa[1] = -0.005332874596655933;
      sa[2] = 0.011226291858859924;
      sa[3] = 0.03399096689544354;
      sa[4] = 0.003361865028113792;
      sa[5] = -0.00905133918370903;
      sa[6] = 0.0013745669791456019;
      sa[7] = 0.0182266049851409;
      sa[8] = 0.049164152630922116;
      sa[9] = -0.007397304229785387;
      sa[10] = 0.02997486736717175;
      sa[11] = 0.004537523328697009;
      sa[12] = 0.02395194387440651;
      sa[13] = -0.004336255025405008;
      sa[14] = -0.014427501596995171;
      sa[15] = 0.014354120642861196;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_01_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_01_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.01546609725726896;
      sa[1] = -0.041744488733936554;
      sa[2] = 0.006263488982614235;
      sa[3] = -0.01148601537738554;
      sa[4] = -0.10935217022671968;
    }
  }
}
class h2o_nn_16x16x6_Tanh_01_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_01_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_01_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.060521953f;
      sa[1] = 0.30452195f;
      sa[2] = 0.21972688f;
      sa[3] = 0.11176772f;
      sa[4] = -0.21248847f;
      sa[5] = -0.2057519f;
      sa[6] = -0.062223706f;
      sa[7] = 0.25039515f;
      sa[8] = 0.13892026f;
      sa[9] = -0.15342113f;
      sa[10] = -0.16422331f;
      sa[11] = -0.17280056f;
      sa[12] = 0.09553935f;
      sa[13] = -0.29058596f;
      sa[14] = -0.19711347f;
      sa[15] = -0.007884481f;
      sa[16] = 0.16359782f;
      sa[17] = 0.19523154f;
      sa[18] = -0.24013485f;
      sa[19] = 0.19041802f;
      sa[20] = 0.2664972f;
      sa[21] = -0.34498855f;
      sa[22] = 0.2532172f;
      sa[23] = -0.17365965f;
      sa[24] = 0.33492273f;
      sa[25] = 0.17655174f;
      sa[26] = -0.30009305f;
      sa[27] = 0.33538014f;
      sa[28] = 0.26582408f;
      sa[29] = -0.31746122f;
      sa[30] = -0.19284447f;
      sa[31] = 0.18101169f;
      sa[32] = 0.14243357f;
      sa[33] = -0.23740426f;
      sa[34] = 0.095326394f;
      sa[35] = -0.0795021f;
      sa[36] = 0.11515639f;
      sa[37] = 0.32405317f;
      sa[38] = -0.06145711f;
      sa[39] = 0.17599094f;
      sa[40] = 0.004202779f;
      sa[41] = -0.10086096f;
      sa[42] = -0.16674122f;
      sa[43] = 0.034648456f;
      sa[44] = 0.2853349f;
      sa[45] = -0.22571683f;
      sa[46] = 0.06351239f;
      sa[47] = 0.07648602f;
      sa[48] = 0.2555721f;
      sa[49] = 0.27882454f;
      sa[50] = 0.2258365f;
      sa[51] = -0.29819041f;
      sa[52] = -0.05805043f;
      sa[53] = 0.2783699f;
      sa[54] = 0.22098678f;
      sa[55] = 0.019031398f;
      sa[56] = -0.18247406f;
      sa[57] = -0.33162168f;
      sa[58] = 0.29052535f;
      sa[59] = -0.18945515f;
      sa[60] = -0.30044344f;
      sa[61] = 0.20783953f;
      sa[62] = 0.11906733f;
      sa[63] = -0.038854066f;
      sa[64] = 0.14506543f;
      sa[65] = 0.11155125f;
      sa[66] = 0.0064068986f;
      sa[67] = 0.14461482f;
      sa[68] = -0.14676225f;
      sa[69] = 0.1725382f;
      sa[70] = -0.13821541f;
      sa[71] = 0.3236729f;
      sa[72] = -0.16503681f;
      sa[73] = 0.18229999f;
      sa[74] = -0.25550917f;
      sa[75] = 0.13044788f;
      sa[76] = -0.19573364f;
      sa[77] = -0.058705878f;
      sa[78] = -0.06590863f;
      sa[79] = 0.15431668f;
      sa[80] = -0.24294052f;
      sa[81] = -0.21933284f;
      sa[82] = -0.05605385f;
      sa[83] = 0.061313707f;
      sa[84] = -0.031352658f;
      sa[85] = -0.19281499f;
      sa[86] = 0.16417508f;
      sa[87] = 0.25927502f;
      sa[88] = 0.22707494f;
      sa[89] = -0.0010019762f;
      sa[90] = -0.1202129f;
      sa[91] = 0.15152997f;
      sa[92] = 0.10630938f;
      sa[93] = -0.21769702f;
      sa[94] = -0.19496778f;
      sa[95] = -0.28674194f;
      sa[96] = 0.10682296f;
      sa[97] = 0.011242739f;
      sa[98] = 0.23805012f;
      sa[99] = -0.09617725f;
      sa[100] = -0.06294432f;
      sa[101] = -0.18444622f;
      sa[102] = -0.27054638f;
      sa[103] = -0.11235572f;
      sa[104] = 0.057350583f;
      sa[105] = -0.22722356f;
      sa[106] = -0.24089012f;
      sa[107] = 0.13566421f;
      sa[108] = 0.15915486f;
      sa[109] = -0.2571574f;
      sa[110] = -0.16429198f;
      sa[111] = 0.23210892f;
      sa[112] = 0.14907779f;
      sa[113] = 0.044939168f;
      sa[114] = -0.157326f;
      sa[115] = -0.050025906f;
      sa[116] = -0.2907444f;
      sa[117] = -0.024966571f;
      sa[118] = -0.28755778f;
      sa[119] = -0.15060885f;
      sa[120] = 0.23056059f;
      sa[121] = 0.24900311f;
      sa[122] = 0.33124217f;
      sa[123] = 0.27011546f;
      sa[124] = 0.26354134f;
      sa[125] = 0.28748015f;
      sa[126] = -0.28480384f;
      sa[127] = -0.2473409f;
      sa[128] = 0.06466643f;
      sa[129] = 0.16693106f;
      sa[130] = -0.124752045f;
      sa[131] = 0.30742952f;
      sa[132] = 0.2033303f;
      sa[133] = -0.3270051f;
      sa[134] = 0.107748725f;
      sa[135] = -0.29712322f;
      sa[136] = -0.3050879f;
      sa[137] = -0.029804902f;
      sa[138] = 0.13000575f;
      sa[139] = -0.107722245f;
      sa[140] = 0.002135769f;
      sa[141] = -0.12289291f;
      sa[142] = 0.17859937f;
      sa[143] = -0.36891803f;
      sa[144] = 0.30578753f;
      sa[145] = -0.17334513f;
      sa[146] = -0.29021788f;
      sa[147] = 0.21302196f;
      sa[148] = 0.2011353f;
      sa[149] = 0.21208176f;
      sa[150] = 0.33087853f;
      sa[151] = -0.27060777f;
      sa[152] = 0.047151614f;
      sa[153] = 0.28607732f;
      sa[154] = 0.25116503f;
      sa[155] = -0.20068151f;
      sa[156] = 0.15033548f;
      sa[157] = -0.20360848f;
      sa[158] = 0.09567863f;
      sa[159] = 0.083284244f;
      sa[160] = 0.036077213f;
      sa[161] = 0.1826098f;
      sa[162] = -0.17420116f;
      sa[163] = -0.08077751f;
      sa[164] = 0.27374658f;
      sa[165] = -0.0068888385f;
      sa[166] = -0.05205576f;
      sa[167] = -0.11898913f;
      sa[168] = 0.16606359f;
      sa[169] = 0.32736108f;
      sa[170] = 0.026630595f;
      sa[171] = -0.022654358f;
      sa[172] = -0.05816239f;
      sa[173] = -0.14695974f;
      sa[174] = -0.013275072f;
      sa[175] = -0.27488634f;
      sa[176] = -0.02099916f;
      sa[177] = -0.04857101f;
      sa[178] = -9.0976746E-4f;
      sa[179] = 0.13424405f;
      sa[180] = -0.053131174f;
      sa[181] = -0.3018941f;
      sa[182] = -0.23152746f;
      sa[183] = 0.018823486f;
      sa[184] = 0.33309886f;
      sa[185] = 0.19040677f;
      sa[186] = -0.33041206f;
      sa[187] = 0.057709005f;
      sa[188] = -0.01692189f;
      sa[189] = 0.20595622f;
      sa[190] = -3.955481E-4f;
      sa[191] = -0.16093709f;
      sa[192] = -0.13926825f;
      sa[193] = 0.25005832f;
      sa[194] = 0.078609824f;
      sa[195] = 0.27583486f;
      sa[196] = 0.28247285f;
      sa[197] = -0.11026785f;
      sa[198] = 0.117261566f;
      sa[199] = -0.037378605f;
      sa[200] = 0.05435678f;
      sa[201] = -0.2567914f;
      sa[202] = 0.15310122f;
      sa[203] = -0.028596753f;
      sa[204] = -0.25010332f;
      sa[205] = 0.21021788f;
      sa[206] = 0.24286617f;
      sa[207] = 0.24943668f;
      sa[208] = -0.2672974f;
      sa[209] = -0.057373796f;
      sa[210] = -0.30006844f;
      sa[211] = -0.27851516f;
      sa[212] = 0.2032362f;
      sa[213] = -0.3785698f;
      sa[214] = -0.058829565f;
      sa[215] = 0.15575674f;
      sa[216] = 0.05671821f;
      sa[217] = 0.17191763f;
      sa[218] = -0.18527012f;
      sa[219] = 0.39949378f;
      sa[220] = -0.20353581f;
      sa[221] = 0.081508115f;
      sa[222] = 0.29364702f;
      sa[223] = 0.11926004f;
      sa[224] = 0.073647074f;
      sa[225] = 0.30791762f;
      sa[226] = -0.26097584f;
      sa[227] = 0.3228116f;
      sa[228] = 0.13703254f;
      sa[229] = 0.12096123f;
      sa[230] = 0.31136796f;
      sa[231] = -0.24110153f;
      sa[232] = -0.26278993f;
      sa[233] = 0.07507922f;
      sa[234] = 0.17899509f;
      sa[235] = -0.3736754f;
      sa[236] = -0.058692843f;
      sa[237] = -0.2534247f;
      sa[238] = -0.22540292f;
      sa[239] = 0.14315966f;
      sa[240] = 0.03224404f;
      sa[241] = -0.23856494f;
      sa[242] = -0.07227215f;
      sa[243] = -0.34022403f;
      sa[244] = -0.23541889f;
      sa[245] = -0.14051239f;
      sa[246] = -0.2714102f;
      sa[247] = -0.048182484f;
      sa[248] = 0.42374712f;
      sa[249] = 0.3397734f;
      sa[250] = -0.28964797f;
      sa[251] = -0.22432883f;
      sa[252] = -0.34971702f;
      sa[253] = -0.32540974f;
      sa[254] = -0.20416318f;
      sa[255] = 0.30121347f;
      sa[256] = -0.19096819f;
      sa[257] = 0.31021735f;
      sa[258] = -0.25513905f;
      sa[259] = -0.10584967f;
      sa[260] = -0.29455847f;
      sa[261] = -0.117278725f;
      sa[262] = -0.14760116f;
      sa[263] = 0.41471043f;
      sa[264] = -0.17670983f;
      sa[265] = 0.06923463f;
      sa[266] = -0.29150942f;
      sa[267] = -0.25621167f;
      sa[268] = 0.118484914f;
      sa[269] = -0.18713646f;
      sa[270] = 0.011049863f;
      sa[271] = 0.14355797f;
      sa[272] = -0.13449924f;
      sa[273] = -0.16149034f;
      sa[274] = 0.12599745f;
      sa[275] = -0.029180674f;
      sa[276] = 0.12215346f;
      sa[277] = -0.25160205f;
      sa[278] = -0.1128355f;
      sa[279] = 0.14658077f;
      sa[280] = -0.21265973f;
      sa[281] = 0.2875716f;
      sa[282] = -0.10839904f;
      sa[283] = -0.057610873f;
      sa[284] = 0.15071549f;
      sa[285] = -0.06259352f;
      sa[286] = 0.2015766f;
      sa[287] = 0.012527639f;
      sa[288] = -0.17700449f;
      sa[289] = -0.15849957f;
      sa[290] = -0.124102466f;
      sa[291] = -0.078484304f;
      sa[292] = 0.12120904f;
      sa[293] = -0.11680218f;
      sa[294] = 0.07041316f;
      sa[295] = 0.09272824f;
      sa[296] = 0.2798305f;
      sa[297] = 0.22695254f;
      sa[298] = -0.029557632f;
      sa[299] = -0.10099917f;
      sa[300] = -0.0053416668f;
      sa[301] = -0.07532917f;
      sa[302] = 0.1691003f;
      sa[303] = 0.02789868f;
      sa[304] = -0.17965263f;
      sa[305] = -0.018194722f;
      sa[306] = 0.21423471f;
      sa[307] = -0.119064234f;
      sa[308] = 0.1150523f;
      sa[309] = 0.17326896f;
      sa[310] = 0.30829355f;
      sa[311] = 0.35195693f;
      sa[312] = -0.22377594f;
      sa[313] = -0.18256481f;
      sa[314] = -0.18079525f;
      sa[315] = 0.04918836f;
      sa[316] = -0.013917909f;
      sa[317] = -0.09384841f;
      sa[318] = 0.089376636f;
      sa[319] = 0.30316854f;
      sa[320] = -0.15874374f;
      sa[321] = 0.08285084f;
      sa[322] = 0.2603832f;
      sa[323] = -0.091934666f;
      sa[324] = -0.0031900853f;
      sa[325] = 0.32599044f;
      sa[326] = -0.23947825f;
      sa[327] = 0.05227145f;
      sa[328] = -0.094117306f;
      sa[329] = 0.2509348f;
      sa[330] = -0.20453513f;
      sa[331] = 0.009889067f;
      sa[332] = -0.29646245f;
      sa[333] = 0.23183277f;
      sa[334] = -0.044905446f;
      sa[335] = 0.3102443f;
      sa[336] = -0.17113228f;
      sa[337] = -0.17477499f;
      sa[338] = 0.2992822f;
      sa[339] = -0.22456284f;
      sa[340] = -0.33505106f;
      sa[341] = -0.19191001f;
      sa[342] = 0.18573873f;
      sa[343] = -0.13268144f;
      sa[344] = -0.1957988f;
      sa[345] = 0.19373421f;
      sa[346] = 0.22194842f;
      sa[347] = -0.18482952f;
      sa[348] = 0.3316067f;
      sa[349] = -0.19303621f;
      sa[350] = -0.2721966f;
      sa[351] = 0.098305866f;
      sa[352] = 0.19373381f;
      sa[353] = -0.07683232f;
      sa[354] = 0.071402855f;
      sa[355] = 0.1170361f;
      sa[356] = -0.10661088f;
      sa[357] = 0.3179273f;
      sa[358] = -0.31197146f;
      sa[359] = 0.0022256288f;
      sa[360] = 0.106347054f;
      sa[361] = -0.061943255f;
      sa[362] = -0.2161439f;
      sa[363] = 0.2514713f;
      sa[364] = -0.08860336f;
      sa[365] = -0.21826139f;
      sa[366] = 0.026315376f;
      sa[367] = -0.30479848f;
      sa[368] = -0.18472539f;
      sa[369] = 0.25393987f;
      sa[370] = -0.25097796f;
      sa[371] = 0.040463015f;
      sa[372] = 0.0066431346f;
      sa[373] = 0.32633147f;
      sa[374] = -0.13828163f;
      sa[375] = -0.32849258f;
      sa[376] = -0.36081952f;
      sa[377] = -0.2945252f;
      sa[378] = 0.36025456f;
      sa[379] = 0.09508952f;
      sa[380] = -0.08824782f;
      sa[381] = -0.053278297f;
      sa[382] = -0.0035828112f;
      sa[383] = -0.13470662f;
      sa[384] = -0.19989593f;
      sa[385] = 0.09001565f;
      sa[386] = -0.24828987f;
      sa[387] = -0.1575549f;
      sa[388] = 0.12340681f;
      sa[389] = 0.034717355f;
      sa[390] = 0.018034525f;
      sa[391] = -0.104345396f;
      sa[392] = 0.32035902f;
      sa[393] = 0.21978614f;
      sa[394] = -0.022299953f;
      sa[395] = 0.34890518f;
      sa[396] = 0.29936892f;
      sa[397] = -0.30072027f;
      sa[398] = 0.10278628f;
      sa[399] = 0.16494186f;
      sa[400] = 0.21263504f;
      sa[401] = 0.2858124f;
      sa[402] = -0.13374537f;
      sa[403] = 0.08683971f;
      sa[404] = 0.2522089f;
      sa[405] = -0.30952498f;
      sa[406] = -0.11547458f;
      sa[407] = 0.13759123f;
      sa[408] = -0.2435473f;
      sa[409] = -0.26399025f;
      sa[410] = -0.12072443f;
      sa[411] = 0.18606651f;
      sa[412] = -0.16581121f;
      sa[413] = 0.047368005f;
      sa[414] = 0.16410932f;
      sa[415] = 0.2812008f;
      sa[416] = -0.2107158f;
      sa[417] = 0.026040766f;
      sa[418] = -0.010206607f;
      sa[419] = 0.27038318f;
      sa[420] = 0.1991277f;
      sa[421] = 0.2578854f;
      sa[422] = 0.26228887f;
      sa[423] = -0.06978749f;
      sa[424] = 0.10161929f;
      sa[425] = -0.07266641f;
      sa[426] = -0.31056973f;
      sa[427] = 0.20513465f;
      sa[428] = 0.035775658f;
      sa[429] = -0.15051363f;
      sa[430] = 0.13275424f;
      sa[431] = -0.07067879f;
      sa[432] = -0.05206477f;
      sa[433] = 0.1139424f;
      sa[434] = 0.2750531f;
      sa[435] = 0.11274401f;
      sa[436] = -0.25362587f;
      sa[437] = -0.25291273f;
      sa[438] = 0.039498325f;
      sa[439] = 0.028302366f;
      sa[440] = 0.3286401f;
      sa[441] = -0.35389408f;
      sa[442] = 0.105075404f;
      sa[443] = 0.010896197f;
      sa[444] = -0.22366354f;
      sa[445] = 0.08178132f;
      sa[446] = 0.27148944f;
      sa[447] = 0.072179206f;
      sa[448] = 0.16732772f;
      sa[449] = 0.22598863f;
      sa[450] = -0.08867938f;
      sa[451] = 0.06205374f;
      sa[452] = 0.21401462f;
      sa[453] = -0.025134955f;
      sa[454] = -0.14573205f;
      sa[455] = -0.064672306f;
      sa[456] = -0.06967112f;
      sa[457] = 0.11181004f;
      sa[458] = -0.21968882f;
      sa[459] = 0.29943186f;
      sa[460] = 0.25749204f;
      sa[461] = 0.33486795f;
      sa[462] = 0.07642618f;
      sa[463] = 0.24662045f;
      sa[464] = -0.23028928f;
      sa[465] = 0.2679936f;
      sa[466] = -0.0070498697f;
      sa[467] = 0.11299869f;
      sa[468] = 0.16805351f;
      sa[469] = 0.30322737f;
      sa[470] = 0.18572643f;
      sa[471] = 0.06352847f;
      sa[472] = 0.007273872f;
      sa[473] = -0.1341707f;
      sa[474] = -0.021699259f;
      sa[475] = 0.09823719f;
      sa[476] = 0.32709703f;
      sa[477] = -0.20127845f;
      sa[478] = 0.15255186f;
      sa[479] = -0.20635143f;
      sa[480] = -0.31759715f;
      sa[481] = -0.2363748f;
      sa[482] = -0.277648f;
      sa[483] = 0.20618132f;
      sa[484] = 0.20316523f;
      sa[485] = 0.10332731f;
      sa[486] = -0.014674875f;
      sa[487] = -0.15875119f;
      sa[488] = -0.18861632f;
      sa[489] = 0.10898791f;
      sa[490] = 0.010431532f;
      sa[491] = -0.28115916f;
      sa[492] = 0.1790501f;
      sa[493] = 0.296345f;
      sa[494] = -0.24455915f;
      sa[495] = 0.24334379f;
      sa[496] = 0.008727705f;
      sa[497] = 0.081311196f;
      sa[498] = 0.18276894f;
      sa[499] = 0.15492924f;
      sa[500] = -0.10433304f;
      sa[501] = -0.037830234f;
      sa[502] = 0.33489704f;
      sa[503] = 0.13486058f;
      sa[504] = -0.22631028f;
      sa[505] = -0.2542411f;
      sa[506] = 0.20392784f;
      sa[507] = -0.111813694f;
      sa[508] = 0.097819306f;
      sa[509] = 0.2387921f;
      sa[510] = 0.17957497f;
      sa[511] = -0.021666782f;
      sa[512] = 0.046231356f;
      sa[513] = -0.12238058f;
      sa[514] = 0.25656816f;
      sa[515] = -0.2695755f;
      sa[516] = 0.0118098175f;
      sa[517] = 0.09224502f;
      sa[518] = 0.13300744f;
      sa[519] = -0.12652583f;
      sa[520] = 0.24097791f;
      sa[521] = 0.13679056f;
      sa[522] = 0.11897184f;
      sa[523] = 0.24054873f;
      sa[524] = 0.19044015f;
      sa[525] = 0.16120209f;
      sa[526] = -0.02113091f;
      sa[527] = -0.12823464f;
      sa[528] = 0.008257415f;
      sa[529] = 0.108671576f;
      sa[530] = -0.17592911f;
      sa[531] = 0.063009895f;
      sa[532] = 0.14193366f;
      sa[533] = 0.11636532f;
      sa[534] = 0.13216738f;
      sa[535] = -0.119140014f;
      sa[536] = 0.10148342f;
      sa[537] = -0.16797826f;
      sa[538] = 0.18890376f;
      sa[539] = 0.28949475f;
      sa[540] = -0.27672383f;
      sa[541] = -0.18512842f;
      sa[542] = -0.04082303f;
      sa[543] = -0.2751607f;
      sa[544] = 0.17066447f;
      sa[545] = 0.12091388f;
      sa[546] = 0.0909651f;
      sa[547] = 0.21131082f;
      sa[548] = 0.068036705f;
      sa[549] = 0.17336641f;
      sa[550] = 0.01021876f;
      sa[551] = -0.11075792f;
      sa[552] = 0.046899315f;
      sa[553] = -0.061190277f;
      sa[554] = -0.16988023f;
      sa[555] = -0.18021451f;
      sa[556] = -0.24907987f;
      sa[557] = -0.2828157f;
      sa[558] = -0.23255588f;
      sa[559] = 0.13671297f;
      sa[560] = -0.33057606f;
      sa[561] = -0.09068472f;
      sa[562] = 0.22185501f;
      sa[563] = -0.111450106f;
      sa[564] = 0.2932603f;
      sa[565] = 0.04834535f;
      sa[566] = 0.28469974f;
      sa[567] = 0.03921528f;
      sa[568] = -0.08353581f;
      sa[569] = 0.02990429f;
      sa[570] = -0.020986538f;
      sa[571] = -0.074185856f;
      sa[572] = -0.10764841f;
      sa[573] = 0.11121523f;
      sa[574] = 0.33803427f;
      sa[575] = -0.23746426f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_01_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_01_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.3282633f;
      sa[1] = -0.028754085f;
      sa[2] = -0.11141592f;
      sa[3] = -0.19558716f;
      sa[4] = 0.072589174f;
      sa[5] = 0.06511745f;
      sa[6] = 0.3764959f;
      sa[7] = -0.20049381f;
      sa[8] = -0.28286487f;
      sa[9] = 0.20662768f;
      sa[10] = -0.041607503f;
      sa[11] = 0.09310472f;
      sa[12] = 0.021021007f;
      sa[13] = -0.003450729f;
      sa[14] = -0.37781432f;
      sa[15] = 0.2567085f;
      sa[16] = 0.41581136f;
      sa[17] = -0.12876503f;
      sa[18] = 0.03378255f;
      sa[19] = -0.048543822f;
      sa[20] = 0.28743535f;
      sa[21] = -0.014635203f;
      sa[22] = -0.21762502f;
      sa[23] = 0.22154322f;
      sa[24] = -0.38510382f;
      sa[25] = 0.15381911f;
      sa[26] = -0.044103984f;
      sa[27] = 0.38678104f;
      sa[28] = -0.4277458f;
      sa[29] = -0.15710533f;
      sa[30] = 0.070262946f;
      sa[31] = -0.22497495f;
      sa[32] = -0.31306937f;
      sa[33] = -0.3996699f;
      sa[34] = 0.04420209f;
      sa[35] = 0.40914744f;
      sa[36] = -0.11571456f;
      sa[37] = -0.004675003f;
      sa[38] = 0.08069179f;
      sa[39] = 0.23796906f;
      sa[40] = -0.21032083f;
      sa[41] = -0.35129085f;
      sa[42] = -0.22485662f;
      sa[43] = -0.39456153f;
      sa[44] = -0.05244296f;
      sa[45] = -0.38029718f;
      sa[46] = 0.30851895f;
      sa[47] = 0.3338545f;
      sa[48] = -0.3616133f;
      sa[49] = -0.2659232f;
      sa[50] = 0.090860955f;
      sa[51] = -0.07472805f;
      sa[52] = 0.210401f;
      sa[53] = 0.29835486f;
      sa[54] = -0.05312381f;
      sa[55] = 0.3482405f;
      sa[56] = -0.23572987f;
      sa[57] = -0.37899363f;
      sa[58] = 0.13070975f;
      sa[59] = 0.0042225863f;
      sa[60] = 0.28871745f;
      sa[61] = -0.181672f;
      sa[62] = -0.063674256f;
      sa[63] = 0.19675435f;
      sa[64] = 0.37227485f;
      sa[65] = -0.18277203f;
      sa[66] = 0.13951664f;
      sa[67] = 0.41470948f;
      sa[68] = 0.19098909f;
      sa[69] = -0.26177922f;
      sa[70] = -0.37490162f;
      sa[71] = -0.09102858f;
      sa[72] = -0.308318f;
      sa[73] = 0.3178949f;
      sa[74] = 0.40318754f;
      sa[75] = 7.526555E-6f;
      sa[76] = 0.18791588f;
      sa[77] = 0.09764587f;
      sa[78] = -0.3502017f;
      sa[79] = 0.28481427f;
      sa[80] = -0.19242723f;
      sa[81] = 0.07974101f;
      sa[82] = 0.23216772f;
      sa[83] = -0.17398813f;
      sa[84] = -0.42213914f;
      sa[85] = -0.336005f;
      sa[86] = 0.03562015f;
      sa[87] = 0.32810637f;
      sa[88] = -0.43267807f;
      sa[89] = -0.15570933f;
      sa[90] = -0.30955002f;
      sa[91] = 0.4104255f;
      sa[92] = -0.044383097f;
      sa[93] = 0.11221463f;
      sa[94] = -0.39130768f;
      sa[95] = -0.051360805f;
      sa[96] = -0.3102927f;
      sa[97] = 0.0425247f;
      sa[98] = 0.0793771f;
      sa[99] = 0.1348771f;
      sa[100] = -0.33779395f;
      sa[101] = -0.08401101f;
      sa[102] = 0.43526834f;
      sa[103] = 0.022038218f;
      sa[104] = -0.051518947f;
      sa[105] = -0.12546268f;
      sa[106] = 0.48279792f;
      sa[107] = 0.29611772f;
      sa[108] = 0.11390649f;
      sa[109] = 0.0022795177f;
      sa[110] = 0.14225948f;
      sa[111] = -0.23626693f;
      sa[112] = -0.29259378f;
      sa[113] = 0.055199686f;
      sa[114] = 0.036323033f;
      sa[115] = -0.1137516f;
      sa[116] = 0.33825824f;
      sa[117] = 0.07172816f;
      sa[118] = -0.37371027f;
      sa[119] = -0.1918017f;
      sa[120] = -0.053249452f;
      sa[121] = 0.23651575f;
      sa[122] = 0.009256659f;
      sa[123] = 0.122175485f;
      sa[124] = -0.24449234f;
      sa[125] = 0.21307112f;
      sa[126] = -0.20835201f;
      sa[127] = 0.15471517f;
      sa[128] = -0.20423585f;
      sa[129] = 0.21178092f;
      sa[130] = -0.1351975f;
      sa[131] = 0.1542289f;
      sa[132] = 0.05343007f;
      sa[133] = 0.197526f;
      sa[134] = 0.09259001f;
      sa[135] = -0.24411377f;
      sa[136] = 0.19381191f;
      sa[137] = -0.24123758f;
      sa[138] = -0.0128506785f;
      sa[139] = 0.37274006f;
      sa[140] = -0.121885836f;
      sa[141] = 0.014028608f;
      sa[142] = 0.17844082f;
      sa[143] = -0.12768215f;
      sa[144] = 0.30643967f;
      sa[145] = -0.19632691f;
      sa[146] = 0.02421469f;
      sa[147] = -0.19389243f;
      sa[148] = -0.2458292f;
      sa[149] = 0.280422f;
      sa[150] = -0.40086514f;
      sa[151] = -0.43507951f;
      sa[152] = 0.39561918f;
      sa[153] = -0.19059287f;
      sa[154] = 0.29612833f;
      sa[155] = -0.43166494f;
      sa[156] = -0.2719566f;
      sa[157] = -0.19565381f;
      sa[158] = 0.002382898f;
      sa[159] = -0.09886872f;
      sa[160] = 0.39549968f;
      sa[161] = -0.27798307f;
      sa[162] = 0.39112797f;
      sa[163] = -0.24164493f;
      sa[164] = 0.16645673f;
      sa[165] = -0.104490645f;
      sa[166] = 0.307347f;
      sa[167] = -0.3374471f;
      sa[168] = 0.30932954f;
      sa[169] = -0.47910947f;
      sa[170] = 0.33258706f;
      sa[171] = 0.2710424f;
      sa[172] = 0.3812652f;
      sa[173] = 0.42396733f;
      sa[174] = 0.050835647f;
      sa[175] = 0.046720494f;
      sa[176] = -0.20815723f;
      sa[177] = 0.044918638f;
      sa[178] = -0.2870744f;
      sa[179] = -0.117398135f;
      sa[180] = -0.3572621f;
      sa[181] = -0.24539925f;
      sa[182] = 0.060240645f;
      sa[183] = -0.28921428f;
      sa[184] = 0.41122591f;
      sa[185] = 0.3092906f;
      sa[186] = -0.15307431f;
      sa[187] = -0.26216954f;
      sa[188] = -0.06404291f;
      sa[189] = -0.17482065f;
      sa[190] = -0.3786383f;
      sa[191] = -0.26237872f;
      sa[192] = -0.05369623f;
      sa[193] = 0.113182254f;
      sa[194] = -0.34114772f;
      sa[195] = -0.27218232f;
      sa[196] = 0.13914765f;
      sa[197] = -0.22804493f;
      sa[198] = -0.02432195f;
      sa[199] = 0.41488263f;
      sa[200] = -0.0047232118f;
      sa[201] = 0.23237087f;
      sa[202] = 0.14983185f;
      sa[203] = -0.37606966f;
      sa[204] = 0.18419792f;
      sa[205] = 0.37110707f;
      sa[206] = -0.10752964f;
      sa[207] = 0.18614653f;
      sa[208] = -0.20659706f;
      sa[209] = 0.18463816f;
      sa[210] = -0.09105808f;
      sa[211] = -0.24786863f;
      sa[212] = -0.3318816f;
      sa[213] = 0.044593886f;
      sa[214] = -0.31422785f;
      sa[215] = -0.07471565f;
      sa[216] = 0.1405083f;
      sa[217] = 0.341285f;
      sa[218] = 0.040839393f;
      sa[219] = 0.09812261f;
      sa[220] = 0.12322694f;
      sa[221] = -0.030634524f;
      sa[222] = -0.29644838f;
      sa[223] = -0.3493881f;
      sa[224] = 0.28948975f;
      sa[225] = 0.07284134f;
      sa[226] = -0.0114755975f;
      sa[227] = 0.07196606f;
      sa[228] = -0.10579831f;
      sa[229] = -0.23541114f;
      sa[230] = -0.26206434f;
      sa[231] = -0.15054396f;
      sa[232] = 0.40113005f;
      sa[233] = -0.17526737f;
      sa[234] = -0.18956496f;
      sa[235] = 0.029877447f;
      sa[236] = -0.29939458f;
      sa[237] = 0.45537907f;
      sa[238] = 0.15385467f;
      sa[239] = -0.105221756f;
      sa[240] = -0.10047645f;
      sa[241] = -0.40177444f;
      sa[242] = -0.25329596f;
      sa[243] = 0.35212916f;
      sa[244] = 0.157371f;
      sa[245] = 0.25598505f;
      sa[246] = 0.15762508f;
      sa[247] = -0.33589515f;
      sa[248] = -0.22524634f;
      sa[249] = 0.024032824f;
      sa[250] = 0.18888608f;
      sa[251] = 0.40977213f;
      sa[252] = 0.2910639f;
      sa[253] = -0.31983227f;
      sa[254] = 0.40545666f;
      sa[255] = 0.19066446f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_01_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_Tanh_01_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.123089544f;
      sa[1] = -1.4491082f;
      sa[2] = -1.5805168f;
      sa[3] = 1.3925406f;
      sa[4] = 0.4336113f;
      sa[5] = -0.26067254f;
      sa[6] = -1.7249537f;
      sa[7] = 1.5411371f;
      sa[8] = 1.7965261f;
      sa[9] = 0.2669845f;
      sa[10] = 1.660236f;
      sa[11] = 1.4004242f;
      sa[12] = 1.9418615f;
      sa[13] = -0.55174065f;
      sa[14] = -1.8080686f;
      sa[15] = -0.6660609f;
      sa[16] = 0.75082463f;
      sa[17] = -0.75335264f;
      sa[18] = -1.5303017f;
      sa[19] = -0.88084215f;
      sa[20] = -1.8985848f;
      sa[21] = 0.34815753f;
      sa[22] = -2.0947354f;
      sa[23] = -0.5738794f;
      sa[24] = -0.6279768f;
      sa[25] = 1.8341225f;
      sa[26] = -0.33502424f;
      sa[27] = 1.1817882f;
      sa[28] = 1.2449131f;
      sa[29] = -0.7033449f;
      sa[30] = 0.26308858f;
      sa[31] = 0.035937507f;
      sa[32] = 0.48455134f;
      sa[33] = 0.2781005f;
      sa[34] = -0.59987724f;
      sa[35] = 1.0587558f;
      sa[36] = 0.5783644f;
      sa[37] = -1.3087553f;
      sa[38] = 0.6085102f;
      sa[39] = -0.21328092f;
      sa[40] = 0.21668829f;
      sa[41] = -0.7410272f;
      sa[42] = 0.5095414f;
      sa[43] = -0.047501683f;
      sa[44] = 1.0359457f;
      sa[45] = -2.0034485f;
      sa[46] = -2.1443965f;
      sa[47] = 0.035504024f;
      sa[48] = 1.6492869f;
      sa[49] = -0.2593072f;
      sa[50] = -0.4952277f;
      sa[51] = 1.7760942f;
      sa[52] = -1.7107908f;
      sa[53] = 0.9348221f;
      sa[54] = 1.842555f;
      sa[55] = 1.0858403f;
      sa[56] = -0.5228883f;
      sa[57] = -0.046848632f;
      sa[58] = 1.0577418f;
      sa[59] = 0.8921732f;
      sa[60] = -1.4183592f;
      sa[61] = 0.8705265f;
      sa[62] = -0.446864f;
      sa[63] = -0.82138515f;
      sa[64] = 1.0551829f;
      sa[65] = -1.0257125f;
      sa[66] = -1.8173765f;
      sa[67] = -0.16619731f;
      sa[68] = 0.8500278f;
      sa[69] = -1.3300922f;
      sa[70] = -1.5532349f;
      sa[71] = -0.054069705f;
      sa[72] = -0.96882266f;
      sa[73] = -1.2844971f;
      sa[74] = -1.070802f;
      sa[75] = 1.3171194f;
      sa[76] = 1.8408827f;
      sa[77] = -0.67147374f;
      sa[78] = -1.6786522f;
      sa[79] = -0.36974993f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_01 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_01_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_01_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_01_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_Tanh_01_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


