/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:49:26.122+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_12

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_12 > h2o_nn_16x16x6_Tanh_12.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_12.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_12", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_12 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_12_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_12_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_12_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_12_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_12_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_12_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_12_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_12_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_12_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_12_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_12_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_12_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_12.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_12_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.2864864864864865,0.13513513513513514,0.14594594594594595,0.2864864864864865,0.14594594594594595};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_12() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(9204901075823785088L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_12_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_12_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_12_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_12_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_12_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_12_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_12_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_12_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_12_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_12_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_12_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.029308073964397406;
      sa[1] = 0.02395306475612142;
      sa[2] = 0.03198007979414332;
      sa[3] = 0.0033327151560149032;
      sa[4] = 0.01857548266446152;
      sa[5] = -0.014405184502373169;
      sa[6] = 0.04356558262364234;
      sa[7] = 0.014815052026010363;
      sa[8] = -0.031365238214748244;
      sa[9] = 0.013789266049640054;
      sa[10] = 0.01058426201082509;
      sa[11] = -0.011295327742299924;
      sa[12] = 0.03675391454807487;
      sa[13] = 0.025215963905994798;
      sa[14] = -0.039559219032587675;
      sa[15] = 0.021756328210837075;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_12_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_12_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.02918312312252777;
      sa[1] = -0.045436252331614906;
      sa[2] = -0.043804957570344145;
      sa[3] = 0.03543895033588794;
      sa[4] = 0.039099206594031065;
      sa[5] = -0.010718652200424592;
      sa[6] = -0.007627137216441863;
      sa[7] = 0.041181144663335466;
      sa[8] = 0.013198155615186943;
      sa[9] = -0.03489152078284753;
      sa[10] = 0.007719818354396604;
      sa[11] = 0.015325590539411288;
      sa[12] = 0.012109766367411883;
      sa[13] = 0.023818727924813352;
      sa[14] = -0.024217909294197298;
      sa[15] = -0.05388197188547017;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_12_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_12_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.024940234999392772;
      sa[1] = -0.04113137885345345;
      sa[2] = -0.06053037691061325;
      sa[3] = -0.01043877782305943;
      sa[4] = 0.01396918937356132;
    }
  }
}
class h2o_nn_16x16x6_Tanh_12_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_12_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_12_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.06734514f;
      sa[1] = 0.28449687f;
      sa[2] = 0.23231296f;
      sa[3] = 0.18025318f;
      sa[4] = -0.18427898f;
      sa[5] = -0.18156363f;
      sa[6] = -0.034329876f;
      sa[7] = 0.29607013f;
      sa[8] = 0.14974296f;
      sa[9] = -0.16666044f;
      sa[10] = -0.1474307f;
      sa[11] = -0.21267284f;
      sa[12] = 0.09655045f;
      sa[13] = -0.27092937f;
      sa[14] = -0.17377655f;
      sa[15] = 0.021997357f;
      sa[16] = 0.13520603f;
      sa[17] = 0.1859776f;
      sa[18] = -0.27653697f;
      sa[19] = 0.17949058f;
      sa[20] = 0.2594794f;
      sa[21] = -0.33264464f;
      sa[22] = 0.26495555f;
      sa[23] = -0.1820662f;
      sa[24] = 0.32351953f;
      sa[25] = 0.20933095f;
      sa[26] = -0.32477522f;
      sa[27] = 0.35069108f;
      sa[28] = 0.26476642f;
      sa[29] = -0.29486588f;
      sa[30] = -0.17254741f;
      sa[31] = 0.1897198f;
      sa[32] = 0.20588544f;
      sa[33] = -0.2924667f;
      sa[34] = 0.074740894f;
      sa[35] = -0.12728414f;
      sa[36] = 0.095142305f;
      sa[37] = 0.29928336f;
      sa[38] = -0.06858236f;
      sa[39] = 0.16329512f;
      sa[40] = 0.05547011f;
      sa[41] = -0.082894206f;
      sa[42] = -0.14721102f;
      sa[43] = 0.05620902f;
      sa[44] = 0.25940728f;
      sa[45] = -0.22895686f;
      sa[46] = 0.051431507f;
      sa[47] = -0.004438928f;
      sa[48] = 0.25510508f;
      sa[49] = 0.27647653f;
      sa[50] = 0.21834995f;
      sa[51] = -0.29243296f;
      sa[52] = -0.08208464f;
      sa[53] = 0.26926926f;
      sa[54] = 0.24477048f;
      sa[55] = 0.0023029721f;
      sa[56] = -0.1717528f;
      sa[57] = -0.29780278f;
      sa[58] = 0.30382746f;
      sa[59] = -0.1878543f;
      sa[60] = -0.2989491f;
      sa[61] = 0.21427336f;
      sa[62] = 0.14345644f;
      sa[63] = 0.019211171f;
      sa[64] = 0.15871774f;
      sa[65] = 0.14508912f;
      sa[66] = 0.02363056f;
      sa[67] = 0.1790558f;
      sa[68] = -0.094404586f;
      sa[69] = 0.188299f;
      sa[70] = -0.15101357f;
      sa[71] = 0.34243223f;
      sa[72] = -0.13870384f;
      sa[73] = 0.2034759f;
      sa[74] = -0.2616691f;
      sa[75] = 0.09556766f;
      sa[76] = -0.22029258f;
      sa[77] = -0.07512793f;
      sa[78] = -0.07174485f;
      sa[79] = 0.108747184f;
      sa[80] = -0.21757285f;
      sa[81] = -0.15500139f;
      sa[82] = -0.045694947f;
      sa[83] = 0.119391024f;
      sa[84] = -0.012330043f;
      sa[85] = -0.19098903f;
      sa[86] = 0.17320463f;
      sa[87] = 0.2356976f;
      sa[88] = 0.22371848f;
      sa[89] = 0.041964646f;
      sa[90] = -0.093574f;
      sa[91] = 0.15242963f;
      sa[92] = 0.12665285f;
      sa[93] = -0.21999964f;
      sa[94] = -0.18066119f;
      sa[95] = -0.27125278f;
      sa[96] = 0.11998339f;
      sa[97] = 0.029531863f;
      sa[98] = 0.25151107f;
      sa[99] = -0.1505144f;
      sa[100] = -0.052523963f;
      sa[101] = -0.2051395f;
      sa[102] = -0.28539485f;
      sa[103] = -0.108766936f;
      sa[104] = -0.005283847f;
      sa[105] = -0.17476226f;
      sa[106] = -0.21968906f;
      sa[107] = 0.15513074f;
      sa[108] = 0.19481525f;
      sa[109] = -0.22960368f;
      sa[110] = -0.17801209f;
      sa[111] = 0.16806674f;
      sa[112] = 0.13082011f;
      sa[113] = 0.046840873f;
      sa[114] = -0.16920376f;
      sa[115] = -0.07074887f;
      sa[116] = -0.24025829f;
      sa[117] = -0.022799943f;
      sa[118] = -0.2652195f;
      sa[119] = -0.18078373f;
      sa[120] = 0.23935993f;
      sa[121] = 0.26567033f;
      sa[122] = 0.33760643f;
      sa[123] = 0.28097633f;
      sa[124] = 0.3103771f;
      sa[125] = 0.30480498f;
      sa[126] = -0.31313148f;
      sa[127] = -0.18135057f;
      sa[128] = 0.077033795f;
      sa[129] = 0.16026372f;
      sa[130] = -0.13601907f;
      sa[131] = 0.31161785f;
      sa[132] = 0.20688023f;
      sa[133] = -0.31791824f;
      sa[134] = 0.095330656f;
      sa[135] = -0.29475513f;
      sa[136] = -0.28860593f;
      sa[137] = -0.023281204f;
      sa[138] = 0.14327832f;
      sa[139] = -0.1074384f;
      sa[140] = -0.08359648f;
      sa[141] = -0.17200357f;
      sa[142] = 0.1679663f;
      sa[143] = -0.35604945f;
      sa[144] = 0.310007f;
      sa[145] = -0.15087375f;
      sa[146] = -0.27079883f;
      sa[147] = 0.20122752f;
      sa[148] = 0.18456069f;
      sa[149] = 0.22042713f;
      sa[150] = 0.32282937f;
      sa[151] = -0.27742702f;
      sa[152] = 0.055594336f;
      sa[153] = 0.29151973f;
      sa[154] = 0.27024773f;
      sa[155] = -0.20073074f;
      sa[156] = 0.15286064f;
      sa[157] = -0.18541172f;
      sa[158] = 0.108140945f;
      sa[159] = 0.10127909f;
      sa[160] = 0.0945303f;
      sa[161] = 0.23304749f;
      sa[162] = -0.19765776f;
      sa[163] = -0.046527117f;
      sa[164] = 0.2595557f;
      sa[165] = -0.03883399f;
      sa[166] = -0.07600002f;
      sa[167] = -0.09545082f;
      sa[168] = 0.21310967f;
      sa[169] = 0.343085f;
      sa[170] = 0.02548996f;
      sa[171] = -0.05936502f;
      sa[172] = -0.05888542f;
      sa[173] = -0.15499815f;
      sa[174] = -0.008152979f;
      sa[175] = -0.26688612f;
      sa[176] = -0.024896316f;
      sa[177] = -0.04320515f;
      sa[178] = -0.08921303f;
      sa[179] = 0.04411726f;
      sa[180] = -0.048073787f;
      sa[181] = -0.2904042f;
      sa[182] = -0.15506262f;
      sa[183] = 0.093253374f;
      sa[184] = 0.30347538f;
      sa[185] = 0.18559156f;
      sa[186] = -0.33160982f;
      sa[187] = 0.073513456f;
      sa[188] = -0.011380776f;
      sa[189] = 0.24199364f;
      sa[190] = 0.034874845f;
      sa[191] = -0.02763182f;
      sa[192] = -0.14524297f;
      sa[193] = 0.2522486f;
      sa[194] = 0.08841292f;
      sa[195] = 0.2855394f;
      sa[196] = 0.3003322f;
      sa[197] = -0.03884165f;
      sa[198] = 0.10241128f;
      sa[199] = -0.07582751f;
      sa[200] = 0.011986998f;
      sa[201] = -0.31936046f;
      sa[202] = 0.13495873f;
      sa[203] = -0.04888076f;
      sa[204] = -0.21230987f;
      sa[205] = 0.2315895f;
      sa[206] = 0.23069727f;
      sa[207] = 0.15783702f;
      sa[208] = -0.29792657f;
      sa[209] = -0.100810476f;
      sa[210] = -0.31491998f;
      sa[211] = -0.29945529f;
      sa[212] = 0.25209954f;
      sa[213] = -0.2803403f;
      sa[214] = -0.08933036f;
      sa[215] = 0.059553966f;
      sa[216] = 0.106879786f;
      sa[217] = 0.20677924f;
      sa[218] = -0.21668757f;
      sa[219] = 0.27139056f;
      sa[220] = -0.2465446f;
      sa[221] = 0.055501528f;
      sa[222] = 0.24661253f;
      sa[223] = 0.055622425f;
      sa[224] = 0.1219598f;
      sa[225] = 0.29595336f;
      sa[226] = -0.25420365f;
      sa[227] = 0.3452586f;
      sa[228] = 0.14278059f;
      sa[229] = 0.113186605f;
      sa[230] = 0.29126218f;
      sa[231] = -0.2778231f;
      sa[232] = -0.27231285f;
      sa[233] = 0.07585781f;
      sa[234] = 0.164742f;
      sa[235] = -0.307884f;
      sa[236] = -0.036691066f;
      sa[237] = -0.24890637f;
      sa[238] = -0.2360519f;
      sa[239] = 0.1386217f;
      sa[240] = -0.0069262087f;
      sa[241] = -0.2546423f;
      sa[242] = -0.0877318f;
      sa[243] = -0.2932531f;
      sa[244] = -0.22207114f;
      sa[245] = -0.14399695f;
      sa[246] = -0.28104648f;
      sa[247] = -0.068776995f;
      sa[248] = 0.26129633f;
      sa[249] = 0.2609789f;
      sa[250] = -0.20214733f;
      sa[251] = -0.09820142f;
      sa[252] = -0.29162255f;
      sa[253] = -0.30035552f;
      sa[254] = -0.29800388f;
      sa[255] = 0.17946814f;
      sa[256] = -0.19423306f;
      sa[257] = 0.30052552f;
      sa[258] = -0.27466384f;
      sa[259] = -0.12271043f;
      sa[260] = -0.22278261f;
      sa[261] = -0.10922367f;
      sa[262] = -0.13911729f;
      sa[263] = 0.27727118f;
      sa[264] = -0.16863902f;
      sa[265] = 0.068679936f;
      sa[266] = -0.30382603f;
      sa[267] = -0.25435713f;
      sa[268] = 0.14085716f;
      sa[269] = -0.17967346f;
      sa[270] = -0.019091442f;
      sa[271] = 0.2204692f;
      sa[272] = -0.093814306f;
      sa[273] = -0.1256686f;
      sa[274] = 0.13562015f;
      sa[275] = 0.013900256f;
      sa[276] = 0.08941151f;
      sa[277] = -0.24936031f;
      sa[278] = -0.14086299f;
      sa[279] = 0.23782218f;
      sa[280] = -0.18147984f;
      sa[281] = 0.3151671f;
      sa[282] = -0.0989599f;
      sa[283] = -0.036845595f;
      sa[284] = -0.010838264f;
      sa[285] = -0.22790343f;
      sa[286] = 0.34144974f;
      sa[287] = 0.19622752f;
      sa[288] = -0.23542693f;
      sa[289] = -0.18314642f;
      sa[290] = -0.09209684f;
      sa[291] = 0.04259609f;
      sa[292] = 0.13747592f;
      sa[293] = -0.10777791f;
      sa[294] = 0.09284404f;
      sa[295] = 0.12863897f;
      sa[296] = 0.22256553f;
      sa[297] = 0.2158611f;
      sa[298] = -0.03677659f;
      sa[299] = -0.031946383f;
      sa[300] = -0.014122324f;
      sa[301] = -0.078901045f;
      sa[302] = 0.1804426f;
      sa[303] = 0.030136567f;
      sa[304] = -0.21960203f;
      sa[305] = -0.037601907f;
      sa[306] = 0.23188694f;
      sa[307] = -0.19826786f;
      sa[308] = 0.08175725f;
      sa[309] = 0.15260124f;
      sa[310] = 0.30855173f;
      sa[311] = 0.3130076f;
      sa[312] = -0.22429785f;
      sa[313] = -0.17625126f;
      sa[314] = -0.1640078f;
      sa[315] = -0.038056638f;
      sa[316] = -0.042389184f;
      sa[317] = -0.11118292f;
      sa[318] = 0.082386956f;
      sa[319] = 0.2924625f;
      sa[320] = -0.023246331f;
      sa[321] = 0.21722826f;
      sa[322] = 0.1665301f;
      sa[323] = -0.2606521f;
      sa[324] = -0.0075705727f;
      sa[325] = 0.31981215f;
      sa[326] = -0.24027637f;
      sa[327] = -0.012245383f;
      sa[328] = -0.053211465f;
      sa[329] = 0.27281794f;
      sa[330] = -0.19726849f;
      sa[331] = 0.01780679f;
      sa[332] = -0.30216935f;
      sa[333] = 0.15049952f;
      sa[334] = -0.050037004f;
      sa[335] = 0.23106536f;
      sa[336] = -0.16668174f;
      sa[337] = -0.16897285f;
      sa[338] = 0.29542294f;
      sa[339] = -0.21535124f;
      sa[340] = -0.3246425f;
      sa[341] = -0.26391652f;
      sa[342] = 0.1835943f;
      sa[343] = -0.09085586f;
      sa[344] = -0.17566471f;
      sa[345] = 0.23360804f;
      sa[346] = 0.22591804f;
      sa[347] = -0.15767957f;
      sa[348] = 0.33998942f;
      sa[349] = -0.2712241f;
      sa[350] = -0.25878924f;
      sa[351] = 0.16666292f;
      sa[352] = 0.23157102f;
      sa[353] = -0.017949669f;
      sa[354] = 0.110865794f;
      sa[355] = 0.15862994f;
      sa[356] = -0.14227374f;
      sa[357] = 0.26260138f;
      sa[358] = -0.3203509f;
      sa[359] = 0.03982269f;
      sa[360] = 0.110484585f;
      sa[361] = -0.040337887f;
      sa[362] = -0.18491495f;
      sa[363] = 0.23982812f;
      sa[364] = -0.1362056f;
      sa[365] = -0.22779118f;
      sa[366] = -0.001070748f;
      sa[367] = -0.33398739f;
      sa[368] = -0.18115881f;
      sa[369] = 0.28493398f;
      sa[370] = -0.22028103f;
      sa[371] = 0.13024741f;
      sa[372] = -0.0026842896f;
      sa[373] = 0.32825708f;
      sa[374] = -0.14067557f;
      sa[375] = -0.3238949f;
      sa[376] = -0.3315124f;
      sa[377] = -0.24290943f;
      sa[378] = 0.33287093f;
      sa[379] = 0.11104901f;
      sa[380] = -0.11567382f;
      sa[381] = -0.10057501f;
      sa[382] = -0.0402314f;
      sa[383] = -0.13776502f;
      sa[384] = -0.16786522f;
      sa[385] = 0.10905508f;
      sa[386] = -0.2564628f;
      sa[387] = -0.2506043f;
      sa[388] = 0.104852095f;
      sa[389] = 0.0025156524f;
      sa[390] = 0.005475799f;
      sa[391] = -0.11454063f;
      sa[392] = 0.310242f;
      sa[393] = 0.23754677f;
      sa[394] = -0.099399954f;
      sa[395] = 0.24758247f;
      sa[396] = 0.3349519f;
      sa[397] = -0.28471848f;
      sa[398] = 0.08934818f;
      sa[399] = 0.114535704f;
      sa[400] = 0.18756829f;
      sa[401] = 0.25765547f;
      sa[402] = -0.15271813f;
      sa[403] = 0.040204916f;
      sa[404] = 0.2891062f;
      sa[405] = -0.26203656f;
      sa[406] = -0.102473244f;
      sa[407] = 0.19938849f;
      sa[408] = -0.23738909f;
      sa[409] = -0.27821043f;
      sa[410] = -0.13050145f;
      sa[411] = 0.15349606f;
      sa[412] = -0.16593915f;
      sa[413] = 0.10747186f;
      sa[414] = 0.16946013f;
      sa[415] = 0.2951422f;
      sa[416] = -0.1892458f;
      sa[417] = 0.032693703f;
      sa[418] = 0.0021299024f;
      sa[419] = 0.28195342f;
      sa[420] = 0.17558745f;
      sa[421] = 0.2483773f;
      sa[422] = 0.24769264f;
      sa[423] = -0.08853873f;
      sa[424] = 0.10903992f;
      sa[425] = -0.087125964f;
      sa[426] = -0.32946792f;
      sa[427] = 0.18335484f;
      sa[428] = -0.05760594f;
      sa[429] = -0.16575488f;
      sa[430] = 0.216539f;
      sa[431] = 0.01629735f;
      sa[432] = -0.04259818f;
      sa[433] = 0.14672236f;
      sa[434] = 0.27697918f;
      sa[435] = 0.041578032f;
      sa[436] = -0.28214282f;
      sa[437] = -0.26762712f;
      sa[438] = 0.0027365184f;
      sa[439] = -0.013385076f;
      sa[440] = 0.34029f;
      sa[441] = -0.33024392f;
      sa[442] = 0.115183085f;
      sa[443] = 0.037381526f;
      sa[444] = -0.2323117f;
      sa[445] = 0.0754285f;
      sa[446] = 0.2493057f;
      sa[447] = 0.07633569f;
      sa[448] = 0.20051874f;
      sa[449] = 0.2729433f;
      sa[450] = -0.0924406f;
      sa[451] = 0.10691455f;
      sa[452] = 0.20669311f;
      sa[453] = -0.04539468f;
      sa[454] = -0.17126907f;
      sa[455] = -0.04717166f;
      sa[456] = -0.04466577f;
      sa[457] = 0.112095386f;
      sa[458] = -0.2209839f;
      sa[459] = 0.2951464f;
      sa[460] = 0.25475934f;
      sa[461] = 0.32168335f;
      sa[462] = 0.06854596f;
      sa[463] = 0.25143415f;
      sa[464] = -0.29510957f;
      sa[465] = 0.24004889f;
      sa[466] = -0.020315528f;
      sa[467] = 0.14413264f;
      sa[468] = 0.10841761f;
      sa[469] = 0.3185685f;
      sa[470] = 0.2198054f;
      sa[471] = 0.068382904f;
      sa[472] = 0.018893734f;
      sa[473] = -0.11283406f;
      sa[474] = -0.008651268f;
      sa[475] = 0.11931509f;
      sa[476] = 0.27390254f;
      sa[477] = -0.19962652f;
      sa[478] = 0.12125496f;
      sa[479] = -0.18412657f;
      sa[480] = -0.32024485f;
      sa[481] = -0.22451007f;
      sa[482] = -0.27416107f;
      sa[483] = 0.23251225f;
      sa[484] = 0.23632127f;
      sa[485] = 0.13518317f;
      sa[486] = 3.6772096E-4f;
      sa[487] = -0.20085327f;
      sa[488] = -0.20930883f;
      sa[489] = 0.09278243f;
      sa[490] = -0.0036241892f;
      sa[491] = -0.23587336f;
      sa[492] = 0.23677133f;
      sa[493] = 0.2876634f;
      sa[494] = -0.21321253f;
      sa[495] = 0.20329608f;
      sa[496] = 0.002174945f;
      sa[497] = 0.07682444f;
      sa[498] = 0.19102563f;
      sa[499] = 0.19245096f;
      sa[500] = -0.011000352f;
      sa[501] = 0.1457387f;
      sa[502] = 0.20644256f;
      sa[503] = 0.007627037f;
      sa[504] = -0.19139819f;
      sa[505] = -0.2288081f;
      sa[506] = 0.19329573f;
      sa[507] = -0.053703252f;
      sa[508] = 0.078022525f;
      sa[509] = 0.23111759f;
      sa[510] = 0.17101873f;
      sa[511] = -0.021310586f;
      sa[512] = 0.07865785f;
      sa[513] = -0.097426064f;
      sa[514] = 0.2834607f;
      sa[515] = -0.22072494f;
      sa[516] = 0.0049279593f;
      sa[517] = 0.094274856f;
      sa[518] = 0.14138587f;
      sa[519] = -0.12424051f;
      sa[520] = 0.24917756f;
      sa[521] = 0.16407931f;
      sa[522] = 0.07194809f;
      sa[523] = 0.24897504f;
      sa[524] = 0.18129395f;
      sa[525] = 0.15138923f;
      sa[526] = -0.026328973f;
      sa[527] = -0.15891567f;
      sa[528] = -0.024158848f;
      sa[529] = 0.13020045f;
      sa[530] = -0.2260198f;
      sa[531] = 0.03953708f;
      sa[532] = 0.12936871f;
      sa[533] = 0.103510454f;
      sa[534] = 0.12499573f;
      sa[535] = -0.14225276f;
      sa[536] = 0.06957663f;
      sa[537] = -0.22346298f;
      sa[538] = 0.2479867f;
      sa[539] = 0.32305694f;
      sa[540] = -0.25765735f;
      sa[541] = -0.16118781f;
      sa[542] = -0.049985316f;
      sa[543] = -0.34256485f;
      sa[544] = 0.156374f;
      sa[545] = 0.12512709f;
      sa[546] = 0.079101f;
      sa[547] = 0.20652302f;
      sa[548] = 0.09318867f;
      sa[549] = 0.17888896f;
      sa[550] = 0.034522697f;
      sa[551] = -0.1594319f;
      sa[552] = 0.049655646f;
      sa[553] = -0.046394944f;
      sa[554] = -0.16646625f;
      sa[555] = -0.15762027f;
      sa[556] = -0.17615123f;
      sa[557] = -0.24378493f;
      sa[558] = -0.2571715f;
      sa[559] = 0.19026208f;
      sa[560] = -0.33423772f;
      sa[561] = -0.10935184f;
      sa[562] = 0.20193084f;
      sa[563] = -0.07481182f;
      sa[564] = 0.33912215f;
      sa[565] = 0.0691168f;
      sa[566] = 0.27490202f;
      sa[567] = 0.065459974f;
      sa[568] = -0.0749544f;
      sa[569] = 0.033912014f;
      sa[570] = -0.009057928f;
      sa[571] = -0.058849275f;
      sa[572] = -0.17220178f;
      sa[573] = 0.06358986f;
      sa[574] = 0.30246976f;
      sa[575] = -0.23388678f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_12_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_12_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.3587548f;
      sa[1] = -0.027183432f;
      sa[2] = -0.16250311f;
      sa[3] = -0.24571933f;
      sa[4] = 0.0499891f;
      sa[5] = 0.06841157f;
      sa[6] = 0.20058833f;
      sa[7] = -0.07365457f;
      sa[8] = -0.24194498f;
      sa[9] = 0.1404616f;
      sa[10] = -0.09908962f;
      sa[11] = 0.119870104f;
      sa[12] = 0.07687891f;
      sa[13] = 0.041481208f;
      sa[14] = -0.20122516f;
      sa[15] = 0.340912f;
      sa[16] = 0.4486024f;
      sa[17] = -0.09015225f;
      sa[18] = 0.019969072f;
      sa[19] = -0.102593124f;
      sa[20] = 0.32549152f;
      sa[21] = -0.028247975f;
      sa[22] = -0.30923206f;
      sa[23] = 0.27744707f;
      sa[24] = -0.3693495f;
      sa[25] = 0.09426106f;
      sa[26] = -0.09220609f;
      sa[27] = 0.41197428f;
      sa[28] = -0.358006f;
      sa[29] = -0.11083352f;
      sa[30] = 0.1397225f;
      sa[31] = -0.18971398f;
      sa[32] = -0.3186528f;
      sa[33] = -0.37159878f;
      sa[34] = 0.019257244f;
      sa[35] = 0.3926295f;
      sa[36] = -0.09679168f;
      sa[37] = -0.050474588f;
      sa[38] = 0.021696242f;
      sa[39] = 0.35702488f;
      sa[40] = -0.19871387f;
      sa[41] = -0.3780506f;
      sa[42] = -0.27453136f;
      sa[43] = -0.35645255f;
      sa[44] = -0.011808435f;
      sa[45] = -0.37307882f;
      sa[46] = 0.343321f;
      sa[47] = 0.36102903f;
      sa[48] = -0.38398093f;
      sa[49] = -0.25567958f;
      sa[50] = 0.103486665f;
      sa[51] = -0.08258847f;
      sa[52] = 0.18521366f;
      sa[53] = 0.23657593f;
      sa[54] = -0.09019563f;
      sa[55] = 0.37225956f;
      sa[56] = -0.2613354f;
      sa[57] = -0.30038336f;
      sa[58] = 0.07258506f;
      sa[59] = -0.0054537696f;
      sa[60] = 0.325565f;
      sa[61] = -0.18607907f;
      sa[62] = -0.06517244f;
      sa[63] = 0.20523566f;
      sa[64] = 0.4124636f;
      sa[65] = -0.17348725f;
      sa[66] = 0.16381757f;
      sa[67] = 0.41382533f;
      sa[68] = 0.19650932f;
      sa[69] = -0.27153862f;
      sa[70] = -0.43210223f;
      sa[71] = -0.13787216f;
      sa[72] = -0.3597057f;
      sa[73] = 0.29480755f;
      sa[74] = 0.34088844f;
      sa[75] = 0.006892748f;
      sa[76] = 0.25665873f;
      sa[77] = 0.13828446f;
      sa[78] = -0.3064379f;
      sa[79] = 0.28996196f;
      sa[80] = -0.2526846f;
      sa[81] = 0.07896101f;
      sa[82] = 0.21370554f;
      sa[83] = -0.15596104f;
      sa[84] = -0.4532282f;
      sa[85] = -0.3442685f;
      sa[86] = 0.08768622f;
      sa[87] = 0.39478824f;
      sa[88] = -0.3756962f;
      sa[89] = -0.108319394f;
      sa[90] = -0.25000894f;
      sa[91] = 0.4014621f;
      sa[92] = -0.15118647f;
      sa[93] = 0.044139765f;
      sa[94] = -0.4442236f;
      sa[95] = -0.06266535f;
      sa[96] = -0.30299315f;
      sa[97] = 0.07455792f;
      sa[98] = -0.017860409f;
      sa[99] = 0.09570692f;
      sa[100] = -0.3454462f;
      sa[101] = -0.11828061f;
      sa[102] = 0.31057927f;
      sa[103] = 0.11320643f;
      sa[104] = -0.03749597f;
      sa[105] = -0.17250463f;
      sa[106] = 0.38559556f;
      sa[107] = 0.3445172f;
      sa[108] = 0.17999467f;
      sa[109] = 0.02208143f;
      sa[110] = 0.23787472f;
      sa[111] = -0.18269551f;
      sa[112] = -0.33196712f;
      sa[113] = 0.039117206f;
      sa[114] = 0.046839528f;
      sa[115] = -0.085616894f;
      sa[116] = 0.28759107f;
      sa[117] = 0.023741016f;
      sa[118] = -0.3612256f;
      sa[119] = -0.17178775f;
      sa[120] = -0.07380236f;
      sa[121] = 0.30633157f;
      sa[122] = 0.01074403f;
      sa[123] = 0.12215542f;
      sa[124] = -0.23263785f;
      sa[125] = 0.1835919f;
      sa[126] = -0.23849149f;
      sa[127] = 0.15515761f;
      sa[128] = -0.26123732f;
      sa[129] = 0.20185879f;
      sa[130] = -0.09255016f;
      sa[131] = 0.23839416f;
      sa[132] = 0.0869014f;
      sa[133] = 0.15450299f;
      sa[134] = 0.24140161f;
      sa[135] = -0.31187797f;
      sa[136] = 0.15068048f;
      sa[137] = -0.12733573f;
      sa[138] = 0.030298816f;
      sa[139] = 0.31923094f;
      sa[140] = -0.15394598f;
      sa[141] = -0.03246348f;
      sa[142] = 0.004410862f;
      sa[143] = -0.23633616f;
      sa[144] = 0.24106152f;
      sa[145] = -0.20803899f;
      sa[146] = 0.03304732f;
      sa[147] = -0.07239576f;
      sa[148] = -0.23050001f;
      sa[149] = 0.29764593f;
      sa[150] = -0.24449801f;
      sa[151] = -0.4514501f;
      sa[152] = 0.43502295f;
      sa[153] = -0.1253146f;
      sa[154] = 0.38203174f;
      sa[155] = -0.45186487f;
      sa[156] = -0.39252052f;
      sa[157] = -0.30777758f;
      sa[158] = -0.12682198f;
      sa[159] = -0.2258775f;
      sa[160] = 0.31147572f;
      sa[161] = -0.28336316f;
      sa[162] = 0.4213949f;
      sa[163] = -0.19901095f;
      sa[164] = 0.1544127f;
      sa[165] = -0.16251451f;
      sa[166] = 0.40391603f;
      sa[167] = -0.33977535f;
      sa[168] = 0.29046574f;
      sa[169] = -0.36608613f;
      sa[170] = 0.37061587f;
      sa[171] = 0.2549491f;
      sa[172] = 0.34077272f;
      sa[173] = 0.35399517f;
      sa[174] = -0.073454484f;
      sa[175] = -0.019091582f;
      sa[176] = -0.23578845f;
      sa[177] = 0.018954461f;
      sa[178] = -0.28617358f;
      sa[179] = -0.08366331f;
      sa[180] = -0.39032754f;
      sa[181] = -0.2296196f;
      sa[182] = 0.107094005f;
      sa[183] = -0.28663492f;
      sa[184] = 0.4111748f;
      sa[185] = 0.34584507f;
      sa[186] = -0.1200696f;
      sa[187] = -0.277979f;
      sa[188] = -0.15470548f;
      sa[189] = -0.21307687f;
      sa[190] = -0.4083283f;
      sa[191] = -0.26107833f;
      sa[192] = -0.03997295f;
      sa[193] = 0.09401343f;
      sa[194] = -0.28701907f;
      sa[195] = -0.2445073f;
      sa[196] = 0.16192046f;
      sa[197] = -0.20880623f;
      sa[198] = 0.057536412f;
      sa[199] = 0.32469547f;
      sa[200] = -0.042336732f;
      sa[201] = 0.25746134f;
      sa[202] = 0.15643364f;
      sa[203] = -0.41169128f;
      sa[204] = 0.147779f;
      sa[205] = 0.37166587f;
      sa[206] = -0.19051589f;
      sa[207] = 0.14193791f;
      sa[208] = -0.22963217f;
      sa[209] = 0.17624034f;
      sa[210] = -0.12294283f;
      sa[211] = -0.27058968f;
      sa[212] = -0.37240663f;
      sa[213] = 0.048680242f;
      sa[214] = -0.36973774f;
      sa[215] = 0.035024706f;
      sa[216] = 0.17505425f;
      sa[217] = 0.34779602f;
      sa[218] = 0.048600033f;
      sa[219] = 0.10917498f;
      sa[220] = 0.1074458f;
      sa[221] = -0.044871077f;
      sa[222] = -0.2311423f;
      sa[223] = -0.2628041f;
      sa[224] = 0.26816103f;
      sa[225] = 0.06788012f;
      sa[226] = -0.039525747f;
      sa[227] = 0.069114186f;
      sa[228] = -0.11245951f;
      sa[229] = -0.218305f;
      sa[230] = -0.23057622f;
      sa[231] = -0.11452417f;
      sa[232] = 0.44252002f;
      sa[233] = -0.17094912f;
      sa[234] = -0.14327452f;
      sa[235] = 0.017548272f;
      sa[236] = -0.36639318f;
      sa[237] = 0.43080685f;
      sa[238] = 0.14614242f;
      sa[239] = -0.09520506f;
      sa[240] = -0.07771213f;
      sa[241] = -0.39027244f;
      sa[242] = -0.23869807f;
      sa[243] = 0.36168933f;
      sa[244] = 0.21882406f;
      sa[245] = 0.29320848f;
      sa[246] = 0.2154972f;
      sa[247] = -0.39492917f;
      sa[248] = -0.2298952f;
      sa[249] = -0.0025497177f;
      sa[250] = 0.22336143f;
      sa[251] = 0.38083383f;
      sa[252] = 0.23970363f;
      sa[253] = -0.30807617f;
      sa[254] = 0.29812294f;
      sa[255] = 0.121793784f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_12_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_Tanh_12_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.1810919f;
      sa[1] = -1.5296768f;
      sa[2] = -1.5809354f;
      sa[3] = 1.3543727f;
      sa[4] = 0.43537146f;
      sa[5] = -0.19470672f;
      sa[6] = -1.6119182f;
      sa[7] = 1.5319881f;
      sa[8] = 1.8179939f;
      sa[9] = 0.2226326f;
      sa[10] = 1.6448206f;
      sa[11] = 1.4981787f;
      sa[12] = 1.9035707f;
      sa[13] = -0.5274106f;
      sa[14] = -1.9929166f;
      sa[15] = -0.66411066f;
      sa[16] = 0.77077454f;
      sa[17] = -0.78371435f;
      sa[18] = -1.5472895f;
      sa[19] = -0.8824311f;
      sa[20] = -1.9451758f;
      sa[21] = 0.31109422f;
      sa[22] = -1.9903411f;
      sa[23] = -0.6100699f;
      sa[24] = -0.56506705f;
      sa[25] = 1.857816f;
      sa[26] = -0.3245855f;
      sa[27] = 1.2007877f;
      sa[28] = 1.2412647f;
      sa[29] = -0.74367404f;
      sa[30] = 0.12956832f;
      sa[31] = 0.11519679f;
      sa[32] = 0.4979433f;
      sa[33] = 0.30311194f;
      sa[34] = -0.63610256f;
      sa[35] = 1.0418468f;
      sa[36] = 0.6183197f;
      sa[37] = -1.3201784f;
      sa[38] = 0.5795189f;
      sa[39] = -0.23543638f;
      sa[40] = 0.22129677f;
      sa[41] = -0.7603481f;
      sa[42] = 0.56806576f;
      sa[43] = -0.0711208f;
      sa[44] = 1.0291041f;
      sa[45] = -2.0275016f;
      sa[46] = -2.1203065f;
      sa[47] = 0.031931188f;
      sa[48] = 1.611538f;
      sa[49] = -0.22428086f;
      sa[50] = -0.46961346f;
      sa[51] = 1.8122412f;
      sa[52] = -1.7320583f;
      sa[53] = 0.95316523f;
      sa[54] = 1.8159671f;
      sa[55] = 1.0980505f;
      sa[56] = -0.55151737f;
      sa[57] = -0.053543415f;
      sa[58] = 1.0332103f;
      sa[59] = 0.8724473f;
      sa[60] = -1.3811513f;
      sa[61] = 0.9449999f;
      sa[62] = -0.35493103f;
      sa[63] = -0.8399004f;
      sa[64] = 0.9119785f;
      sa[65] = -0.9643264f;
      sa[66] = -1.7715684f;
      sa[67] = -0.13976276f;
      sa[68] = 0.8980511f;
      sa[69] = -1.3966165f;
      sa[70] = -1.7047013f;
      sa[71] = -0.04112227f;
      sa[72] = -1.0490541f;
      sa[73] = -1.2207648f;
      sa[74] = -1.0891892f;
      sa[75] = 1.243603f;
      sa[76] = 1.8633765f;
      sa[77] = -0.64830244f;
      sa[78] = -1.4063423f;
      sa[79] = -0.379731f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_12 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_12_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_12_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_12_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_Tanh_12_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


