/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:48:53.430+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_10

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_10 > h2o_nn_16x16x6_Tanh_10.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_10.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_10", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_10 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_10_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_10_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_10_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_10_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_10_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_10_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_10.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_10_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.24761904761904763,0.18571428571428572,0.06190476190476191,0.12857142857142856,0.24761904761904763,0.12857142857142856};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_10() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(5681348313136011976L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_10_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_10_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_10_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_10_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_10_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_10_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_10_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_10_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_10_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_10_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_10_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.05113391784546329;
      sa[1] = -0.027475561624174843;
      sa[2] = 0.22866426859219313;
      sa[3] = -0.44686493500869484;
      sa[4] = 0.062241555852150326;
      sa[5] = -0.13142601313410046;
      sa[6] = 0.02297370667612298;
      sa[7] = -0.10872450066547933;
      sa[8] = -0.13942639762891787;
      sa[9] = 0.054243737299359815;
      sa[10] = -0.3165748311093361;
      sa[11] = 0.1205900551532999;
      sa[12] = 0.23532587045127226;
      sa[13] = 0.058931584429163394;
      sa[14] = -0.16973208932490186;
      sa[15] = -0.21189652945045662;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_10_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_10_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.2880645219775722;
      sa[1] = -0.229536472612996;
      sa[2] = -0.09343164597835701;
      sa[3] = 0.20574481920592175;
      sa[4] = 0.15340745561465313;
      sa[5] = 0.02894537085873101;
      sa[6] = 0.1077588690338306;
      sa[7] = 0.09213673026738091;
      sa[8] = -0.04456359780034147;
      sa[9] = -0.13044049872436977;
      sa[10] = 0.14529300517134258;
      sa[11] = 0.4739579476285508;
      sa[12] = -0.011904962316667055;
      sa[13] = 0.14686037901040008;
      sa[14] = 0.046035946718093336;
      sa[15] = -0.33690353276627055;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_10_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_10_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.24373183388090605;
      sa[1] = -0.2795251558531926;
      sa[2] = -0.10472034509353897;
      sa[3] = -0.014192267722891288;
      sa[4] = 0.05453263150725321;
      sa[5] = -0.0033035495992613556;
    }
  }
}
class h2o_nn_16x16x6_Tanh_10_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_10_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_10_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.049392004f;
      sa[1] = 0.33221596f;
      sa[2] = 0.1591729f;
      sa[3] = -0.02658418f;
      sa[4] = -0.29998136f;
      sa[5] = -0.2656993f;
      sa[6] = -4.364555E-4f;
      sa[7] = 0.4211719f;
      sa[8] = 0.07335192f;
      sa[9] = -0.05422889f;
      sa[10] = -0.15741023f;
      sa[11] = -0.08916311f;
      sa[12] = -0.0031206757f;
      sa[13] = -0.35707363f;
      sa[14] = -0.16016534f;
      sa[15] = 0.37865394f;
      sa[16] = 0.15500726f;
      sa[17] = 0.29121426f;
      sa[18] = -0.008122704f;
      sa[19] = -0.50492764f;
      sa[20] = 0.12582111f;
      sa[21] = -0.48960954f;
      sa[22] = 0.24882053f;
      sa[23] = 0.16864279f;
      sa[24] = 0.17079943f;
      sa[25] = 0.21075024f;
      sa[26] = -0.1650629f;
      sa[27] = 0.41038796f;
      sa[28] = 0.050042123f;
      sa[29] = -0.42968276f;
      sa[30] = -0.40132365f;
      sa[31] = 0.2949882f;
      sa[32] = 0.07805372f;
      sa[33] = -0.2236843f;
      sa[34] = 0.011784445f;
      sa[35] = 0.0028432468f;
      sa[36] = 0.25802296f;
      sa[37] = 0.4575317f;
      sa[38] = -0.05598798f;
      sa[39] = 0.39063364f;
      sa[40] = 0.092371926f;
      sa[41] = 0.0046674726f;
      sa[42] = -0.100404985f;
      sa[43] = 0.15555213f;
      sa[44] = 0.3215805f;
      sa[45] = -0.45608896f;
      sa[46] = 0.19559853f;
      sa[47] = -0.25255027f;
      sa[48] = 0.21931915f;
      sa[49] = 0.32376477f;
      sa[50] = 0.28240845f;
      sa[51] = -0.12611261f;
      sa[52] = 0.16008358f;
      sa[53] = 0.1839949f;
      sa[54] = 0.088248655f;
      sa[55] = -0.094322644f;
      sa[56] = -0.22517636f;
      sa[57] = -0.2974221f;
      sa[58] = 0.20447443f;
      sa[59] = 0.058074757f;
      sa[60] = -0.30295548f;
      sa[61] = 0.30305073f;
      sa[62] = 0.15208413f;
      sa[63] = -0.42152977f;
      sa[64] = 0.17800756f;
      sa[65] = 0.22817223f;
      sa[66] = 0.03353252f;
      sa[67] = 0.33062324f;
      sa[68] = -0.14884402f;
      sa[69] = -0.47825542f;
      sa[70] = 0.06315502f;
      sa[71] = 0.37870288f;
      sa[72] = -0.2841689f;
      sa[73] = 0.2064843f;
      sa[74] = -0.20440422f;
      sa[75] = 0.21056734f;
      sa[76] = -0.20685507f;
      sa[77] = 0.017273096f;
      sa[78] = -0.052596673f;
      sa[79] = -0.0034725445f;
      sa[80] = -0.21216214f;
      sa[81] = -0.098187625f;
      sa[82] = -0.09815998f;
      sa[83] = -0.08451413f;
      sa[84] = 0.044907387f;
      sa[85] = -0.110615194f;
      sa[86] = 0.1690161f;
      sa[87] = 0.0059849005f;
      sa[88] = 0.216081f;
      sa[89] = 0.04011742f;
      sa[90] = -0.22051919f;
      sa[91] = 0.49149823f;
      sa[92] = 0.10313678f;
      sa[93] = -0.26235983f;
      sa[94] = -0.1679063f;
      sa[95] = -0.7252223f;
      sa[96] = 0.19755465f;
      sa[97] = -0.030347023f;
      sa[98] = 0.14036632f;
      sa[99] = 0.20006916f;
      sa[100] = -0.029456066f;
      sa[101] = -0.25502616f;
      sa[102] = -0.13676736f;
      sa[103] = -0.28385618f;
      sa[104] = 0.09147765f;
      sa[105] = -0.23447445f;
      sa[106] = -0.25369805f;
      sa[107] = 0.18593763f;
      sa[108] = 0.33428392f;
      sa[109] = -0.2653054f;
      sa[110] = -0.14568667f;
      sa[111] = -0.15443295f;
      sa[112] = 0.07550664f;
      sa[113] = 2.0585621E-4f;
      sa[114] = -0.14594583f;
      sa[115] = 0.21067101f;
      sa[116] = -0.27291328f;
      sa[117] = 0.17604478f;
      sa[118] = 0.10034156f;
      sa[119] = 0.48888242f;
      sa[120] = 0.07329632f;
      sa[121] = 0.20150286f;
      sa[122] = 0.30309194f;
      sa[123] = 0.42036802f;
      sa[124] = 0.05992346f;
      sa[125] = 0.42246917f;
      sa[126] = 0.13593654f;
      sa[127] = -0.5813195f;
      sa[128] = -0.15551126f;
      sa[129] = -0.0015820303f;
      sa[130] = -0.34728324f;
      sa[131] = 0.52794576f;
      sa[132] = 0.121896535f;
      sa[133] = 0.09340682f;
      sa[134] = 0.2270191f;
      sa[135] = -0.7078611f;
      sa[136] = -0.57821774f;
      sa[137] = -0.29163295f;
      sa[138] = -0.12026417f;
      sa[139] = -0.16084726f;
      sa[140] = -0.22275008f;
      sa[141] = 0.086179264f;
      sa[142] = -0.04087935f;
      sa[143] = -0.26364607f;
      sa[144] = 0.3995591f;
      sa[145] = -0.24486172f;
      sa[146] = -0.2573081f;
      sa[147] = 0.45619002f;
      sa[148] = 0.14122222f;
      sa[149] = 0.065752454f;
      sa[150] = 0.27797142f;
      sa[151] = -0.13224517f;
      sa[152] = 0.06802363f;
      sa[153] = 0.24467751f;
      sa[154] = 0.27665645f;
      sa[155] = -0.25248376f;
      sa[156] = 0.10403776f;
      sa[157] = -0.32138383f;
      sa[158] = 0.13811643f;
      sa[159] = 0.2784172f;
      sa[160] = -0.027438909f;
      sa[161] = 0.06469527f;
      sa[162] = 0.104795165f;
      sa[163] = -0.0627433f;
      sa[164] = 0.3267326f;
      sa[165] = 0.03802238f;
      sa[166] = 0.01721059f;
      sa[167] = 0.021367341f;
      sa[168] = 0.031602457f;
      sa[169] = 0.2566732f;
      sa[170] = 0.16389477f;
      sa[171] = -0.1569017f;
      sa[172] = -0.12597017f;
      sa[173] = -0.18866403f;
      sa[174] = -0.21964823f;
      sa[175] = -0.37295866f;
      sa[176] = -0.03399875f;
      sa[177] = -0.21977961f;
      sa[178] = 0.034122165f;
      sa[179] = 0.2706056f;
      sa[180] = 0.092335664f;
      sa[181] = -0.28773817f;
      sa[182] = -0.21297696f;
      sa[183] = -0.055659458f;
      sa[184] = 0.28017744f;
      sa[185] = 0.11384684f;
      sa[186] = -0.43844864f;
      sa[187] = -0.06956595f;
      sa[188] = 0.10173598f;
      sa[189] = 0.0917575f;
      sa[190] = -0.17878996f;
      sa[191] = -0.12259234f;
      sa[192] = -0.15732257f;
      sa[193] = 0.19329083f;
      sa[194] = 0.01565642f;
      sa[195] = 0.24731606f;
      sa[196] = 0.3282951f;
      sa[197] = -0.22264662f;
      sa[198] = 0.11577947f;
      sa[199] = -0.050942328f;
      sa[200] = 0.072209135f;
      sa[201] = -0.25450623f;
      sa[202] = 0.077868305f;
      sa[203] = -0.10462959f;
      sa[204] = -0.14706793f;
      sa[205] = 0.118832305f;
      sa[206] = 0.35751486f;
      sa[207] = 0.17635266f;
      sa[208] = -0.18721987f;
      sa[209] = 0.03300334f;
      sa[210] = -0.29695854f;
      sa[211] = -0.24067599f;
      sa[212] = 0.21369198f;
      sa[213] = -0.34506732f;
      sa[214] = -0.09314525f;
      sa[215] = 0.056917213f;
      sa[216] = 0.012093682f;
      sa[217] = 0.2663978f;
      sa[218] = 0.025023885f;
      sa[219] = 0.107829414f;
      sa[220] = -0.16581075f;
      sa[221] = 0.26285404f;
      sa[222] = 0.32035518f;
      sa[223] = 0.16578345f;
      sa[224] = 0.20495267f;
      sa[225] = 0.5104825f;
      sa[226] = -0.10620655f;
      sa[227] = 0.9467256f;
      sa[228] = 0.19099087f;
      sa[229] = 0.34150285f;
      sa[230] = 0.32705584f;
      sa[231] = -0.16421461f;
      sa[232] = -0.020103954f;
      sa[233] = 0.113822386f;
      sa[234] = -0.078822725f;
      sa[235] = -0.34041828f;
      sa[236] = -0.12218592f;
      sa[237] = -0.39011073f;
      sa[238] = -0.38100174f;
      sa[239] = -0.020481922f;
      sa[240] = 0.23317331f;
      sa[241] = -0.053221628f;
      sa[242] = -0.16934109f;
      sa[243] = -0.3661526f;
      sa[244] = -0.16427186f;
      sa[245] = -0.13043246f;
      sa[246] = -0.08958864f;
      sa[247] = 0.15000834f;
      sa[248] = -0.040501866f;
      sa[249] = 0.3391833f;
      sa[250] = -0.34712595f;
      sa[251] = -0.11244075f;
      sa[252] = -0.58265615f;
      sa[253] = -0.12355644f;
      sa[254] = -0.1345726f;
      sa[255] = 0.8889916f;
      sa[256] = -0.13670108f;
      sa[257] = 0.4589781f;
      sa[258] = -0.25400674f;
      sa[259] = -0.08631521f;
      sa[260] = -0.20661168f;
      sa[261] = -0.09367302f;
      sa[262] = -0.20159987f;
      sa[263] = 0.20374553f;
      sa[264] = -0.07737928f;
      sa[265] = 0.30119154f;
      sa[266] = -0.2741422f;
      sa[267] = -0.28582206f;
      sa[268] = 0.17039302f;
      sa[269] = -0.28308222f;
      sa[270] = 0.022917423f;
      sa[271] = 0.20088677f;
      sa[272] = -0.08846986f;
      sa[273] = -0.13972737f;
      sa[274] = 0.095269315f;
      sa[275] = -0.21989468f;
      sa[276] = 0.18316494f;
      sa[277] = -0.32611927f;
      sa[278] = -0.2615604f;
      sa[279] = -0.37334186f;
      sa[280] = -0.11981014f;
      sa[281] = 0.29912814f;
      sa[282] = 0.05195046f;
      sa[283] = -0.10149417f;
      sa[284] = 0.12584709f;
      sa[285] = -0.68554616f;
      sa[286] = 0.4651727f;
      sa[287] = 0.5401412f;
      sa[288] = -0.090436235f;
      sa[289] = -0.20417932f;
      sa[290] = -0.17216112f;
      sa[291] = -0.31290814f;
      sa[292] = 0.042594217f;
      sa[293] = -0.28786004f;
      sa[294] = -0.04915972f;
      sa[295] = -0.15131849f;
      sa[296] = 0.18471761f;
      sa[297] = 0.12209106f;
      sa[298] = -0.085743785f;
      sa[299] = -0.19370952f;
      sa[300] = -0.013860903f;
      sa[301] = -0.2650476f;
      sa[302] = 0.11736848f;
      sa[303] = 0.096742f;
      sa[304] = -0.109316505f;
      sa[305] = -0.007523595f;
      sa[306] = 0.15818828f;
      sa[307] = 0.009839901f;
      sa[308] = 0.15563685f;
      sa[309] = 0.18283811f;
      sa[310] = 0.32551295f;
      sa[311] = 0.45413572f;
      sa[312] = -0.19956762f;
      sa[313] = -0.35406134f;
      sa[314] = -0.1167318f;
      sa[315] = 0.35606167f;
      sa[316] = 0.022870354f;
      sa[317] = -0.032218583f;
      sa[318] = 0.013149111f;
      sa[319] = 0.3680184f;
      sa[320] = -0.18241644f;
      sa[321] = 0.4785945f;
      sa[322] = 0.2316105f;
      sa[323] = -0.39602432f;
      sa[324] = 0.026499182f;
      sa[325] = 0.3108197f;
      sa[326] = -0.2623607f;
      sa[327] = 0.29334688f;
      sa[328] = -0.08525146f;
      sa[329] = 0.2446886f;
      sa[330] = -0.14587493f;
      sa[331] = 0.18195206f;
      sa[332] = -0.3892291f;
      sa[333] = 0.15877807f;
      sa[334] = 0.09272254f;
      sa[335] = 0.23603691f;
      sa[336] = -0.2011582f;
      sa[337] = -0.21277843f;
      sa[338] = 0.3350366f;
      sa[339] = -0.060807325f;
      sa[340] = -0.39980328f;
      sa[341] = -0.33298194f;
      sa[342] = 0.45991048f;
      sa[343] = -0.23761317f;
      sa[344] = -0.198046f;
      sa[345] = 0.20557629f;
      sa[346] = 0.26930124f;
      sa[347] = -0.019759744f;
      sa[348] = 0.21942408f;
      sa[349] = -0.23297854f;
      sa[350] = -0.17458013f;
      sa[351] = 0.0038380572f;
      sa[352] = 0.086010344f;
      sa[353] = -0.14836332f;
      sa[354] = -0.014648073f;
      sa[355] = 0.1120521f;
      sa[356] = -0.22108227f;
      sa[357] = 0.14338678f;
      sa[358] = -0.19902252f;
      sa[359] = 0.16703077f;
      sa[360] = 0.25513572f;
      sa[361] = -0.19833194f;
      sa[362] = -0.3207756f;
      sa[363] = -0.23607178f;
      sa[364] = -0.23236394f;
      sa[365] = -0.5872348f;
      sa[366] = -0.4314997f;
      sa[367] = -0.5695764f;
      sa[368] = -0.11985206f;
      sa[369] = 0.14217392f;
      sa[370] = -0.24657184f;
      sa[371] = 0.15256742f;
      sa[372] = -0.23322093f;
      sa[373] = -0.19887704f;
      sa[374] = -0.41458806f;
      sa[375] = -0.578652f;
      sa[376] = -0.41068926f;
      sa[377] = -0.51692784f;
      sa[378] = 0.6132425f;
      sa[379] = 0.20325483f;
      sa[380] = -0.035795867f;
      sa[381] = 0.05776464f;
      sa[382] = -0.08268747f;
      sa[383] = -0.34993136f;
      sa[384] = -0.29674655f;
      sa[385] = 0.06385607f;
      sa[386] = -0.0813834f;
      sa[387] = -0.27642915f;
      sa[388] = 0.07486708f;
      sa[389] = 0.076423325f;
      sa[390] = -0.27393526f;
      sa[391] = -0.38128984f;
      sa[392] = 0.28716135f;
      sa[393] = 0.1474628f;
      sa[394] = -0.47480226f;
      sa[395] = 0.20759545f;
      sa[396] = 0.101331025f;
      sa[397] = -0.2773553f;
      sa[398] = 0.22906409f;
      sa[399] = 0.3935991f;
      sa[400] = 0.3140958f;
      sa[401] = 0.43025547f;
      sa[402] = -0.07361002f;
      sa[403] = 0.12507886f;
      sa[404] = 0.25573674f;
      sa[405] = -0.17432176f;
      sa[406] = 0.043062236f;
      sa[407] = 0.2461056f;
      sa[408] = -0.19263995f;
      sa[409] = -0.105706215f;
      sa[410] = -0.09833717f;
      sa[411] = 0.023551486f;
      sa[412] = -0.18229033f;
      sa[413] = 0.17353377f;
      sa[414] = -0.06482492f;
      sa[415] = 0.43699703f;
      sa[416] = -0.22219682f;
      sa[417] = 0.09373379f;
      sa[418] = 0.05170757f;
      sa[419] = 0.10380801f;
      sa[420] = 0.29835752f;
      sa[421] = 0.38562205f;
      sa[422] = 0.08571117f;
      sa[423] = -0.06744202f;
      sa[424] = 0.13313578f;
      sa[425] = -0.04153752f;
      sa[426] = -0.15087402f;
      sa[427] = 0.09804309f;
      sa[428] = 0.2059775f;
      sa[429] = -0.15767759f;
      sa[430] = 0.18812612f;
      sa[431] = -0.025740625f;
      sa[432] = -0.111221746f;
      sa[433] = -0.015149837f;
      sa[434] = 0.31877014f;
      sa[435] = 0.15790352f;
      sa[436] = -0.16306916f;
      sa[437] = -0.23097667f;
      sa[438] = 0.040813256f;
      sa[439] = 0.030907309f;
      sa[440] = 0.3316661f;
      sa[441] = -0.39371914f;
      sa[442] = 0.07732979f;
      sa[443] = 0.13901722f;
      sa[444] = -0.13195069f;
      sa[445] = 0.14783622f;
      sa[446] = 0.30221272f;
      sa[447] = -0.07638642f;
      sa[448] = 0.11549688f;
      sa[449] = 0.16828264f;
      sa[450] = -0.040425915f;
      sa[451] = 0.24336918f;
      sa[452] = 0.28225723f;
      sa[453] = 0.058855038f;
      sa[454] = -0.050199285f;
      sa[455] = -0.15892987f;
      sa[456] = -0.016397135f;
      sa[457] = 0.044753104f;
      sa[458] = -0.25745785f;
      sa[459] = 0.23024184f;
      sa[460] = 0.30433893f;
      sa[461] = 0.37931624f;
      sa[462] = 0.11513122f;
      sa[463] = 0.15728557f;
      sa[464] = -0.21042146f;
      sa[465] = 0.18833306f;
      sa[466] = -0.099096134f;
      sa[467] = 0.16265884f;
      sa[468] = 0.0033791254f;
      sa[469] = 0.28615415f;
      sa[470] = 0.36428037f;
      sa[471] = 0.2792449f;
      sa[472] = -0.033553217f;
      sa[473] = -0.0673401f;
      sa[474] = 0.14807266f;
      sa[475] = 0.35363966f;
      sa[476] = 0.12810959f;
      sa[477] = 0.032529034f;
      sa[478] = 0.3677791f;
      sa[479] = -0.077435896f;
      sa[480] = -0.33569187f;
      sa[481] = -0.23491193f;
      sa[482] = -0.17034258f;
      sa[483] = 0.31971046f;
      sa[484] = 0.18617553f;
      sa[485] = 0.37567052f;
      sa[486] = 0.010878154f;
      sa[487] = -0.29997224f;
      sa[488] = -0.29663485f;
      sa[489] = -0.03740005f;
      sa[490] = 0.10375413f;
      sa[491] = -0.12625101f;
      sa[492] = 0.15123616f;
      sa[493] = 0.42269653f;
      sa[494] = -0.3904169f;
      sa[495] = 0.2829575f;
      sa[496] = -0.2089185f;
      sa[497] = -0.16095275f;
      sa[498] = 0.061857827f;
      sa[499] = 0.058333613f;
      sa[500] = 0.015690902f;
      sa[501] = 0.18344714f;
      sa[502] = 0.41801485f;
      sa[503] = 0.078366876f;
      sa[504] = -0.18095544f;
      sa[505] = -0.12499758f;
      sa[506] = 0.13269253f;
      sa[507] = -0.44381618f;
      sa[508] = 0.026201082f;
      sa[509] = 0.25512186f;
      sa[510] = 0.02083686f;
      sa[511] = -0.35152066f;
      sa[512] = 0.15517622f;
      sa[513] = -0.09279536f;
      sa[514] = 0.23710313f;
      sa[515] = -0.05488388f;
      sa[516] = -0.03641243f;
      sa[517] = 0.16519758f;
      sa[518] = -0.052635472f;
      sa[519] = -0.26542982f;
      sa[520] = 0.32603025f;
      sa[521] = 0.24989964f;
      sa[522] = 0.009484028f;
      sa[523] = 0.18558104f;
      sa[524] = 0.057685476f;
      sa[525] = 0.026205655f;
      sa[526] = -0.18321082f;
      sa[527] = -0.34885255f;
      sa[528] = 0.075059526f;
      sa[529] = 0.19466528f;
      sa[530] = -0.1734755f;
      sa[531] = 0.22610524f;
      sa[532] = 0.16435991f;
      sa[533] = 0.09384053f;
      sa[534] = 0.25728503f;
      sa[535] = -0.040834434f;
      sa[536] = -0.07698665f;
      sa[537] = 0.11440709f;
      sa[538] = -0.0059123314f;
      sa[539] = 0.114735395f;
      sa[540] = -0.16661541f;
      sa[541] = -0.33084443f;
      sa[542] = -0.09399561f;
      sa[543] = -0.15023534f;
      sa[544] = 0.135648f;
      sa[545] = -0.07936475f;
      sa[546] = 0.038912132f;
      sa[547] = 0.32355243f;
      sa[548] = 0.03954775f;
      sa[549] = 0.12072477f;
      sa[550] = 0.06395918f;
      sa[551] = -0.3097086f;
      sa[552] = -0.06593928f;
      sa[553] = -0.20086837f;
      sa[554] = -0.18277031f;
      sa[555] = -0.20997074f;
      sa[556] = -0.48648846f;
      sa[557] = -0.45741493f;
      sa[558] = 0.016783847f;
      sa[559] = 0.30209276f;
      sa[560] = -0.3031609f;
      sa[561] = -0.010241144f;
      sa[562] = 0.26025772f;
      sa[563] = -0.06634265f;
      sa[564] = 0.24041827f;
      sa[565] = 0.04531062f;
      sa[566] = 0.3506353f;
      sa[567] = -0.071729854f;
      sa[568] = -0.2160289f;
      sa[569] = -0.019982329f;
      sa[570] = -0.30806324f;
      sa[571] = -0.2331093f;
      sa[572] = -0.035373103f;
      sa[573] = -0.04188617f;
      sa[574] = 0.4462309f;
      sa[575] = -0.17000207f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_10_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_10_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.3392879f;
      sa[1] = 0.0737823f;
      sa[2] = -0.15338165f;
      sa[3] = 0.19303344f;
      sa[4] = 0.19592312f;
      sa[5] = 0.012241653f;
      sa[6] = 0.45808762f;
      sa[7] = 0.2447668f;
      sa[8] = -0.5249272f;
      sa[9] = 0.266158f;
      sa[10] = -0.28859726f;
      sa[11] = 0.19097309f;
      sa[12] = 0.05806585f;
      sa[13] = 0.072222255f;
      sa[14] = -0.51594967f;
      sa[15] = 0.1548861f;
      sa[16] = 0.44085592f;
      sa[17] = 0.018108625f;
      sa[18] = 0.087227315f;
      sa[19] = -0.066457205f;
      sa[20] = 0.11406226f;
      sa[21] = -0.07644029f;
      sa[22] = -0.07118683f;
      sa[23] = 0.3846984f;
      sa[24] = -0.4977352f;
      sa[25] = 0.22422804f;
      sa[26] = -0.024142459f;
      sa[27] = 0.1260454f;
      sa[28] = -0.32980382f;
      sa[29] = -0.34341335f;
      sa[30] = 0.058940392f;
      sa[31] = -0.3095905f;
      sa[32] = -0.3528472f;
      sa[33] = -0.73824286f;
      sa[34] = 0.055068765f;
      sa[35] = 0.35426342f;
      sa[36] = -0.12734024f;
      sa[37] = -0.086210124f;
      sa[38] = 0.40334886f;
      sa[39] = 0.07710929f;
      sa[40] = -0.16592209f;
      sa[41] = 0.018805576f;
      sa[42] = -0.100105286f;
      sa[43] = -0.55396456f;
      sa[44] = -0.022713546f;
      sa[45] = -0.26102087f;
      sa[46] = 0.28897616f;
      sa[47] = 0.28483498f;
      sa[48] = -0.46726677f;
      sa[49] = -0.20690995f;
      sa[50] = 0.12444606f;
      sa[51] = -0.26412967f;
      sa[52] = 0.113570705f;
      sa[53] = 0.14438097f;
      sa[54] = -0.098845325f;
      sa[55] = 0.69889754f;
      sa[56] = -0.3844834f;
      sa[57] = -0.34590378f;
      sa[58] = 0.15620553f;
      sa[59] = 0.09548203f;
      sa[60] = 0.41049203f;
      sa[61] = -0.45036244f;
      sa[62] = -0.04112525f;
      sa[63] = 0.41691297f;
      sa[64] = 0.29560417f;
      sa[65] = -0.13077581f;
      sa[66] = 0.078431636f;
      sa[67] = 0.59378797f;
      sa[68] = 0.4604651f;
      sa[69] = -0.19774817f;
      sa[70] = -0.29381055f;
      sa[71] = -0.13576125f;
      sa[72] = -0.32141078f;
      sa[73] = 0.54497856f;
      sa[74] = 0.45181683f;
      sa[75] = 0.053238742f;
      sa[76] = 0.0806341f;
      sa[77] = 0.14123037f;
      sa[78] = -0.5932892f;
      sa[79] = 0.2802094f;
      sa[80] = -0.1188819f;
      sa[81] = -0.24614175f;
      sa[82] = 0.3807581f;
      sa[83] = -0.27748418f;
      sa[84] = -0.44825697f;
      sa[85] = -0.39327765f;
      sa[86] = 0.033512432f;
      sa[87] = 0.26652485f;
      sa[88] = -0.42684793f;
      sa[89] = -0.15237701f;
      sa[90] = -0.58494335f;
      sa[91] = 0.318573f;
      sa[92] = 0.082075745f;
      sa[93] = 0.3709775f;
      sa[94] = -0.20903021f;
      sa[95] = -0.1624183f;
      sa[96] = -0.3410667f;
      sa[97] = -0.041991927f;
      sa[98] = 0.016705845f;
      sa[99] = 0.14252962f;
      sa[100] = -0.43351963f;
      sa[101] = -0.17301595f;
      sa[102] = 0.58956194f;
      sa[103] = 0.23040009f;
      sa[104] = -0.28498897f;
      sa[105] = -0.05643456f;
      sa[106] = 0.39191186f;
      sa[107] = 0.33083606f;
      sa[108] = 0.21656948f;
      sa[109] = -0.034238268f;
      sa[110] = 0.18737578f;
      sa[111] = -0.21286534f;
      sa[112] = -0.24989185f;
      sa[113] = -0.10830949f;
      sa[114] = 0.18194455f;
      sa[115] = -0.3660003f;
      sa[116] = 0.4385453f;
      sa[117] = 0.12844725f;
      sa[118] = -0.53398496f;
      sa[119] = 0.05492568f;
      sa[120] = -0.16240825f;
      sa[121] = 0.13935152f;
      sa[122] = 0.08003645f;
      sa[123] = 0.30636403f;
      sa[124] = -0.23981568f;
      sa[125] = 0.32064182f;
      sa[126] = -0.08622595f;
      sa[127] = 0.38664818f;
      sa[128] = -0.2717873f;
      sa[129] = -0.030679565f;
      sa[130] = -0.11795575f;
      sa[131] = -0.19036518f;
      sa[132] = -0.07539592f;
      sa[133] = 0.13096635f;
      sa[134] = 0.13590428f;
      sa[135] = -0.48371044f;
      sa[136] = 0.26297235f;
      sa[137] = -0.23635386f;
      sa[138] = 0.1630948f;
      sa[139] = 0.3241035f;
      sa[140] = -0.05651571f;
      sa[141] = -0.13277835f;
      sa[142] = 0.22571857f;
      sa[143] = -0.10824199f;
      sa[144] = 0.34660372f;
      sa[145] = -0.353248f;
      sa[146] = 0.05394423f;
      sa[147] = -0.27119365f;
      sa[148] = -0.5649794f;
      sa[149] = 0.23716143f;
      sa[150] = -0.33671913f;
      sa[151] = -0.65468735f;
      sa[152] = 0.49631378f;
      sa[153] = -0.15727113f;
      sa[154] = 0.40300074f;
      sa[155] = -0.6049812f;
      sa[156] = -0.24220642f;
      sa[157] = -0.348542f;
      sa[158] = 0.15348221f;
      sa[159] = -0.24260955f;
      sa[160] = 0.38567802f;
      sa[161] = -0.45715863f;
      sa[162] = 0.4342131f;
      sa[163] = -0.54374707f;
      sa[164] = 0.029442988f;
      sa[165] = -0.14672762f;
      sa[166] = 0.26587906f;
      sa[167] = -0.4682918f;
      sa[168] = 0.36546087f;
      sa[169] = -0.4043373f;
      sa[170] = 0.4080005f;
      sa[171] = 0.23594262f;
      sa[172] = 0.63416296f;
      sa[173] = 0.36763665f;
      sa[174] = 0.22036031f;
      sa[175] = 0.04825679f;
      sa[176] = -0.6302254f;
      sa[177] = 0.05321875f;
      sa[178] = -0.48170376f;
      sa[179] = 0.10361782f;
      sa[180] = -0.5777261f;
      sa[181] = -0.5279762f;
      sa[182] = 0.038241815f;
      sa[183] = -0.18653944f;
      sa[184] = 0.60835415f;
      sa[185] = 0.3069301f;
      sa[186] = -0.1545643f;
      sa[187] = -0.15506427f;
      sa[188] = -0.107388005f;
      sa[189] = -0.6078106f;
      sa[190] = -0.4301402f;
      sa[191] = -0.213891f;
      sa[192] = -0.0693199f;
      sa[193] = 0.18744135f;
      sa[194] = -0.36165708f;
      sa[195] = -0.27922544f;
      sa[196] = 0.17195103f;
      sa[197] = -0.18563697f;
      sa[198] = -0.05223413f;
      sa[199] = 0.27586177f;
      sa[200] = 0.096345685f;
      sa[201] = 0.2592105f;
      sa[202] = 0.2512886f;
      sa[203] = -0.37371716f;
      sa[204] = 0.09123332f;
      sa[205] = 0.3359102f;
      sa[206] = -0.17946135f;
      sa[207] = 0.17296928f;
      sa[208] = -0.12464881f;
      sa[209] = 0.06624187f;
      sa[210] = -0.0076820324f;
      sa[211] = -0.20171563f;
      sa[212] = -0.106387876f;
      sa[213] = 0.07787546f;
      sa[214] = -0.45000947f;
      sa[215] = 0.2022547f;
      sa[216] = 0.020771246f;
      sa[217] = 0.24325426f;
      sa[218] = -0.4136778f;
      sa[219] = 0.2505043f;
      sa[220] = 0.11339005f;
      sa[221] = 0.394927f;
      sa[222] = -0.2093279f;
      sa[223] = -0.26420286f;
      sa[224] = 0.32406825f;
      sa[225] = -0.12224012f;
      sa[226] = 0.021393444f;
      sa[227] = 0.03330017f;
      sa[228] = -0.013956741f;
      sa[229] = -0.19473591f;
      sa[230] = -0.26683697f;
      sa[231] = -0.28673702f;
      sa[232] = 0.45486513f;
      sa[233] = -0.13380055f;
      sa[234] = -0.36765525f;
      sa[235] = -0.080084436f;
      sa[236] = -0.3184282f;
      sa[237] = 0.6519528f;
      sa[238] = 0.16642073f;
      sa[239] = -0.17508803f;
      sa[240] = 0.10896772f;
      sa[241] = -0.6723435f;
      sa[242] = -0.24728091f;
      sa[243] = 0.30965242f;
      sa[244] = 0.15766636f;
      sa[245] = 0.35022438f;
      sa[246] = 0.3386111f;
      sa[247] = -0.94462746f;
      sa[248] = -0.0899135f;
      sa[249] = 0.24849452f;
      sa[250] = 0.23769157f;
      sa[251] = 0.16619252f;
      sa[252] = 0.21439521f;
      sa[253] = 0.081341505f;
      sa[254] = 0.4253171f;
      sa[255] = -0.041069835f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_10_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_Tanh_10_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.113149546f;
      sa[1] = -1.4572917f;
      sa[2] = -1.5804623f;
      sa[3] = 1.4922558f;
      sa[4] = 0.39342895f;
      sa[5] = -0.23979306f;
      sa[6] = -1.7021025f;
      sa[7] = 1.7400341f;
      sa[8] = 1.7533885f;
      sa[9] = 0.5054138f;
      sa[10] = 1.7952873f;
      sa[11] = 1.3876026f;
      sa[12] = 1.9154332f;
      sa[13] = -0.55859774f;
      sa[14] = -1.7328142f;
      sa[15] = -0.7935397f;
      sa[16] = 0.5932227f;
      sa[17] = -0.7970553f;
      sa[18] = -1.5773637f;
      sa[19] = -1.0468984f;
      sa[20] = -2.022308f;
      sa[21] = 0.28016233f;
      sa[22] = -2.1627955f;
      sa[23] = -0.7110246f;
      sa[24] = -0.5558303f;
      sa[25] = 2.2351694f;
      sa[26] = -0.09152131f;
      sa[27] = 1.2311465f;
      sa[28] = 1.097181f;
      sa[29] = -0.6555371f;
      sa[30] = 0.35657597f;
      sa[31] = 0.07053144f;
      sa[32] = 0.6064455f;
      sa[33] = 0.15244383f;
      sa[34] = -0.56908137f;
      sa[35] = 0.72630703f;
      sa[36] = 0.5343846f;
      sa[37] = -1.4272032f;
      sa[38] = 0.89275694f;
      sa[39] = -0.32697722f;
      sa[40] = 0.33513325f;
      sa[41] = -0.44766408f;
      sa[42] = 0.6691488f;
      sa[43] = 0.019153465f;
      sa[44] = 1.1245146f;
      sa[45] = -2.1618073f;
      sa[46] = -2.3140495f;
      sa[47] = 0.30178508f;
      sa[48] = 1.6211133f;
      sa[49] = -0.07620151f;
      sa[50] = -0.3007785f;
      sa[51] = 1.9168366f;
      sa[52] = -1.7353542f;
      sa[53] = 1.1217597f;
      sa[54] = 1.7446957f;
      sa[55] = 0.97149885f;
      sa[56] = -0.64666915f;
      sa[57] = -0.3842662f;
      sa[58] = 0.919096f;
      sa[59] = 0.6021868f;
      sa[60] = -1.3250395f;
      sa[61] = 0.755753f;
      sa[62] = -0.41575253f;
      sa[63] = -0.9741462f;
      sa[64] = 0.97598433f;
      sa[65] = -0.77964544f;
      sa[66] = -1.7632178f;
      sa[67] = -0.08816411f;
      sa[68] = 1.1479551f;
      sa[69] = -1.222677f;
      sa[70] = -1.6385765f;
      sa[71] = 0.097448185f;
      sa[72] = -1.1115968f;
      sa[73] = -1.6201228f;
      sa[74] = -1.4946234f;
      sa[75] = 1.2722832f;
      sa[76] = 1.815294f;
      sa[77] = -0.56650424f;
      sa[78] = -1.5292698f;
      sa[79] = -0.74150604f;
      sa[80] = 0.80181926f;
      sa[81] = -1.5966535f;
      sa[82] = -0.21144587f;
      sa[83] = -1.4266108f;
      sa[84] = 1.629338f;
      sa[85] = 1.0403792f;
      sa[86] = -1.8973849f;
      sa[87] = 1.1933748f;
      sa[88] = -1.5197735f;
      sa[89] = -0.88527954f;
      sa[90] = 0.46761417f;
      sa[91] = 0.13660099f;
      sa[92] = 1.4270197f;
      sa[93] = 1.8173666f;
      sa[94] = 1.7260748f;
      sa[95] = 0.8222158f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_10 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_10_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_10_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_10_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_Tanh_10_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


