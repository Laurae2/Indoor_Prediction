/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:48:01.148+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_07

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_07 > h2o_nn_16x16x6_ReLU_07.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_07.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_07", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_07 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_07_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_07_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_07_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_07_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_07_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_07_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_07_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_07_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_07_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_07_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_07_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_07_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_07.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_07_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25,0.25,0.125,0.25,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_07() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-1937423944870918720L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_07_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_07_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_07_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_07_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_07_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_07_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_07_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_07_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_07_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_07_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_07_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_07_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_07_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_07_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_07_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_07_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.607810937310741;
      sa[1] = 0.5783304453617402;
      sa[2] = 0.4347344700868149;
      sa[3] = 0.5080148841395277;
      sa[4] = 0.4245492546453556;
      sa[5] = 0.6405801045925852;
      sa[6] = 0.5027825202364281;
      sa[7] = 0.5001776283690647;
      sa[8] = 0.5526774973534948;
      sa[9] = 0.6349513993701191;
      sa[10] = 0.465054676110861;
      sa[11] = 0.3897130835578344;
      sa[12] = 0.33994909639077553;
      sa[13] = 0.4510998688207232;
      sa[14] = 0.5574265447551341;
      sa[15] = 0.5446139599536365;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_07_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_07_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_07_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.036500326979706;
      sa[1] = 1.0084271489067744;
      sa[2] = 0.9802768456597764;
      sa[3] = 0.9143450211517535;
      sa[4] = 0.9829619100010746;
      sa[5] = 0.97810893508397;
      sa[6] = 0.957101448909702;
      sa[7] = 0.9319965634985258;
      sa[8] = 0.8611879076663906;
      sa[9] = 1.0175883808314894;
      sa[10] = 0.8754771104800654;
      sa[11] = 0.979074092166582;
      sa[12] = 1.016838452832404;
      sa[13] = 0.9988259412616858;
      sa[14] = 1.0628310454551329;
      sa[15] = 1.0389713037001707;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_07_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_07_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_07_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.05334608237948403;
      sa[1] = 0.015379124848355472;
      sa[2] = -0.010287483157569093;
      sa[3] = -0.010976464815177793;
      sa[4] = 0.0344059605949202;
    }
  }
}
class h2o_nn_16x16x6_ReLU_07_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_07_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_07_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_07_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.1006821f;
      sa[1] = 0.3444108f;
      sa[2] = 0.18570428f;
      sa[3] = 0.07935502f;
      sa[4] = -0.17307839f;
      sa[5] = -0.18497361f;
      sa[6] = -0.033664163f;
      sa[7] = 0.25041866f;
      sa[8] = 0.1787618f;
      sa[9] = -0.1654705f;
      sa[10] = -0.17701972f;
      sa[11] = -0.21633784f;
      sa[12] = 0.12542844f;
      sa[13] = -0.27019414f;
      sa[14] = -0.17042516f;
      sa[15] = 0.012315987f;
      sa[16] = 0.2057388f;
      sa[17] = 0.18674095f;
      sa[18] = -0.24088442f;
      sa[19] = 0.19440547f;
      sa[20] = 0.31184056f;
      sa[21] = -0.28163832f;
      sa[22] = 0.29442617f;
      sa[23] = -0.14513977f;
      sa[24] = 0.30994123f;
      sa[25] = 0.16922837f;
      sa[26] = -0.29738212f;
      sa[27] = 0.35088992f;
      sa[28] = 0.31291428f;
      sa[29] = -0.25737888f;
      sa[30] = -0.15736526f;
      sa[31] = 0.21562272f;
      sa[32] = 0.12529244f;
      sa[33] = -0.29593027f;
      sa[34] = 0.08264874f;
      sa[35] = -0.06728335f;
      sa[36] = 0.13522193f;
      sa[37] = 0.32643652f;
      sa[38] = -0.04328478f;
      sa[39] = 0.15681656f;
      sa[40] = 0.028350594f;
      sa[41] = -0.08526676f;
      sa[42] = -0.14102566f;
      sa[43] = 0.05282225f;
      sa[44] = 0.30785513f;
      sa[45] = -0.22514059f;
      sa[46] = 0.06700622f;
      sa[47] = 0.082056284f;
      sa[48] = 0.2893961f;
      sa[49] = 0.29596865f;
      sa[50] = 0.260651f;
      sa[51] = -0.26162973f;
      sa[52] = -0.044243097f;
      sa[53] = 0.29842842f;
      sa[54] = 0.2140212f;
      sa[55] = 0.005143143f;
      sa[56] = -0.123195596f;
      sa[57] = -0.27770752f;
      sa[58] = 0.33966258f;
      sa[59] = -0.10675363f;
      sa[60] = -0.29338044f;
      sa[61] = 0.20750414f;
      sa[62] = 0.117909536f;
      sa[63] = -0.05082795f;
      sa[64] = 0.18447322f;
      sa[65] = 0.1483401f;
      sa[66] = 0.024390295f;
      sa[67] = 0.18313405f;
      sa[68] = -0.19287653f;
      sa[69] = 0.16637991f;
      sa[70] = -0.16109471f;
      sa[71] = 0.30970967f;
      sa[72] = -0.16521437f;
      sa[73] = 0.2082544f;
      sa[74] = -0.24932428f;
      sa[75] = 0.13148715f;
      sa[76] = -0.21885294f;
      sa[77] = -0.07351399f;
      sa[78] = -0.08070102f;
      sa[79] = 0.14548358f;
      sa[80] = -0.24095932f;
      sa[81] = -0.1525471f;
      sa[82] = -0.03181203f;
      sa[83] = 0.09186932f;
      sa[84] = -0.044061728f;
      sa[85] = -0.20231774f;
      sa[86] = 0.14766818f;
      sa[87] = 0.24825495f;
      sa[88] = 0.22801228f;
      sa[89] = 0.03405459f;
      sa[90] = -0.12193907f;
      sa[91] = 0.14100963f;
      sa[92] = 0.08348782f;
      sa[93] = -0.24573699f;
      sa[94] = -0.21568786f;
      sa[95] = -0.30090237f;
      sa[96] = 0.122697115f;
      sa[97] = 0.04618388f;
      sa[98] = 0.23884903f;
      sa[99] = -0.1094292f;
      sa[100] = -0.07331967f;
      sa[101] = -0.20706156f;
      sa[102] = -0.28361192f;
      sa[103] = -0.108548015f;
      sa[104] = 0.07436402f;
      sa[105] = -0.1657457f;
      sa[106] = -0.24868871f;
      sa[107] = 0.11759518f;
      sa[108] = 0.17447984f;
      sa[109] = -0.2556889f;
      sa[110] = -0.18883975f;
      sa[111] = 0.18519649f;
      sa[112] = 0.15000232f;
      sa[113] = 0.045582592f;
      sa[114] = -0.15600532f;
      sa[115] = -0.056273025f;
      sa[116] = -0.2717135f;
      sa[117] = -0.023056908f;
      sa[118] = -0.2883187f;
      sa[119] = -0.16658972f;
      sa[120] = 0.2351148f;
      sa[121] = 0.24896866f;
      sa[122] = 0.32950664f;
      sa[123] = 0.2657015f;
      sa[124] = 0.26437604f;
      sa[125] = 0.2945836f;
      sa[126] = -0.28169817f;
      sa[127] = -0.23998475f;
      sa[128] = 0.08192607f;
      sa[129] = 0.17976078f;
      sa[130] = -0.1186605f;
      sa[131] = 0.31801057f;
      sa[132] = 0.17997006f;
      sa[133] = -0.3296195f;
      sa[134] = 0.1085259f;
      sa[135] = -0.27219096f;
      sa[136] = -0.2961227f;
      sa[137] = -0.023107383f;
      sa[138] = 0.13308613f;
      sa[139] = -0.104493424f;
      sa[140] = -0.029396757f;
      sa[141] = -0.11770682f;
      sa[142] = 0.17588717f;
      sa[143] = -0.34181207f;
      sa[144] = 0.30881318f;
      sa[145] = -0.16854912f;
      sa[146] = -0.29329103f;
      sa[147] = 0.18839097f;
      sa[148] = 0.18065788f;
      sa[149] = 0.19004615f;
      sa[150] = 0.30100462f;
      sa[151] = -0.28715777f;
      sa[152] = 0.042406376f;
      sa[153] = 0.30035657f;
      sa[154] = 0.2687343f;
      sa[155] = -0.20172805f;
      sa[156] = 0.12320314f;
      sa[157] = -0.22763759f;
      sa[158] = 0.06940992f;
      sa[159] = 0.06432505f;
      sa[160] = 0.0175361f;
      sa[161] = 0.20938453f;
      sa[162] = -0.17936268f;
      sa[163] = -0.05587053f;
      sa[164] = 0.24221909f;
      sa[165] = -0.032946263f;
      sa[166] = -0.088215776f;
      sa[167] = -0.13443205f;
      sa[168] = 0.16431703f;
      sa[169] = 0.3392566f;
      sa[170] = 0.02329141f;
      sa[171] = 0.0021560024f;
      sa[172] = -0.07934147f;
      sa[173] = -0.165194f;
      sa[174] = -0.030237926f;
      sa[175] = -0.28756005f;
      sa[176] = -0.05062962f;
      sa[177] = -0.07000485f;
      sa[178] = 0.02155011f;
      sa[179] = 0.17248014f;
      sa[180] = -0.021792606f;
      sa[181] = -0.17684151f;
      sa[182] = -0.09892502f;
      sa[183] = -0.1587526f;
      sa[184] = 0.2896209f;
      sa[185] = 0.1623987f;
      sa[186] = -0.36359382f;
      sa[187] = 2.7844787E-4f;
      sa[188] = 0.0136022f;
      sa[189] = 0.21152297f;
      sa[190] = -0.056128178f;
      sa[191] = -0.13603093f;
      sa[192] = -0.10069934f;
      sa[193] = 0.25537828f;
      sa[194] = 0.078615226f;
      sa[195] = 0.32751408f;
      sa[196] = 0.43577832f;
      sa[197] = 0.021297792f;
      sa[198] = 0.12034805f;
      sa[199] = 0.03358149f;
      sa[200] = 0.0983171f;
      sa[201] = -0.28833753f;
      sa[202] = 0.13993947f;
      sa[203] = 0.08059351f;
      sa[204] = -0.09695071f;
      sa[205] = 0.12932663f;
      sa[206] = 0.24308534f;
      sa[207] = 0.26855162f;
      sa[208] = -0.23123036f;
      sa[209] = -0.062477294f;
      sa[210] = -0.30017617f;
      sa[211] = -0.20550685f;
      sa[212] = 0.07569395f;
      sa[213] = -0.31302747f;
      sa[214] = -0.12263185f;
      sa[215] = 0.16282661f;
      sa[216] = 0.046640456f;
      sa[217] = 0.19251911f;
      sa[218] = -0.21797231f;
      sa[219] = 0.2883011f;
      sa[220] = -0.22458579f;
      sa[221] = 0.05915758f;
      sa[222] = 0.24721405f;
      sa[223] = 0.065646276f;
      sa[224] = 0.071638495f;
      sa[225] = 0.23483023f;
      sa[226] = -0.31712273f;
      sa[227] = 0.28485805f;
      sa[228] = 0.1109506f;
      sa[229] = 0.09146507f;
      sa[230] = 0.2700189f;
      sa[231] = -0.27963734f;
      sa[232] = -0.2516804f;
      sa[233] = -0.023044718f;
      sa[234] = 0.17651242f;
      sa[235] = -0.3093875f;
      sa[236] = -0.06740574f;
      sa[237] = -0.25770667f;
      sa[238] = -0.25993472f;
      sa[239] = 0.1334178f;
      sa[240] = 0.011571552f;
      sa[241] = -0.37841755f;
      sa[242] = -0.0693211f;
      sa[243] = -0.2433696f;
      sa[244] = -0.24479878f;
      sa[245] = -0.13819444f;
      sa[246] = -0.28489473f;
      sa[247] = -0.058515735f;
      sa[248] = 0.3264171f;
      sa[249] = 0.26816073f;
      sa[250] = -0.25677568f;
      sa[251] = -0.1203572f;
      sa[252] = -0.35764733f;
      sa[253] = -0.3282678f;
      sa[254] = -0.2389122f;
      sa[255] = 0.25207058f;
      sa[256] = -0.1857299f;
      sa[257] = 0.31192297f;
      sa[258] = -0.25968766f;
      sa[259] = -0.123653494f;
      sa[260] = -0.30188063f;
      sa[261] = -0.11797342f;
      sa[262] = -0.16156939f;
      sa[263] = 0.35087785f;
      sa[264] = -0.17710154f;
      sa[265] = 0.06797159f;
      sa[266] = -0.30850807f;
      sa[267] = -0.27147412f;
      sa[268] = 0.11050667f;
      sa[269] = -0.19089691f;
      sa[270] = 0.016041514f;
      sa[271] = 0.16822094f;
      sa[272] = -0.12283737f;
      sa[273] = -0.15186019f;
      sa[274] = 0.12284139f;
      sa[275] = -0.039554156f;
      sa[276] = 0.10463673f;
      sa[277] = -0.26238945f;
      sa[278] = -0.107170366f;
      sa[279] = 0.18073379f;
      sa[280] = -0.19886447f;
      sa[281] = 0.2950661f;
      sa[282] = -0.10239761f;
      sa[283] = -0.053137098f;
      sa[284] = 0.12230272f;
      sa[285] = -0.057605345f;
      sa[286] = 0.22799954f;
      sa[287] = 0.07711552f;
      sa[288] = -0.16610214f;
      sa[289] = -0.14230207f;
      sa[290] = -0.103968665f;
      sa[291] = -0.113111265f;
      sa[292] = 0.11869494f;
      sa[293] = -0.11548728f;
      sa[294] = 0.073346086f;
      sa[295] = 0.09255839f;
      sa[296] = 0.29376447f;
      sa[297] = 0.22791684f;
      sa[298] = -0.031153966f;
      sa[299] = -0.12463077f;
      sa[300] = 0.019425506f;
      sa[301] = -0.064691246f;
      sa[302] = 0.1959009f;
      sa[303] = 0.06293137f;
      sa[304] = -0.15546946f;
      sa[305] = -0.0075991577f;
      sa[306] = 0.21176237f;
      sa[307] = -0.11254107f;
      sa[308] = 0.13928911f;
      sa[309] = 0.18439862f;
      sa[310] = 0.32734746f;
      sa[311] = 0.39168784f;
      sa[312] = -0.21929245f;
      sa[313] = -0.18436947f;
      sa[314] = -0.18067671f;
      sa[315] = 0.04663166f;
      sa[316] = 0.0010854113f;
      sa[317] = -0.08255855f;
      sa[318] = 0.09525685f;
      sa[319] = 0.32365695f;
      sa[320] = -0.20178406f;
      sa[321] = 0.07030483f;
      sa[322] = 0.24319103f;
      sa[323] = -0.09588877f;
      sa[324] = 0.02697449f;
      sa[325] = 0.3305756f;
      sa[326] = -0.21443255f;
      sa[327] = 0.018377056f;
      sa[328] = -0.021277798f;
      sa[329] = 0.30962732f;
      sa[330] = -0.1441382f;
      sa[331] = 0.044151276f;
      sa[332] = -0.25475937f;
      sa[333] = 0.21746609f;
      sa[334] = -0.048019994f;
      sa[335] = 0.34079185f;
      sa[336] = -0.1194492f;
      sa[337] = -0.12481583f;
      sa[338] = 0.34556636f;
      sa[339] = -0.18059695f;
      sa[340] = -0.31860402f;
      sa[341] = -0.1571668f;
      sa[342] = 0.18522468f;
      sa[343] = -0.16976373f;
      sa[344] = -0.122434944f;
      sa[345] = 0.28842402f;
      sa[346] = 0.28637385f;
      sa[347] = -0.1128457f;
      sa[348] = 0.3558862f;
      sa[349] = -0.252822f;
      sa[350] = -0.27444714f;
      sa[351] = 0.076062314f;
      sa[352] = 0.28442666f;
      sa[353] = 0.02646558f;
      sa[354] = 0.15126556f;
      sa[355] = 0.22709237f;
      sa[356] = -0.15091221f;
      sa[357] = 0.38487524f;
      sa[358] = -0.36106434f;
      sa[359] = -0.03105744f;
      sa[360] = 0.10230462f;
      sa[361] = -0.045475792f;
      sa[362] = -0.20083334f;
      sa[363] = 0.22689423f;
      sa[364] = -0.12127535f;
      sa[365] = -0.23786591f;
      sa[366] = -0.0037559331f;
      sa[367] = -0.3225133f;
      sa[368] = -0.19748698f;
      sa[369] = 0.26658726f;
      sa[370] = -0.25533366f;
      sa[371] = 0.074584484f;
      sa[372] = -0.018432824f;
      sa[373] = 0.30755222f;
      sa[374] = -0.1681315f;
      sa[375] = -0.33130482f;
      sa[376] = -0.35984388f;
      sa[377] = -0.27659944f;
      sa[378] = 0.347772f;
      sa[379] = 0.106770664f;
      sa[380] = -0.11254044f;
      sa[381] = -0.07929638f;
      sa[382] = -0.033586398f;
      sa[383] = -0.14442311f;
      sa[384] = -0.18893789f;
      sa[385] = 0.082821764f;
      sa[386] = -0.2546807f;
      sa[387] = -0.16459179f;
      sa[388] = 0.10019481f;
      sa[389] = 0.0049440768f;
      sa[390] = -0.0010427772f;
      sa[391] = -0.11801187f;
      sa[392] = 0.3042814f;
      sa[393] = 0.22897537f;
      sa[394] = -0.037117932f;
      sa[395] = 0.334703f;
      sa[396] = 0.28117284f;
      sa[397] = -0.28319597f;
      sa[398] = 0.103418134f;
      sa[399] = 0.19173847f;
      sa[400] = 0.1788476f;
      sa[401] = 0.26664275f;
      sa[402] = -0.15876208f;
      sa[403] = 0.07236325f;
      sa[404] = 0.20611243f;
      sa[405] = -0.30416366f;
      sa[406] = -0.12005794f;
      sa[407] = 0.14071967f;
      sa[408] = -0.27758825f;
      sa[409] = -0.27981865f;
      sa[410] = -0.14343551f;
      sa[411] = 0.171857f;
      sa[412] = -0.13909794f;
      sa[413] = 0.058380857f;
      sa[414] = 0.16375968f;
      sa[415] = 0.2871469f;
      sa[416] = -0.26847428f;
      sa[417] = -0.04237237f;
      sa[418] = -0.05836734f;
      sa[419] = 0.22566889f;
      sa[420] = 0.20693119f;
      sa[421] = 0.26266867f;
      sa[422] = 0.26318598f;
      sa[423] = -0.07740921f;
      sa[424] = 0.04879601f;
      sa[425] = -0.1271494f;
      sa[426] = -0.33599186f;
      sa[427] = 0.16832374f;
      sa[428] = 0.07099739f;
      sa[429] = -0.13501675f;
      sa[430] = 0.13485838f;
      sa[431] = -0.090977795f;
      sa[432] = -0.07003232f;
      sa[433] = 0.11370923f;
      sa[434] = 0.31239793f;
      sa[435] = 0.15393156f;
      sa[436] = -0.30309194f;
      sa[437] = -0.28758407f;
      sa[438] = -0.013382839f;
      sa[439] = 0.0016533339f;
      sa[440] = 0.30003095f;
      sa[441] = -0.33561668f;
      sa[442] = 0.12879029f;
      sa[443] = 0.06479979f;
      sa[444] = -0.27674985f;
      sa[445] = 0.045890104f;
      sa[446] = 0.21664776f;
      sa[447] = 0.036502182f;
      sa[448] = 0.14583316f;
      sa[449] = 0.2554998f;
      sa[450] = -0.090813935f;
      sa[451] = 0.08681308f;
      sa[452] = 0.14385317f;
      sa[453] = -0.09521178f;
      sa[454] = -0.21570249f;
      sa[455] = -0.13063565f;
      sa[456] = -0.04742986f;
      sa[457] = 0.13282041f;
      sa[458] = -0.22375317f;
      sa[459] = 0.2941946f;
      sa[460] = 0.21040948f;
      sa[461] = 0.27691516f;
      sa[462] = 0.042454362f;
      sa[463] = 0.20034014f;
      sa[464] = -0.21379504f;
      sa[465] = 0.2867467f;
      sa[466] = 0.024132013f;
      sa[467] = 0.11515762f;
      sa[468] = 0.1467137f;
      sa[469] = 0.3180929f;
      sa[470] = 0.19657022f;
      sa[471] = 0.089199774f;
      sa[472] = 0.0012258366f;
      sa[473] = -0.13110813f;
      sa[474] = -0.024202175f;
      sa[475] = 0.09979708f;
      sa[476] = 0.297382f;
      sa[477] = -0.20324478f;
      sa[478] = 0.12776765f;
      sa[479] = -0.19148612f;
      sa[480] = -0.338331f;
      sa[481] = -0.23547564f;
      sa[482] = -0.28679115f;
      sa[483] = 0.21303791f;
      sa[484] = 0.19468522f;
      sa[485] = 0.080847904f;
      sa[486] = -0.021266542f;
      sa[487] = -0.17180057f;
      sa[488] = -0.22447085f;
      sa[489] = 0.087826416f;
      sa[490] = -0.014462011f;
      sa[491] = -0.29810286f;
      sa[492] = 0.19531493f;
      sa[493] = 0.29088587f;
      sa[494] = -0.25143152f;
      sa[495] = 0.22173262f;
      sa[496] = -0.01527855f;
      sa[497] = 0.06401945f;
      sa[498] = 0.17592846f;
      sa[499] = 0.150969f;
      sa[500] = -0.0624323f;
      sa[501] = 0.0072012744f;
      sa[502] = 0.31927723f;
      sa[503] = 0.10504109f;
      sa[504] = -0.22179289f;
      sa[505] = -0.24639817f;
      sa[506] = 0.18784018f;
      sa[507] = -0.11778342f;
      sa[508] = 0.09943674f;
      sa[509] = 0.24295725f;
      sa[510] = 0.18561321f;
      sa[511] = -0.030373463f;
      sa[512] = 0.06011837f;
      sa[513] = -0.119798824f;
      sa[514] = 0.25070992f;
      sa[515] = -0.2790217f;
      sa[516] = 0.027401717f;
      sa[517] = 0.09927606f;
      sa[518] = 0.1486601f;
      sa[519] = -0.11380701f;
      sa[520] = 0.28687894f;
      sa[521] = 0.14820616f;
      sa[522] = 0.12343334f;
      sa[523] = 0.23707008f;
      sa[524] = 0.21222508f;
      sa[525] = 0.17145143f;
      sa[526] = -0.007856212f;
      sa[527] = -0.110397175f;
      sa[528] = 0.019563328f;
      sa[529] = 0.105428256f;
      sa[530] = -0.17530498f;
      sa[531] = 0.054980293f;
      sa[532] = 0.15085131f;
      sa[533] = 0.121405184f;
      sa[534] = 0.13641143f;
      sa[535] = -0.11160475f;
      sa[536] = 0.08882345f;
      sa[537] = -0.15629782f;
      sa[538] = 0.15121624f;
      sa[539] = 0.27573508f;
      sa[540] = -0.27297002f;
      sa[541] = -0.18249397f;
      sa[542] = -0.0057955603f;
      sa[543] = -0.29196045f;
      sa[544] = 0.18346885f;
      sa[545] = 0.12626472f;
      sa[546] = 0.09813211f;
      sa[547] = 0.22658633f;
      sa[548] = 0.07705928f;
      sa[549] = 0.19599481f;
      sa[550] = 0.018900322f;
      sa[551] = -0.07082302f;
      sa[552] = 0.05446578f;
      sa[553] = -0.059289183f;
      sa[554] = -0.16625465f;
      sa[555] = -0.16747665f;
      sa[556] = -0.257593f;
      sa[557] = -0.25722873f;
      sa[558] = -0.23910706f;
      sa[559] = 0.12191062f;
      sa[560] = -0.30954158f;
      sa[561] = -0.06620912f;
      sa[562] = 0.2397475f;
      sa[563] = -0.068327315f;
      sa[564] = 0.3191508f;
      sa[565] = 0.052259788f;
      sa[566] = 0.2824347f;
      sa[567] = 0.03246568f;
      sa[568] = -0.069036715f;
      sa[569] = 0.0470042f;
      sa[570] = -0.0132059585f;
      sa[571] = -0.05029645f;
      sa[572] = -0.12070324f;
      sa[573] = 0.1224234f;
      sa[574] = 0.32769167f;
      sa[575] = -0.24116172f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_07_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_07_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_07_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.30311105f;
      sa[1] = -0.010053844f;
      sa[2] = -0.11034392f;
      sa[3] = -0.18353443f;
      sa[4] = 0.059036862f;
      sa[5] = 0.06770608f;
      sa[6] = 0.36786765f;
      sa[7] = -0.23668735f;
      sa[8] = -0.24124451f;
      sa[9] = 0.24460278f;
      sa[10] = -0.035587177f;
      sa[11] = 0.11710721f;
      sa[12] = 0.0593038f;
      sa[13] = 0.01346036f;
      sa[14] = -0.35526472f;
      sa[15] = 0.2782083f;
      sa[16] = 0.3545788f;
      sa[17] = -0.121369205f;
      sa[18] = 0.026345363f;
      sa[19] = -0.088390164f;
      sa[20] = 0.30167785f;
      sa[21] = -0.0069784997f;
      sa[22] = -0.2501424f;
      sa[23] = 0.21893856f;
      sa[24] = -0.36727417f;
      sa[25] = 0.17869733f;
      sa[26] = -0.038766418f;
      sa[27] = 0.3989214f;
      sa[28] = -0.39554602f;
      sa[29] = -0.14996165f;
      sa[30] = 0.08957255f;
      sa[31] = -0.19752234f;
      sa[32] = -0.3623987f;
      sa[33] = -0.40818042f;
      sa[34] = 0.016036093f;
      sa[35] = 0.38493046f;
      sa[36] = -0.10954236f;
      sa[37] = -0.022927841f;
      sa[38] = 0.05179607f;
      sa[39] = 0.23706335f;
      sa[40] = -0.22569034f;
      sa[41] = -0.36845464f;
      sa[42] = -0.25157154f;
      sa[43] = -0.3913542f;
      sa[44] = -0.05105705f;
      sa[45] = -0.40272462f;
      sa[46] = 0.29187295f;
      sa[47] = 0.32291055f;
      sa[48] = -0.4046942f;
      sa[49] = -0.31006625f;
      sa[50] = 0.062442012f;
      sa[51] = -0.14240079f;
      sa[52] = 0.18984029f;
      sa[53] = 0.20128745f;
      sa[54] = -0.08500015f;
      sa[55] = 0.31012636f;
      sa[56] = -0.31544933f;
      sa[57] = -0.3945387f;
      sa[58] = 0.03507863f;
      sa[59] = -0.06865606f;
      sa[60] = 0.33058393f;
      sa[61] = -0.18946935f;
      sa[62] = -0.12316873f;
      sa[63] = 0.16288634f;
      sa[64] = 0.34536314f;
      sa[65] = -0.18050756f;
      sa[66] = 0.13884713f;
      sa[67] = 0.4023351f;
      sa[68] = 0.19061473f;
      sa[69] = -0.28132588f;
      sa[70] = -0.3979555f;
      sa[71] = -0.049456008f;
      sa[72] = -0.33852744f;
      sa[73] = 0.3054918f;
      sa[74] = 0.39369023f;
      sa[75] = -0.020124193f;
      sa[76] = 0.2159863f;
      sa[77] = 0.11324941f;
      sa[78] = -0.35014638f;
      sa[79] = 0.2672068f;
      sa[80] = -0.22526272f;
      sa[81] = 0.059496112f;
      sa[82] = 0.22673792f;
      sa[83] = -0.17970702f;
      sa[84] = -0.43563068f;
      sa[85] = -0.3552571f;
      sa[86] = 0.052528612f;
      sa[87] = 0.31757897f;
      sa[88] = -0.4348307f;
      sa[89] = -0.17921554f;
      sa[90] = -0.29934996f;
      sa[91] = 0.40802997f;
      sa[92] = -0.09214846f;
      sa[93] = 0.0716439f;
      sa[94] = -0.42172816f;
      sa[95] = -0.06822946f;
      sa[96] = -0.39732403f;
      sa[97] = 0.012514301f;
      sa[98] = -0.0049628033f;
      sa[99] = 0.10576139f;
      sa[100] = -0.3722194f;
      sa[101] = -0.1206851f;
      sa[102] = 0.37638408f;
      sa[103] = 0.0054260036f;
      sa[104] = -0.08966653f;
      sa[105] = -0.17304708f;
      sa[106] = 0.40704215f;
      sa[107] = 0.28480121f;
      sa[108] = 0.088670485f;
      sa[109] = -0.03654748f;
      sa[110] = 0.103448875f;
      sa[111] = -0.2972702f;
      sa[112] = -0.31926438f;
      sa[113] = 0.0033851245f;
      sa[114] = -0.03492746f;
      sa[115] = -0.14017841f;
      sa[116] = 0.29876605f;
      sa[117] = 0.0023511583f;
      sa[118] = -0.4524021f;
      sa[119] = -0.20319782f;
      sa[120] = -0.12386672f;
      sa[121] = 0.032217987f;
      sa[122] = -0.04638031f;
      sa[123] = 0.0851222f;
      sa[124] = -0.2241902f;
      sa[125] = 0.19186841f;
      sa[126] = -0.2624084f;
      sa[127] = 0.11597989f;
      sa[128] = -0.22196177f;
      sa[129] = 0.14417988f;
      sa[130] = -0.15639177f;
      sa[131] = 0.13221651f;
      sa[132] = 0.03679502f;
      sa[133] = 0.13523456f;
      sa[134] = 0.11306967f;
      sa[135] = -0.2417196f;
      sa[136] = 0.087585025f;
      sa[137] = -0.34921402f;
      sa[138] = -0.056278728f;
      sa[139] = 0.28165126f;
      sa[140] = -0.1759418f;
      sa[141] = -0.026555935f;
      sa[142] = 0.088119835f;
      sa[143] = -0.21599992f;
      sa[144] = 0.3390176f;
      sa[145] = -0.19194417f;
      sa[146] = 0.019981882f;
      sa[147] = -0.102321796f;
      sa[148] = -0.2283578f;
      sa[149] = 0.31195757f;
      sa[150] = -0.43108693f;
      sa[151] = -0.46921873f;
      sa[152] = 0.4291831f;
      sa[153] = -0.17226072f;
      sa[154] = 0.21229218f;
      sa[155] = -0.42096177f;
      sa[156] = -0.33599833f;
      sa[157] = -0.2587045f;
      sa[158] = -0.024957675f;
      sa[159] = -0.14573756f;
      sa[160] = 0.35072252f;
      sa[161] = -0.34606844f;
      sa[162] = 0.32032168f;
      sa[163] = -0.31980085f;
      sa[164] = 0.1539746f;
      sa[165] = -0.17940238f;
      sa[166] = 0.28225118f;
      sa[167] = -0.32644352f;
      sa[168] = 0.21020621f;
      sa[169] = -0.703689f;
      sa[170] = 0.263322f;
      sa[171] = 0.2218223f;
      sa[172] = 0.3650097f;
      sa[173] = 0.37548232f;
      sa[174] = -0.040700924f;
      sa[175] = -0.020900011f;
      sa[176] = -0.23644014f;
      sa[177] = 0.039372023f;
      sa[178] = -0.27499855f;
      sa[179] = -0.0945404f;
      sa[180] = -0.34510314f;
      sa[181] = -0.25466293f;
      sa[182] = 0.08267437f;
      sa[183] = -0.31039086f;
      sa[184] = 0.38326582f;
      sa[185] = 0.3114454f;
      sa[186] = -0.15827814f;
      sa[187] = -0.27409947f;
      sa[188] = -0.11234123f;
      sa[189] = -0.20422164f;
      sa[190] = -0.40601894f;
      sa[191] = -0.28645474f;
      sa[192] = 0.0028859852f;
      sa[193] = 0.12714796f;
      sa[194] = -0.3091349f;
      sa[195] = -0.25788638f;
      sa[196] = 0.15764467f;
      sa[197] = -0.20883584f;
      sa[198] = -0.0066023963f;
      sa[199] = 0.4533324f;
      sa[200] = -0.0032665145f;
      sa[201] = 0.25402606f;
      sa[202] = 0.16789214f;
      sa[203] = -0.38931528f;
      sa[204] = 0.1791909f;
      sa[205] = 0.3932544f;
      sa[206] = -0.10010341f;
      sa[207] = 0.19922492f;
      sa[208] = -0.204414f;
      sa[209] = 0.1785541f;
      sa[210] = -0.07195164f;
      sa[211] = -0.24393849f;
      sa[212] = -0.3463186f;
      sa[213] = 0.03327536f;
      sa[214] = -0.30564466f;
      sa[215] = -0.102478586f;
      sa[216] = 0.14034496f;
      sa[217] = 0.34732616f;
      sa[218] = 0.035366274f;
      sa[219] = 0.100514784f;
      sa[220] = 0.14486764f;
      sa[221] = -0.03287189f;
      sa[222] = -0.29904652f;
      sa[223] = -0.3413896f;
      sa[224] = 0.31541222f;
      sa[225] = 0.09761857f;
      sa[226] = 0.0147647755f;
      sa[227] = 0.1096447f;
      sa[228] = -0.0964583f;
      sa[229] = -0.19983624f;
      sa[230] = -0.22175872f;
      sa[231] = -0.19361988f;
      sa[232] = 0.45488614f;
      sa[233] = -0.100323044f;
      sa[234] = -0.1766511f;
      sa[235] = 0.051168174f;
      sa[236] = -0.3384284f;
      sa[237] = 0.45047742f;
      sa[238] = 0.16447665f;
      sa[239] = -0.08452798f;
      sa[240] = -0.07613201f;
      sa[241] = -0.3707859f;
      sa[242] = -0.23705995f;
      sa[243] = 0.37150943f;
      sa[244] = 0.19849065f;
      sa[245] = 0.30726573f;
      sa[246] = 0.18079627f;
      sa[247] = -0.3184885f;
      sa[248] = -0.18992954f;
      sa[249] = 0.12598418f;
      sa[250] = 0.2278617f;
      sa[251] = 0.42667007f;
      sa[252] = 0.23630738f;
      sa[253] = -0.31168172f;
      sa[254] = 0.42231855f;
      sa[255] = 0.1963609f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_07_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_ReLU_07_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_07_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.08538579f;
      sa[1] = -1.5379707f;
      sa[2] = -1.6108602f;
      sa[3] = 1.3501251f;
      sa[4] = 0.38222703f;
      sa[5] = -0.2513628f;
      sa[6] = -1.7184861f;
      sa[7] = 1.4908357f;
      sa[8] = 1.7519833f;
      sa[9] = 0.19146745f;
      sa[10] = 1.6296968f;
      sa[11] = 1.3970393f;
      sa[12] = 1.8533214f;
      sa[13] = -0.62774384f;
      sa[14] = -1.96553f;
      sa[15] = -0.72843313f;
      sa[16] = 0.7744352f;
      sa[17] = -0.7384684f;
      sa[18] = -1.5031008f;
      sa[19] = -0.85522497f;
      sa[20] = -1.9325483f;
      sa[21] = 0.32185894f;
      sa[22] = -1.9932358f;
      sa[23] = -0.5897652f;
      sa[24] = -0.56438833f;
      sa[25] = 1.8729367f;
      sa[26] = -0.33172193f;
      sa[27] = 1.1941928f;
      sa[28] = 1.2299446f;
      sa[29] = -0.7133791f;
      sa[30] = 0.17795789f;
      sa[31] = 0.13867079f;
      sa[32] = 0.46698132f;
      sa[33] = 0.2786018f;
      sa[34] = -0.607821f;
      sa[35] = 1.0606627f;
      sa[36] = 0.56704754f;
      sa[37] = -1.3377358f;
      sa[38] = 0.5723212f;
      sa[39] = -0.20600954f;
      sa[40] = 0.21183516f;
      sa[41] = -0.75290465f;
      sa[42] = 0.5103925f;
      sa[43] = -0.059933886f;
      sa[44] = 1.0195577f;
      sa[45] = -2.016598f;
      sa[46] = -2.1343174f;
      sa[47] = 0.02462239f;
      sa[48] = 1.6313832f;
      sa[49] = -0.27391383f;
      sa[50] = -0.50168496f;
      sa[51] = 1.7725809f;
      sa[52] = -1.7185047f;
      sa[53] = 0.95177525f;
      sa[54] = 1.8125465f;
      sa[55] = 1.0867118f;
      sa[56] = -0.5333324f;
      sa[57] = -0.06924747f;
      sa[58] = 1.0440564f;
      sa[59] = 0.887077f;
      sa[60] = -1.4373045f;
      sa[61] = 0.90153444f;
      sa[62] = -0.4171435f;
      sa[63] = -0.8305057f;
      sa[64] = 0.938393f;
      sa[65] = -0.9785347f;
      sa[66] = -1.7735075f;
      sa[67] = -0.16880426f;
      sa[68] = 0.90068066f;
      sa[69] = -1.3713611f;
      sa[70] = -1.641633f;
      sa[71] = -0.02628701f;
      sa[72] = -0.96807295f;
      sa[73] = -1.1815435f;
      sa[74] = -1.0829574f;
      sa[75] = 1.3157457f;
      sa[76] = 1.9027381f;
      sa[77] = -0.5938543f;
      sa[78] = -1.4009159f;
      sa[79] = -0.34967944f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_07 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_07_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_07_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_07_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_ReLU_07_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_07_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


