/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:47:08.590+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_03

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_03 > h2o_nn_16x16x6_Tanh_03.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_03.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_03", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_03 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_03_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_03_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_03_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_03_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_03_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_03_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_03_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_03_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_03_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_03_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_03_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_03_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_03.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_03_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.27956989247311825,0.13978494623655913,0.15053763440860216,0.27956989247311825,0.15053763440860216};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_03() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(6410679999953981824L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_03_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_03_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_03_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_03_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_03_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_03_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_03_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_03_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_03_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_03_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_03_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.05073877171109427;
      sa[1] = 0.021277139260902824;
      sa[2] = 0.06156952466748229;
      sa[3] = 0.018765592374565713;
      sa[4] = 0.020644762965216012;
      sa[5] = -0.020478933957116113;
      sa[6] = 0.020649393710800858;
      sa[7] = 0.012955161025442287;
      sa[8] = -0.08840631202231042;
      sa[9] = 0.015062135691769596;
      sa[10] = 0.02315122054880187;
      sa[11] = -0.0074039782390425204;
      sa[12] = 0.03902489618512241;
      sa[13] = 0.011772642603856114;
      sa[14] = -0.03395691750160368;
      sa[15] = 0.02578198725534891;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_03_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_03_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.027686291635271153;
      sa[1] = -0.028000887677314616;
      sa[2] = -0.02694742288567184;
      sa[3] = 0.05992716040743077;
      sa[4] = 0.03921475603673566;
      sa[5] = -0.01631503731796285;
      sa[6] = -0.006367882087967153;
      sa[7] = 0.05452364772366719;
      sa[8] = 0.027232521490800847;
      sa[9] = -0.05454050448647932;
      sa[10] = 0.0160402819974014;
      sa[11] = -0.002792978627942494;
      sa[12] = 0.015083464258286253;
      sa[13] = 0.009794090971375593;
      sa[14] = -0.033955668769588304;
      sa[15] = -0.07970533518544075;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_03_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_03_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.03051779447949882;
      sa[1] = -0.06137540241039789;
      sa[2] = -0.05317802363285716;
      sa[3] = -0.013272193231925593;
      sa[4] = 0.007600356077674649;
    }
  }
}
class h2o_nn_16x16x6_Tanh_03_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_03_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_03_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.07534108f;
      sa[1] = 0.31976318f;
      sa[2] = 0.20605195f;
      sa[3] = 0.17269573f;
      sa[4] = -0.19001101f;
      sa[5] = -0.17789397f;
      sa[6] = -0.04191423f;
      sa[7] = 0.29807705f;
      sa[8] = 0.16042642f;
      sa[9] = -0.15727112f;
      sa[10] = -0.12446412f;
      sa[11] = -0.2060244f;
      sa[12] = 0.08860021f;
      sa[13] = -0.26178008f;
      sa[14] = -0.18268761f;
      sa[15] = 0.023241855f;
      sa[16] = 0.16317329f;
      sa[17] = 0.20059223f;
      sa[18] = -0.289116f;
      sa[19] = 0.1720781f;
      sa[20] = 0.24411605f;
      sa[21] = -0.34715605f;
      sa[22] = 0.25228626f;
      sa[23] = -0.18706766f;
      sa[24] = 0.31524596f;
      sa[25] = 0.25009578f;
      sa[26] = -0.3244569f;
      sa[27] = 0.39084238f;
      sa[28] = 0.26115903f;
      sa[29] = -0.29848287f;
      sa[30] = -0.16573767f;
      sa[31] = 0.19377197f;
      sa[32] = 0.21039225f;
      sa[33] = -0.26779705f;
      sa[34] = 0.07005417f;
      sa[35] = -0.12346847f;
      sa[36] = 0.11151428f;
      sa[37] = 0.26335874f;
      sa[38] = -0.111262605f;
      sa[39] = 0.18292353f;
      sa[40] = 0.052581545f;
      sa[41] = -0.08304973f;
      sa[42] = -0.14235057f;
      sa[43] = 0.06709458f;
      sa[44] = 0.26585907f;
      sa[45] = -0.2586304f;
      sa[46] = 0.07385419f;
      sa[47] = -0.014417049f;
      sa[48] = 0.24375793f;
      sa[49] = 0.27431846f;
      sa[50] = 0.21117117f;
      sa[51] = -0.2919793f;
      sa[52] = -0.10647594f;
      sa[53] = 0.28248942f;
      sa[54] = 0.23396213f;
      sa[55] = -0.030348169f;
      sa[56] = -0.17956427f;
      sa[57] = -0.29770675f;
      sa[58] = 0.30745482f;
      sa[59] = -0.18220407f;
      sa[60] = -0.34089866f;
      sa[61] = 0.21814506f;
      sa[62] = 0.13587014f;
      sa[63] = 0.02461287f;
      sa[64] = 0.14906947f;
      sa[65] = 0.13862345f;
      sa[66] = 0.018657112f;
      sa[67] = 0.17345968f;
      sa[68] = -0.10574825f;
      sa[69] = 0.18909557f;
      sa[70] = -0.14614366f;
      sa[71] = 0.34291235f;
      sa[72] = -0.15834193f;
      sa[73] = 0.18975095f;
      sa[74] = -0.21318962f;
      sa[75] = 0.0917273f;
      sa[76] = -0.21602213f;
      sa[77] = -0.07636066f;
      sa[78] = -0.06805712f;
      sa[79] = 0.11361818f;
      sa[80] = -0.23466533f;
      sa[81] = -0.15565622f;
      sa[82] = -0.076588415f;
      sa[83] = 0.122288875f;
      sa[84] = 0.007949321f;
      sa[85] = -0.1857169f;
      sa[86] = 0.18543282f;
      sa[87] = 0.23944381f;
      sa[88] = 0.19782594f;
      sa[89] = 0.026672946f;
      sa[90] = -0.08833362f;
      sa[91] = 0.17262562f;
      sa[92] = 0.14813791f;
      sa[93] = -0.20755954f;
      sa[94] = -0.16903734f;
      sa[95] = -0.26846454f;
      sa[96] = 0.13705927f;
      sa[97] = -0.025284726f;
      sa[98] = 0.2534452f;
      sa[99] = -0.15742597f;
      sa[100] = -0.036895774f;
      sa[101] = -0.19285351f;
      sa[102] = -0.28006655f;
      sa[103] = -0.11165172f;
      sa[104] = -2.1936477E-4f;
      sa[105] = -0.1931941f;
      sa[106] = -0.21334781f;
      sa[107] = 0.15294057f;
      sa[108] = 0.18109788f;
      sa[109] = -0.22738303f;
      sa[110] = -0.17740801f;
      sa[111] = 0.16351123f;
      sa[112] = 0.1251693f;
      sa[113] = 0.047873907f;
      sa[114] = -0.16670543f;
      sa[115] = -0.08049097f;
      sa[116] = -0.2513172f;
      sa[117] = -0.029575236f;
      sa[118] = -0.28366798f;
      sa[119] = -0.17208356f;
      sa[120] = 0.25144887f;
      sa[121] = 0.26829055f;
      sa[122] = 0.34906313f;
      sa[123] = 0.2890731f;
      sa[124] = 0.30632555f;
      sa[125] = 0.309627f;
      sa[126] = -0.3098726f;
      sa[127] = -0.14845613f;
      sa[128] = 0.083011866f;
      sa[129] = 0.15637584f;
      sa[130] = -0.13436763f;
      sa[131] = 0.31489924f;
      sa[132] = 0.22998223f;
      sa[133] = -0.32475278f;
      sa[134] = 0.10034723f;
      sa[135] = -0.28138205f;
      sa[136] = -0.28210035f;
      sa[137] = -0.022555351f;
      sa[138] = 0.14450891f;
      sa[139] = -0.1057526f;
      sa[140] = -0.07513496f;
      sa[141] = -0.16297697f;
      sa[142] = 0.16277705f;
      sa[143] = -0.3440854f;
      sa[144] = 0.28874427f;
      sa[145] = -0.1558309f;
      sa[146] = -0.26324072f;
      sa[147] = 0.21066968f;
      sa[148] = 0.18505163f;
      sa[149] = 0.21738215f;
      sa[150] = 0.3273589f;
      sa[151] = -0.27379116f;
      sa[152] = 0.04347769f;
      sa[153] = 0.2880097f;
      sa[154] = 0.25875762f;
      sa[155] = -0.20047474f;
      sa[156] = 0.1614575f;
      sa[157] = -0.18504685f;
      sa[158] = 0.11765066f;
      sa[159] = 0.110940896f;
      sa[160] = 0.087889284f;
      sa[161] = 0.23532614f;
      sa[162] = -0.18526351f;
      sa[163] = -0.04475397f;
      sa[164] = 0.26483044f;
      sa[165] = -0.037970282f;
      sa[166] = -0.06914643f;
      sa[167] = -0.08560599f;
      sa[168] = 0.2282741f;
      sa[169] = 0.34447217f;
      sa[170] = 0.024215965f;
      sa[171] = -0.059245944f;
      sa[172] = -0.054603674f;
      sa[173] = -0.1546319f;
      sa[174] = -0.0076086656f;
      sa[175] = -0.26357818f;
      sa[176] = -0.03311563f;
      sa[177] = -0.03900744f;
      sa[178] = -0.06883277f;
      sa[179] = 0.0859186f;
      sa[180] = -0.055923343f;
      sa[181] = -0.2661636f;
      sa[182] = -0.17169966f;
      sa[183] = 0.092332795f;
      sa[184] = 0.29589513f;
      sa[185] = 0.18377239f;
      sa[186] = -0.3399068f;
      sa[187] = 0.057560664f;
      sa[188] = -0.018728381f;
      sa[189] = 0.24049361f;
      sa[190] = 0.008358284f;
      sa[191] = -0.0054815896f;
      sa[192] = -0.13847075f;
      sa[193] = 0.25554f;
      sa[194] = 0.08941332f;
      sa[195] = 0.28690362f;
      sa[196] = 0.3219894f;
      sa[197] = -0.043180924f;
      sa[198] = 0.1088372f;
      sa[199] = -0.09441633f;
      sa[200] = 0.014330709f;
      sa[201] = -0.32239726f;
      sa[202] = 0.12770748f;
      sa[203] = -0.06445576f;
      sa[204] = -0.21680878f;
      sa[205] = 0.22549225f;
      sa[206] = 0.24129303f;
      sa[207] = 0.14819922f;
      sa[208] = -0.2918271f;
      sa[209] = -0.09675978f;
      sa[210] = -0.30944592f;
      sa[211] = -0.29186025f;
      sa[212] = 0.25220847f;
      sa[213] = -0.29581258f;
      sa[214] = -0.084595084f;
      sa[215] = 0.05749378f;
      sa[216] = 0.100568645f;
      sa[217] = 0.22501612f;
      sa[218] = -0.19391868f;
      sa[219] = 0.23944576f;
      sa[220] = -0.25307146f;
      sa[221] = 0.044099018f;
      sa[222] = 0.23914711f;
      sa[223] = 0.038758904f;
      sa[224] = 0.11773293f;
      sa[225] = 0.3401088f;
      sa[226] = -0.25186598f;
      sa[227] = 0.36080235f;
      sa[228] = 0.13715732f;
      sa[229] = 0.104133286f;
      sa[230] = 0.2866095f;
      sa[231] = -0.28461015f;
      sa[232] = -0.25024307f;
      sa[233] = 0.088263154f;
      sa[234] = 0.16435745f;
      sa[235] = -0.28733823f;
      sa[236] = -0.03768357f;
      sa[237] = -0.25029787f;
      sa[238] = -0.24106394f;
      sa[239] = 0.1315375f;
      sa[240] = 0.011864169f;
      sa[241] = -0.2565511f;
      sa[242] = -0.094369836f;
      sa[243] = -0.27469322f;
      sa[244] = -0.22502956f;
      sa[245] = -0.14469083f;
      sa[246] = -0.2861829f;
      sa[247] = -0.0681246f;
      sa[248] = 0.26330292f;
      sa[249] = 0.24237005f;
      sa[250] = -0.19499864f;
      sa[251] = -0.082535334f;
      sa[252] = -0.29509982f;
      sa[253] = -0.28732777f;
      sa[254] = -0.26663426f;
      sa[255] = 0.13883294f;
      sa[256] = -0.19076173f;
      sa[257] = 0.30457819f;
      sa[258] = -0.27035028f;
      sa[259] = -0.116418615f;
      sa[260] = -0.23378907f;
      sa[261] = -0.08473497f;
      sa[262] = -0.113436446f;
      sa[263] = 0.27791855f;
      sa[264] = -0.17237382f;
      sa[265] = 0.07079865f;
      sa[266] = -0.3019455f;
      sa[267] = -0.2539636f;
      sa[268] = 0.14234217f;
      sa[269] = -0.1561455f;
      sa[270] = -0.033376995f;
      sa[271] = 0.25130206f;
      sa[272] = -0.098918945f;
      sa[273] = -0.12701787f;
      sa[274] = 0.133368f;
      sa[275] = 0.01722786f;
      sa[276] = 0.10648814f;
      sa[277] = -0.22636761f;
      sa[278] = -0.15441826f;
      sa[279] = 0.26343897f;
      sa[280] = -0.18688361f;
      sa[281] = 0.31216225f;
      sa[282] = -0.101004854f;
      sa[283] = -0.04395168f;
      sa[284] = -0.003141554f;
      sa[285] = -0.208268f;
      sa[286] = 0.33608314f;
      sa[287] = 0.19058374f;
      sa[288] = -0.2263432f;
      sa[289] = -0.22200263f;
      sa[290] = -0.11593104f;
      sa[291] = 0.06515778f;
      sa[292] = 0.13414218f;
      sa[293] = -0.10916784f;
      sa[294] = 0.08508898f;
      sa[295] = 0.13161485f;
      sa[296] = 0.2303319f;
      sa[297] = 0.21081159f;
      sa[298] = -0.029287873f;
      sa[299] = -0.029436132f;
      sa[300] = -0.027822172f;
      sa[301] = -0.081032544f;
      sa[302] = 0.16671856f;
      sa[303] = 0.027566755f;
      sa[304] = -0.22352703f;
      sa[305] = -0.04290393f;
      sa[306] = 0.21863046f;
      sa[307] = -0.22837397f;
      sa[308] = 0.06836773f;
      sa[309] = 0.1437138f;
      sa[310] = 0.29314715f;
      sa[311] = 0.302529f;
      sa[312] = -0.25399414f;
      sa[313] = -0.17416744f;
      sa[314] = -0.15618089f;
      sa[315] = -0.030073851f;
      sa[316] = -0.048221696f;
      sa[317] = -0.11407794f;
      sa[318] = 0.08085251f;
      sa[319] = 0.29734242f;
      sa[320] = 0.002352232f;
      sa[321] = 0.23130588f;
      sa[322] = 0.13338621f;
      sa[323] = -0.25932598f;
      sa[324] = 0.0016222283f;
      sa[325] = 0.30370238f;
      sa[326] = -0.2688388f;
      sa[327] = 0.0063538738f;
      sa[328] = -0.050501f;
      sa[329] = 0.27587068f;
      sa[330] = -0.18690966f;
      sa[331] = 0.031316407f;
      sa[332] = -0.288006f;
      sa[333] = 0.1441863f;
      sa[334] = -0.043459598f;
      sa[335] = 0.22348419f;
      sa[336] = -0.17031875f;
      sa[337] = -0.1693916f;
      sa[338] = 0.29903883f;
      sa[339] = -0.20709631f;
      sa[340] = -0.34216693f;
      sa[341] = -0.25852743f;
      sa[342] = 0.17762035f;
      sa[343] = -0.096666984f;
      sa[344] = -0.18100052f;
      sa[345] = 0.22871509f;
      sa[346] = 0.23041205f;
      sa[347] = -0.15525894f;
      sa[348] = 0.33298963f;
      sa[349] = -0.273268f;
      sa[350] = -0.2660883f;
      sa[351] = 0.16800019f;
      sa[352] = 0.22201915f;
      sa[353] = -0.028285919f;
      sa[354] = 0.10429442f;
      sa[355] = 0.14965406f;
      sa[356] = -0.14609285f;
      sa[357] = 0.26290345f;
      sa[358] = -0.3315731f;
      sa[359] = 0.027609074f;
      sa[360] = 0.08183226f;
      sa[361] = -0.042643685f;
      sa[362] = -0.15888228f;
      sa[363] = 0.2455319f;
      sa[364] = -0.12959155f;
      sa[365] = -0.22675276f;
      sa[366] = 0.008316544f;
      sa[367] = -0.32165283f;
      sa[368] = -0.19554903f;
      sa[369] = 0.28653085f;
      sa[370] = -0.23509356f;
      sa[371] = 0.12487523f;
      sa[372] = 0.009980917f;
      sa[373] = 0.3334668f;
      sa[374] = -0.12564903f;
      sa[375] = -0.30517372f;
      sa[376] = -0.33006915f;
      sa[377] = -0.23497266f;
      sa[378] = 0.34191242f;
      sa[379] = 0.11324791f;
      sa[380] = -0.1065464f;
      sa[381] = -0.09714169f;
      sa[382] = -0.029303832f;
      sa[383] = -0.11365988f;
      sa[384] = -0.14713098f;
      sa[385] = 0.10052605f;
      sa[386] = -0.2572704f;
      sa[387] = -0.25125948f;
      sa[388] = 0.11361016f;
      sa[389] = 0.0069794245f;
      sa[390] = 0.009905766f;
      sa[391] = -0.10677253f;
      sa[392] = 0.3012974f;
      sa[393] = 0.24369475f;
      sa[394] = -0.0830982f;
      sa[395] = 0.2867605f;
      sa[396] = 0.32765934f;
      sa[397] = -0.27800557f;
      sa[398] = 0.118808776f;
      sa[399] = 0.09611514f;
      sa[400] = 0.19170365f;
      sa[401] = 0.2590097f;
      sa[402] = -0.15168756f;
      sa[403] = 0.028577458f;
      sa[404] = 0.27445486f;
      sa[405] = -0.24777503f;
      sa[406] = -0.102900416f;
      sa[407] = 0.2052359f;
      sa[408] = -0.23591389f;
      sa[409] = -0.27598062f;
      sa[410] = -0.12671994f;
      sa[411] = 0.14569753f;
      sa[412] = -0.1522583f;
      sa[413] = 0.10608124f;
      sa[414] = 0.17243661f;
      sa[415] = 0.31556273f;
      sa[416] = -0.1840751f;
      sa[417] = 0.040716585f;
      sa[418] = 0.0040455437f;
      sa[419] = 0.2803254f;
      sa[420] = 0.19959284f;
      sa[421] = 0.2349866f;
      sa[422] = 0.25342262f;
      sa[423] = -0.08079856f;
      sa[424] = 0.11449868f;
      sa[425] = -0.07842288f;
      sa[426] = -0.3290524f;
      sa[427] = 0.18658091f;
      sa[428] = -0.044837736f;
      sa[429] = -0.15126696f;
      sa[430] = 0.1874662f;
      sa[431] = -0.015004413f;
      sa[432] = -0.062558904f;
      sa[433] = 0.1415122f;
      sa[434] = 0.30547124f;
      sa[435] = 0.04970556f;
      sa[436] = -0.28334936f;
      sa[437] = -0.27053615f;
      sa[438] = 0.0071454323f;
      sa[439] = -0.016321667f;
      sa[440] = 0.32638258f;
      sa[441] = -0.33573142f;
      sa[442] = 0.10598208f;
      sa[443] = 0.036135368f;
      sa[444] = -0.22514658f;
      sa[445] = 0.07686331f;
      sa[446] = 0.26095688f;
      sa[447] = 0.07573289f;
      sa[448] = 0.19664812f;
      sa[449] = 0.27370763f;
      sa[450] = -0.086350255f;
      sa[451] = 0.12038779f;
      sa[452] = 0.21399592f;
      sa[453] = -0.043528125f;
      sa[454] = -0.16495909f;
      sa[455] = -0.039858855f;
      sa[456] = -0.027392184f;
      sa[457] = 0.105860434f;
      sa[458] = -0.22548816f;
      sa[459] = 0.2799195f;
      sa[460] = 0.256432f;
      sa[461] = 0.31911525f;
      sa[462] = 0.06687014f;
      sa[463] = 0.24470417f;
      sa[464] = -0.28379175f;
      sa[465] = 0.2560411f;
      sa[466] = -0.031543467f;
      sa[467] = 0.12962358f;
      sa[468] = 0.11804757f;
      sa[469] = 0.31887233f;
      sa[470] = 0.22180851f;
      sa[471] = 0.092756614f;
      sa[472] = 0.0177726f;
      sa[473] = -0.11427103f;
      sa[474] = -0.0045662983f;
      sa[475] = 0.12159931f;
      sa[476] = 0.28295237f;
      sa[477] = -0.19979462f;
      sa[478] = 0.115393296f;
      sa[479] = -0.17481847f;
      sa[480] = -0.3201914f;
      sa[481] = -0.22446807f;
      sa[482] = -0.2700034f;
      sa[483] = 0.23643452f;
      sa[484] = 0.23730877f;
      sa[485] = 0.13767168f;
      sa[486] = -0.01476801f;
      sa[487] = -0.20564097f;
      sa[488] = -0.21003495f;
      sa[489] = 0.09265541f;
      sa[490] = -5.2073644E-4f;
      sa[491] = -0.23891215f;
      sa[492] = 0.23637879f;
      sa[493] = 0.29900098f;
      sa[494] = -0.24281435f;
      sa[495] = 0.1893844f;
      sa[496] = -0.0011837101f;
      sa[497] = 0.07200192f;
      sa[498] = 0.18757772f;
      sa[499] = 0.18594371f;
      sa[500] = -0.034165952f;
      sa[501] = 0.13134198f;
      sa[502] = 0.22783795f;
      sa[503] = 0.020897934f;
      sa[504] = -0.19338785f;
      sa[505] = -0.21613298f;
      sa[506] = 0.18522486f;
      sa[507] = -0.09058586f;
      sa[508] = 0.07479688f;
      sa[509] = 0.23199707f;
      sa[510] = 0.163694f;
      sa[511] = -0.029974822f;
      sa[512] = 0.07550142f;
      sa[513] = -0.091652855f;
      sa[514] = 0.29593903f;
      sa[515] = -0.2128032f;
      sa[516] = 0.0052595646f;
      sa[517] = 0.09617002f;
      sa[518] = 0.13706797f;
      sa[519] = -0.12670262f;
      sa[520] = 0.2519227f;
      sa[521] = 0.1609798f;
      sa[522] = 0.07831937f;
      sa[523] = 0.25205883f;
      sa[524] = 0.17881757f;
      sa[525] = 0.14579849f;
      sa[526] = -0.034702502f;
      sa[527] = -0.16835839f;
      sa[528] = -0.020006932f;
      sa[529] = 0.13537228f;
      sa[530] = -0.20385772f;
      sa[531] = 0.055074222f;
      sa[532] = 0.13314232f;
      sa[533] = 0.10667289f;
      sa[534] = 0.13142242f;
      sa[535] = -0.13533777f;
      sa[536] = 0.08979413f;
      sa[537] = -0.2222007f;
      sa[538] = 0.2355563f;
      sa[539] = 0.31005013f;
      sa[540] = -0.27181175f;
      sa[541] = -0.16371247f;
      sa[542] = -0.0447248f;
      sa[543] = -0.33147344f;
      sa[544] = 0.15756987f;
      sa[545] = 0.12737651f;
      sa[546] = 0.08720791f;
      sa[547] = 0.2108355f;
      sa[548] = 0.07981775f;
      sa[549] = 0.17403196f;
      sa[550] = 0.025669366f;
      sa[551] = -0.16072068f;
      sa[552] = 0.057257436f;
      sa[553] = -0.044450592f;
      sa[554] = -0.15426242f;
      sa[555] = -0.14909309f;
      sa[556] = -0.18374033f;
      sa[557] = -0.23971699f;
      sa[558] = -0.24557072f;
      sa[559] = 0.21629593f;
      sa[560] = -0.33232787f;
      sa[561] = -0.109759055f;
      sa[562] = 0.20697106f;
      sa[563] = -0.07002799f;
      sa[564] = 0.35458958f;
      sa[565] = 0.08071018f;
      sa[566] = 0.27725843f;
      sa[567] = 0.05139479f;
      sa[568] = -0.075603426f;
      sa[569] = 0.030265084f;
      sa[570] = -0.012523721f;
      sa[571] = -0.06336756f;
      sa[572] = -0.16456454f;
      sa[573] = 0.07959489f;
      sa[574] = 0.29654992f;
      sa[575] = -0.23367468f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_03_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_03_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.3579127f;
      sa[1] = -0.026178868f;
      sa[2] = -0.16045125f;
      sa[3] = -0.2620768f;
      sa[4] = 0.05386572f;
      sa[5] = 0.0762711f;
      sa[6] = 0.29169524f;
      sa[7] = -0.14553446f;
      sa[8] = -0.25398377f;
      sa[9] = 0.15371507f;
      sa[10] = -0.06642539f;
      sa[11] = 0.12147302f;
      sa[12] = 0.07495695f;
      sa[13] = 0.048644833f;
      sa[14] = -0.28989235f;
      sa[15] = 0.33927053f;
      sa[16] = 0.44612995f;
      sa[17] = -0.10623099f;
      sa[18] = 0.021126205f;
      sa[19] = -0.114613965f;
      sa[20] = 0.32430726f;
      sa[21] = -0.00531499f;
      sa[22] = -0.2939321f;
      sa[23] = 0.23478754f;
      sa[24] = -0.37824592f;
      sa[25] = 0.096820585f;
      sa[26] = -0.07736015f;
      sa[27] = 0.40654096f;
      sa[28] = -0.36228007f;
      sa[29] = -0.10509808f;
      sa[30] = 0.13561365f;
      sa[31] = -0.18789601f;
      sa[32] = -0.31321368f;
      sa[33] = -0.3950225f;
      sa[34] = 0.027470829f;
      sa[35] = 0.3965571f;
      sa[36] = -0.094058424f;
      sa[37] = -0.02420158f;
      sa[38] = 0.029466832f;
      sa[39] = 0.26596257f;
      sa[40] = -0.21415235f;
      sa[41] = -0.37580687f;
      sa[42] = -0.27293772f;
      sa[43] = -0.36680266f;
      sa[44] = -0.010099304f;
      sa[45] = -0.3672377f;
      sa[46] = 0.346231f;
      sa[47] = 0.35580698f;
      sa[48] = -0.3899237f;
      sa[49] = -0.2766497f;
      sa[50] = 0.11564297f;
      sa[51] = -0.06717404f;
      sa[52] = 0.15744665f;
      sa[53] = 0.22162741f;
      sa[54] = -0.086163394f;
      sa[55] = 0.3617316f;
      sa[56] = -0.26308423f;
      sa[57] = -0.29612768f;
      sa[58] = 0.09976963f;
      sa[59] = -0.00402023f;
      sa[60] = 0.30458874f;
      sa[61] = -0.22392313f;
      sa[62] = -0.0702161f;
      sa[63] = 0.19810572f;
      sa[64] = 0.4068779f;
      sa[65] = -0.17486976f;
      sa[66] = 0.16452521f;
      sa[67] = 0.4198042f;
      sa[68] = 0.18992622f;
      sa[69] = -0.28040677f;
      sa[70] = -0.41448656f;
      sa[71] = -0.13522652f;
      sa[72] = -0.35229686f;
      sa[73] = 0.31035537f;
      sa[74] = 0.34690577f;
      sa[75] = -0.0077332836f;
      sa[76] = 0.25035086f;
      sa[77] = 0.13080512f;
      sa[78] = -0.33680478f;
      sa[79] = 0.27856135f;
      sa[80] = -0.2448894f;
      sa[81] = 0.07069509f;
      sa[82] = 0.21624231f;
      sa[83] = -0.14847685f;
      sa[84] = -0.44076315f;
      sa[85] = -0.33904728f;
      sa[86] = 0.07159229f;
      sa[87] = 0.37493622f;
      sa[88] = -0.38967156f;
      sa[89] = -0.12039273f;
      sa[90] = -0.25009924f;
      sa[91] = 0.40666527f;
      sa[92] = -0.12690964f;
      sa[93] = 0.05189598f;
      sa[94] = -0.41667697f;
      sa[95] = -0.059098914f;
      sa[96] = -0.2976191f;
      sa[97] = 0.048774164f;
      sa[98] = -0.010712477f;
      sa[99] = 0.10201112f;
      sa[100] = -0.3346847f;
      sa[101] = -0.10605796f;
      sa[102] = 0.3262074f;
      sa[103] = 0.05604219f;
      sa[104] = -0.054318298f;
      sa[105] = -0.17587794f;
      sa[106] = 0.38668808f;
      sa[107] = 0.3438002f;
      sa[108] = 0.18498674f;
      sa[109] = 0.028490687f;
      sa[110] = 0.22620423f;
      sa[111] = -0.18370824f;
      sa[112] = -0.33950278f;
      sa[113] = 0.030908465f;
      sa[114] = 0.05106303f;
      sa[115] = -0.07408296f;
      sa[116] = 0.28092325f;
      sa[117] = 0.016239611f;
      sa[118] = -0.3508759f;
      sa[119] = -0.19255829f;
      sa[120] = -0.06891999f;
      sa[121] = 0.30855516f;
      sa[122] = 0.022037184f;
      sa[123] = 0.11764683f;
      sa[124] = -0.24854381f;
      sa[125] = 0.15308659f;
      sa[126] = -0.24822915f;
      sa[127] = 0.14568052f;
      sa[128] = -0.26642415f;
      sa[129] = 0.19015041f;
      sa[130] = -0.086520754f;
      sa[131] = 0.25528365f;
      sa[132] = 0.08319706f;
      sa[133] = 0.14899607f;
      sa[134] = 0.21162395f;
      sa[135] = -0.304772f;
      sa[136] = 0.1582295f;
      sa[137] = -0.12830122f;
      sa[138] = 0.009937955f;
      sa[139] = 0.31432158f;
      sa[140] = -0.16151662f;
      sa[141] = -0.049852196f;
      sa[142] = 0.040505752f;
      sa[143] = -0.23865567f;
      sa[144] = 0.2261218f;
      sa[145] = -0.20965727f;
      sa[146] = 0.03338189f;
      sa[147] = -0.06471806f;
      sa[148] = -0.254f;
      sa[149] = 0.2918398f;
      sa[150] = -0.21992089f;
      sa[151] = -0.45023066f;
      sa[152] = 0.44332564f;
      sa[153] = -0.113766894f;
      sa[154] = 0.3949639f;
      sa[155] = -0.46052426f;
      sa[156] = -0.39043435f;
      sa[157] = -0.32000205f;
      sa[158] = -0.14364429f;
      sa[159] = -0.22048976f;
      sa[160] = 0.3190437f;
      sa[161] = -0.30802897f;
      sa[162] = 0.43118033f;
      sa[163] = -0.17921676f;
      sa[164] = 0.14160612f;
      sa[165] = -0.17036901f;
      sa[166] = 0.39267287f;
      sa[167] = -0.36368772f;
      sa[168] = 0.28961915f;
      sa[169] = -0.3707842f;
      sa[170] = 0.36252663f;
      sa[171] = 0.24852574f;
      sa[172] = 0.33877122f;
      sa[173] = 0.33086115f;
      sa[174] = -0.05917435f;
      sa[175] = -0.020548383f;
      sa[176] = -0.24728891f;
      sa[177] = 0.025082592f;
      sa[178] = -0.2999482f;
      sa[179] = -0.08792194f;
      sa[180] = -0.38709334f;
      sa[181] = -0.23744611f;
      sa[182] = 0.106794916f;
      sa[183] = -0.28124958f;
      sa[184] = 0.44092023f;
      sa[185] = 0.3516581f;
      sa[186] = -0.11576586f;
      sa[187] = -0.2697155f;
      sa[188] = -0.15780763f;
      sa[189] = -0.21821572f;
      sa[190] = -0.4157437f;
      sa[191] = -0.25570697f;
      sa[192] = -0.044011295f;
      sa[193] = 0.11275305f;
      sa[194] = -0.28964812f;
      sa[195] = -0.245761f;
      sa[196] = 0.14865837f;
      sa[197] = -0.22026555f;
      sa[198] = 0.0283001f;
      sa[199] = 0.38211998f;
      sa[200] = -0.032613687f;
      sa[201] = 0.25922257f;
      sa[202] = 0.16454192f;
      sa[203] = -0.40847814f;
      sa[204] = 0.148459f;
      sa[205] = 0.36646265f;
      sa[206] = -0.16374154f;
      sa[207] = 0.13832912f;
      sa[208] = -0.22176196f;
      sa[209] = 0.17415272f;
      sa[210] = -0.12579744f;
      sa[211] = -0.28143153f;
      sa[212] = -0.35173985f;
      sa[213] = 0.051892634f;
      sa[214] = -0.35515112f;
      sa[215] = -0.015840277f;
      sa[216] = 0.16546863f;
      sa[217] = 0.3348534f;
      sa[218] = 0.05139153f;
      sa[219] = 0.11989295f;
      sa[220] = 0.12716354f;
      sa[221] = -0.036161955f;
      sa[222] = -0.2557831f;
      sa[223] = -0.27008817f;
      sa[224] = 0.26898128f;
      sa[225] = 0.07540065f;
      sa[226] = -0.04491019f;
      sa[227] = 0.05645423f;
      sa[228] = -0.10164072f;
      sa[229] = -0.20804898f;
      sa[230] = -0.24601649f;
      sa[231] = -0.11443054f;
      sa[232] = 0.43833163f;
      sa[233] = -0.18233861f;
      sa[234] = -0.15244453f;
      sa[235] = 0.03168218f;
      sa[236] = -0.36130586f;
      sa[237] = 0.44089046f;
      sa[238] = 0.15838312f;
      sa[239] = -0.090774f;
      sa[240] = -0.07270846f;
      sa[241] = -0.38248014f;
      sa[242] = -0.23580149f;
      sa[243] = 0.35835674f;
      sa[244] = 0.22209188f;
      sa[245] = 0.28737995f;
      sa[246] = 0.21622942f;
      sa[247] = -0.37209007f;
      sa[248] = -0.22883189f;
      sa[249] = 0.0012666408f;
      sa[250] = 0.19527696f;
      sa[251] = 0.37497544f;
      sa[252] = 0.25273186f;
      sa[253] = -0.28523776f;
      sa[254] = 0.36541858f;
      sa[255] = 0.13625114f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_03_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_Tanh_03_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.18181373f;
      sa[1] = -1.5298005f;
      sa[2] = -1.5734038f;
      sa[3] = 1.3533118f;
      sa[4] = 0.44227928f;
      sa[5] = -0.18674687f;
      sa[6] = -1.6297672f;
      sa[7] = 1.5310537f;
      sa[8] = 1.8148156f;
      sa[9] = 0.24052653f;
      sa[10] = 1.6445574f;
      sa[11] = 1.4971428f;
      sa[12] = 1.8996267f;
      sa[13] = -0.5383331f;
      sa[14] = -1.9778965f;
      sa[15] = -0.66390276f;
      sa[16] = 0.7879519f;
      sa[17] = -0.7829306f;
      sa[18] = -1.5442144f;
      sa[19] = -0.88133174f;
      sa[20] = -1.9475906f;
      sa[21] = 0.3049138f;
      sa[22] = -1.9959441f;
      sa[23] = -0.60019493f;
      sa[24] = -0.5694225f;
      sa[25] = 1.8596325f;
      sa[26] = -0.31903583f;
      sa[27] = 1.2041379f;
      sa[28] = 1.2387985f;
      sa[29] = -0.73272425f;
      sa[30] = 0.12542382f;
      sa[31] = 0.09493983f;
      sa[32] = 0.4929137f;
      sa[33] = 0.29655308f;
      sa[34] = -0.6131337f;
      sa[35] = 1.0336221f;
      sa[36] = 0.6285367f;
      sa[37] = -1.3173245f;
      sa[38] = 0.57783854f;
      sa[39] = -0.25489944f;
      sa[40] = 0.20424977f;
      sa[41] = -0.7557798f;
      sa[42] = 0.5393406f;
      sa[43] = -0.06433456f;
      sa[44] = 1.015099f;
      sa[45] = -2.0367281f;
      sa[46] = -2.1257477f;
      sa[47] = 0.018783407f;
      sa[48] = 1.6154017f;
      sa[49] = -0.22364573f;
      sa[50] = -0.4738744f;
      sa[51] = 1.8125621f;
      sa[52] = -1.72341f;
      sa[53] = 0.9416549f;
      sa[54] = 1.8082556f;
      sa[55] = 1.0975826f;
      sa[56] = -0.5489359f;
      sa[57] = -0.06561981f;
      sa[58] = 1.0324918f;
      sa[59] = 0.86577386f;
      sa[60] = -1.3870968f;
      sa[61] = 0.9301664f;
      sa[62] = -0.35763165f;
      sa[63] = -0.830472f;
      sa[64] = 0.9200931f;
      sa[65] = -0.9436768f;
      sa[66] = -1.7854117f;
      sa[67] = -0.14674152f;
      sa[68] = 0.8906065f;
      sa[69] = -1.4061557f;
      sa[70] = -1.718734f;
      sa[71] = -0.028203353f;
      sa[72] = -1.0398897f;
      sa[73] = -1.2567264f;
      sa[74] = -1.0731505f;
      sa[75] = 1.2093462f;
      sa[76] = 1.8968312f;
      sa[77] = -0.67539114f;
      sa[78] = -1.3933734f;
      sa[79] = -0.3611065f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_03 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_03_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_03_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_03_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_Tanh_03_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


