/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:48:35.629+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_09

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_09 > h2o_nn_16x16x6_Tanh_09.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_09.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_09", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_09 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_09_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_09_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_09_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_09_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_09_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_09_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_09_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_09_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_09_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_09_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_09_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_09_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_09.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_09_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25961538461538464,0.11538461538461539,0.11538461538461539,0.125,0.25961538461538464,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_09() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-1894602315431775836L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_09_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_09_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_09_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_09_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_09_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_09_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_09_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_09_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_09_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_09_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_09_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_09_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_09_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_09_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_09_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_09_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.09635844126665263;
      sa[1] = 0.06206070480972656;
      sa[2] = 0.2531897743121457;
      sa[3] = -0.3666254350444096;
      sa[4] = 0.20431809914143473;
      sa[5] = 0.022531548517953026;
      sa[6] = -0.10369610538891719;
      sa[7] = -0.007356145662944002;
      sa[8] = -0.0674642627073174;
      sa[9] = 0.011874756192311882;
      sa[10] = 0.17264639479967184;
      sa[11] = -0.0787518713873639;
      sa[12] = 0.173044507608772;
      sa[13] = 0.15925440304275384;
      sa[14] = -0.10840431832089689;
      sa[15] = 0.050378457934450845;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_09_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_09_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_09_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.023114765393741972;
      sa[1] = 0.011660995533706463;
      sa[2] = -0.10766563911977417;
      sa[3] = 0.2271253746452824;
      sa[4] = -0.008712731222996362;
      sa[5] = -0.16676731854602309;
      sa[6] = -0.012174664248545639;
      sa[7] = 0.015365536544265973;
      sa[8] = -0.03148369465499807;
      sa[9] = -0.10811020491705467;
      sa[10] = 0.25288629874165364;
      sa[11] = 0.23882586484829177;
      sa[12] = 0.010158253803963757;
      sa[13] = -0.07704031990119771;
      sa[14] = -0.12140525766616418;
      sa[15] = -0.3030872881952411;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_09_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_09_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_09_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.08357217179769891;
      sa[1] = -0.0015767228331102358;
      sa[2] = -0.033705775078336185;
      sa[3] = -0.04306567396491105;
      sa[4] = 0.038987805445588955;
      sa[5] = -0.25106956287244986;
    }
  }
}
class h2o_nn_16x16x6_Tanh_09_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_09_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_09_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_09_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.03710461f;
      sa[1] = 0.2778089f;
      sa[2] = 0.36927405f;
      sa[3] = -0.11408478f;
      sa[4] = 0.06644326f;
      sa[5] = -0.17155525f;
      sa[6] = 0.15900931f;
      sa[7] = 0.6336924f;
      sa[8] = 0.05885652f;
      sa[9] = 0.057454005f;
      sa[10] = -0.31382188f;
      sa[11] = -0.24718034f;
      sa[12] = 0.246916f;
      sa[13] = -0.2602656f;
      sa[14] = 0.012300911f;
      sa[15] = 0.33355027f;
      sa[16] = 0.37920552f;
      sa[17] = 0.31894103f;
      sa[18] = -0.093781434f;
      sa[19] = -0.096315674f;
      sa[20] = 0.52262765f;
      sa[21] = 0.006073138f;
      sa[22] = 0.53701425f;
      sa[23] = 0.30633333f;
      sa[24] = 0.5676855f;
      sa[25] = 0.13976192f;
      sa[26] = -0.25895137f;
      sa[27] = 0.30054614f;
      sa[28] = 0.41447487f;
      sa[29] = -0.07797019f;
      sa[30] = -0.14325716f;
      sa[31] = 0.4927775f;
      sa[32] = 0.24338357f;
      sa[33] = -0.1887417f;
      sa[34] = -0.03069067f;
      sa[35] = -0.10049113f;
      sa[36] = 0.09629101f;
      sa[37] = 0.22862306f;
      sa[38] = -0.20176893f;
      sa[39] = 0.29439253f;
      sa[40] = 0.041391324f;
      sa[41] = -0.15926147f;
      sa[42] = -0.20570105f;
      sa[43] = -0.061258372f;
      sa[44] = 0.17966047f;
      sa[45] = -0.20973304f;
      sa[46] = 0.019723091f;
      sa[47] = -0.37442088f;
      sa[48] = 0.14922135f;
      sa[49] = 0.16626222f;
      sa[50] = 0.10564707f;
      sa[51] = -0.45609882f;
      sa[52] = -0.10445733f;
      sa[53] = 0.33889744f;
      sa[54] = 0.4264481f;
      sa[55] = 0.072157025f;
      sa[56] = -0.2715963f;
      sa[57] = -0.34816563f;
      sa[58] = 0.21159148f;
      sa[59] = -0.29269627f;
      sa[60] = -0.48429966f;
      sa[61] = 0.19499461f;
      sa[62] = 0.26848203f;
      sa[63] = 0.006693367f;
      sa[64] = 0.05796957f;
      sa[65] = 0.10559512f;
      sa[66] = -0.08294973f;
      sa[67] = 0.04108458f;
      sa[68] = -0.16523899f;
      sa[69] = 0.03072013f;
      sa[70] = 0.098962754f;
      sa[71] = 0.480848f;
      sa[72] = -0.10407916f;
      sa[73] = 0.14962597f;
      sa[74] = -0.15297747f;
      sa[75] = -0.043073192f;
      sa[76] = -0.21698104f;
      sa[77] = 0.0065248855f;
      sa[78] = -0.11882831f;
      sa[79] = 0.20798299f;
      sa[80] = -0.18872353f;
      sa[81] = -0.15228996f;
      sa[82] = 0.09338824f;
      sa[83] = 0.039340977f;
      sa[84] = 0.027336936f;
      sa[85] = -0.09019066f;
      sa[86] = 0.13735504f;
      sa[87] = 0.32425952f;
      sa[88] = 0.18486598f;
      sa[89] = 0.062164687f;
      sa[90] = -0.29988348f;
      sa[91] = 0.38630277f;
      sa[92] = 0.12940046f;
      sa[93] = -0.23883003f;
      sa[94] = -0.21152f;
      sa[95] = -0.2595305f;
      sa[96] = 0.18953851f;
      sa[97] = 0.0352065f;
      sa[98] = 0.12080921f;
      sa[99] = 0.044800244f;
      sa[100] = 0.05028446f;
      sa[101] = -0.11613882f;
      sa[102] = -0.12458888f;
      sa[103] = 0.03380796f;
      sa[104] = 0.1127013f;
      sa[105] = -0.12361801f;
      sa[106] = -0.39823863f;
      sa[107] = -0.011264045f;
      sa[108] = 0.1746806f;
      sa[109] = -0.1184424f;
      sa[110] = -0.24964935f;
      sa[111] = -0.011880001f;
      sa[112] = 0.013167177f;
      sa[113] = -0.027305719f;
      sa[114] = -0.17455864f;
      sa[115] = -0.01762395f;
      sa[116] = -0.2039439f;
      sa[117] = -0.05499559f;
      sa[118] = -0.31820545f;
      sa[119] = 0.09727487f;
      sa[120] = 0.3053608f;
      sa[121] = 0.31007302f;
      sa[122] = 0.42480993f;
      sa[123] = 0.40896413f;
      sa[124] = 0.30284828f;
      sa[125] = 0.21208784f;
      sa[126] = -0.33138883f;
      sa[127] = -0.36423063f;
      sa[128] = 0.10464609f;
      sa[129] = 0.14895491f;
      sa[130] = -0.06309645f;
      sa[131] = 0.40577662f;
      sa[132] = 0.2541042f;
      sa[133] = -0.29752445f;
      sa[134] = 0.099940784f;
      sa[135] = -0.19063203f;
      sa[136] = -0.31605536f;
      sa[137] = -0.14334774f;
      sa[138] = 0.04389285f;
      sa[139] = -0.08166077f;
      sa[140] = -0.12801388f;
      sa[141] = -0.09515662f;
      sa[142] = 0.1640701f;
      sa[143] = -0.33244374f;
      sa[144] = 0.36566314f;
      sa[145] = -0.22946008f;
      sa[146] = -0.40917554f;
      sa[147] = 0.20433542f;
      sa[148] = 0.11944571f;
      sa[149] = 0.22132276f;
      sa[150] = 0.29816088f;
      sa[151] = -0.3061593f;
      sa[152] = 0.12524617f;
      sa[153] = 0.116366625f;
      sa[154] = 0.23328961f;
      sa[155] = -0.06816262f;
      sa[156] = 0.17019127f;
      sa[157] = -0.1483313f;
      sa[158] = 0.11605567f;
      sa[159] = 0.12056875f;
      sa[160] = -0.09253385f;
      sa[161] = 0.054489464f;
      sa[162] = -0.18720956f;
      sa[163] = -0.18512964f;
      sa[164] = 0.23783807f;
      sa[165] = -0.083990216f;
      sa[166] = -0.07835289f;
      sa[167] = -0.16724326f;
      sa[168] = 0.07059082f;
      sa[169] = 0.29344386f;
      sa[170] = 0.08328046f;
      sa[171] = -0.08756459f;
      sa[172] = -0.0986125f;
      sa[173] = -0.22884849f;
      sa[174] = -0.036519565f;
      sa[175] = -0.34000114f;
      sa[176] = -0.017411752f;
      sa[177] = -0.028490191f;
      sa[178] = -0.0733106f;
      sa[179] = 0.07091045f;
      sa[180] = -0.15014869f;
      sa[181] = -0.3222662f;
      sa[182] = -0.10431701f;
      sa[183] = 0.25155434f;
      sa[184] = 0.29762974f;
      sa[185] = 0.17139567f;
      sa[186] = -0.40272567f;
      sa[187] = -0.0133263655f;
      sa[188] = -0.13898526f;
      sa[189] = 0.1948394f;
      sa[190] = 0.10328464f;
      sa[191] = -0.11035137f;
      sa[192] = -0.31107256f;
      sa[193] = 0.08813725f;
      sa[194] = -0.03118296f;
      sa[195] = 0.099912934f;
      sa[196] = 0.2114124f;
      sa[197] = -0.053891987f;
      sa[198] = 0.16523358f;
      sa[199] = -0.078465246f;
      sa[200] = -0.08137639f;
      sa[201] = -0.42873338f;
      sa[202] = 0.030303774f;
      sa[203] = -0.17897095f;
      sa[204] = -0.29341042f;
      sa[205] = 0.2489785f;
      sa[206] = 0.2855105f;
      sa[207] = 0.06490001f;
      sa[208] = -0.4088985f;
      sa[209] = -0.16064289f;
      sa[210] = -0.39199775f;
      sa[211] = -0.40637213f;
      sa[212] = 0.37035173f;
      sa[213] = -0.19316086f;
      sa[214] = -0.15185805f;
      sa[215] = -0.020055287f;
      sa[216] = 0.057944555f;
      sa[217] = 0.28456175f;
      sa[218] = -0.08813009f;
      sa[219] = 0.269137f;
      sa[220] = -0.27672905f;
      sa[221] = 0.08807983f;
      sa[222] = 0.25304538f;
      sa[223] = 0.070038624f;
      sa[224] = 0.1708992f;
      sa[225] = 0.15297104f;
      sa[226] = -0.19416556f;
      sa[227] = 0.6320766f;
      sa[228] = 0.16868995f;
      sa[229] = 0.16123398f;
      sa[230] = 0.31516144f;
      sa[231] = -0.21374118f;
      sa[232] = -0.3227039f;
      sa[233] = -0.100034796f;
      sa[234] = -0.06502829f;
      sa[235] = -0.32906488f;
      sa[236] = -0.039746385f;
      sa[237] = -0.28271616f;
      sa[238] = -0.21833168f;
      sa[239] = 0.12446406f;
      sa[240] = 0.07399073f;
      sa[241] = -0.2062612f;
      sa[242] = -0.294191f;
      sa[243] = -0.33707836f;
      sa[244] = -0.214145f;
      sa[245] = -0.17912474f;
      sa[246] = -0.24334022f;
      sa[247] = -0.09785457f;
      sa[248] = 0.29543713f;
      sa[249] = 0.32991123f;
      sa[250] = -0.35874325f;
      sa[251] = -0.24010058f;
      sa[252] = -0.1887095f;
      sa[253] = -0.30842927f;
      sa[254] = -0.43393755f;
      sa[255] = 0.13310026f;
      sa[256] = -0.28364214f;
      sa[257] = 0.26229793f;
      sa[258] = -0.28297994f;
      sa[259] = -0.1514649f;
      sa[260] = -0.14551602f;
      sa[261] = -0.18510155f;
      sa[262] = -0.1915502f;
      sa[263] = 0.35932937f;
      sa[264] = -0.14499319f;
      sa[265] = 0.094074845f;
      sa[266] = -0.25193673f;
      sa[267] = -0.19390471f;
      sa[268] = 0.10910343f;
      sa[269] = -0.2589883f;
      sa[270] = 0.04341769f;
      sa[271] = 0.03849441f;
      sa[272] = -0.111157015f;
      sa[273] = -0.17441109f;
      sa[274] = 0.15776901f;
      sa[275] = -0.024569845f;
      sa[276] = -0.0048843855f;
      sa[277] = -0.24062167f;
      sa[278] = -0.07613994f;
      sa[279] = 0.22557387f;
      sa[280] = -0.23475443f;
      sa[281] = 0.21357039f;
      sa[282] = -0.1809414f;
      sa[283] = -0.104481064f;
      sa[284] = -0.11556521f;
      sa[285] = -0.30133945f;
      sa[286] = 0.47259876f;
      sa[287] = 0.2844747f;
      sa[288] = -0.33824965f;
      sa[289] = -0.17147163f;
      sa[290] = 0.002682175f;
      sa[291] = 0.14387137f;
      sa[292] = 0.24893352f;
      sa[293] = -0.12931168f;
      sa[294] = 0.10765753f;
      sa[295] = 0.10198248f;
      sa[296] = 0.09475198f;
      sa[297] = 0.35710865f;
      sa[298] = -0.016006902f;
      sa[299] = -0.24107897f;
      sa[300] = -0.062202573f;
      sa[301] = -0.18480948f;
      sa[302] = 0.12857144f;
      sa[303] = -0.08726753f;
      sa[304] = -0.16137563f;
      sa[305] = 0.10917246f;
      sa[306] = 0.34846628f;
      sa[307] = -0.13709159f;
      sa[308] = 0.10007146f;
      sa[309] = 0.22794175f;
      sa[310] = 0.2803921f;
      sa[311] = 0.33996537f;
      sa[312] = -0.14326599f;
      sa[313] = -0.16856946f;
      sa[314] = -0.10509066f;
      sa[315] = -0.045057666f;
      sa[316] = -0.028452566f;
      sa[317] = -0.035374854f;
      sa[318] = 0.06813459f;
      sa[319] = 0.28627953f;
      sa[320] = 0.04171273f;
      sa[321] = 0.25714746f;
      sa[322] = 0.1527143f;
      sa[323] = -0.20023632f;
      sa[324] = 0.010021183f;
      sa[325] = 0.2885333f;
      sa[326] = -0.43202496f;
      sa[327] = -0.0856942f;
      sa[328] = -0.106191546f;
      sa[329] = 0.19846733f;
      sa[330] = -0.24704564f;
      sa[331] = -0.047262948f;
      sa[332] = -0.3060245f;
      sa[333] = 0.14779161f;
      sa[334] = -0.16381952f;
      sa[335] = 0.17009154f;
      sa[336] = -0.19598952f;
      sa[337] = -0.22545838f;
      sa[338] = 0.25926176f;
      sa[339] = -0.27404898f;
      sa[340] = -0.36716756f;
      sa[341] = -0.274743f;
      sa[342] = 0.35827133f;
      sa[343] = -0.18635418f;
      sa[344] = -0.20743473f;
      sa[345] = 0.19039777f;
      sa[346] = 0.18058738f;
      sa[347] = -0.1895197f;
      sa[348] = 0.22275431f;
      sa[349] = -0.32943586f;
      sa[350] = -0.116708644f;
      sa[351] = 0.35872224f;
      sa[352] = 0.18920316f;
      sa[353] = -0.06936508f;
      sa[354] = 0.024251368f;
      sa[355] = 0.14420395f;
      sa[356] = -0.22960685f;
      sa[357] = 0.21444121f;
      sa[358] = -0.18240638f;
      sa[359] = 0.18396641f;
      sa[360] = 0.055385854f;
      sa[361] = -0.1520901f;
      sa[362] = -0.23521693f;
      sa[363] = 0.26202998f;
      sa[364] = -0.2537155f;
      sa[365] = -0.23739477f;
      sa[366] = -0.0775533f;
      sa[367] = -0.36073965f;
      sa[368] = -0.1973875f;
      sa[369] = 0.09155065f;
      sa[370] = -0.176944f;
      sa[371] = 0.28520042f;
      sa[372] = -0.09238641f;
      sa[373] = 0.30603448f;
      sa[374] = -0.20373578f;
      sa[375] = -0.32301837f;
      sa[376] = -0.60713065f;
      sa[377] = -0.4483348f;
      sa[378] = 0.2823432f;
      sa[379] = -0.02227461f;
      sa[380] = -0.3020082f;
      sa[381] = -0.3224927f;
      sa[382] = -0.12086447f;
      sa[383] = -0.25907615f;
      sa[384] = -0.29654992f;
      sa[385] = 0.109632455f;
      sa[386] = -0.18328752f;
      sa[387] = -0.17487589f;
      sa[388] = -0.026980756f;
      sa[389] = -0.14440332f;
      sa[390] = -0.074907616f;
      sa[391] = -0.22001502f;
      sa[392] = 0.38085133f;
      sa[393] = 0.38713112f;
      sa[394] = -0.16325244f;
      sa[395] = 0.22624575f;
      sa[396] = 0.35876793f;
      sa[397] = -0.20271063f;
      sa[398] = 0.1521083f;
      sa[399] = 0.07594612f;
      sa[400] = 0.08154736f;
      sa[401] = 0.28893986f;
      sa[402] = -0.19114126f;
      sa[403] = 0.060149748f;
      sa[404] = 0.34093416f;
      sa[405] = -0.31715077f;
      sa[406] = -0.030368442f;
      sa[407] = 0.40238145f;
      sa[408] = -0.19522867f;
      sa[409] = -0.15763676f;
      sa[410] = -0.08293462f;
      sa[411] = 0.30392218f;
      sa[412] = -0.113978f;
      sa[413] = 0.057761233f;
      sa[414] = -0.13365479f;
      sa[415] = 0.43075278f;
      sa[416] = -0.22092561f;
      sa[417] = -0.06310056f;
      sa[418] = -0.003062145f;
      sa[419] = 0.21164215f;
      sa[420] = 0.27049926f;
      sa[421] = 0.29397932f;
      sa[422] = 0.06642309f;
      sa[423] = -0.15818822f;
      sa[424] = 0.12692899f;
      sa[425] = -0.13395178f;
      sa[426] = -0.26252264f;
      sa[427] = 0.17199105f;
      sa[428] = -0.06357038f;
      sa[429] = -0.14969286f;
      sa[430] = 0.1255883f;
      sa[431] = -0.10940131f;
      sa[432] = 0.06540472f;
      sa[433] = 0.11921499f;
      sa[434] = 0.16650335f;
      sa[435] = -0.08529879f;
      sa[436] = -0.39136174f;
      sa[437] = -0.22370663f;
      sa[438] = -0.012108555f;
      sa[439] = 0.00442363f;
      sa[440] = 0.47333258f;
      sa[441] = -0.51365346f;
      sa[442] = 0.09235769f;
      sa[443] = 0.2322571f;
      sa[444] = -0.17197987f;
      sa[445] = 0.21639156f;
      sa[446] = 0.30487573f;
      sa[447] = 0.19249107f;
      sa[448] = 0.12974645f;
      sa[449] = 0.096160844f;
      sa[450] = -0.22169223f;
      sa[451] = 0.06921479f;
      sa[452] = 0.197746f;
      sa[453] = -0.098824255f;
      sa[454] = -0.15012841f;
      sa[455] = -0.0794327f;
      sa[456] = -0.13388698f;
      sa[457] = 0.07106447f;
      sa[458] = -0.27750808f;
      sa[459] = 0.32581323f;
      sa[460] = 0.26675412f;
      sa[461] = 0.27347222f;
      sa[462] = 0.122945085f;
      sa[463] = 0.2624209f;
      sa[464] = -0.3462934f;
      sa[465] = 0.18326098f;
      sa[466] = -0.014540845f;
      sa[467] = 0.11027692f;
      sa[468] = 0.05388923f;
      sa[469] = 0.1857747f;
      sa[470] = 0.11063421f;
      sa[471] = 7.054619E-5f;
      sa[472] = 0.113389f;
      sa[473] = -0.15178296f;
      sa[474] = -0.05994386f;
      sa[475] = 0.1350476f;
      sa[476] = 0.14192049f;
      sa[477] = 0.04745777f;
      sa[478] = 0.15073295f;
      sa[479] = -0.49181333f;
      sa[480] = -0.3729982f;
      sa[481] = -0.35653776f;
      sa[482] = -0.3751321f;
      sa[483] = 0.15150742f;
      sa[484] = 0.27320853f;
      sa[485] = 0.3903239f;
      sa[486] = 0.104111254f;
      sa[487] = -0.12253067f;
      sa[488] = -0.18130001f;
      sa[489] = 0.2079066f;
      sa[490] = -0.028101748f;
      sa[491] = -0.15900871f;
      sa[492] = 0.1993959f;
      sa[493] = 0.22464001f;
      sa[494] = -0.10597242f;
      sa[495] = 0.42593044f;
      sa[496] = 0.06097601f;
      sa[497] = 0.23192589f;
      sa[498] = 0.23488152f;
      sa[499] = 0.3232485f;
      sa[500] = 0.10122766f;
      sa[501] = 0.15774184f;
      sa[502] = 0.1977741f;
      sa[503] = 0.0847108f;
      sa[504] = -0.20567913f;
      sa[505] = -0.1256558f;
      sa[506] = 0.34947565f;
      sa[507] = -0.081176795f;
      sa[508] = 0.24324751f;
      sa[509] = 0.28778496f;
      sa[510] = 0.32829365f;
      sa[511] = 0.15305674f;
      sa[512] = 0.08610014f;
      sa[513] = -0.040233288f;
      sa[514] = 0.21317959f;
      sa[515] = -0.037175637f;
      sa[516] = 0.16036735f;
      sa[517] = 0.20938693f;
      sa[518] = 0.33448642f;
      sa[519] = 0.07642771f;
      sa[520] = 0.37604022f;
      sa[521] = 0.14409684f;
      sa[522] = 0.035192017f;
      sa[523] = 0.070917085f;
      sa[524] = 0.34481233f;
      sa[525] = 0.3185249f;
      sa[526] = 0.17604852f;
      sa[527] = 0.094844036f;
      sa[528] = 0.16448624f;
      sa[529] = 0.13195232f;
      sa[530] = -0.32080576f;
      sa[531] = -0.14506374f;
      sa[532] = 0.29628667f;
      sa[533] = 0.23760228f;
      sa[534] = 0.21781719f;
      sa[535] = -0.010370721f;
      sa[536] = 0.10527967f;
      sa[537] = -0.06544817f;
      sa[538] = 0.09258754f;
      sa[539] = 0.18408467f;
      sa[540] = -0.2009251f;
      sa[541] = -0.23565763f;
      sa[542] = -0.31360957f;
      sa[543] = -0.51621217f;
      sa[544] = 0.0775276f;
      sa[545] = 0.04495082f;
      sa[546] = -0.02486663f;
      sa[547] = 0.13127226f;
      sa[548] = 0.10735966f;
      sa[549] = 0.17513518f;
      sa[550] = -0.020110138f;
      sa[551] = -0.22334747f;
      sa[552] = -0.004497144f;
      sa[553] = -0.11275155f;
      sa[554] = -0.24888596f;
      sa[555] = -0.2143857f;
      sa[556] = -0.29872108f;
      sa[557] = -0.26352334f;
      sa[558] = -0.13160829f;
      sa[559] = 0.11668188f;
      sa[560] = -0.39972383f;
      sa[561] = -0.18373847f;
      sa[562] = 0.12772684f;
      sa[563] = -0.13924396f;
      sa[564] = 0.14388771f;
      sa[565] = 0.025023624f;
      sa[566] = 0.44215724f;
      sa[567] = 0.36406556f;
      sa[568] = -0.14361373f;
      sa[569] = -0.03925431f;
      sa[570] = -0.09831662f;
      sa[571] = -0.06193466f;
      sa[572] = -0.15325877f;
      sa[573] = 0.07530972f;
      sa[574] = 0.36773524f;
      sa[575] = -0.1418225f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_09_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_09_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_09_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.40606982f;
      sa[1] = 0.109964095f;
      sa[2] = -0.3370597f;
      sa[3] = 0.0025110252f;
      sa[4] = 0.16894403f;
      sa[5] = -0.16924757f;
      sa[6] = -0.008879069f;
      sa[7] = 0.091800265f;
      sa[8] = -0.35452387f;
      sa[9] = -0.049355295f;
      sa[10] = -0.3167772f;
      sa[11] = 0.3772578f;
      sa[12] = 0.2447605f;
      sa[13] = 0.08081103f;
      sa[14] = -0.102403596f;
      sa[15] = 0.38612974f;
      sa[16] = 0.4303226f;
      sa[17] = -0.34149605f;
      sa[18] = 0.00753925f;
      sa[19] = 0.04847169f;
      sa[20] = 0.42312315f;
      sa[21] = -0.29022112f;
      sa[22] = -0.07006727f;
      sa[23] = 0.15243438f;
      sa[24] = -0.41899532f;
      sa[25] = 0.21429731f;
      sa[26] = -0.17691006f;
      sa[27] = 0.48803365f;
      sa[28] = -0.16494578f;
      sa[29] = -0.23789912f;
      sa[30] = -0.0130633805f;
      sa[31] = -0.35702366f;
      sa[32] = -0.12116339f;
      sa[33] = -0.6623951f;
      sa[34] = 0.13672863f;
      sa[35] = 0.44048694f;
      sa[36] = -0.07205229f;
      sa[37] = -0.35223624f;
      sa[38] = 0.1244631f;
      sa[39] = 7.820696E-4f;
      sa[40] = -0.27910972f;
      sa[41] = -0.32883623f;
      sa[42] = -0.52107584f;
      sa[43] = -0.40679297f;
      sa[44] = 0.28082487f;
      sa[45] = -0.29192877f;
      sa[46] = 0.32665613f;
      sa[47] = 0.28135777f;
      sa[48] = -0.5425947f;
      sa[49] = -0.18586743f;
      sa[50] = 0.11727268f;
      sa[51] = -0.12321125f;
      sa[52] = 0.3473299f;
      sa[53] = 0.24013488f;
      sa[54] = -0.023865255f;
      sa[55] = 0.3647841f;
      sa[56] = -0.50489783f;
      sa[57] = -0.40092984f;
      sa[58] = 0.19121172f;
      sa[59] = 0.1927133f;
      sa[60] = 0.40276295f;
      sa[61] = -0.30307674f;
      sa[62] = -0.2822968f;
      sa[63] = 0.22449794f;
      sa[64] = 0.28098723f;
      sa[65] = -0.10339464f;
      sa[66] = 0.14385575f;
      sa[67] = 0.34122705f;
      sa[68] = 0.16181117f;
      sa[69] = -0.092953786f;
      sa[70] = -0.42344153f;
      sa[71] = -0.057851724f;
      sa[72] = -0.31432608f;
      sa[73] = 0.51287895f;
      sa[74] = 0.5009597f;
      sa[75] = -0.06023867f;
      sa[76] = 0.2342401f;
      sa[77] = 0.1289361f;
      sa[78] = -0.49189508f;
      sa[79] = 0.46303686f;
      sa[80] = 0.005691259f;
      sa[81] = 0.0011085354f;
      sa[82] = 0.34314534f;
      sa[83] = -0.21753542f;
      sa[84] = -0.47874358f;
      sa[85] = -0.37748f;
      sa[86] = -0.008054847f;
      sa[87] = 0.2586951f;
      sa[88] = -0.49397698f;
      sa[89] = -0.32344216f;
      sa[90] = -0.48901948f;
      sa[91] = 0.3595997f;
      sa[92] = -0.030990187f;
      sa[93] = 0.26617748f;
      sa[94] = -0.18730098f;
      sa[95] = -0.089297876f;
      sa[96] = -0.25776637f;
      sa[97] = -0.08933227f;
      sa[98] = 0.014901121f;
      sa[99] = 0.20103323f;
      sa[100] = -0.22081882f;
      sa[101] = -0.3738134f;
      sa[102] = 0.39662862f;
      sa[103] = 0.030417515f;
      sa[104] = -0.22895515f;
      sa[105] = -0.21628697f;
      sa[106] = 0.18209802f;
      sa[107] = 0.49404323f;
      sa[108] = 0.70318216f;
      sa[109] = -0.06425227f;
      sa[110] = 0.09466078f;
      sa[111] = -0.28204826f;
      sa[112] = -0.35342765f;
      sa[113] = 0.3218668f;
      sa[114] = 0.12139088f;
      sa[115] = -0.34797353f;
      sa[116] = 0.38686365f;
      sa[117] = 0.22823f;
      sa[118] = -0.545695f;
      sa[119] = -0.10775803f;
      sa[120] = -0.18100461f;
      sa[121] = 0.14135323f;
      sa[122] = 0.04943264f;
      sa[123] = 0.17350465f;
      sa[124] = -0.20995589f;
      sa[125] = 0.275738f;
      sa[126] = -0.26976064f;
      sa[127] = 0.2872919f;
      sa[128] = -0.283015f;
      sa[129] = 0.115590625f;
      sa[130] = 0.03620456f;
      sa[131] = -0.020439712f;
      sa[132] = 0.02754135f;
      sa[133] = 0.26910672f;
      sa[134] = 0.486166f;
      sa[135] = -0.49448812f;
      sa[136] = 0.10279018f;
      sa[137] = -0.07547434f;
      sa[138] = 0.20883794f;
      sa[139] = 0.2437899f;
      sa[140] = -0.19974703f;
      sa[141] = -0.056469202f;
      sa[142] = -0.11342125f;
      sa[143] = -0.28531438f;
      sa[144] = 0.36133614f;
      sa[145] = -0.33949903f;
      sa[146] = 0.089382395f;
      sa[147] = -0.11499332f;
      sa[148] = -0.29012007f;
      sa[149] = 0.3295927f;
      sa[150] = -0.19725214f;
      sa[151] = -0.5422135f;
      sa[152] = 0.42285556f;
      sa[153] = -0.23786052f;
      sa[154] = 0.37061787f;
      sa[155] = -0.48864433f;
      sa[156] = -0.4310512f;
      sa[157] = -0.258388f;
      sa[158] = 0.062322155f;
      sa[159] = -0.32026038f;
      sa[160] = 0.3726063f;
      sa[161] = -0.39965916f;
      sa[162] = 0.5128356f;
      sa[163] = -0.38072926f;
      sa[164] = 0.24259408f;
      sa[165] = -0.12401199f;
      sa[166] = 0.56092167f;
      sa[167] = -0.66418284f;
      sa[168] = 0.2535991f;
      sa[169] = -0.3726495f;
      sa[170] = 0.43684685f;
      sa[171] = 0.21904644f;
      sa[172] = 0.3898572f;
      sa[173] = 0.33336672f;
      sa[174] = -0.10329676f;
      sa[175] = -0.04322124f;
      sa[176] = -0.4194183f;
      sa[177] = 0.31245688f;
      sa[178] = -0.4104751f;
      sa[179] = -0.1251931f;
      sa[180] = -0.29006135f;
      sa[181] = -0.03431562f;
      sa[182] = -0.050040983f;
      sa[183] = -0.11548834f;
      sa[184] = 0.45298326f;
      sa[185] = 0.2576543f;
      sa[186] = 0.201272f;
      sa[187] = -0.2172093f;
      sa[188] = -0.3721313f;
      sa[189] = -0.24436523f;
      sa[190] = -0.37338853f;
      sa[191] = -0.17700483f;
      sa[192] = -0.24462397f;
      sa[193] = 0.19145362f;
      sa[194] = -0.32078645f;
      sa[195] = -0.4252317f;
      sa[196] = 0.10035794f;
      sa[197] = 0.120716944f;
      sa[198] = 0.044300634f;
      sa[199] = 0.4166116f;
      sa[200] = 0.0995981f;
      sa[201] = 0.4136406f;
      sa[202] = 0.39843926f;
      sa[203] = -0.5117441f;
      sa[204] = -0.08304713f;
      sa[205] = 0.363414f;
      sa[206] = -0.24432424f;
      sa[207] = 0.2370619f;
      sa[208] = 0.025804926f;
      sa[209] = 0.3096957f;
      sa[210] = -0.060636967f;
      sa[211] = -0.33296305f;
      sa[212] = -0.29782662f;
      sa[213] = 0.070435464f;
      sa[214] = -0.5773068f;
      sa[215] = 0.052864447f;
      sa[216] = 0.06302297f;
      sa[217] = 0.14713223f;
      sa[218] = -0.17808829f;
      sa[219] = 0.08980073f;
      sa[220] = 0.3009719f;
      sa[221] = 0.2618436f;
      sa[222] = -0.08637567f;
      sa[223] = -0.11094376f;
      sa[224] = 0.50728166f;
      sa[225] = -0.017892208f;
      sa[226] = 0.0084296465f;
      sa[227] = 0.075547844f;
      sa[228] = -0.14249578f;
      sa[229] = -0.22802593f;
      sa[230] = -0.28406364f;
      sa[231] = -0.2151775f;
      sa[232] = 0.44623616f;
      sa[233] = -0.28411332f;
      sa[234] = -0.30406162f;
      sa[235] = -0.058246743f;
      sa[236] = -0.37197807f;
      sa[237] = 0.5425662f;
      sa[238] = 0.36769933f;
      sa[239] = -0.17890427f;
      sa[240] = 0.14302772f;
      sa[241] = -0.78981304f;
      sa[242] = -0.11741564f;
      sa[243] = 0.5001589f;
      sa[244] = -0.07958408f;
      sa[245] = 0.092109025f;
      sa[246] = 0.43611887f;
      sa[247] = -0.58683914f;
      sa[248] = -0.16293001f;
      sa[249] = 0.2249143f;
      sa[250] = 0.16250949f;
      sa[251] = 0.25317892f;
      sa[252] = 0.23112886f;
      sa[253] = -0.306343f;
      sa[254] = 0.41907224f;
      sa[255] = -0.04478386f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_09_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_Tanh_09_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_09_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.100057915f;
      sa[1] = -1.5996848f;
      sa[2] = -1.7080585f;
      sa[3] = 1.3684843f;
      sa[4] = 0.4048549f;
      sa[5] = -0.1983484f;
      sa[6] = -1.6893077f;
      sa[7] = 1.6783385f;
      sa[8] = 1.7971172f;
      sa[9] = 0.2866765f;
      sa[10] = 1.666888f;
      sa[11] = 1.446347f;
      sa[12] = 2.0235045f;
      sa[13] = -0.55497646f;
      sa[14] = -2.009363f;
      sa[15] = -0.7777932f;
      sa[16] = 0.68585926f;
      sa[17] = -0.7321685f;
      sa[18] = -1.4314729f;
      sa[19] = -1.079182f;
      sa[20] = -2.0004005f;
      sa[21] = 0.22078802f;
      sa[22] = -1.9149636f;
      sa[23] = -0.8835597f;
      sa[24] = -0.5122011f;
      sa[25] = 1.9823965f;
      sa[26] = -0.25490582f;
      sa[27] = 1.181717f;
      sa[28] = 0.9766288f;
      sa[29] = -0.82210964f;
      sa[30] = 0.3290608f;
      sa[31] = 0.25314584f;
      sa[32] = 0.56248295f;
      sa[33] = 0.29265907f;
      sa[34] = -0.51780176f;
      sa[35] = 1.003956f;
      sa[36] = 0.60646945f;
      sa[37] = -1.3405324f;
      sa[38] = 0.9218677f;
      sa[39] = -0.5442402f;
      sa[40] = 0.35601917f;
      sa[41] = -0.5843389f;
      sa[42] = 0.8466331f;
      sa[43] = 0.013719402f;
      sa[44] = 0.9657051f;
      sa[45] = -2.2316544f;
      sa[46] = -2.388879f;
      sa[47] = 0.567074f;
      sa[48] = 1.6985724f;
      sa[49] = 0.018490242f;
      sa[50] = -0.3243888f;
      sa[51] = 1.9886063f;
      sa[52] = -1.6026659f;
      sa[53] = 1.1982281f;
      sa[54] = 1.7915156f;
      sa[55] = 1.2017268f;
      sa[56] = -0.643503f;
      sa[57] = -0.32306504f;
      sa[58] = 0.9732282f;
      sa[59] = 0.56160307f;
      sa[60] = -1.5001687f;
      sa[61] = 1.0074177f;
      sa[62] = -0.2536182f;
      sa[63] = -0.92022043f;
      sa[64] = 0.9230001f;
      sa[65] = -1.0130196f;
      sa[66] = -1.8612175f;
      sa[67] = 0.075720355f;
      sa[68] = 0.9639683f;
      sa[69] = -1.3237615f;
      sa[70] = -1.8439794f;
      sa[71] = 0.4019366f;
      sa[72] = -1.14676f;
      sa[73] = -1.5368725f;
      sa[74] = -1.4519541f;
      sa[75] = 1.2951771f;
      sa[76] = 2.0963223f;
      sa[77] = -0.2933578f;
      sa[78] = -1.4313757f;
      sa[79] = -0.7184222f;
      sa[80] = 0.72356635f;
      sa[81] = -1.5794245f;
      sa[82] = -0.09786319f;
      sa[83] = -1.6333276f;
      sa[84] = 1.7201433f;
      sa[85] = 1.1015899f;
      sa[86] = -2.002986f;
      sa[87] = 0.906852f;
      sa[88] = -1.675119f;
      sa[89] = -0.7901116f;
      sa[90] = 0.4390806f;
      sa[91] = 0.06420751f;
      sa[92] = 1.3668277f;
      sa[93] = 1.9299098f;
      sa[94] = 1.7541926f;
      sa[95] = 0.69911027f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_09 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_09_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_09_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_09_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_Tanh_09_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_09_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


