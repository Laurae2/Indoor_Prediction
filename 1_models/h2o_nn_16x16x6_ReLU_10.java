/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:48:51.774+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_10

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_10 > h2o_nn_16x16x6_ReLU_10.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_10.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_10", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_10 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_10_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_10_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_10_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_10_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_10_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_10_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_10_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_10_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_10_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_10_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_10_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_10_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_10.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_10_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.24761904761904763,0.18571428571428572,0.06190476190476191,0.12857142857142856,0.24761904761904763,0.12857142857142856};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_10() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(2593581060363857664L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_10_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_10_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_10_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_10_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_10_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_10_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_10_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_10_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_10_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_10_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_10_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.870080911629729;
      sa[1] = 0.5690859876572899;
      sa[2] = 0.5390359113613171;
      sa[3] = 0.06021764560704865;
      sa[4] = 0.3770224844345073;
      sa[5] = 0.48378341142667225;
      sa[6] = 0.49622337690214985;
      sa[7] = 0.5700389060000388;
      sa[8] = 0.3797386257458924;
      sa[9] = 0.5133755884035782;
      sa[10] = 0.43120224381866545;
      sa[11] = 0.25573413691698943;
      sa[12] = 0.18428163720845608;
      sa[13] = 0.4475512399176174;
      sa[14] = 0.6005239732954138;
      sa[15] = 0.45652073153478473;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_10_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_10_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.1668029273398561;
      sa[1] = 1.1952236888737844;
      sa[2] = 0.9368414270400656;
      sa[3] = 0.9792825616826504;
      sa[4] = 0.9114386133148684;
      sa[5] = 1.0681454020049754;
      sa[6] = 0.9469978424242554;
      sa[7] = 0.9148464796789411;
      sa[8] = 0.9058277658958683;
      sa[9] = 1.1235256467578214;
      sa[10] = 0.9598406272632481;
      sa[11] = 1.1644443153889703;
      sa[12] = 1.083108502049578;
      sa[13] = 0.9018061806013207;
      sa[14] = 0.9419286479944357;
      sa[15] = 0.8762831836061842;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_10_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_10_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.11174640007601595;
      sa[1] = 0.024565865788138658;
      sa[2] = -0.1535588683821648;
      sa[3] = -0.05416020581657765;
      sa[4] = 0.06873595388168356;
      sa[5] = -0.15416476400563145;
    }
  }
}
class h2o_nn_16x16x6_ReLU_10_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_10_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_10_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.12355219f;
      sa[1] = 0.43207732f;
      sa[2] = 0.022137605f;
      sa[3] = 0.18291654f;
      sa[4] = -0.21355304f;
      sa[5] = -0.11241253f;
      sa[6] = 0.09890339f;
      sa[7] = 0.5581851f;
      sa[8] = 0.06379821f;
      sa[9] = -0.052125823f;
      sa[10] = -0.12613714f;
      sa[11] = -0.19316633f;
      sa[12] = 0.039045777f;
      sa[13] = -0.2858149f;
      sa[14] = -0.11392817f;
      sa[15] = 0.2972281f;
      sa[16] = 0.29229364f;
      sa[17] = 0.43829954f;
      sa[18] = -0.06269703f;
      sa[19] = -0.28520608f;
      sa[20] = 0.19056673f;
      sa[21] = -0.495521f;
      sa[22] = 0.28727716f;
      sa[23] = 0.10474803f;
      sa[24] = 0.13936919f;
      sa[25] = 0.23390281f;
      sa[26] = -0.27135935f;
      sa[27] = 0.29299772f;
      sa[28] = 0.04889455f;
      sa[29] = -0.50816244f;
      sa[30] = -0.29380593f;
      sa[31] = 0.40356797f;
      sa[32] = 0.06394874f;
      sa[33] = -0.28500688f;
      sa[34] = 0.099446915f;
      sa[35] = -0.04719553f;
      sa[36] = 0.33967263f;
      sa[37] = 0.2599248f;
      sa[38] = -0.25272736f;
      sa[39] = 0.2318689f;
      sa[40] = 0.04648874f;
      sa[41] = -0.06853253f;
      sa[42] = -0.12698324f;
      sa[43] = 0.13478959f;
      sa[44] = 0.3455674f;
      sa[45] = -0.50374836f;
      sa[46] = -0.09531763f;
      sa[47] = -0.29005015f;
      sa[48] = 0.20570564f;
      sa[49] = 0.2582056f;
      sa[50] = 0.26132628f;
      sa[51] = -0.19958651f;
      sa[52] = -0.03212627f;
      sa[53] = 0.23518635f;
      sa[54] = 0.15910652f;
      sa[55] = -0.20143564f;
      sa[56] = -0.17387603f;
      sa[57] = -0.2772452f;
      sa[58] = 0.29713535f;
      sa[59] = 0.06687426f;
      sa[60] = -0.50120187f;
      sa[61] = 0.24950373f;
      sa[62] = 0.13185613f;
      sa[63] = -0.39187062f;
      sa[64] = 0.10395024f;
      sa[65] = 0.16122268f;
      sa[66] = -0.050796993f;
      sa[67] = 0.2384239f;
      sa[68] = -0.12553617f;
      sa[69] = -0.47610477f;
      sa[70] = -0.0712956f;
      sa[71] = 0.33054549f;
      sa[72] = -0.22991207f;
      sa[73] = 0.31843117f;
      sa[74] = -0.22647406f;
      sa[75] = 0.12757234f;
      sa[76] = -0.2574388f;
      sa[77] = -0.04669499f;
      sa[78] = -0.07215192f;
      sa[79] = 0.076182716f;
      sa[80] = -0.11114677f;
      sa[81] = -0.029421119f;
      sa[82] = -0.012116278f;
      sa[83] = 0.09081903f;
      sa[84] = -0.021096284f;
      sa[85] = -0.13665488f;
      sa[86] = 0.18344155f;
      sa[87] = 0.17600624f;
      sa[88] = 0.31992862f;
      sa[89] = 0.14374544f;
      sa[90] = -0.10267449f;
      sa[91] = 0.30348778f;
      sa[92] = 0.071040094f;
      sa[93] = -0.30515754f;
      sa[94] = -0.22530642f;
      sa[95] = -0.48494494f;
      sa[96] = 0.14314905f;
      sa[97] = 0.06483855f;
      sa[98] = 0.22427557f;
      sa[99] = -0.026171466f;
      sa[100] = -0.06285462f;
      sa[101] = -0.24916463f;
      sa[102] = -0.24783832f;
      sa[103] = -0.19017258f;
      sa[104] = 0.024407681f;
      sa[105] = -0.22108024f;
      sa[106] = -0.20602039f;
      sa[107] = 0.18982518f;
      sa[108] = 0.26205218f;
      sa[109] = -0.17652635f;
      sa[110] = 0.013208767f;
      sa[111] = 0.37611848f;
      sa[112] = 0.10872501f;
      sa[113] = 0.06804148f;
      sa[114] = -0.086474635f;
      sa[115] = 0.2561398f;
      sa[116] = -0.3135906f;
      sa[117] = 0.23663764f;
      sa[118] = 0.936786f;
      sa[119] = 0.103027776f;
      sa[120] = 0.24559516f;
      sa[121] = 0.26763737f;
      sa[122] = 0.42888588f;
      sa[123] = 0.5663832f;
      sa[124] = 0.36160275f;
      sa[125] = 0.61347747f;
      sa[126] = 0.12997591f;
      sa[127] = -0.61454225f;
      sa[128] = -0.039992366f;
      sa[129] = -0.030057946f;
      sa[130] = -0.11247328f;
      sa[131] = 0.5773301f;
      sa[132] = 0.14870264f;
      sa[133] = 0.2617992f;
      sa[134] = 0.27018657f;
      sa[135] = -0.46481442f;
      sa[136] = -0.45900488f;
      sa[137] = -0.20416865f;
      sa[138] = -0.0025324312f;
      sa[139] = -0.07485444f;
      sa[140] = -0.19012854f;
      sa[141] = 0.15766701f;
      sa[142] = -0.15213245f;
      sa[143] = -0.48960146f;
      sa[144] = 0.413493f;
      sa[145] = -0.31641945f;
      sa[146] = -0.29701328f;
      sa[147] = 0.26220834f;
      sa[148] = 0.14037423f;
      sa[149] = 0.04756824f;
      sa[150] = 0.26603138f;
      sa[151] = -0.18083674f;
      sa[152] = 0.03270606f;
      sa[153] = 0.27610213f;
      sa[154] = 0.27788103f;
      sa[155] = -0.23815602f;
      sa[156] = 0.1171575f;
      sa[157] = -0.37378517f;
      sa[158] = 0.08890775f;
      sa[159] = 0.20514694f;
      sa[160] = -0.051885236f;
      sa[161] = 0.04669511f;
      sa[162] = 0.103361174f;
      sa[163] = -0.08785165f;
      sa[164] = 0.3215242f;
      sa[165] = 0.011379545f;
      sa[166] = -0.023527632f;
      sa[167] = -0.013334081f;
      sa[168] = 0.075384036f;
      sa[169] = 0.27369466f;
      sa[170] = 0.10798632f;
      sa[171] = -0.0922381f;
      sa[172] = -0.11658812f;
      sa[173] = -0.19227734f;
      sa[174] = -0.20980343f;
      sa[175] = -0.3491371f;
      sa[176] = -0.044669706f;
      sa[177] = -0.12513284f;
      sa[178] = -0.038020402f;
      sa[179] = 0.29457894f;
      sa[180] = 0.015495541f;
      sa[181] = -0.30918494f;
      sa[182] = -0.20231637f;
      sa[183] = -0.31162086f;
      sa[184] = 0.302873f;
      sa[185] = 0.13403961f;
      sa[186] = -0.43168756f;
      sa[187] = -0.080049016f;
      sa[188] = 0.0724111f;
      sa[189] = 0.08870719f;
      sa[190] = -0.040678047f;
      sa[191] = -0.067780584f;
      sa[192] = -0.11999482f;
      sa[193] = 0.21267384f;
      sa[194] = 0.034766693f;
      sa[195] = 0.34963426f;
      sa[196] = 0.33540136f;
      sa[197] = -0.17672491f;
      sa[198] = 0.020654095f;
      sa[199] = -0.06585345f;
      sa[200] = 0.10107742f;
      sa[201] = -0.25088587f;
      sa[202] = 0.075080045f;
      sa[203] = -0.005944681f;
      sa[204] = -0.17744265f;
      sa[205] = 0.19544446f;
      sa[206] = 0.4163805f;
      sa[207] = 0.25381806f;
      sa[208] = -0.16086546f;
      sa[209] = 0.061803576f;
      sa[210] = -0.2389934f;
      sa[211] = -0.0971882f;
      sa[212] = 0.1943456f;
      sa[213] = -0.18280658f;
      sa[214] = -0.2031715f;
      sa[215] = -0.1474589f;
      sa[216] = 0.12747508f;
      sa[217] = 0.1778918f;
      sa[218] = -0.18115446f;
      sa[219] = -0.16767423f;
      sa[220] = -0.20748624f;
      sa[221] = 0.06190278f;
      sa[222] = 0.22120549f;
      sa[223] = 0.013318939f;
      sa[224] = 0.14317837f;
      sa[225] = 0.34599128f;
      sa[226] = -0.3221576f;
      sa[227] = 0.33897147f;
      sa[228] = 0.13144958f;
      sa[229] = 0.13991123f;
      sa[230] = 0.22263914f;
      sa[231] = -0.3688186f;
      sa[232] = -0.3740631f;
      sa[233] = 0.045716166f;
      sa[234] = 0.11103864f;
      sa[235] = -0.2840647f;
      sa[236] = -0.061356634f;
      sa[237] = -0.22810511f;
      sa[238] = -0.30650693f;
      sa[239] = 0.059165373f;
      sa[240] = 0.097164735f;
      sa[241] = -0.29615206f;
      sa[242] = -0.13512027f;
      sa[243] = -0.19357687f;
      sa[244] = -0.17890854f;
      sa[245] = -0.11367378f;
      sa[246] = -0.22698951f;
      sa[247] = -0.058537792f;
      sa[248] = -0.0033521743f;
      sa[249] = 0.2962304f;
      sa[250] = -0.360803f;
      sa[251] = -0.0042508435f;
      sa[252] = -0.43654048f;
      sa[253] = -0.27668867f;
      sa[254] = -0.18361521f;
      sa[255] = 0.58974993f;
      sa[256] = -0.121037364f;
      sa[257] = 0.43721774f;
      sa[258] = -0.20142098f;
      sa[259] = -0.047802858f;
      sa[260] = -0.3125533f;
      sa[261] = -0.01973028f;
      sa[262] = -0.17521656f;
      sa[263] = 0.29819837f;
      sa[264] = -0.030910872f;
      sa[265] = 0.2721147f;
      sa[266] = -0.20493968f;
      sa[267] = -0.18746765f;
      sa[268] = 0.10442109f;
      sa[269] = -0.21231446f;
      sa[270] = 0.029003749f;
      sa[271] = 0.13256928f;
      sa[272] = -0.047143992f;
      sa[273] = -0.10063306f;
      sa[274] = 0.15738575f;
      sa[275] = -0.06742776f;
      sa[276] = 0.11394807f;
      sa[277] = -0.1766978f;
      sa[278] = -0.14473145f;
      sa[279] = -0.27600658f;
      sa[280] = -0.10698628f;
      sa[281] = 0.3293261f;
      sa[282] = 0.011224722f;
      sa[283] = -0.07553536f;
      sa[284] = 0.08277882f;
      sa[285] = -0.6085872f;
      sa[286] = 0.39222875f;
      sa[287] = 0.4182493f;
      sa[288] = -0.18247242f;
      sa[289] = -0.041178595f;
      sa[290] = -0.15335125f;
      sa[291] = -0.55453056f;
      sa[292] = 0.04998591f;
      sa[293] = -0.26242927f;
      sa[294] = -0.04994076f;
      sa[295] = -0.19641541f;
      sa[296] = 0.15772374f;
      sa[297] = 0.12146804f;
      sa[298] = -0.038740046f;
      sa[299] = -0.5754823f;
      sa[300] = -0.07486536f;
      sa[301] = -0.2841894f;
      sa[302] = 0.053454336f;
      sa[303] = 0.019610737f;
      sa[304] = 0.05155722f;
      sa[305] = -0.0063301967f;
      sa[306] = -0.0010033842f;
      sa[307] = -0.11282931f;
      sa[308] = 0.09793505f;
      sa[309] = 0.13907734f;
      sa[310] = 0.24905676f;
      sa[311] = 0.4626582f;
      sa[312] = -0.25716546f;
      sa[313] = -0.28427604f;
      sa[314] = -0.14883664f;
      sa[315] = 0.485689f;
      sa[316] = 0.019795267f;
      sa[317] = -0.022123758f;
      sa[318] = 0.054748565f;
      sa[319] = 0.42364815f;
      sa[320] = -0.21146606f;
      sa[321] = 0.20425116f;
      sa[322] = 0.30928168f;
      sa[323] = -0.21314178f;
      sa[324] = 0.27736872f;
      sa[325] = 0.3369206f;
      sa[326] = -0.40509942f;
      sa[327] = 0.25460613f;
      sa[328] = -0.1485564f;
      sa[329] = 0.23193048f;
      sa[330] = -0.17127617f;
      sa[331] = 0.12857723f;
      sa[332] = -0.2607619f;
      sa[333] = 0.17281388f;
      sa[334] = -0.08596053f;
      sa[335] = 0.24975991f;
      sa[336] = -0.21284106f;
      sa[337] = -0.22601292f;
      sa[338] = 0.33662504f;
      sa[339] = -0.085963316f;
      sa[340] = -0.333539f;
      sa[341] = -0.22187765f;
      sa[342] = 0.4186251f;
      sa[343] = -0.32390034f;
      sa[344] = -0.22759639f;
      sa[345] = 0.16372208f;
      sa[346] = 0.24866408f;
      sa[347] = -0.002024645f;
      sa[348] = 0.11343663f;
      sa[349] = -0.30379254f;
      sa[350] = -0.21435617f;
      sa[351] = -0.118580036f;
      sa[352] = 0.10510827f;
      sa[353] = -0.13325754f;
      sa[354] = -0.031897303f;
      sa[355] = 0.12657988f;
      sa[356] = -0.20715775f;
      sa[357] = 0.13222653f;
      sa[358] = -0.1881409f;
      sa[359] = 0.10134639f;
      sa[360] = 0.22047056f;
      sa[361] = -0.2039392f;
      sa[362] = -0.32351828f;
      sa[363] = -0.08716612f;
      sa[364] = -0.35773104f;
      sa[365] = -0.4354512f;
      sa[366] = -0.24249364f;
      sa[367] = -0.5523059f;
      sa[368] = -0.08115564f;
      sa[369] = 0.20512481f;
      sa[370] = -0.21444488f;
      sa[371] = 0.12999858f;
      sa[372] = -0.06176181f;
      sa[373] = 0.17402734f;
      sa[374] = -0.25342587f;
      sa[375] = -0.53650546f;
      sa[376] = -0.44548073f;
      sa[377] = -0.4680868f;
      sa[378] = 0.7234619f;
      sa[379] = 0.20083113f;
      sa[380] = -0.10477178f;
      sa[381] = -0.12017879f;
      sa[382] = -0.10799814f;
      sa[383] = -0.33958906f;
      sa[384] = -0.29715857f;
      sa[385] = 0.03480088f;
      sa[386] = -0.15590455f;
      sa[387] = -0.1727465f;
      sa[388] = 0.056624725f;
      sa[389] = -0.07184521f;
      sa[390] = -0.15350626f;
      sa[391] = -0.3509602f;
      sa[392] = 0.2441077f;
      sa[393] = 0.18038565f;
      sa[394] = -0.47653583f;
      sa[395] = 0.19183718f;
      sa[396] = 0.42484295f;
      sa[397] = -0.11480462f;
      sa[398] = 0.08066845f;
      sa[399] = 0.13859692f;
      sa[400] = 0.15544017f;
      sa[401] = 0.33971268f;
      sa[402] = -0.19059226f;
      sa[403] = 0.04159495f;
      sa[404] = 0.43788365f;
      sa[405] = -0.2532427f;
      sa[406] = -0.008472233f;
      sa[407] = 0.19333419f;
      sa[408] = -0.32164153f;
      sa[409] = -0.145568f;
      sa[410] = -0.17427734f;
      sa[411] = 0.010636254f;
      sa[412] = -0.08322951f;
      sa[413] = 0.22411714f;
      sa[414] = -0.04283123f;
      sa[415] = 0.39229947f;
      sa[416] = -0.5152664f;
      sa[417] = -0.16183746f;
      sa[418] = -0.14991128f;
      sa[419] = 0.07612108f;
      sa[420] = 0.17371552f;
      sa[421] = 0.43671682f;
      sa[422] = -0.13261567f;
      sa[423] = -0.104150556f;
      sa[424] = -0.006708229f;
      sa[425] = -0.20945519f;
      sa[426] = -0.24618772f;
      sa[427] = 0.06117277f;
      sa[428] = -0.07114438f;
      sa[429] = -0.21398129f;
      sa[430] = -1.696129E-5f;
      sa[431] = -0.23819664f;
      sa[432] = -0.05270974f;
      sa[433] = 0.13491572f;
      sa[434] = 0.3191678f;
      sa[435] = 0.23717383f;
      sa[436] = -0.25924966f;
      sa[437] = -0.34741154f;
      sa[438] = -0.05049745f;
      sa[439] = 0.005542878f;
      sa[440] = 0.38205674f;
      sa[441] = -0.26885325f;
      sa[442] = 0.21310623f;
      sa[443] = 0.09030634f;
      sa[444] = -0.24127811f;
      sa[445] = 0.018261032f;
      sa[446] = 0.22584364f;
      sa[447] = -0.040796306f;
      sa[448] = 0.08791386f;
      sa[449] = 0.24974984f;
      sa[450] = 0.004772987f;
      sa[451] = 0.23791756f;
      sa[452] = 0.20602068f;
      sa[453] = 2.695556E-4f;
      sa[454] = -0.17513892f;
      sa[455] = -0.21244119f;
      sa[456] = -0.03776457f;
      sa[457] = 0.20016967f;
      sa[458] = -0.18884341f;
      sa[459] = 0.25713962f;
      sa[460] = 0.28194702f;
      sa[461] = 0.3725272f;
      sa[462] = 0.042733945f;
      sa[463] = 0.17807166f;
      sa[464] = -0.14597368f;
      sa[465] = 0.1986054f;
      sa[466] = 0.16163819f;
      sa[467] = 0.16824579f;
      sa[468] = 0.083236076f;
      sa[469] = 0.31988853f;
      sa[470] = 0.3948949f;
      sa[471] = 0.32725194f;
      sa[472] = 0.056101903f;
      sa[473] = -0.18148975f;
      sa[474] = 0.061543867f;
      sa[475] = 0.6621868f;
      sa[476] = 0.18898273f;
      sa[477] = -0.07127637f;
      sa[478] = 0.57506055f;
      sa[479] = -0.3458638f;
      sa[480] = -0.4614736f;
      sa[481] = -0.34180126f;
      sa[482] = -0.2848442f;
      sa[483] = 0.27312195f;
      sa[484] = 0.15902963f;
      sa[485] = 0.31027254f;
      sa[486] = 0.075000666f;
      sa[487] = -0.328232f;
      sa[488] = -0.3276477f;
      sa[489] = 0.095095605f;
      sa[490] = 0.09259108f;
      sa[491] = -0.045077544f;
      sa[492] = 0.15357849f;
      sa[493] = 0.4703581f;
      sa[494] = -0.34289756f;
      sa[495] = 0.55660653f;
      sa[496] = -0.19208169f;
      sa[497] = -0.052175988f;
      sa[498] = 8.341522E-4f;
      sa[499] = 0.05708506f;
      sa[500] = -0.021088256f;
      sa[501] = 0.11349588f;
      sa[502] = 0.4533707f;
      sa[503] = 0.18529207f;
      sa[504] = -0.14428452f;
      sa[505] = -0.07940164f;
      sa[506] = 0.22545376f;
      sa[507] = -0.39238572f;
      sa[508] = 0.09469548f;
      sa[509] = 0.3857075f;
      sa[510] = 0.2465614f;
      sa[511] = -0.042686183f;
      sa[512] = 0.10382549f;
      sa[513] = 0.1887802f;
      sa[514] = 0.35380104f;
      sa[515] = 0.44177648f;
      sa[516] = 0.014255085f;
      sa[517] = 0.27066416f;
      sa[518] = 0.055787902f;
      sa[519] = -0.062759206f;
      sa[520] = 0.4303255f;
      sa[521] = 0.48764035f;
      sa[522] = 0.10565152f;
      sa[523] = -0.34847814f;
      sa[524] = -0.021660201f;
      sa[525] = -0.07070837f;
      sa[526] = -0.14905643f;
      sa[527] = -0.16399583f;
      sa[528] = 0.046135686f;
      sa[529] = 0.22638562f;
      sa[530] = -0.16123524f;
      sa[531] = 0.22614402f;
      sa[532] = 0.12117835f;
      sa[533] = 0.040906906f;
      sa[534] = 0.28078023f;
      sa[535] = 0.013025738f;
      sa[536] = -0.07838497f;
      sa[537] = 0.42814034f;
      sa[538] = -0.23147687f;
      sa[539] = 0.11940595f;
      sa[540] = -0.11868305f;
      sa[541] = -0.2141546f;
      sa[542] = -0.06713114f;
      sa[543] = 0.079110764f;
      sa[544] = 0.14825629f;
      sa[545] = 0.07326832f;
      sa[546] = 0.11362836f;
      sa[547] = 0.37921473f;
      sa[548] = 0.041449565f;
      sa[549] = 0.27748445f;
      sa[550] = 0.31206104f;
      sa[551] = -0.09776647f;
      sa[552] = 0.0430678f;
      sa[553] = -0.14416435f;
      sa[554] = -0.11674853f;
      sa[555] = 0.03295184f;
      sa[556] = -0.23463987f;
      sa[557] = -0.3433738f;
      sa[558] = 0.19107978f;
      sa[559] = -0.034035083f;
      sa[560] = -0.26299798f;
      sa[561] = -0.07192651f;
      sa[562] = 0.31210187f;
      sa[563] = 0.037462205f;
      sa[564] = 0.20550485f;
      sa[565] = 0.18115582f;
      sa[566] = 0.347848f;
      sa[567] = -0.21169265f;
      sa[568] = -0.23321256f;
      sa[569] = -0.07491115f;
      sa[570] = -0.283227f;
      sa[571] = -0.11081683f;
      sa[572] = -0.11787851f;
      sa[573] = -0.06120844f;
      sa[574] = 0.4434754f;
      sa[575] = -0.09369084f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_10_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_10_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.512662f;
      sa[1] = 0.17412008f;
      sa[2] = -0.05791403f;
      sa[3] = 0.04399806f;
      sa[4] = 0.18568283f;
      sa[5] = 0.025564862f;
      sa[6] = 0.30991492f;
      sa[7] = 0.5989691f;
      sa[8] = -0.33226874f;
      sa[9] = 0.22265169f;
      sa[10] = -0.34375647f;
      sa[11] = 0.24894372f;
      sa[12] = -0.03604097f;
      sa[13] = -0.019340536f;
      sa[14] = -0.2107998f;
      sa[15] = 0.5706512f;
      sa[16] = 0.39706963f;
      sa[17] = 0.047482476f;
      sa[18] = 0.055644285f;
      sa[19] = -0.028149107f;
      sa[20] = 0.3396831f;
      sa[21] = 0.01741679f;
      sa[22] = -0.09946783f;
      sa[23] = 0.5959215f;
      sa[24] = -0.40374124f;
      sa[25] = 0.3511742f;
      sa[26] = -0.008254293f;
      sa[27] = 0.5050589f;
      sa[28] = -0.50136316f;
      sa[29] = -0.33435428f;
      sa[30] = 0.18434311f;
      sa[31] = -0.14950499f;
      sa[32] = -0.47925344f;
      sa[33] = -0.6793002f;
      sa[34] = -0.022498162f;
      sa[35] = 0.26016924f;
      sa[36] = -0.16698298f;
      sa[37] = -0.11520542f;
      sa[38] = 0.08273064f;
      sa[39] = 0.19452865f;
      sa[40] = -0.23518845f;
      sa[41] = -0.3088071f;
      sa[42] = -0.24347617f;
      sa[43] = -0.508753f;
      sa[44] = -0.04751687f;
      sa[45] = -0.3370772f;
      sa[46] = 0.3254318f;
      sa[47] = 0.40612456f;
      sa[48] = -0.36022946f;
      sa[49] = -0.2936074f;
      sa[50] = 0.14891842f;
      sa[51] = -0.19614121f;
      sa[52] = 0.17578088f;
      sa[53] = 0.19278754f;
      sa[54] = -0.17358723f;
      sa[55] = 0.6073159f;
      sa[56] = -0.41017672f;
      sa[57] = -0.37211743f;
      sa[58] = 0.08645052f;
      sa[59] = 0.06089833f;
      sa[60] = 0.3997628f;
      sa[61] = -0.18282413f;
      sa[62] = -0.08254526f;
      sa[63] = 0.28246194f;
      sa[64] = 0.23603445f;
      sa[65] = -0.16838904f;
      sa[66] = 0.070835404f;
      sa[67] = 0.4995881f;
      sa[68] = 0.2676634f;
      sa[69] = -0.24192004f;
      sa[70] = -0.30095994f;
      sa[71] = 0.055627163f;
      sa[72] = -0.36199933f;
      sa[73] = 0.314752f;
      sa[74] = 0.4845553f;
      sa[75] = -0.016906433f;
      sa[76] = 0.1717578f;
      sa[77] = 0.21106014f;
      sa[78] = -0.42688963f;
      sa[79] = 0.3868629f;
      sa[80] = -0.16153707f;
      sa[81] = 0.03271651f;
      sa[82] = 0.36831838f;
      sa[83] = -0.26695675f;
      sa[84] = -0.5601041f;
      sa[85] = -0.20083335f;
      sa[86] = 0.10423669f;
      sa[87] = 0.28695554f;
      sa[88] = -0.3897898f;
      sa[89] = -0.1042457f;
      sa[90] = -0.25179002f;
      sa[91] = 0.42247212f;
      sa[92] = -0.02872755f;
      sa[93] = 0.091974266f;
      sa[94] = -0.3557807f;
      sa[95] = -0.1623751f;
      sa[96] = -0.33317292f;
      sa[97] = -0.0018106917f;
      sa[98] = 0.07369744f;
      sa[99] = -0.006448861f;
      sa[100] = -0.37971845f;
      sa[101] = -0.24451378f;
      sa[102] = 0.32508633f;
      sa[103] = 0.19525863f;
      sa[104] = -0.34158266f;
      sa[105] = -0.14540538f;
      sa[106] = 0.338007f;
      sa[107] = 0.42213315f;
      sa[108] = 0.13606957f;
      sa[109] = 0.052028116f;
      sa[110] = 0.19838007f;
      sa[111] = -0.22883596f;
      sa[112] = -0.180233f;
      sa[113] = -0.056932766f;
      sa[114] = 0.13040219f;
      sa[115] = -0.31072852f;
      sa[116] = 0.2931112f;
      sa[117] = -0.019718168f;
      sa[118] = -0.4929877f;
      sa[119] = -0.032137536f;
      sa[120] = -0.18030468f;
      sa[121] = 0.12594564f;
      sa[122] = -0.013367271f;
      sa[123] = 0.17397568f;
      sa[124] = -0.098369725f;
      sa[125] = 0.40720642f;
      sa[126] = -0.35092968f;
      sa[127] = 0.102951005f;
      sa[128] = -0.36095133f;
      sa[129] = 0.10602291f;
      sa[130] = -0.14827423f;
      sa[131] = -0.099516936f;
      sa[132] = -0.0148875015f;
      sa[133] = 0.10732959f;
      sa[134] = 0.04934776f;
      sa[135] = -0.43859205f;
      sa[136] = 0.13026413f;
      sa[137] = -0.27196866f;
      sa[138] = 0.12063178f;
      sa[139] = 0.28864047f;
      sa[140] = -0.06157361f;
      sa[141] = -0.076277934f;
      sa[142] = -0.013985711f;
      sa[143] = -0.254698f;
      sa[144] = 0.37644032f;
      sa[145] = -0.23021322f;
      sa[146] = 0.032870363f;
      sa[147] = -0.28217924f;
      sa[148] = -0.3371277f;
      sa[149] = 0.3787746f;
      sa[150] = -0.33288932f;
      sa[151] = -0.84493035f;
      sa[152] = 0.54734546f;
      sa[153] = -0.120300144f;
      sa[154] = 0.40373355f;
      sa[155] = -0.64482206f;
      sa[156] = -0.23196214f;
      sa[157] = -0.441418f;
      sa[158] = 0.028123418f;
      sa[159] = -0.24876161f;
      sa[160] = 0.33176208f;
      sa[161] = -0.38816583f;
      sa[162] = 0.48231822f;
      sa[163] = -0.43490288f;
      sa[164] = 0.092372335f;
      sa[165] = -0.19897994f;
      sa[166] = 0.31900242f;
      sa[167] = -0.3722947f;
      sa[168] = 0.23880251f;
      sa[169] = -0.4559932f;
      sa[170] = 0.3909671f;
      sa[171] = 0.20109628f;
      sa[172] = 0.53656435f;
      sa[173] = 0.6631647f;
      sa[174] = -0.0407126f;
      sa[175] = -0.030471323f;
      sa[176] = 0.07784344f;
      sa[177] = 0.41449252f;
      sa[178] = -0.29507136f;
      sa[179] = 0.28102773f;
      sa[180] = -0.2823551f;
      sa[181] = -0.21810246f;
      sa[182] = -0.13996617f;
      sa[183] = 0.2857766f;
      sa[184] = 0.42382568f;
      sa[185] = 0.21614248f;
      sa[186] = -0.2653752f;
      sa[187] = -0.1661943f;
      sa[188] = -0.068017535f;
      sa[189] = -0.42949525f;
      sa[190] = -0.36423737f;
      sa[191] = 0.06820422f;
      sa[192] = -0.08107885f;
      sa[193] = 0.1971056f;
      sa[194] = -0.40312994f;
      sa[195] = -0.17966202f;
      sa[196] = 0.17827293f;
      sa[197] = -0.059383582f;
      sa[198] = 0.09578356f;
      sa[199] = 0.32070655f;
      sa[200] = 0.25097212f;
      sa[201] = 0.30832788f;
      sa[202] = 0.40110528f;
      sa[203] = -0.44275576f;
      sa[204] = 0.13461754f;
      sa[205] = 0.28589302f;
      sa[206] = -0.16872033f;
      sa[207] = 0.22376704f;
      sa[208] = -0.20722756f;
      sa[209] = 0.036300797f;
      sa[210] = -0.06819459f;
      sa[211] = -0.35245034f;
      sa[212] = -0.4472305f;
      sa[213] = -0.095111005f;
      sa[214] = -0.3089507f;
      sa[215] = 0.07160036f;
      sa[216] = 0.033684384f;
      sa[217] = 0.27594826f;
      sa[218] = -0.0061785737f;
      sa[219] = 0.093976565f;
      sa[220] = 0.1193264f;
      sa[221] = -0.04804623f;
      sa[222] = -0.45280373f;
      sa[223] = -0.4916395f;
      sa[224] = 0.40052772f;
      sa[225] = -0.06390175f;
      sa[226] = 0.056838192f;
      sa[227] = 0.16541228f;
      sa[228] = -0.039729837f;
      sa[229] = -0.22090358f;
      sa[230] = -0.24096201f;
      sa[231] = -0.2672872f;
      sa[232] = 0.42367294f;
      sa[233] = -0.23033325f;
      sa[234] = -0.37105957f;
      sa[235] = -0.06887317f;
      sa[236] = -0.32856357f;
      sa[237] = 0.63462347f;
      sa[238] = 0.2024277f;
      sa[239] = -0.14834101f;
      sa[240] = -0.18960415f;
      sa[241] = -0.71816945f;
      sa[242] = -0.37490243f;
      sa[243] = 0.370778f;
      sa[244] = 0.15334475f;
      sa[245] = 0.32195088f;
      sa[246] = 0.2977124f;
      sa[247] = -1.197988f;
      sa[248] = -0.15431191f;
      sa[249] = 0.06379772f;
      sa[250] = 0.24496923f;
      sa[251] = 0.31928393f;
      sa[252] = 0.24426815f;
      sa[253] = -0.2608816f;
      sa[254] = 0.41825342f;
      sa[255] = -0.023292333f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_10_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_ReLU_10_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.08675489f;
      sa[1] = -1.6862556f;
      sa[2] = -1.6872116f;
      sa[3] = 1.3823559f;
      sa[4] = 0.33265686f;
      sa[5] = -0.3927355f;
      sa[6] = -1.6864016f;
      sa[7] = 1.5364516f;
      sa[8] = 1.6957718f;
      sa[9] = 0.25061673f;
      sa[10] = 1.6683474f;
      sa[11] = 1.251303f;
      sa[12] = 1.78396f;
      sa[13] = -0.5004376f;
      sa[14] = -1.9866167f;
      sa[15] = -0.8865782f;
      sa[16] = 0.7253887f;
      sa[17] = -0.78449297f;
      sa[18] = -1.5892255f;
      sa[19] = -1.0151147f;
      sa[20] = -1.9695178f;
      sa[21] = 0.22692063f;
      sa[22] = -1.950014f;
      sa[23] = -0.6656788f;
      sa[24] = -0.49714965f;
      sa[25] = 2.0201566f;
      sa[26] = -0.2676142f;
      sa[27] = 1.2146648f;
      sa[28] = 1.1879611f;
      sa[29] = -0.7464258f;
      sa[30] = 0.20876898f;
      sa[31] = 0.18780875f;
      sa[32] = 0.32846147f;
      sa[33] = -0.1805923f;
      sa[34] = -1.0812895f;
      sa[35] = 0.7258941f;
      sa[36] = 0.22872709f;
      sa[37] = -1.5962344f;
      sa[38] = 0.6178152f;
      sa[39] = -0.5065422f;
      sa[40] = 0.1955725f;
      sa[41] = -0.7286911f;
      sa[42] = 0.5430269f;
      sa[43] = -0.087350346f;
      sa[44] = 0.9196939f;
      sa[45] = -2.127774f;
      sa[46] = -2.5619745f;
      sa[47] = 0.06341934f;
      sa[48] = 1.5619068f;
      sa[49] = -0.14014243f;
      sa[50] = -0.28880838f;
      sa[51] = 1.8593957f;
      sa[52] = -1.6437931f;
      sa[53] = 1.2645001f;
      sa[54] = 1.646521f;
      sa[55] = 1.0844659f;
      sa[56] = -0.6555933f;
      sa[57] = -0.6619812f;
      sa[58] = 0.9442868f;
      sa[59] = 0.6575415f;
      sa[60] = -1.5129459f;
      sa[61] = 0.8807189f;
      sa[62] = -0.37006932f;
      sa[63] = -0.91002476f;
      sa[64] = 1.039234f;
      sa[65] = -0.70566833f;
      sa[66] = -1.674747f;
      sa[67] = -0.115412265f;
      sa[68] = 1.0273452f;
      sa[69] = -1.2785945f;
      sa[70] = -1.6371697f;
      sa[71] = -0.05018355f;
      sa[72] = -0.9691586f;
      sa[73] = -1.4894648f;
      sa[74] = -1.5648538f;
      sa[75] = 1.3737637f;
      sa[76] = 1.8755012f;
      sa[77] = -0.6576029f;
      sa[78] = -1.3425319f;
      sa[79] = -0.30439845f;
      sa[80] = 0.47687238f;
      sa[81] = -1.8220146f;
      sa[82] = -0.10719762f;
      sa[83] = -1.4667315f;
      sa[84] = 1.4877225f;
      sa[85] = 1.0827575f;
      sa[86] = -1.9738468f;
      sa[87] = 0.992683f;
      sa[88] = -1.6657474f;
      sa[89] = -1.1446612f;
      sa[90] = 0.28009674f;
      sa[91] = 0.064500056f;
      sa[92] = 1.2357244f;
      sa[93] = 1.8693048f;
      sa[94] = 1.4880466f;
      sa[95] = 0.6425064f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_10 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_10_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_10_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_10_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_ReLU_10_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


