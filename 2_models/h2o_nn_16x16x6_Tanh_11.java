/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:52:39.901+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_11

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_11 > h2o_nn_16x16x6_Tanh_11.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_11.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_11", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_11 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_11_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_11_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_11_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_11_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_11_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_11_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_11_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_11_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_11_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_11_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_11_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_11_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_11.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_11_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.2548076923076923,0.18269230769230768,0.057692307692307696,0.125,0.2548076923076923,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_11() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-8882521683401562624L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_11_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_11_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_11_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_11_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_11_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_11_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_11_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_11_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_11_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_11_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_11_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.05665471339704283;
      sa[1] = 0.005904758487587203;
      sa[2] = 0.029690777668385585;
      sa[3] = -0.13180882489274648;
      sa[4] = 0.062335331607906413;
      sa[5] = -0.07014368139785093;
      sa[6] = 0.05077999106308744;
      sa[7] = 0.03091262466765408;
      sa[8] = -0.10996990398245642;
      sa[9] = 0.08845553273440712;
      sa[10] = 0.0184011006526986;
      sa[11] = -0.09973561009697005;
      sa[12] = 0.08247090332545853;
      sa[13] = 0.009474074822601162;
      sa[14] = -0.04372227971622034;
      sa[15] = 0.027089186524334206;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_11_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_11_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.07774824206662324;
      sa[1] = 0.013486441837603795;
      sa[2] = -0.1192430098047413;
      sa[3] = 0.06763678620118045;
      sa[4] = 0.008202508159699263;
      sa[5] = -0.10040486099201718;
      sa[6] = 0.02517670752393203;
      sa[7] = 0.0036099114319586584;
      sa[8] = -0.10484143802043094;
      sa[9] = -0.08994148089798626;
      sa[10] = 0.08636498392227918;
      sa[11] = 0.3988872525090425;
      sa[12] = -0.014748904205374886;
      sa[13] = 0.013830255566333376;
      sa[14] = -0.12860773041576973;
      sa[15] = -0.16965556432632206;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_11_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_11_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.04421218029690431;
      sa[1] = -0.12590006065142811;
      sa[2] = -0.09884401735580377;
      sa[3] = 0.0040679007041422134;
      sa[4] = 0.1376154970381184;
      sa[5] = -0.18153899888958822;
    }
  }
}
class h2o_nn_16x16x6_Tanh_11_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_11_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_11_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.021547139f;
      sa[1] = 0.24412204f;
      sa[2] = 0.29120865f;
      sa[3] = 0.30412352f;
      sa[4] = -0.1305652f;
      sa[5] = -0.23131748f;
      sa[6] = -0.038711324f;
      sa[7] = 0.25888273f;
      sa[8] = 0.066722475f;
      sa[9] = -0.053059652f;
      sa[10] = -0.13905673f;
      sa[11] = -0.23646376f;
      sa[12] = 0.078911796f;
      sa[13] = -0.32831118f;
      sa[14] = -0.18238565f;
      sa[15] = 0.039065592f;
      sa[16] = 0.14393857f;
      sa[17] = 0.2843214f;
      sa[18] = -0.043669507f;
      sa[19] = 0.13741562f;
      sa[20] = 0.2652968f;
      sa[21] = -0.26473916f;
      sa[22] = 0.26133606f;
      sa[23] = -0.07211404f;
      sa[24] = 0.33561933f;
      sa[25] = 0.18284063f;
      sa[26] = -0.22193821f;
      sa[27] = 0.3542758f;
      sa[28] = 0.26878467f;
      sa[29] = -0.25849545f;
      sa[30] = -0.19633475f;
      sa[31] = 0.21086456f;
      sa[32] = 0.33728158f;
      sa[33] = -0.25192934f;
      sa[34] = 0.11816875f;
      sa[35] = -0.023142643f;
      sa[36] = 0.03847191f;
      sa[37] = 0.2911101f;
      sa[38] = -0.26216662f;
      sa[39] = 0.1543319f;
      sa[40] = -0.052669235f;
      sa[41] = -0.2075928f;
      sa[42] = -0.24059413f;
      sa[43] = -0.03747943f;
      sa[44] = 0.30553436f;
      sa[45] = -0.2255715f;
      sa[46] = -0.027395565f;
      sa[47] = 0.0044839927f;
      sa[48] = 0.34015736f;
      sa[49] = 0.26628932f;
      sa[50] = 0.2853667f;
      sa[51] = -0.18720274f;
      sa[52] = 0.027614797f;
      sa[53] = 0.33231178f;
      sa[54] = 0.37417164f;
      sa[55] = 0.18907772f;
      sa[56] = -0.11125745f;
      sa[57] = -0.36327624f;
      sa[58] = 0.25300047f;
      sa[59] = -0.0993949f;
      sa[60] = -0.4938072f;
      sa[61] = 0.19012097f;
      sa[62] = 0.21106419f;
      sa[63] = 0.24268132f;
      sa[64] = 0.19945537f;
      sa[65] = 0.101180546f;
      sa[66] = -0.05629255f;
      sa[67] = 0.18654284f;
      sa[68] = -0.15818107f;
      sa[69] = 0.08866065f;
      sa[70] = 0.12399947f;
      sa[71] = 0.44780597f;
      sa[72] = -0.110125035f;
      sa[73] = 0.19733109f;
      sa[74] = -0.07890063f;
      sa[75] = 0.082758814f;
      sa[76] = -0.13196246f;
      sa[77] = -0.009693483f;
      sa[78] = -0.074900374f;
      sa[79] = 0.1321479f;
      sa[80] = -0.24355602f;
      sa[81] = -0.15178612f;
      sa[82] = 0.019846635f;
      sa[83] = 0.040842723f;
      sa[84] = -0.053244866f;
      sa[85] = -0.19257638f;
      sa[86] = 0.03994911f;
      sa[87] = 0.12839557f;
      sa[88] = 0.14995736f;
      sa[89] = 0.013590067f;
      sa[90] = -0.21330178f;
      sa[91] = 0.12259131f;
      sa[92] = 0.117866755f;
      sa[93] = -0.17160149f;
      sa[94] = -0.18199927f;
      sa[95] = -0.3480422f;
      sa[96] = 0.21541457f;
      sa[97] = 0.048798148f;
      sa[98] = 0.2142448f;
      sa[99] = -0.24912134f;
      sa[100] = -0.031828795f;
      sa[101] = -0.14067975f;
      sa[102] = -0.21907872f;
      sa[103] = -0.10144688f;
      sa[104] = -0.025521139f;
      sa[105] = -0.19718054f;
      sa[106] = -0.46038422f;
      sa[107] = -0.06623728f;
      sa[108] = 0.18761627f;
      sa[109] = -0.21807235f;
      sa[110] = -0.19632338f;
      sa[111] = 0.08139495f;
      sa[112] = 0.113629185f;
      sa[113] = 0.0145512f;
      sa[114] = -0.1728036f;
      sa[115] = -0.05305275f;
      sa[116] = -0.31221572f;
      sa[117] = 0.05863558f;
      sa[118] = -0.24018948f;
      sa[119] = -0.082697906f;
      sa[120] = 0.15532677f;
      sa[121] = 0.2171902f;
      sa[122] = 0.32324085f;
      sa[123] = 0.26935074f;
      sa[124] = 0.30137813f;
      sa[125] = 0.30463716f;
      sa[126] = -0.33561555f;
      sa[127] = -0.2666992f;
      sa[128] = -0.08065431f;
      sa[129] = 0.1062761f;
      sa[130] = -0.17014243f;
      sa[131] = 0.2595643f;
      sa[132] = 0.25588945f;
      sa[133] = -0.31630602f;
      sa[134] = 0.078496344f;
      sa[135] = -0.1971906f;
      sa[136] = -0.4345413f;
      sa[137] = -0.09985431f;
      sa[138] = 0.05677757f;
      sa[139] = -0.19983596f;
      sa[140] = -1.1450016E-4f;
      sa[141] = -0.06390443f;
      sa[142] = 0.14433578f;
      sa[143] = -0.32919964f;
      sa[144] = 0.3563364f;
      sa[145] = -0.1967131f;
      sa[146] = -0.4268053f;
      sa[147] = 0.02700288f;
      sa[148] = 0.1323839f;
      sa[149] = 0.15936463f;
      sa[150] = 0.27439314f;
      sa[151] = -0.22397183f;
      sa[152] = 0.14420465f;
      sa[153] = 0.24847077f;
      sa[154] = 0.28058714f;
      sa[155] = -0.03935667f;
      sa[156] = 0.14393227f;
      sa[157] = -0.2190641f;
      sa[158] = 0.12568569f;
      sa[159] = 0.15682197f;
      sa[160] = 0.040607058f;
      sa[161] = 0.12611131f;
      sa[162] = -0.06214892f;
      sa[163] = -0.20688438f;
      sa[164] = 0.24443422f;
      sa[165] = -0.083721735f;
      sa[166] = -0.10480399f;
      sa[167] = -0.1348921f;
      sa[168] = 0.16907415f;
      sa[169] = 0.297492f;
      sa[170] = 0.1561661f;
      sa[171] = -0.008079672f;
      sa[172] = -0.10347532f;
      sa[173] = -0.2026655f;
      sa[174] = -0.07654704f;
      sa[175] = -0.317811f;
      sa[176] = 0.060749024f;
      sa[177] = 0.059099507f;
      sa[178] = -0.06516943f;
      sa[179] = 0.048688006f;
      sa[180] = -0.035629682f;
      sa[181] = -0.25427347f;
      sa[182] = -0.039519053f;
      sa[183] = 0.34437183f;
      sa[184] = 0.2636367f;
      sa[185] = 0.15452191f;
      sa[186] = -0.32543984f;
      sa[187] = 0.09664407f;
      sa[188] = 0.06835047f;
      sa[189] = 0.018650899f;
      sa[190] = -0.059946254f;
      sa[191] = 0.12170041f;
      sa[192] = -0.16795674f;
      sa[193] = 0.21774271f;
      sa[194] = 0.09670833f;
      sa[195] = 0.3887167f;
      sa[196] = 0.31383142f;
      sa[197] = -0.21497431f;
      sa[198] = 0.021538014f;
      sa[199] = -0.25404394f;
      sa[200] = 0.020840203f;
      sa[201] = -0.35815886f;
      sa[202] = 0.10191846f;
      sa[203] = 0.020722233f;
      sa[204] = -0.19782189f;
      sa[205] = 0.19503675f;
      sa[206] = 0.15620865f;
      sa[207] = -0.07581195f;
      sa[208] = -0.31686485f;
      sa[209] = -0.15840828f;
      sa[210] = -0.3739771f;
      sa[211] = -0.26554352f;
      sa[212] = 0.28292143f;
      sa[213] = -0.18222907f;
      sa[214] = -0.14451683f;
      sa[215] = -0.3015709f;
      sa[216] = 0.11664374f;
      sa[217] = 0.2475029f;
      sa[218] = -0.03813418f;
      sa[219] = 0.35932967f;
      sa[220] = -0.19401856f;
      sa[221] = 0.10814876f;
      sa[222] = 0.31725907f;
      sa[223] = 0.09670777f;
      sa[224] = 0.13172318f;
      sa[225] = 0.14831406f;
      sa[226] = -0.2662721f;
      sa[227] = 0.38127905f;
      sa[228] = 0.11623437f;
      sa[229] = 0.1204162f;
      sa[230] = 0.26698032f;
      sa[231] = -0.26635706f;
      sa[232] = -0.25458708f;
      sa[233] = -0.07907319f;
      sa[234] = -0.05377294f;
      sa[235] = -0.44336507f;
      sa[236] = -0.03325066f;
      sa[237] = -0.21378215f;
      sa[238] = -0.19189514f;
      sa[239] = 0.13531552f;
      sa[240] = 0.03549154f;
      sa[241] = -0.2445331f;
      sa[242] = -0.18555114f;
      sa[243] = -0.7617009f;
      sa[244] = -0.2340427f;
      sa[245] = -0.15065908f;
      sa[246] = -0.2746116f;
      sa[247] = -0.07934616f;
      sa[248] = 0.21581952f;
      sa[249] = 0.32557634f;
      sa[250] = -0.43320128f;
      sa[251] = -0.29368028f;
      sa[252] = -0.20741501f;
      sa[253] = -0.33494568f;
      sa[254] = -0.46338975f;
      sa[255] = -0.024748407f;
      sa[256] = -0.244444f;
      sa[257] = 0.3568054f;
      sa[258] = -0.16008663f;
      sa[259] = 0.0041956003f;
      sa[260] = -0.22668399f;
      sa[261] = -0.18195973f;
      sa[262] = -0.26639506f;
      sa[263] = 0.4003463f;
      sa[264] = -0.06403604f;
      sa[265] = 0.21116382f;
      sa[266] = -0.1103743f;
      sa[267] = -0.06698113f;
      sa[268] = 0.1550549f;
      sa[269] = -0.18262851f;
      sa[270] = -0.0559694f;
      sa[271] = 0.17686242f;
      sa[272] = -0.11018303f;
      sa[273] = -0.17438398f;
      sa[274] = 0.21260948f;
      sa[275] = 0.034203544f;
      sa[276] = 0.009559101f;
      sa[277] = -0.17196102f;
      sa[278] = -0.22471586f;
      sa[279] = 0.5701795f;
      sa[280] = -0.22913864f;
      sa[281] = 0.19094947f;
      sa[282] = -0.12997563f;
      sa[283] = -0.06294531f;
      sa[284] = -0.24260402f;
      sa[285] = -0.14220732f;
      sa[286] = 0.41676363f;
      sa[287] = 0.27075034f;
      sa[288] = -0.29951984f;
      sa[289] = -0.13573165f;
      sa[290] = -0.020797826f;
      sa[291] = 0.30746967f;
      sa[292] = 0.10198112f;
      sa[293] = -0.22958547f;
      sa[294] = 0.01526013f;
      sa[295] = 0.062025487f;
      sa[296] = 0.27550784f;
      sa[297] = 0.21447866f;
      sa[298] = -0.03329958f;
      sa[299] = -0.046405453f;
      sa[300] = -0.044901337f;
      sa[301] = -0.23020229f;
      sa[302] = 0.052224766f;
      sa[303] = 0.038984492f;
      sa[304] = -0.15097241f;
      sa[305] = 0.025529176f;
      sa[306] = 0.32860616f;
      sa[307] = -0.1610363f;
      sa[308] = 0.10670887f;
      sa[309] = 0.13901627f;
      sa[310] = 0.17556715f;
      sa[311] = 0.40510744f;
      sa[312] = -0.2011451f;
      sa[313] = -0.23216516f;
      sa[314] = -0.084034316f;
      sa[315] = -0.044538405f;
      sa[316] = -0.009936761f;
      sa[317] = -0.08824937f;
      sa[318] = 0.0055208295f;
      sa[319] = 0.35032693f;
      sa[320] = 0.16564831f;
      sa[321] = 0.2399734f;
      sa[322] = 0.24373583f;
      sa[323] = -0.19336167f;
      sa[324] = -0.018677616f;
      sa[325] = 0.28204373f;
      sa[326] = -0.46052602f;
      sa[327] = -0.14600867f;
      sa[328] = -0.11103484f;
      sa[329] = 0.21717645f;
      sa[330] = -0.22247192f;
      sa[331] = 0.035561267f;
      sa[332] = -0.24056941f;
      sa[333] = 0.18804762f;
      sa[334] = -0.06756367f;
      sa[335] = 0.2624746f;
      sa[336] = -0.1161254f;
      sa[337] = -0.14573589f;
      sa[338] = 0.403611f;
      sa[339] = -0.0981341f;
      sa[340] = -0.30333742f;
      sa[341] = -0.276266f;
      sa[342] = 0.37991524f;
      sa[343] = -0.099365756f;
      sa[344] = -0.16090223f;
      sa[345] = 0.18740289f;
      sa[346] = 0.21937661f;
      sa[347] = -0.14853549f;
      sa[348] = 0.27075177f;
      sa[349] = -0.32368276f;
      sa[350] = -0.11150503f;
      sa[351] = 0.49705574f;
      sa[352] = 0.2272547f;
      sa[353] = -0.050927427f;
      sa[354] = 0.060063932f;
      sa[355] = 0.15018363f;
      sa[356] = -0.1344782f;
      sa[357] = 0.23079978f;
      sa[358] = -0.16123348f;
      sa[359] = 0.24841449f;
      sa[360] = 0.23554294f;
      sa[361] = -0.10684583f;
      sa[362] = -0.25515634f;
      sa[363] = 0.24055465f;
      sa[364] = -0.23027489f;
      sa[365] = -0.28942576f;
      sa[366] = -0.08662891f;
      sa[367] = -0.22023505f;
      sa[368] = 0.012203672f;
      sa[369] = -0.056557614f;
      sa[370] = -0.1664671f;
      sa[371] = 0.41525325f;
      sa[372] = -0.15732813f;
      sa[373] = 0.14830929f;
      sa[374] = -0.27893558f;
      sa[375] = -0.34166962f;
      sa[376] = -0.43870446f;
      sa[377] = -0.462988f;
      sa[378] = 0.37993416f;
      sa[379] = -0.10155005f;
      sa[380] = -0.24871933f;
      sa[381] = -0.20437637f;
      sa[382] = -0.23145743f;
      sa[383] = -0.2933982f;
      sa[384] = -0.1725069f;
      sa[385] = 0.077480815f;
      sa[386] = -0.16628195f;
      sa[387] = -0.33695075f;
      sa[388] = -0.020168655f;
      sa[389] = -0.16465022f;
      sa[390] = -0.202348f;
      sa[391] = -0.19571882f;
      sa[392] = 0.45565754f;
      sa[393] = 0.4791552f;
      sa[394] = -0.17178236f;
      sa[395] = 0.14426556f;
      sa[396] = 0.34224603f;
      sa[397] = -0.2543988f;
      sa[398] = 0.16919357f;
      sa[399] = 0.101998f;
      sa[400] = 0.20669523f;
      sa[401] = 0.31700912f;
      sa[402] = -0.14858612f;
      sa[403] = 0.015672462f;
      sa[404] = 0.22227532f;
      sa[405] = -0.27956277f;
      sa[406] = -0.08837569f;
      sa[407] = 0.16324656f;
      sa[408] = -0.2540969f;
      sa[409] = -0.25283366f;
      sa[410] = -0.19941871f;
      sa[411] = 0.05058709f;
      sa[412] = -0.19040738f;
      sa[413] = 0.098947085f;
      sa[414] = -0.030250618f;
      sa[415] = 0.32838488f;
      sa[416] = -0.2142721f;
      sa[417] = 0.031977113f;
      sa[418] = 0.0039995094f;
      sa[419] = 0.19840439f;
      sa[420] = 0.23449036f;
      sa[421] = 0.28096485f;
      sa[422] = 0.14776011f;
      sa[423] = -0.20584914f;
      sa[424] = 0.11013738f;
      sa[425] = -0.08136625f;
      sa[426] = -0.28000802f;
      sa[427] = 0.15975295f;
      sa[428] = -0.10870018f;
      sa[429] = -0.15707077f;
      sa[430] = 0.022786641f;
      sa[431] = -0.15790847f;
      sa[432] = 0.07733172f;
      sa[433] = 0.08914893f;
      sa[434] = 0.082454026f;
      sa[435] = -0.15733756f;
      sa[436] = -0.30005276f;
      sa[437] = -0.16642791f;
      sa[438] = 0.049962386f;
      sa[439] = 0.08994246f;
      sa[440] = 0.39126083f;
      sa[441] = -0.5056073f;
      sa[442] = 0.09613715f;
      sa[443] = 0.05790282f;
      sa[444] = -0.21628085f;
      sa[445] = 0.16593517f;
      sa[446] = 0.3381004f;
      sa[447] = 0.067176424f;
      sa[448] = 0.119034655f;
      sa[449] = 0.10540702f;
      sa[450] = -0.1327323f;
      sa[451] = 0.0957165f;
      sa[452] = 0.16477656f;
      sa[453] = -0.115166254f;
      sa[454] = -0.12099233f;
      sa[455] = -0.13440253f;
      sa[456] = -0.10547276f;
      sa[457] = 0.13250801f;
      sa[458] = -0.25134787f;
      sa[459] = 0.3161212f;
      sa[460] = 0.204779f;
      sa[461] = 0.23287053f;
      sa[462] = 0.08563742f;
      sa[463] = 0.20341568f;
      sa[464] = -0.56966627f;
      sa[465] = 0.14434874f;
      sa[466] = -0.020920524f;
      sa[467] = 0.12688322f;
      sa[468] = 0.05189616f;
      sa[469] = 0.26280957f;
      sa[470] = 0.16821131f;
      sa[471] = 0.0283771f;
      sa[472] = -0.014938174f;
      sa[473] = -0.22483565f;
      sa[474] = -0.11788545f;
      sa[475] = 0.073457405f;
      sa[476] = 0.23379937f;
      sa[477] = -0.03910544f;
      sa[478] = 0.20170219f;
      sa[479] = -0.22616808f;
      sa[480] = -0.33334914f;
      sa[481] = -0.3025069f;
      sa[482] = -0.35587683f;
      sa[483] = 0.16446298f;
      sa[484] = 0.252643f;
      sa[485] = 0.2572134f;
      sa[486] = 0.4391979f;
      sa[487] = -0.20239536f;
      sa[488] = -0.19477911f;
      sa[489] = 0.08163891f;
      sa[490] = -0.075061426f;
      sa[491] = -0.28378287f;
      sa[492] = 0.21757963f;
      sa[493] = 0.26827195f;
      sa[494] = -0.071642585f;
      sa[495] = 0.35694236f;
      sa[496] = 0.015887063f;
      sa[497] = 0.08718002f;
      sa[498] = 0.15350689f;
      sa[499] = 0.15374942f;
      sa[500] = 0.13172638f;
      sa[501] = 0.101238966f;
      sa[502] = 0.28353107f;
      sa[503] = 0.13718824f;
      sa[504] = -0.20694223f;
      sa[505] = -0.21750432f;
      sa[506] = 0.45935836f;
      sa[507] = 0.09486779f;
      sa[508] = 0.17435512f;
      sa[509] = 0.30273375f;
      sa[510] = 0.31878495f;
      sa[511] = 0.029345354f;
      sa[512] = -0.0807112f;
      sa[513] = 0.07130134f;
      sa[514] = 0.16197427f;
      sa[515] = -0.1612271f;
      sa[516] = 0.010108946f;
      sa[517] = 0.16674392f;
      sa[518] = 0.24529454f;
      sa[519] = -0.028411303f;
      sa[520] = 0.25982192f;
      sa[521] = 0.22550224f;
      sa[522] = -0.057440512f;
      sa[523] = 0.2009613f;
      sa[524] = 0.15048242f;
      sa[525] = 0.20929565f;
      sa[526] = 0.14420854f;
      sa[527] = -0.03983021f;
      sa[528] = 0.06883323f;
      sa[529] = 0.114028014f;
      sa[530] = -0.32092962f;
      sa[531] = 0.009908981f;
      sa[532] = 0.10478185f;
      sa[533] = 0.12461202f;
      sa[534] = 0.16518891f;
      sa[535] = -0.08276069f;
      sa[536] = 0.124307655f;
      sa[537] = -0.034426358f;
      sa[538] = 0.15237331f;
      sa[539] = 0.27143717f;
      sa[540] = -0.18130183f;
      sa[541] = -0.21254522f;
      sa[542] = -0.3102572f;
      sa[543] = -0.615844f;
      sa[544] = 0.05022839f;
      sa[545] = 0.07041122f;
      sa[546] = 0.0119927665f;
      sa[547] = 0.2454952f;
      sa[548] = 0.15047102f;
      sa[549] = 0.2529969f;
      sa[550] = 0.06544053f;
      sa[551] = -0.05283964f;
      sa[552] = 0.06469366f;
      sa[553] = -0.055782f;
      sa[554] = -0.08896797f;
      sa[555] = -0.07214707f;
      sa[556] = -0.2198658f;
      sa[557] = -0.26890197f;
      sa[558] = -0.13584271f;
      sa[559] = 0.046199545f;
      sa[560] = -0.37043935f;
      sa[561] = -0.22162704f;
      sa[562] = 0.16764823f;
      sa[563] = -0.14517133f;
      sa[564] = 0.23800112f;
      sa[565] = 0.04296823f;
      sa[566] = 0.3792106f;
      sa[567] = 0.30574608f;
      sa[568] = -0.1362658f;
      sa[569] = -0.07245712f;
      sa[570] = -0.08007423f;
      sa[571] = -0.124179125f;
      sa[572] = -0.089849465f;
      sa[573] = 0.14179005f;
      sa[574] = 0.32470635f;
      sa[575] = -0.18303107f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_11_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_11_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.39034155f;
      sa[1] = 0.0348454f;
      sa[2] = -0.19409445f;
      sa[3] = -0.17215781f;
      sa[4] = 0.025764316f;
      sa[5] = -0.07739582f;
      sa[6] = 0.123641305f;
      sa[7] = -0.034159448f;
      sa[8] = -0.4422399f;
      sa[9] = 0.16783553f;
      sa[10] = -0.24036218f;
      sa[11] = 0.11972025f;
      sa[12] = 0.2973806f;
      sa[13] = 0.015654044f;
      sa[14] = -0.17460266f;
      sa[15] = 0.4170792f;
      sa[16] = 0.36730203f;
      sa[17] = -0.20653622f;
      sa[18] = 0.05093642f;
      sa[19] = -0.03242475f;
      sa[20] = 0.24493498f;
      sa[21] = -0.10607207f;
      sa[22] = -0.19116457f;
      sa[23] = 0.2169726f;
      sa[24] = -0.51897854f;
      sa[25] = 0.19052875f;
      sa[26] = -0.087983064f;
      sa[27] = 0.3941781f;
      sa[28] = -0.24861921f;
      sa[29] = -0.22993489f;
      sa[30] = 0.06261246f;
      sa[31] = -0.22450349f;
      sa[32] = -0.21171452f;
      sa[33] = -0.5367445f;
      sa[34] = 0.080360666f;
      sa[35] = 0.3791018f;
      sa[36] = 0.0059792125f;
      sa[37] = -0.14838639f;
      sa[38] = -0.022479404f;
      sa[39] = 0.13258843f;
      sa[40] = -0.3777574f;
      sa[41] = -0.29282352f;
      sa[42] = -0.43298215f;
      sa[43] = -0.52296233f;
      sa[44] = 0.009334587f;
      sa[45] = -0.24000324f;
      sa[46] = 0.39465174f;
      sa[47] = 0.44860035f;
      sa[48] = -0.41919336f;
      sa[49] = -0.28909156f;
      sa[50] = 0.10195622f;
      sa[51] = -0.07138459f;
      sa[52] = 0.16064908f;
      sa[53] = 0.15510051f;
      sa[54] = -0.07602184f;
      sa[55] = 0.32646644f;
      sa[56] = -0.31678742f;
      sa[57] = -0.31689793f;
      sa[58] = 0.039349444f;
      sa[59] = 0.0058753123f;
      sa[60] = 0.4721458f;
      sa[61] = -0.3891646f;
      sa[62] = -0.17657593f;
      sa[63] = 0.21310273f;
      sa[64] = 0.29723623f;
      sa[65] = -0.16458973f;
      sa[66] = 0.13182102f;
      sa[67] = 0.32662496f;
      sa[68] = 0.25338686f;
      sa[69] = -0.16591166f;
      sa[70] = -0.41180342f;
      sa[71] = -0.13131033f;
      sa[72] = -0.2942044f;
      sa[73] = 0.4045947f;
      sa[74] = 0.43400055f;
      sa[75] = -0.03889479f;
      sa[76] = 0.12011068f;
      sa[77] = 0.20306905f;
      sa[78] = -0.40757304f;
      sa[79] = 0.51782113f;
      sa[80] = -0.09526656f;
      sa[81] = 0.0035477115f;
      sa[82] = 0.27910027f;
      sa[83] = -0.15954441f;
      sa[84] = -0.3283975f;
      sa[85] = -0.39330024f;
      sa[86] = 0.014620783f;
      sa[87] = 0.26932055f;
      sa[88] = -0.4755714f;
      sa[89] = -0.19334085f;
      sa[90] = -0.3963123f;
      sa[91] = 0.35523665f;
      sa[92] = -0.1315093f;
      sa[93] = 0.15482679f;
      sa[94] = -0.32207397f;
      sa[95] = -0.15086041f;
      sa[96] = -0.30799004f;
      sa[97] = -0.014064182f;
      sa[98] = -6.854443E-4f;
      sa[99] = 0.13844886f;
      sa[100] = -0.35639927f;
      sa[101] = -0.21288905f;
      sa[102] = 0.31716695f;
      sa[103] = 0.034196287f;
      sa[104] = -0.20464584f;
      sa[105] = -0.14309886f;
      sa[106] = 0.31841108f;
      sa[107] = 0.31739604f;
      sa[108] = 0.27486578f;
      sa[109] = -0.06183474f;
      sa[110] = 0.17995048f;
      sa[111] = -0.15643565f;
      sa[112] = -0.28751206f;
      sa[113] = 0.05415954f;
      sa[114] = 0.058029518f;
      sa[115] = -0.16492544f;
      sa[116] = 0.39784676f;
      sa[117] = 0.002217747f;
      sa[118] = -0.4719258f;
      sa[119] = -0.21871194f;
      sa[120] = -0.10922767f;
      sa[121] = 0.2503589f;
      sa[122] = -0.091716126f;
      sa[123] = 0.086250186f;
      sa[124] = -0.22238122f;
      sa[125] = 0.19526327f;
      sa[126] = -0.28394288f;
      sa[127] = 0.22697848f;
      sa[128] = -0.24665086f;
      sa[129] = 0.1251716f;
      sa[130] = -0.019803595f;
      sa[131] = 0.113250196f;
      sa[132] = -0.081906155f;
      sa[133] = 0.12871973f;
      sa[134] = 0.50396603f;
      sa[135] = -0.4226148f;
      sa[136] = 0.1449314f;
      sa[137] = -0.13797341f;
      sa[138] = 0.18157376f;
      sa[139] = 0.3446145f;
      sa[140] = -0.18825799f;
      sa[141] = -0.053274468f;
      sa[142] = -0.16689722f;
      sa[143] = -0.3427224f;
      sa[144] = 0.39354348f;
      sa[145] = -0.3184762f;
      sa[146] = 0.103361584f;
      sa[147] = -0.06157364f;
      sa[148] = -0.3447927f;
      sa[149] = 0.28960866f;
      sa[150] = 0.006486373f;
      sa[151] = -0.5086934f;
      sa[152] = 0.45804107f;
      sa[153] = -0.22772478f;
      sa[154] = 0.44846332f;
      sa[155] = -0.4207401f;
      sa[156] = -0.45663494f;
      sa[157] = -0.2573725f;
      sa[158] = -0.05018221f;
      sa[159] = -0.42795232f;
      sa[160] = 0.35099366f;
      sa[161] = -0.3221016f;
      sa[162] = 0.4231781f;
      sa[163] = -0.27626535f;
      sa[164] = 0.25071448f;
      sa[165] = -0.20525178f;
      sa[166] = 0.43429565f;
      sa[167] = -0.46702543f;
      sa[168] = 0.24971585f;
      sa[169] = -0.43624666f;
      sa[170] = 0.30907658f;
      sa[171] = 0.27518955f;
      sa[172] = 0.371014f;
      sa[173] = 0.33047935f;
      sa[174] = -0.13841394f;
      sa[175] = -0.021156568f;
      sa[176] = -0.1979141f;
      sa[177] = 0.24354498f;
      sa[178] = -0.3928659f;
      sa[179] = -0.02134549f;
      sa[180] = -0.5186574f;
      sa[181] = -0.28495154f;
      sa[182] = -0.061783876f;
      sa[183] = -0.13225263f;
      sa[184] = 0.5206337f;
      sa[185] = 0.11869631f;
      sa[186] = -0.18210962f;
      sa[187] = -0.11471906f;
      sa[188] = -0.013127983f;
      sa[189] = -0.29536995f;
      sa[190] = -0.32978228f;
      sa[191] = -0.30680043f;
      sa[192] = -0.1088048f;
      sa[193] = 0.17361401f;
      sa[194] = -0.32401428f;
      sa[195] = -0.30250654f;
      sa[196] = 0.13646664f;
      sa[197] = -0.12359378f;
      sa[198] = 0.052338496f;
      sa[199] = 0.42268276f;
      sa[200] = 0.087803885f;
      sa[201] = 0.28565195f;
      sa[202] = 0.25795284f;
      sa[203] = -0.40304253f;
      sa[204] = 0.09149445f;
      sa[205] = 0.38137498f;
      sa[206] = -0.18955837f;
      sa[207] = 0.19182949f;
      sa[208] = -0.089193575f;
      sa[209] = 0.23813458f;
      sa[210] = -0.13276292f;
      sa[211] = -0.27173114f;
      sa[212] = -0.2795164f;
      sa[213] = -0.057072077f;
      sa[214] = -0.61039764f;
      sa[215] = 0.0031445862f;
      sa[216] = 0.022132237f;
      sa[217] = 0.29021874f;
      sa[218] = -0.18602023f;
      sa[219] = 0.051213093f;
      sa[220] = 0.22122926f;
      sa[221] = 0.02695822f;
      sa[222] = -0.12499644f;
      sa[223] = -0.1785419f;
      sa[224] = 0.44717276f;
      sa[225] = -0.02035183f;
      sa[226] = 0.011156648f;
      sa[227] = 0.08973244f;
      sa[228] = 0.026488164f;
      sa[229] = -0.20765537f;
      sa[230] = -0.3246607f;
      sa[231] = -0.18107086f;
      sa[232] = 0.40477479f;
      sa[233] = -0.20808081f;
      sa[234] = -0.28152713f;
      sa[235] = -0.043002065f;
      sa[236] = -0.50305706f;
      sa[237] = 0.570436f;
      sa[238] = 0.35415044f;
      sa[239] = -0.16974477f;
      sa[240] = -0.03868555f;
      sa[241] = -0.53802896f;
      sa[242] = -0.120435596f;
      sa[243] = 0.38248032f;
      sa[244] = 0.2624098f;
      sa[245] = 0.43758318f;
      sa[246] = 0.30994785f;
      sa[247] = -0.52363324f;
      sa[248] = -0.13989753f;
      sa[249] = -0.009076758f;
      sa[250] = 0.3404462f;
      sa[251] = 0.356149f;
      sa[252] = -0.31468895f;
      sa[253] = -0.20569097f;
      sa[254] = 0.3818648f;
      sa[255] = 0.009619269f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_11_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_Tanh_11_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.23422877f;
      sa[1] = -1.5219744f;
      sa[2] = -1.7226771f;
      sa[3] = 1.2567309f;
      sa[4] = 0.4040114f;
      sa[5] = -0.2052794f;
      sa[6] = -1.5461783f;
      sa[7] = 1.4738821f;
      sa[8] = 1.8558356f;
      sa[9] = 0.4648517f;
      sa[10] = 1.7248392f;
      sa[11] = 1.433035f;
      sa[12] = 1.8776402f;
      sa[13] = -0.52621436f;
      sa[14] = -1.9499313f;
      sa[15] = -0.66631466f;
      sa[16] = 0.6305494f;
      sa[17] = -0.79013103f;
      sa[18] = -1.5693363f;
      sa[19] = -1.0402254f;
      sa[20] = -2.025259f;
      sa[21] = 0.23554969f;
      sa[22] = -1.7742141f;
      sa[23] = -0.895242f;
      sa[24] = -0.3917407f;
      sa[25] = 2.1635983f;
      sa[26] = -0.13818689f;
      sa[27] = 1.180026f;
      sa[28] = 1.0976658f;
      sa[29] = -0.8645515f;
      sa[30] = 0.2912395f;
      sa[31] = 0.22663502f;
      sa[32] = 0.5434129f;
      sa[33] = 0.20337376f;
      sa[34] = -0.59448916f;
      sa[35] = 1.0609871f;
      sa[36] = 0.6073954f;
      sa[37] = -1.2930713f;
      sa[38] = 0.664568f;
      sa[39] = -0.1968805f;
      sa[40] = 0.3100952f;
      sa[41] = -0.5721288f;
      sa[42] = 0.6683948f;
      sa[43] = -0.03328808f;
      sa[44] = 1.0248455f;
      sa[45] = -2.032f;
      sa[46] = -2.1966283f;
      sa[47] = 0.13608822f;
      sa[48] = 1.6033455f;
      sa[49] = -0.12222113f;
      sa[50] = -0.37127024f;
      sa[51] = 1.8205707f;
      sa[52] = -1.6443304f;
      sa[53] = 1.060017f;
      sa[54] = 1.6649572f;
      sa[55] = 1.0868994f;
      sa[56] = -0.67402023f;
      sa[57] = -0.2331512f;
      sa[58] = 0.91489446f;
      sa[59] = 0.8086013f;
      sa[60] = -1.4328673f;
      sa[61] = 0.98251665f;
      sa[62] = -0.34472528f;
      sa[63] = -0.88567525f;
      sa[64] = 0.86815274f;
      sa[65] = -0.9775328f;
      sa[66] = -1.7482585f;
      sa[67] = 0.05544825f;
      sa[68] = 0.89545333f;
      sa[69] = -1.2459992f;
      sa[70] = -1.651245f;
      sa[71] = 0.36247563f;
      sa[72] = -1.0690565f;
      sa[73] = -1.5930307f;
      sa[74] = -1.2774516f;
      sa[75] = 1.2911032f;
      sa[76] = 2.2564344f;
      sa[77] = -0.4657952f;
      sa[78] = -1.4155725f;
      sa[79] = -0.63173306f;
      sa[80] = 0.6649505f;
      sa[81] = -1.5061997f;
      sa[82] = -0.13765071f;
      sa[83] = -1.4341245f;
      sa[84] = 1.678942f;
      sa[85] = 0.97052824f;
      sa[86] = -2.0311685f;
      sa[87] = 1.2172881f;
      sa[88] = -1.5886812f;
      sa[89] = -0.8041105f;
      sa[90] = 0.32574606f;
      sa[91] = 0.104639046f;
      sa[92] = 1.4198388f;
      sa[93] = 1.7807689f;
      sa[94] = 1.7175065f;
      sa[95] = 0.75026643f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_11 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_11_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_11_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_11_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_Tanh_11_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_11_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


