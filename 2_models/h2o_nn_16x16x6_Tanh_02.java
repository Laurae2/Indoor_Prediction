/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:50:17.273+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_02

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_02 > h2o_nn_16x16x6_Tanh_02.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_02.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_02", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_02 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_02_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_02_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_02_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_02_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_02_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_02_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_02_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_02_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_02_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_02_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_02_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_02_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_02.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_02_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25,0.25,0.125,0.25,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_02() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-8254815483772206440L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_02_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_02_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_02_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_02_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_02_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_02_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_02_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_02_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_02_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_02_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_02_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_02_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_02_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_02_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_02_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_02_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.008679617789666338;
      sa[1] = -0.003965437684379847;
      sa[2] = 0.03802851258348233;
      sa[3] = -0.023533776464043598;
      sa[4] = -0.007355310642420621;
      sa[5] = 0.008744885042645218;
      sa[6] = 0.06332706887643626;
      sa[7] = 0.05206369015188006;
      sa[8] = -0.03692539534476339;
      sa[9] = -0.044911937309558364;
      sa[10] = 0.008131573088540038;
      sa[11] = 0.03441973126154283;
      sa[12] = 0.031174846833046523;
      sa[13] = 0.003993853581076729;
      sa[14] = 0.05288269751248316;
      sa[15] = 0.02925334160758326;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_02_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_02_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_02_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.02975472396534509;
      sa[1] = 0.005540116437612893;
      sa[2] = -3.9663887002192944E-4;
      sa[3] = 0.044253715788919415;
      sa[4] = 0.0029772950351307946;
      sa[5] = 0.0049401220901428245;
      sa[6] = 0.02378572787453325;
      sa[7] = 0.037730494086856206;
      sa[8] = -0.04603924497939295;
      sa[9] = -0.03949888514112636;
      sa[10] = 0.004698629893730183;
      sa[11] = -0.018417584579971703;
      sa[12] = -0.020211877797564934;
      sa[13] = 0.023425649324743787;
      sa[14] = 2.912663369330477E-4;
      sa[15] = -0.04079619238950117;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_02_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_02_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_02_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.00897658579676207;
      sa[1] = -0.050456888916970935;
      sa[2] = -0.031280964343024256;
      sa[3] = 0.022652996254212052;
      sa[4] = 0.015307338371903916;
    }
  }
}
class h2o_nn_16x16x6_Tanh_02_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_02_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_02_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_02_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.06707071f;
      sa[1] = 0.29172868f;
      sa[2] = 0.20610008f;
      sa[3] = 0.24026883f;
      sa[4] = -0.1983722f;
      sa[5] = -0.20301051f;
      sa[6] = -0.055640023f;
      sa[7] = 0.2609149f;
      sa[8] = 0.15949048f;
      sa[9] = -0.17620556f;
      sa[10] = -0.16476032f;
      sa[11] = -0.19980553f;
      sa[12] = 0.10050449f;
      sa[13] = -0.2890062f;
      sa[14] = -0.189723f;
      sa[15] = 0.0018318689f;
      sa[16] = 0.16143194f;
      sa[17] = 0.18412843f;
      sa[18] = -0.24451862f;
      sa[19] = 0.13442628f;
      sa[20] = 0.2798681f;
      sa[21] = -0.3236088f;
      sa[22] = 0.26389182f;
      sa[23] = -0.16299202f;
      sa[24] = 0.3298477f;
      sa[25] = 0.18529627f;
      sa[26] = -0.30030313f;
      sa[27] = 0.2859808f;
      sa[28] = 0.2801423f;
      sa[29] = -0.2945373f;
      sa[30] = -0.18462045f;
      sa[31] = 0.1986454f;
      sa[32] = 0.26495004f;
      sa[33] = -0.2768294f;
      sa[34] = 0.08529743f;
      sa[35] = -0.120415f;
      sa[36] = 0.11304497f;
      sa[37] = 0.32730263f;
      sa[38] = -0.07919653f;
      sa[39] = 0.22146241f;
      sa[40] = 0.015099724f;
      sa[41] = -0.09527981f;
      sa[42] = -0.16403086f;
      sa[43] = 0.050839543f;
      sa[44] = 0.2848305f;
      sa[45] = -0.23199293f;
      sa[46] = 0.057565447f;
      sa[47] = -0.0029499903f;
      sa[48] = 0.25585344f;
      sa[49] = 0.2802557f;
      sa[50] = 0.22378556f;
      sa[51] = -0.29587343f;
      sa[52] = -0.049922775f;
      sa[53] = 0.2822856f;
      sa[54] = 0.20559268f;
      sa[55] = 0.071747795f;
      sa[56] = -0.17468168f;
      sa[57] = -0.31978723f;
      sa[58] = 0.29405785f;
      sa[59] = -0.18315545f;
      sa[60] = -0.30226558f;
      sa[61] = 0.20133676f;
      sa[62] = 0.112866715f;
      sa[63] = 0.017384814f;
      sa[64] = 0.15309276f;
      sa[65] = 0.124170326f;
      sa[66] = 0.013273041f;
      sa[67] = 0.16023259f;
      sa[68] = -0.06597191f;
      sa[69] = 0.15848403f;
      sa[70] = -0.116550386f;
      sa[71] = 0.3665208f;
      sa[72] = -0.15699337f;
      sa[73] = 0.17225827f;
      sa[74] = -0.22077355f;
      sa[75] = 0.033772755f;
      sa[76] = -0.18761739f;
      sa[77] = -0.048837032f;
      sa[78] = -0.048748434f;
      sa[79] = 0.16502537f;
      sa[80] = -0.24648155f;
      sa[81] = -0.17625767f;
      sa[82] = -0.051800177f;
      sa[83] = 0.1094038f;
      sa[84] = -0.011481895f;
      sa[85] = -0.17748459f;
      sa[86] = 0.18175676f;
      sa[87] = 0.27399606f;
      sa[88] = 0.211913f;
      sa[89] = -0.022782119f;
      sa[90] = -0.108047836f;
      sa[91] = 0.15792805f;
      sa[92] = 0.12192607f;
      sa[93] = -0.20394634f;
      sa[94] = -0.17127268f;
      sa[95] = -0.25763652f;
      sa[96] = 0.120421216f;
      sa[97] = 0.029625094f;
      sa[98] = 0.24831246f;
      sa[99] = -0.08675065f;
      sa[100] = -0.050850976f;
      sa[101] = -0.17917077f;
      sa[102] = -0.2604684f;
      sa[103] = -0.08637885f;
      sa[104] = -0.037446372f;
      sa[105] = -0.13855122f;
      sa[106] = -0.2541938f;
      sa[107] = 0.12671748f;
      sa[108] = 0.17689238f;
      sa[109] = -0.25302246f;
      sa[110] = -0.20160966f;
      sa[111] = 0.17210224f;
      sa[112] = 0.1366748f;
      sa[113] = 0.033359908f;
      sa[114] = -0.1751776f;
      sa[115] = -0.07806117f;
      sa[116] = -0.26638365f;
      sa[117] = -0.03307693f;
      sa[118] = -0.2916302f;
      sa[119] = -0.182926f;
      sa[120] = 0.22608237f;
      sa[121] = 0.24042474f;
      sa[122] = 0.31706548f;
      sa[123] = 0.25892714f;
      sa[124] = 0.27467945f;
      sa[125] = 0.27756202f;
      sa[126] = -0.27917925f;
      sa[127] = -0.24241227f;
      sa[128] = 0.0716512f;
      sa[129] = 0.16680248f;
      sa[130] = -0.1373104f;
      sa[131] = 0.31083223f;
      sa[132] = 0.18779808f;
      sa[133] = -0.32999805f;
      sa[134] = 0.11061632f;
      sa[135] = -0.27923936f;
      sa[136] = -0.301594f;
      sa[137] = -0.02958877f;
      sa[138] = 0.12529236f;
      sa[139] = -0.11622789f;
      sa[140] = -0.08423508f;
      sa[141] = -0.16008365f;
      sa[142] = 0.16605073f;
      sa[143] = -0.3214126f;
      sa[144] = 0.30944306f;
      sa[145] = -0.16234952f;
      sa[146] = -0.2934974f;
      sa[147] = 0.20652728f;
      sa[148] = 0.19080983f;
      sa[149] = 0.20642222f;
      sa[150] = 0.31984988f;
      sa[151] = -0.27648777f;
      sa[152] = 0.056716274f;
      sa[153] = 0.28739208f;
      sa[154] = 0.24717757f;
      sa[155] = -0.18728012f;
      sa[156] = 0.14378731f;
      sa[157] = -0.20767422f;
      sa[158] = 0.093080334f;
      sa[159] = 0.08765522f;
      sa[160] = 0.06740472f;
      sa[161] = 0.19833678f;
      sa[162] = -0.17079133f;
      sa[163] = -0.11199749f;
      sa[164] = 0.2652822f;
      sa[165] = -0.021396982f;
      sa[166] = -0.065522075f;
      sa[167] = -0.105952956f;
      sa[168] = 0.17487277f;
      sa[169] = 0.3301528f;
      sa[170] = 0.027385399f;
      sa[171] = -0.07326475f;
      sa[172] = -0.062976144f;
      sa[173] = -0.15425941f;
      sa[174] = -0.018857706f;
      sa[175] = -0.27427188f;
      sa[176] = -0.04992244f;
      sa[177] = -0.04947776f;
      sa[178] = -0.078201614f;
      sa[179] = 0.08137355f;
      sa[180] = -0.062128074f;
      sa[181] = -0.29148334f;
      sa[182] = -0.1632317f;
      sa[183] = 0.10070147f;
      sa[184] = 0.30718526f;
      sa[185] = 0.1780602f;
      sa[186] = -0.34268323f;
      sa[187] = 0.056733694f;
      sa[188] = -0.029138852f;
      sa[189] = 0.21965958f;
      sa[190] = 0.028974017f;
      sa[191] = -0.021537f;
      sa[192] = -0.1452458f;
      sa[193] = 0.24277644f;
      sa[194] = 0.076082714f;
      sa[195] = 0.2849243f;
      sa[196] = 0.30971715f;
      sa[197] = -0.06794336f;
      sa[198] = 0.12435738f;
      sa[199] = -0.11917624f;
      sa[200] = 0.027898265f;
      sa[201] = -0.29975402f;
      sa[202] = 0.13513541f;
      sa[203] = -0.02755604f;
      sa[204] = -0.19727094f;
      sa[205] = 0.22652406f;
      sa[206] = 0.24972679f;
      sa[207] = 0.14478777f;
      sa[208] = -0.28140143f;
      sa[209] = -0.082409486f;
      sa[210] = -0.31267828f;
      sa[211] = -0.27588013f;
      sa[212] = 0.294989f;
      sa[213] = -0.25290853f;
      sa[214] = -0.09667083f;
      sa[215] = 0.022473255f;
      sa[216] = 0.06946365f;
      sa[217] = 0.18477428f;
      sa[218] = -0.19554138f;
      sa[219] = 0.20245178f;
      sa[220] = -0.22118057f;
      sa[221] = 0.061086725f;
      sa[222] = 0.2662447f;
      sa[223] = 0.06281595f;
      sa[224] = 0.08099181f;
      sa[225] = 0.3058871f;
      sa[226] = -0.26462957f;
      sa[227] = 0.34081268f;
      sa[228] = 0.13916504f;
      sa[229] = 0.10798804f;
      sa[230] = 0.29208258f;
      sa[231] = -0.2678917f;
      sa[232] = -0.27990478f;
      sa[233] = 0.06326003f;
      sa[234] = 0.17285061f;
      sa[235] = -0.3403568f;
      sa[236] = -0.034180738f;
      sa[237] = -0.23297903f;
      sa[238] = -0.22199668f;
      sa[239] = 0.1524872f;
      sa[240] = 0.0071000443f;
      sa[241] = -0.2545891f;
      sa[242] = -0.07430922f;
      sa[243] = -0.24398565f;
      sa[244] = -0.22055201f;
      sa[245] = -0.13050489f;
      sa[246] = -0.27927595f;
      sa[247] = -0.05673001f;
      sa[248] = 0.2465072f;
      sa[249] = 0.29108888f;
      sa[250] = -0.23402922f;
      sa[251] = -0.120895214f;
      sa[252] = -0.3286611f;
      sa[253] = -0.32664043f;
      sa[254] = -0.25852004f;
      sa[255] = 0.18663445f;
      sa[256] = -0.17929284f;
      sa[257] = 0.31594753f;
      sa[258] = -0.25166073f;
      sa[259] = -0.116549f;
      sa[260] = -0.26560256f;
      sa[261] = -0.11861544f;
      sa[262] = -0.1492637f;
      sa[263] = 0.260809f;
      sa[264] = -0.15812936f;
      sa[265] = 0.07509433f;
      sa[266] = -0.28602517f;
      sa[267] = -0.25319785f;
      sa[268] = 0.110249124f;
      sa[269] = -0.18772177f;
      sa[270] = 0.0072292937f;
      sa[271] = 0.22116452f;
      sa[272] = -0.09713323f;
      sa[273] = -0.12764148f;
      sa[274] = 0.14581846f;
      sa[275] = 0.003484429f;
      sa[276] = 0.11392353f;
      sa[277] = -0.25407454f;
      sa[278] = -0.114193305f;
      sa[279] = 0.23300107f;
      sa[280] = -0.18140832f;
      sa[281] = 0.31334895f;
      sa[282] = -0.09674789f;
      sa[283] = -0.043587465f;
      sa[284] = 0.01043651f;
      sa[285] = -0.19402714f;
      sa[286] = 0.274599f;
      sa[287] = 0.16445544f;
      sa[288] = -0.19912578f;
      sa[289] = -0.15944844f;
      sa[290] = -0.11320928f;
      sa[291] = 0.0820178f;
      sa[292] = 0.11849008f;
      sa[293] = -0.116939396f;
      sa[294] = 0.070462145f;
      sa[295] = 0.10851078f;
      sa[296] = 0.2631857f;
      sa[297] = 0.22242041f;
      sa[298] = -0.030344836f;
      sa[299] = -0.0085695125f;
      sa[300] = -0.016458346f;
      sa[301] = -0.07714706f;
      sa[302] = 0.16333719f;
      sa[303] = 0.033633847f;
      sa[304] = -0.18121213f;
      sa[305] = -0.02808667f;
      sa[306] = 0.20939876f;
      sa[307] = -0.20238878f;
      sa[308] = 0.087707736f;
      sa[309] = 0.14950605f;
      sa[310] = 0.29513246f;
      sa[311] = 0.32865474f;
      sa[312] = -0.22527246f;
      sa[313] = -0.18000668f;
      sa[314] = -0.18406434f;
      sa[315] = -0.070696995f;
      sa[316] = -0.032323975f;
      sa[317] = -0.10995671f;
      sa[318] = 0.08500333f;
      sa[319] = 0.30172995f;
      sa[320] = 0.024027593f;
      sa[321] = 0.18846558f;
      sa[322] = 0.20050775f;
      sa[323] = -0.23104489f;
      sa[324] = 0.018033693f;
      sa[325] = 0.33179754f;
      sa[326] = -0.27289432f;
      sa[327] = 0.03522213f;
      sa[328] = -0.08344073f;
      sa[329] = 0.2516392f;
      sa[330] = -0.21258909f;
      sa[331] = 0.004253828f;
      sa[332] = -0.26416707f;
      sa[333] = 0.18362373f;
      sa[334] = -0.056331076f;
      sa[335] = 0.23937142f;
      sa[336] = -0.17487817f;
      sa[337] = -0.17981333f;
      sa[338] = 0.29026958f;
      sa[339] = -0.23305808f;
      sa[340] = -0.33888257f;
      sa[341] = -0.23256893f;
      sa[342] = 0.18113604f;
      sa[343] = -0.082246244f;
      sa[344] = -0.18664287f;
      sa[345] = 0.21009536f;
      sa[346] = 0.21736577f;
      sa[347] = -0.1894957f;
      sa[348] = 0.3162217f;
      sa[349] = -0.26041636f;
      sa[350] = -0.27734274f;
      sa[351] = 0.13567844f;
      sa[352] = 0.21042603f;
      sa[353] = -0.050071713f;
      sa[354] = 0.086676605f;
      sa[355] = 0.12512155f;
      sa[356] = -0.14116932f;
      sa[357] = 0.19819234f;
      sa[358] = -0.31430706f;
      sa[359] = 0.05409872f;
      sa[360] = 0.106145024f;
      sa[361] = -0.047741357f;
      sa[362] = -0.19720133f;
      sa[363] = 0.19509849f;
      sa[364] = -0.11248764f;
      sa[365] = -0.22556543f;
      sa[366] = 0.013536701f;
      sa[367] = -0.30839708f;
      sa[368] = -0.18372825f;
      sa[369] = 0.2729076f;
      sa[370] = -0.24152273f;
      sa[371] = 0.13915604f;
      sa[372] = -0.005829084f;
      sa[373] = 0.32199845f;
      sa[374] = -0.14499329f;
      sa[375] = -0.3222719f;
      sa[376] = -0.347757f;
      sa[377] = -0.27326366f;
      sa[378] = 0.3515561f;
      sa[379] = 0.055837747f;
      sa[380] = -0.1092889f;
      sa[381] = -0.07781862f;
      sa[382] = -0.020918645f;
      sa[383] = -0.12927584f;
      sa[384] = -0.19182494f;
      sa[385] = 0.09908266f;
      sa[386] = -0.2526268f;
      sa[387] = -0.24273631f;
      sa[388] = 0.106484234f;
      sa[389] = 0.013911038f;
      sa[390] = 0.007992535f;
      sa[391] = -0.11108809f;
      sa[392] = 0.24105026f;
      sa[393] = 0.24623398f;
      sa[394] = -0.09955052f;
      sa[395] = 0.27468646f;
      sa[396] = 0.29825082f;
      sa[397] = -0.31008253f;
      sa[398] = 0.12038195f;
      sa[399] = 0.0545907f;
      sa[400] = 0.22333287f;
      sa[401] = 0.29599053f;
      sa[402] = -0.11894859f;
      sa[403] = 0.08793596f;
      sa[404] = 0.22974455f;
      sa[405] = -0.28149867f;
      sa[406] = -0.114804454f;
      sa[407] = 0.17117386f;
      sa[408] = -0.22565131f;
      sa[409] = -0.25181442f;
      sa[410] = -0.10764665f;
      sa[411] = 0.19043565f;
      sa[412] = -0.17011763f;
      sa[413] = 0.08988435f;
      sa[414] = 0.17056626f;
      sa[415] = 0.32284555f;
      sa[416] = -0.19780686f;
      sa[417] = 0.03927423f;
      sa[418] = 0.01243835f;
      sa[419] = 0.2960196f;
      sa[420] = 0.20260447f;
      sa[421] = 0.24927412f;
      sa[422] = 0.26856843f;
      sa[423] = -0.012125032f;
      sa[424] = 0.11348732f;
      sa[425] = -0.065438315f;
      sa[426] = -0.29786626f;
      sa[427] = 0.2107373f;
      sa[428] = -0.06801984f;
      sa[429] = -0.12807414f;
      sa[430] = 0.17239185f;
      sa[431] = -0.01681505f;
      sa[432] = -0.059266962f;
      sa[433] = 0.12718135f;
      sa[434] = 0.26606786f;
      sa[435] = -0.033192433f;
      sa[436] = -0.25875655f;
      sa[437] = -0.25559264f;
      sa[438] = 0.035026204f;
      sa[439] = 0.018325185f;
      sa[440] = 0.31934738f;
      sa[441] = -0.3359058f;
      sa[442] = 0.10948652f;
      sa[443] = 0.010419366f;
      sa[444] = -0.23133837f;
      sa[445] = 0.07907701f;
      sa[446] = 0.26913506f;
      sa[447] = 0.06782617f;
      sa[448] = 0.17750384f;
      sa[449] = 0.25533372f;
      sa[450] = -0.08685701f;
      sa[451] = 0.11467302f;
      sa[452] = 0.19595793f;
      sa[453] = -0.041400317f;
      sa[454] = -0.15785106f;
      sa[455] = -0.07338011f;
      sa[456] = -0.07015988f;
      sa[457] = 0.115490265f;
      sa[458] = -0.22141698f;
      sa[459] = 0.33471772f;
      sa[460] = 0.24365997f;
      sa[461] = 0.320918f;
      sa[462] = 0.069933586f;
      sa[463] = 0.23431621f;
      sa[464] = -0.39105996f;
      sa[465] = 0.24161854f;
      sa[466] = -0.035709355f;
      sa[467] = 0.13566607f;
      sa[468] = 0.15482081f;
      sa[469] = 0.33110842f;
      sa[470] = 0.2193113f;
      sa[471] = 0.07972972f;
      sa[472] = 0.014276578f;
      sa[473] = -0.11437899f;
      sa[474] = -5.785307E-4f;
      sa[475] = 0.14985952f;
      sa[476] = 0.31948555f;
      sa[477] = -0.15662177f;
      sa[478] = 0.14220758f;
      sa[479] = -0.17238818f;
      sa[480] = -0.31333148f;
      sa[481] = -0.21735968f;
      sa[482] = -0.25741962f;
      sa[483] = 0.24489744f;
      sa[484] = 0.23717068f;
      sa[485] = 0.14544995f;
      sa[486] = -0.03565482f;
      sa[487] = -0.20601135f;
      sa[488] = -0.20209488f;
      sa[489] = 0.0981333f;
      sa[490] = 0.01204461f;
      sa[491] = -0.25396344f;
      sa[492] = 0.20651911f;
      sa[493] = 0.30399418f;
      sa[494] = -0.26464674f;
      sa[495] = 0.18073684f;
      sa[496] = 0.0016343842f;
      sa[497] = 0.07389659f;
      sa[498] = 0.19070415f;
      sa[499] = 0.18372105f;
      sa[500] = -0.048741244f;
      sa[501] = 0.08469304f;
      sa[502] = 0.22449575f;
      sa[503] = 0.029943781f;
      sa[504] = -0.23451929f;
      sa[505] = -0.26198763f;
      sa[506] = 0.21126235f;
      sa[507] = -0.054676663f;
      sa[508] = 0.10323238f;
      sa[509] = 0.24135831f;
      sa[510] = 0.18949676f;
      sa[511] = -0.025472019f;
      sa[512] = 0.039056588f;
      sa[513] = -0.12521861f;
      sa[514] = 0.26545537f;
      sa[515] = -0.24303305f;
      sa[516] = 0.02394696f;
      sa[517] = 0.09843682f;
      sa[518] = 0.15047486f;
      sa[519] = -0.11279468f;
      sa[520] = 0.23192495f;
      sa[521] = 0.13099113f;
      sa[522] = 0.120377846f;
      sa[523] = 0.20816307f;
      sa[524] = 0.20086706f;
      sa[525] = 0.1718739f;
      sa[526] = -0.0061347215f;
      sa[527] = -0.111323185f;
      sa[528] = 0.012761691f;
      sa[529] = 0.11522255f;
      sa[530] = -0.17473134f;
      sa[531] = 0.037497092f;
      sa[532] = 0.14895394f;
      sa[533] = 0.12435848f;
      sa[534] = 0.1358544f;
      sa[535] = -0.11026927f;
      sa[536] = 0.13262755f;
      sa[537] = -0.20588604f;
      sa[538] = 0.21536434f;
      sa[539] = 0.29883277f;
      sa[540] = -0.27345607f;
      sa[541] = -0.17869374f;
      sa[542] = -0.0606119f;
      sa[543] = -0.33722585f;
      sa[544] = 0.17202002f;
      sa[545] = 0.1228921f;
      sa[546] = 0.094372205f;
      sa[547] = 0.20941973f;
      sa[548] = 0.07436332f;
      sa[549] = 0.17523813f;
      sa[550] = 0.006681891f;
      sa[551] = -0.15652888f;
      sa[552] = 0.051836602f;
      sa[553] = -0.058614194f;
      sa[554] = -0.16211417f;
      sa[555] = -0.16668631f;
      sa[556] = -0.2156623f;
      sa[557] = -0.27062574f;
      sa[558] = -0.2238903f;
      sa[559] = 0.14819421f;
      sa[560] = -0.32724038f;
      sa[561] = -0.09274073f;
      sa[562] = 0.22153227f;
      sa[563] = -0.08989031f;
      sa[564] = 0.30195615f;
      sa[565] = 0.050851345f;
      sa[566] = 0.2857431f;
      sa[567] = 0.038658302f;
      sa[568] = -0.07927704f;
      sa[569] = 0.033798818f;
      sa[570] = -0.018738467f;
      sa[571] = -0.0708885f;
      sa[572] = -0.19756208f;
      sa[573] = 0.05266115f;
      sa[574] = 0.28727365f;
      sa[575] = -0.22215816f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_02_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_02_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_02_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.38461128f;
      sa[1] = -0.04402658f;
      sa[2] = -0.14457545f;
      sa[3] = -0.23749472f;
      sa[4] = 0.082915746f;
      sa[5] = 0.09971195f;
      sa[6] = 0.2821298f;
      sa[7] = -0.16974127f;
      sa[8] = -0.2809903f;
      sa[9] = 0.13298738f;
      sa[10] = -0.08619619f;
      sa[11] = 0.1108164f;
      sa[12] = 0.12398166f;
      sa[13] = 0.044419903f;
      sa[14] = -0.2758989f;
      sa[15] = 0.34598732f;
      sa[16] = 0.40773824f;
      sa[17] = -0.12153331f;
      sa[18] = 0.016903577f;
      sa[19] = -0.096990675f;
      sa[20] = 0.27830747f;
      sa[21] = -0.02528805f;
      sa[22] = -0.28158712f;
      sa[23] = 0.23593384f;
      sa[24] = -0.35727787f;
      sa[25] = 0.13795058f;
      sa[26] = -0.05574182f;
      sa[27] = 0.4091127f;
      sa[28] = -0.4027981f;
      sa[29] = -0.13938494f;
      sa[30] = 0.1119786f;
      sa[31] = -0.1678218f;
      sa[32] = -0.33522373f;
      sa[33] = -0.39860442f;
      sa[34] = 0.010900803f;
      sa[35] = 0.36858854f;
      sa[36] = -0.13774773f;
      sa[37] = -0.03610821f;
      sa[38] = 0.022553755f;
      sa[39] = 0.25465325f;
      sa[40] = -0.21499574f;
      sa[41] = -0.33859855f;
      sa[42] = -0.27768457f;
      sa[43] = -0.3669753f;
      sa[44] = 0.0026651144f;
      sa[45] = -0.37811968f;
      sa[46] = 0.34184986f;
      sa[47] = 0.39927834f;
      sa[48] = -0.39900774f;
      sa[49] = -0.26570442f;
      sa[50] = 0.072634004f;
      sa[51] = -0.10601459f;
      sa[52] = 0.12881269f;
      sa[53] = 0.21359524f;
      sa[54] = -0.09053748f;
      sa[55] = 0.30779615f;
      sa[56] = -0.24724968f;
      sa[57] = -0.27712452f;
      sa[58] = 0.038390115f;
      sa[59] = -0.03522399f;
      sa[60] = 0.3652254f;
      sa[61] = -0.19816914f;
      sa[62] = -0.08209753f;
      sa[63] = 0.22629023f;
      sa[64] = 0.37182918f;
      sa[65] = -0.16964266f;
      sa[66] = 0.15425734f;
      sa[67] = 0.40157306f;
      sa[68] = 0.18289626f;
      sa[69] = -0.2732611f;
      sa[70] = -0.4235938f;
      sa[71] = -0.120106675f;
      sa[72] = -0.34442356f;
      sa[73] = 0.32122725f;
      sa[74] = 0.35760602f;
      sa[75] = -0.008779315f;
      sa[76] = 0.20970787f;
      sa[77] = 0.10189426f;
      sa[78] = -0.3421496f;
      sa[79] = 0.29235068f;
      sa[80] = -0.19919291f;
      sa[81] = 0.07337988f;
      sa[82] = 0.21905991f;
      sa[83] = -0.15725215f;
      sa[84] = -0.41556397f;
      sa[85] = -0.345021f;
      sa[86] = 0.06742876f;
      sa[87] = 0.3350903f;
      sa[88] = -0.41453132f;
      sa[89] = -0.14330158f;
      sa[90] = -0.28879774f;
      sa[91] = 0.40935913f;
      sa[92] = -0.04917932f;
      sa[93] = 0.09534917f;
      sa[94] = -0.40388125f;
      sa[95] = -0.056502018f;
      sa[96] = -0.3171043f;
      sa[97] = 0.040884178f;
      sa[98] = -0.022257058f;
      sa[99] = 0.082122155f;
      sa[100] = -0.39739358f;
      sa[101] = -0.1150812f;
      sa[102] = 0.32145435f;
      sa[103] = 0.035750017f;
      sa[104] = -0.05509688f;
      sa[105] = -0.14021787f;
      sa[106] = 0.36995786f;
      sa[107] = 0.32222414f;
      sa[108] = 0.21163985f;
      sa[109] = 0.013351816f;
      sa[110] = 0.2152897f;
      sa[111] = -0.15610255f;
      sa[112] = -0.32823205f;
      sa[113] = 0.046856876f;
      sa[114] = 0.023073552f;
      sa[115] = -0.11139526f;
      sa[116] = 0.30435225f;
      sa[117] = 0.010898991f;
      sa[118] = -0.37201482f;
      sa[119] = -0.22458407f;
      sa[120] = -0.06944788f;
      sa[121] = 0.2958596f;
      sa[122] = -0.031621948f;
      sa[123] = 0.09664074f;
      sa[124] = -0.17459136f;
      sa[125] = 0.17605488f;
      sa[126] = -0.2416463f;
      sa[127] = 0.17637755f;
      sa[128] = -0.29295084f;
      sa[129] = 0.21934022f;
      sa[130] = -0.11027053f;
      sa[131] = 0.19170818f;
      sa[132] = 8.5511006E-4f;
      sa[133] = 0.11769692f;
      sa[134] = 0.23078571f;
      sa[135] = -0.28953546f;
      sa[136] = 0.16932058f;
      sa[137] = -0.0995368f;
      sa[138] = 0.033134982f;
      sa[139] = 0.3249959f;
      sa[140] = -0.21352151f;
      sa[141] = -0.040071126f;
      sa[142] = -0.008271104f;
      sa[143] = -0.24864061f;
      sa[144] = 0.27136543f;
      sa[145] = -0.20036703f;
      sa[146] = 0.035384342f;
      sa[147] = -0.037654933f;
      sa[148] = -0.22416115f;
      sa[149] = 0.27876472f;
      sa[150] = -0.22657077f;
      sa[151] = -0.4241156f;
      sa[152] = 0.43547735f;
      sa[153] = -0.13918987f;
      sa[154] = 0.3868122f;
      sa[155] = -0.42910382f;
      sa[156] = -0.3855562f;
      sa[157] = -0.25382492f;
      sa[158] = -0.09799656f;
      sa[159] = -0.25205895f;
      sa[160] = 0.28381988f;
      sa[161] = -0.27578366f;
      sa[162] = 0.3855115f;
      sa[163] = -0.21387126f;
      sa[164] = 0.053521518f;
      sa[165] = -0.2038367f;
      sa[166] = 0.39324635f;
      sa[167] = -0.37916383f;
      sa[168] = 0.31121582f;
      sa[169] = -0.3385738f;
      sa[170] = 0.34884652f;
      sa[171] = 0.24754214f;
      sa[172] = 0.3604546f;
      sa[173] = 0.35210565f;
      sa[174] = -0.09021232f;
      sa[175] = -0.0029750417f;
      sa[176] = -0.19049026f;
      sa[177] = 0.035929937f;
      sa[178] = -0.27689338f;
      sa[179] = -0.08332232f;
      sa[180] = -0.34995466f;
      sa[181] = -0.22781639f;
      sa[182] = 0.093289636f;
      sa[183] = -0.28317705f;
      sa[184] = 0.3830469f;
      sa[185] = 0.31004596f;
      sa[186] = -0.14250259f;
      sa[187] = -0.27643517f;
      sa[188] = -0.09684735f;
      sa[189] = -0.17809339f;
      sa[190] = -0.39344376f;
      sa[191] = -0.28350767f;
      sa[192] = -0.05732437f;
      sa[193] = 0.12148659f;
      sa[194] = -0.2933975f;
      sa[195] = -0.24499162f;
      sa[196] = 0.16150081f;
      sa[197] = -0.22179168f;
      sa[198] = 0.031282898f;
      sa[199] = 0.3957787f;
      sa[200] = -0.014497788f;
      sa[201] = 0.26416367f;
      sa[202] = 0.18517236f;
      sa[203] = -0.3976679f;
      sa[204] = 0.1034802f;
      sa[205] = 0.36429802f;
      sa[206] = -0.15913112f;
      sa[207] = 0.12388662f;
      sa[208] = -0.1889165f;
      sa[209] = 0.17371273f;
      sa[210] = -0.10994035f;
      sa[211] = -0.2712067f;
      sa[212] = -0.32535446f;
      sa[213] = 0.056472268f;
      sa[214] = -0.3485496f;
      sa[215] = -0.0650469f;
      sa[216] = 0.13284123f;
      sa[217] = 0.32362586f;
      sa[218] = 0.021904573f;
      sa[219] = 0.097238824f;
      sa[220] = 0.1974872f;
      sa[221] = -0.019601723f;
      sa[222] = -0.26362413f;
      sa[223] = -0.2989697f;
      sa[224] = 0.309173f;
      sa[225] = 0.06173089f;
      sa[226] = -0.022842895f;
      sa[227] = 0.08922964f;
      sa[228] = -0.08068117f;
      sa[229] = -0.20406164f;
      sa[230] = -0.24251692f;
      sa[231] = -0.12220729f;
      sa[232] = 0.4222287f;
      sa[233] = -0.1989211f;
      sa[234] = -0.15777744f;
      sa[235] = 0.036161367f;
      sa[236] = -0.32045776f;
      sa[237] = 0.45527157f;
      sa[238] = 0.1736592f;
      sa[239] = -0.11017056f;
      sa[240] = -0.100739904f;
      sa[241] = -0.3927848f;
      sa[242] = -0.22959788f;
      sa[243] = 0.38762036f;
      sa[244] = 0.17385504f;
      sa[245] = 0.29003623f;
      sa[246] = 0.21754442f;
      sa[247] = -0.3123206f;
      sa[248] = -0.2111558f;
      sa[249] = 0.021972222f;
      sa[250] = 0.2577339f;
      sa[251] = 0.4208084f;
      sa[252] = 0.16032538f;
      sa[253] = -0.31244394f;
      sa[254] = 0.37582904f;
      sa[255] = 0.12438771f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_02_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_Tanh_02_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_02_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.20029804f;
      sa[1] = -1.5357169f;
      sa[2] = -1.607548f;
      sa[3] = 1.3496048f;
      sa[4] = 0.436278f;
      sa[5] = -0.18939841f;
      sa[6] = -1.6213616f;
      sa[7] = 1.5576397f;
      sa[8] = 1.8163264f;
      sa[9] = 0.22552177f;
      sa[10] = 1.6455805f;
      sa[11] = 1.5030955f;
      sa[12] = 1.9378455f;
      sa[13] = -0.52005947f;
      sa[14] = -1.9872491f;
      sa[15] = -0.6957855f;
      sa[16] = 0.7778103f;
      sa[17] = -0.7775603f;
      sa[18] = -1.583317f;
      sa[19] = -0.90009266f;
      sa[20] = -1.944071f;
      sa[21] = 0.3276394f;
      sa[22] = -1.9579619f;
      sa[23] = -0.668155f;
      sa[24] = -0.5506517f;
      sa[25] = 1.8510448f;
      sa[26] = -0.27708855f;
      sa[27] = 1.2055998f;
      sa[28] = 1.2258732f;
      sa[29] = -0.7595897f;
      sa[30] = 0.1545568f;
      sa[31] = 0.1021822f;
      sa[32] = 0.47745973f;
      sa[33] = 0.26112837f;
      sa[34] = -0.6161034f;
      sa[35] = 1.0473439f;
      sa[36] = 0.5775689f;
      sa[37] = -1.300512f;
      sa[38] = 0.6168417f;
      sa[39] = -0.19792083f;
      sa[40] = 0.22816151f;
      sa[41] = -0.7388301f;
      sa[42] = 0.5015602f;
      sa[43] = -0.013895888f;
      sa[44] = 1.0448458f;
      sa[45] = -1.9445727f;
      sa[46] = -2.1551378f;
      sa[47] = 0.022164457f;
      sa[48] = 1.6219128f;
      sa[49] = -0.23511837f;
      sa[50] = -0.4675795f;
      sa[51] = 1.8599668f;
      sa[52] = -1.7016581f;
      sa[53] = 0.9264881f;
      sa[54] = 1.7892488f;
      sa[55] = 1.1048859f;
      sa[56] = -0.5565629f;
      sa[57] = -0.06450612f;
      sa[58] = 1.0337034f;
      sa[59] = 0.8439827f;
      sa[60] = -1.4067888f;
      sa[61] = 0.9158661f;
      sa[62] = -0.38092396f;
      sa[63] = -0.8145256f;
      sa[64] = 0.908432f;
      sa[65] = -0.83895284f;
      sa[66] = -1.763014f;
      sa[67] = -0.064533144f;
      sa[68] = 0.8791559f;
      sa[69] = -1.3963854f;
      sa[70] = -1.7205017f;
      sa[71] = -0.015024427f;
      sa[72] = -1.0405098f;
      sa[73] = -1.1994796f;
      sa[74] = -1.0770026f;
      sa[75] = 1.1323591f;
      sa[76] = 1.8304924f;
      sa[77] = -0.69824505f;
      sa[78] = -1.3837066f;
      sa[79] = -0.36995557f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_02 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_02_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_02_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_02_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_Tanh_02_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_02_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


