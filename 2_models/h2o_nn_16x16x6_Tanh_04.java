/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:50:45.845+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_04

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_04 > h2o_nn_16x16x6_Tanh_04.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_04.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_04", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_04 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_04_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_04_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_04_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_04_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_04_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_04_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_04_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_04_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_04_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_04_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_04_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_04_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_04.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_04_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.24528301886792453,0.12264150943396226,0.12264150943396226,0.1320754716981132,0.24528301886792453,0.1320754716981132};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_04() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-1274423069618302080L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_04_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_04_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_04_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_04_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_04_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_04_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_04_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_04_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_04_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_04_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_04_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_04_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_04_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_04_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_04_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_04_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.03962309597325319;
      sa[1] = -0.11714571837054061;
      sa[2] = 0.27756933856419574;
      sa[3] = -0.12844097052347678;
      sa[4] = 0.0029153767110082704;
      sa[5] = -0.016062600378959006;
      sa[6] = -0.04445551731202942;
      sa[7] = -0.11751201929139533;
      sa[8] = -0.19780019934325316;
      sa[9] = -0.04515083046049459;
      sa[10] = -0.07802397754343751;
      sa[11] = 0.016888373012423106;
      sa[12] = 0.13625103448623735;
      sa[13] = -0.016825637034891983;
      sa[14] = -0.0021966091171543604;
      sa[15] = -0.057081467466022794;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_04_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_04_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_04_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.08393475716206332;
      sa[1] = -0.005993502263411738;
      sa[2] = -0.05368639979312901;
      sa[3] = 0.0805144039191648;
      sa[4] = -0.047591237411080844;
      sa[5] = -0.04244854523022004;
      sa[6] = 0.03149650421575716;
      sa[7] = 0.04593644714949539;
      sa[8] = -0.002411489091499473;
      sa[9] = -0.11188901695144178;
      sa[10] = 0.17357681955067555;
      sa[11] = 0.1748957308309066;
      sa[12] = -0.039880304725616954;
      sa[13] = -3.8289054983953435E-4;
      sa[14] = -0.06239403147921739;
      sa[15] = -0.16378290984422056;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_04_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_04_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_04_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.04433109603923928;
      sa[1] = -0.08155236081545017;
      sa[2] = -0.03425243601617735;
      sa[3] = 0.05449773746165298;
      sa[4] = 0.03585907643303179;
      sa[5] = -0.0994530244884188;
    }
  }
}
class h2o_nn_16x16x6_Tanh_04_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_04_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_04_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_04_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.09792306f;
      sa[1] = 0.25349846f;
      sa[2] = 0.09867919f;
      sa[3] = 0.111271106f;
      sa[4] = -0.10874016f;
      sa[5] = -0.1774935f;
      sa[6] = -0.0014307643f;
      sa[7] = 0.43695572f;
      sa[8] = 0.11786596f;
      sa[9] = -0.11865116f;
      sa[10] = -0.17384996f;
      sa[11] = -0.2250276f;
      sa[12] = 0.051468976f;
      sa[13] = -0.32475704f;
      sa[14] = -0.22025813f;
      sa[15] = 0.060555965f;
      sa[16] = 0.110007994f;
      sa[17] = 0.23438196f;
      sa[18] = -0.2536105f;
      sa[19] = -0.03201296f;
      sa[20] = 0.26007998f;
      sa[21] = -0.26825815f;
      sa[22] = 0.29372057f;
      sa[23] = -0.08475102f;
      sa[24] = 0.20237494f;
      sa[25] = 0.19290653f;
      sa[26] = -0.2776117f;
      sa[27] = 0.5583315f;
      sa[28] = 0.25073117f;
      sa[29] = -0.27434906f;
      sa[30] = -0.1891585f;
      sa[31] = 0.23082633f;
      sa[32] = 0.17312807f;
      sa[33] = -0.21045585f;
      sa[34] = 0.13012171f;
      sa[35] = -0.10454982f;
      sa[36] = 0.22512923f;
      sa[37] = 0.3347147f;
      sa[38] = -0.13978133f;
      sa[39] = 0.4009571f;
      sa[40] = 0.03953895f;
      sa[41] = -0.15361683f;
      sa[42] = -0.17462091f;
      sa[43] = -7.022285E-4f;
      sa[44] = 0.34761643f;
      sa[45] = -0.28681087f;
      sa[46] = -0.037121125f;
      sa[47] = -0.23789269f;
      sa[48] = 0.1623295f;
      sa[49] = 0.15995428f;
      sa[50] = 0.13643225f;
      sa[51] = -0.40178192f;
      sa[52] = -0.09100723f;
      sa[53] = 0.17648442f;
      sa[54] = 0.26199597f;
      sa[55] = -0.022942612f;
      sa[56] = -0.19061504f;
      sa[57] = -0.27764067f;
      sa[58] = 0.30384368f;
      sa[59] = -0.22197276f;
      sa[60] = -0.3734788f;
      sa[61] = 0.100577794f;
      sa[62] = 0.1696564f;
      sa[63] = 0.10453974f;
      sa[64] = 0.103884876f;
      sa[65] = 0.12963672f;
      sa[66] = -0.048577636f;
      sa[67] = 0.11467407f;
      sa[68] = -0.22165757f;
      sa[69] = -0.050720993f;
      sa[70] = 0.13371138f;
      sa[71] = 0.4827258f;
      sa[72] = -0.33468345f;
      sa[73] = 0.049287748f;
      sa[74] = -0.07045485f;
      sa[75] = 0.2107059f;
      sa[76] = -0.32022667f;
      sa[77] = -0.049968325f;
      sa[78] = -0.09519491f;
      sa[79] = -0.06903697f;
      sa[80] = -0.2706775f;
      sa[81] = -0.3273648f;
      sa[82] = -0.028571809f;
      sa[83] = -0.074417815f;
      sa[84] = 0.081443414f;
      sa[85] = -0.091038056f;
      sa[86] = 0.25616732f;
      sa[87] = 0.23497216f;
      sa[88] = 0.2259047f;
      sa[89] = 0.011034499f;
      sa[90] = -0.177675f;
      sa[91] = 0.65632576f;
      sa[92] = 0.13062103f;
      sa[93] = -0.28849575f;
      sa[94] = -0.20463987f;
      sa[95] = -0.3491876f;
      sa[96] = 0.2673141f;
      sa[97] = 0.06651421f;
      sa[98] = 0.17727078f;
      sa[99] = -0.33186466f;
      sa[100] = -0.017842274f;
      sa[101] = -0.22830471f;
      sa[102] = -0.23950474f;
      sa[103] = -0.18287735f;
      sa[104] = 0.09487369f;
      sa[105] = -0.20047778f;
      sa[106] = -0.38754863f;
      sa[107] = 0.0226471f;
      sa[108] = 0.2302554f;
      sa[109] = -0.28894645f;
      sa[110] = -0.21107472f;
      sa[111] = -0.04835342f;
      sa[112] = 0.14886603f;
      sa[113] = -0.005976153f;
      sa[114] = -0.17444916f;
      sa[115] = 0.032656737f;
      sa[116] = -0.27221546f;
      sa[117] = 0.058554713f;
      sa[118] = -0.2092422f;
      sa[119] = 0.051923916f;
      sa[120] = 0.19526257f;
      sa[121] = 0.19240737f;
      sa[122] = 0.2880888f;
      sa[123] = 0.3162325f;
      sa[124] = 0.25075364f;
      sa[125] = 0.30330014f;
      sa[126] = -0.18838419f;
      sa[127] = -0.3384026f;
      sa[128] = 0.06581126f;
      sa[129] = 0.18983708f;
      sa[130] = -0.1337374f;
      sa[131] = 0.42281598f;
      sa[132] = 0.15011615f;
      sa[133] = -0.27760702f;
      sa[134] = 0.15627955f;
      sa[135] = -0.2592221f;
      sa[136] = -0.3241619f;
      sa[137] = -0.039674245f;
      sa[138] = 0.08238018f;
      sa[139] = -0.07785652f;
      sa[140] = -0.06645379f;
      sa[141] = -0.0076270453f;
      sa[142] = 0.07408715f;
      sa[143] = -0.36112323f;
      sa[144] = 0.35787302f;
      sa[145] = -0.25801042f;
      sa[146] = -0.29221615f;
      sa[147] = 0.19815339f;
      sa[148] = 0.16753268f;
      sa[149] = 0.1159185f;
      sa[150] = 0.30385512f;
      sa[151] = -0.28343084f;
      sa[152] = 0.07027566f;
      sa[153] = 0.2386404f;
      sa[154] = 0.24046586f;
      sa[155] = -0.1213873f;
      sa[156] = 0.13260779f;
      sa[157] = -0.26993367f;
      sa[158] = 0.09843478f;
      sa[159] = 0.059695516f;
      sa[160] = -0.03129823f;
      sa[161] = 0.08512935f;
      sa[162] = -0.029391723f;
      sa[163] = -0.1257206f;
      sa[164] = 0.27710667f;
      sa[165] = -0.011224715f;
      sa[166] = -0.03753126f;
      sa[167] = -0.011101498f;
      sa[168] = 0.16680734f;
      sa[169] = 0.32120654f;
      sa[170] = 0.10740579f;
      sa[171] = -0.1898444f;
      sa[172] = -0.096911326f;
      sa[173] = -0.18629721f;
      sa[174] = -0.09304695f;
      sa[175] = -0.29856437f;
      sa[176] = -6.807177E-4f;
      sa[177] = -0.00876857f;
      sa[178] = -0.10447597f;
      sa[179] = 0.110073864f;
      sa[180] = -0.049359113f;
      sa[181] = -0.28359303f;
      sa[182] = -0.102656476f;
      sa[183] = 0.18758403f;
      sa[184] = 0.2761222f;
      sa[185] = 0.20635071f;
      sa[186] = -0.33877668f;
      sa[187] = 0.015731301f;
      sa[188] = 0.015132194f;
      sa[189] = 0.20748895f;
      sa[190] = 0.03250627f;
      sa[191] = -0.0016971333f;
      sa[192] = -0.103231765f;
      sa[193] = 0.29568276f;
      sa[194] = 0.12400616f;
      sa[195] = 0.29745662f;
      sa[196] = 0.33625636f;
      sa[197] = -0.0602776f;
      sa[198] = 0.09085245f;
      sa[199] = -0.1791253f;
      sa[200] = 0.011304254f;
      sa[201] = -0.35983136f;
      sa[202] = 0.117152356f;
      sa[203] = -0.13985954f;
      sa[204] = -0.13933931f;
      sa[205] = 0.23980832f;
      sa[206] = 0.23125511f;
      sa[207] = 0.03136841f;
      sa[208] = -0.2772746f;
      sa[209] = -0.09696965f;
      sa[210] = -0.2836214f;
      sa[211] = -0.28979945f;
      sa[212] = 0.2650177f;
      sa[213] = -0.31676728f;
      sa[214] = -0.14258897f;
      sa[215] = -0.0760348f;
      sa[216] = 0.107286274f;
      sa[217] = 0.29207873f;
      sa[218] = -0.09185249f;
      sa[219] = 0.15325896f;
      sa[220] = -0.24825212f;
      sa[221] = 0.091559574f;
      sa[222] = 0.23930325f;
      sa[223] = 0.08362749f;
      sa[224] = 0.13042577f;
      sa[225] = 0.4024793f;
      sa[226] = -0.19130613f;
      sa[227] = 0.5882654f;
      sa[228] = 0.16098304f;
      sa[229] = 0.14857405f;
      sa[230] = 0.3128014f;
      sa[231] = -0.21274991f;
      sa[232] = -0.14201476f;
      sa[233] = 0.15263817f;
      sa[234] = 0.09001171f;
      sa[235] = -0.3895417f;
      sa[236] = -0.04730828f;
      sa[237] = -0.28068894f;
      sa[238] = -0.2781874f;
      sa[239] = 0.090461396f;
      sa[240] = 0.11399911f;
      sa[241] = -0.17095025f;
      sa[242] = -0.14394614f;
      sa[243] = -0.38786206f;
      sa[244] = -0.20165591f;
      sa[245] = -0.12951866f;
      sa[246] = -0.2467938f;
      sa[247] = 5.701337E-4f;
      sa[248] = 0.20081542f;
      sa[249] = 0.29014483f;
      sa[250] = -0.30990306f;
      sa[251] = -0.2115296f;
      sa[252] = -0.1368157f;
      sa[253] = -0.21402808f;
      sa[254] = -0.31473646f;
      sa[255] = 0.07983662f;
      sa[256] = -0.23262972f;
      sa[257] = 0.18066472f;
      sa[258] = -0.34057367f;
      sa[259] = -0.18892339f;
      sa[260] = -0.054921884f;
      sa[261] = 0.031156084f;
      sa[262] = -0.15580279f;
      sa[263] = 0.40673253f;
      sa[264] = -0.22612488f;
      sa[265] = -0.047575157f;
      sa[266] = -0.36338097f;
      sa[267] = -0.3574087f;
      sa[268] = 0.08912928f;
      sa[269] = -0.22897151f;
      sa[270] = 0.15109894f;
      sa[271] = 0.20930861f;
      sa[272] = -0.0665746f;
      sa[273] = -0.09008769f;
      sa[274] = 0.13597491f;
      sa[275] = 0.012904075f;
      sa[276] = 0.02801883f;
      sa[277] = -0.34464666f;
      sa[278] = -0.08030162f;
      sa[279] = 0.15167242f;
      sa[280] = -0.21670939f;
      sa[281] = 0.28753188f;
      sa[282] = -0.21564835f;
      sa[283] = -0.08802751f;
      sa[284] = -0.066147625f;
      sa[285] = -0.354633f;
      sa[286] = 0.5699009f;
      sa[287] = 0.34276775f;
      sa[288] = -0.24075966f;
      sa[289] = -0.26049474f;
      sa[290] = -0.12445794f;
      sa[291] = 0.38647285f;
      sa[292] = 0.11982359f;
      sa[293] = -0.13652526f;
      sa[294] = 0.07636094f;
      sa[295] = 0.099852465f;
      sa[296] = 0.19439623f;
      sa[297] = 0.038322438f;
      sa[298] = -0.07922493f;
      sa[299] = -0.34300318f;
      sa[300] = -0.129962f;
      sa[301] = -0.21511923f;
      sa[302] = 0.11572891f;
      sa[303] = -0.025604635f;
      sa[304] = -0.23883705f;
      sa[305] = -0.10013676f;
      sa[306] = 0.15884866f;
      sa[307] = -0.31833485f;
      sa[308] = 0.007845071f;
      sa[309] = 0.096577704f;
      sa[310] = 0.27221265f;
      sa[311] = 0.2235706f;
      sa[312] = -0.28715032f;
      sa[313] = -0.21283679f;
      sa[314] = -0.065528326f;
      sa[315] = 0.06910045f;
      sa[316] = -0.1025132f;
      sa[317] = -0.15718496f;
      sa[318] = 0.02994563f;
      sa[319] = 0.26653773f;
      sa[320] = 0.12625663f;
      sa[321] = 0.19739294f;
      sa[322] = 0.22156192f;
      sa[323] = -0.32018945f;
      sa[324] = 0.065070875f;
      sa[325] = 0.22841403f;
      sa[326] = -0.34425953f;
      sa[327] = 0.04206695f;
      sa[328] = -0.060271237f;
      sa[329] = 0.20110509f;
      sa[330] = -0.21246126f;
      sa[331] = 0.007320282f;
      sa[332] = -0.27126735f;
      sa[333] = 0.10856847f;
      sa[334] = -0.12910062f;
      sa[335] = 0.14730476f;
      sa[336] = -0.23281342f;
      sa[337] = -0.24893889f;
      sa[338] = 0.24676712f;
      sa[339] = -0.302079f;
      sa[340] = -0.47978976f;
      sa[341] = -0.4426404f;
      sa[342] = 0.32530937f;
      sa[343] = -0.16891237f;
      sa[344] = -0.18104158f;
      sa[345] = 0.25430354f;
      sa[346] = 0.2488783f;
      sa[347] = -0.120520346f;
      sa[348] = 0.22267264f;
      sa[349] = -0.34995154f;
      sa[350] = -0.19876297f;
      sa[351] = 0.21719001f;
      sa[352] = 0.18057995f;
      sa[353] = -0.05758487f;
      sa[354] = 0.032733988f;
      sa[355] = 0.09263931f;
      sa[356] = -0.1855791f;
      sa[357] = 0.1901902f;
      sa[358] = -0.13710557f;
      sa[359] = 0.19433253f;
      sa[360] = 0.11788105f;
      sa[361] = -0.18956178f;
      sa[362] = -0.07008831f;
      sa[363] = 0.20594725f;
      sa[364] = -0.23393302f;
      sa[365] = -0.37302878f;
      sa[366] = -0.07347631f;
      sa[367] = -0.42410806f;
      sa[368] = -0.17554872f;
      sa[369] = 0.1897202f;
      sa[370] = -0.21180062f;
      sa[371] = 0.27641505f;
      sa[372] = -0.01026687f;
      sa[373] = 0.2211173f;
      sa[374] = -0.1283303f;
      sa[375] = -0.4128363f;
      sa[376] = -0.4388082f;
      sa[377] = -0.40751588f;
      sa[378] = 0.49752992f;
      sa[379] = 0.10712078f;
      sa[380] = -0.14540784f;
      sa[381] = -0.1763248f;
      sa[382] = -0.0571672f;
      sa[383] = -0.11105676f;
      sa[384] = -0.10688945f;
      sa[385] = 0.14909782f;
      sa[386] = -0.17663024f;
      sa[387] = -0.5348237f;
      sa[388] = 0.051707588f;
      sa[389] = -0.11849193f;
      sa[390] = -0.15323325f;
      sa[391] = -0.17829058f;
      sa[392] = 0.31499964f;
      sa[393] = 0.23214667f;
      sa[394] = -0.19955218f;
      sa[395] = 0.2885955f;
      sa[396] = 0.27564964f;
      sa[397] = -0.13571036f;
      sa[398] = 0.19826674f;
      sa[399] = -0.15523797f;
      sa[400] = 0.18911529f;
      sa[401] = 0.299217f;
      sa[402] = -0.14839415f;
      sa[403] = 0.043055266f;
      sa[404] = 0.26259136f;
      sa[405] = -0.16853608f;
      sa[406] = -0.012343942f;
      sa[407] = 0.37874374f;
      sa[408] = -0.19761603f;
      sa[409] = -0.211066f;
      sa[410] = -0.09803658f;
      sa[411] = 0.20230173f;
      sa[412] = 0.06330077f;
      sa[413] = 0.25052744f;
      sa[414] = 0.031159047f;
      sa[415] = 0.65790987f;
      sa[416] = -0.18209234f;
      sa[417] = 0.025555674f;
      sa[418] = -0.021846447f;
      sa[419] = 0.28488797f;
      sa[420] = 0.30335763f;
      sa[421] = 0.34439164f;
      sa[422] = 0.1753329f;
      sa[423] = -0.12053015f;
      sa[424] = 0.15245736f;
      sa[425] = -0.059493616f;
      sa[426] = -0.27401894f;
      sa[427] = 0.21560262f;
      sa[428] = -0.04084155f;
      sa[429] = -0.12875621f;
      sa[430] = 0.116223656f;
      sa[431] = -0.006494122f;
      sa[432] = -0.09253839f;
      sa[433] = 0.17044275f;
      sa[434] = 0.30713585f;
      sa[435] = -0.12768392f;
      sa[436] = -0.2801052f;
      sa[437] = -0.27246124f;
      sa[438] = 0.008854906f;
      sa[439] = -0.011833452f;
      sa[440] = 0.29508018f;
      sa[441] = -0.30434996f;
      sa[442] = 0.110829085f;
      sa[443] = 0.18960801f;
      sa[444] = -0.19074766f;
      sa[445] = 0.11038941f;
      sa[446] = 0.2824533f;
      sa[447] = 0.078841686f;
      sa[448] = 0.18462968f;
      sa[449] = 0.27580702f;
      sa[450] = -0.06906752f;
      sa[451] = 0.25469932f;
      sa[452] = 0.24833345f;
      sa[453] = -0.012088013f;
      sa[454] = -0.1455916f;
      sa[455] = 0.032672647f;
      sa[456] = 0.010210184f;
      sa[457] = 0.110620745f;
      sa[458] = -0.2682701f;
      sa[459] = 0.22017477f;
      sa[460] = 0.28380704f;
      sa[461] = 0.3241796f;
      sa[462] = 0.069370225f;
      sa[463] = 0.22986342f;
      sa[464] = -0.31784263f;
      sa[465] = 0.19661678f;
      sa[466] = -0.032882333f;
      sa[467] = 0.22430694f;
      sa[468] = 0.09449279f;
      sa[469] = 0.2892429f;
      sa[470] = 0.1650822f;
      sa[471] = 0.1391539f;
      sa[472] = 0.03689118f;
      sa[473] = -0.14141518f;
      sa[474] = -0.0045625796f;
      sa[475] = 0.1840772f;
      sa[476] = 0.23996066f;
      sa[477] = -0.21062082f;
      sa[478] = 0.11258992f;
      sa[479] = -0.37602094f;
      sa[480] = -0.38275778f;
      sa[481] = -0.27973554f;
      sa[482] = -0.33015963f;
      sa[483] = 0.21330434f;
      sa[484] = 0.23066843f;
      sa[485] = 0.17014219f;
      sa[486] = -0.06256023f;
      sa[487] = -0.077384226f;
      sa[488] = -0.22872579f;
      sa[489] = 0.11671636f;
      sa[490] = 0.009086595f;
      sa[491] = -0.15138873f;
      sa[492] = 0.14593823f;
      sa[493] = 0.2857008f;
      sa[494] = -0.2464064f;
      sa[495] = 0.3961951f;
      sa[496] = -0.029006897f;
      sa[497] = 0.06521966f;
      sa[498] = 0.15871671f;
      sa[499] = 0.16681275f;
      sa[500] = 0.02148395f;
      sa[501] = 0.17300953f;
      sa[502] = 0.27455124f;
      sa[503] = 0.066410914f;
      sa[504] = -0.077409945f;
      sa[505] = -0.15904106f;
      sa[506] = 0.16582933f;
      sa[507] = -0.39626056f;
      sa[508] = 0.24949674f;
      sa[509] = 0.42194763f;
      sa[510] = 0.25190264f;
      sa[511] = 0.17674188f;
      sa[512] = 0.110311024f;
      sa[513] = 0.14190666f;
      sa[514] = 0.35562137f;
      sa[515] = 0.22025889f;
      sa[516] = 0.05362198f;
      sa[517] = 0.19381717f;
      sa[518] = 0.15761532f;
      sa[519] = 0.08875901f;
      sa[520] = 0.2917411f;
      sa[521] = 0.34565198f;
      sa[522] = 0.04574219f;
      sa[523] = 0.038994487f;
      sa[524] = 0.23548993f;
      sa[525] = 0.24353454f;
      sa[526] = -0.0063821063f;
      sa[527] = -0.08074034f;
      sa[528] = -0.040762275f;
      sa[529] = 0.18389885f;
      sa[530] = -0.21410589f;
      sa[531] = 0.047960177f;
      sa[532] = 0.2361815f;
      sa[533] = 0.22207363f;
      sa[534] = 0.25436643f;
      sa[535] = 0.09302847f;
      sa[536] = 0.043594215f;
      sa[537] = 0.06342217f;
      sa[538] = 0.06736825f;
      sa[539] = 0.21400936f;
      sa[540] = -0.23125117f;
      sa[541] = -0.2650544f;
      sa[542] = -0.11559852f;
      sa[543] = -0.38065767f;
      sa[544] = 0.14144835f;
      sa[545] = 0.012075718f;
      sa[546] = 0.05360467f;
      sa[547] = 0.21841782f;
      sa[548] = 0.06918389f;
      sa[549] = 0.15026021f;
      sa[550] = 0.012968906f;
      sa[551] = -0.19106469f;
      sa[552] = -0.006087764f;
      sa[553] = -0.15017442f;
      sa[554] = -0.22350256f;
      sa[555] = -0.24020617f;
      sa[556] = -0.3109368f;
      sa[557] = -0.393416f;
      sa[558] = -0.059170026f;
      sa[559] = 0.20223653f;
      sa[560] = -0.3375526f;
      sa[561] = -0.08061812f;
      sa[562] = 0.23046741f;
      sa[563] = 0.041082274f;
      sa[564] = 0.2566586f;
      sa[565] = 0.046628363f;
      sa[566] = 0.35096413f;
      sa[567] = 0.074866824f;
      sa[568] = -0.13795091f;
      sa[569] = -0.011102675f;
      sa[570] = -0.11008527f;
      sa[571] = -0.14331245f;
      sa[572] = -0.12680905f;
      sa[573] = 0.091519915f;
      sa[574] = 0.3228768f;
      sa[575] = -0.13371338f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_04_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_04_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_04_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.40741965f;
      sa[1] = 0.03422939f;
      sa[2] = -0.24360733f;
      sa[3] = -0.1815984f;
      sa[4] = 0.07491145f;
      sa[5] = 0.005302886f;
      sa[6] = 0.20905161f;
      sa[7] = -0.08142275f;
      sa[8] = -0.4015565f;
      sa[9] = 0.14982277f;
      sa[10] = -0.16689265f;
      sa[11] = 0.14746529f;
      sa[12] = 0.20400275f;
      sa[13] = 0.06911295f;
      sa[14] = -0.18834694f;
      sa[15] = 0.30574352f;
      sa[16] = 0.33015814f;
      sa[17] = -0.1605125f;
      sa[18] = -0.046438813f;
      sa[19] = -0.10368294f;
      sa[20] = 0.35351864f;
      sa[21] = -0.118665084f;
      sa[22] = -0.17345218f;
      sa[23] = 0.15821716f;
      sa[24] = -0.5204196f;
      sa[25] = 0.19558556f;
      sa[26] = -0.052629642f;
      sa[27] = 0.45246404f;
      sa[28] = -0.25048432f;
      sa[29] = -0.18200123f;
      sa[30] = 0.14748564f;
      sa[31] = -0.2856987f;
      sa[32] = -0.30017704f;
      sa[33] = -0.5308636f;
      sa[34] = 0.017444722f;
      sa[35] = 0.2516451f;
      sa[36] = -0.008956772f;
      sa[37] = -0.099958524f;
      sa[38] = 0.24615256f;
      sa[39] = -0.005977515f;
      sa[40] = -0.39590955f;
      sa[41] = -0.32447365f;
      sa[42] = -0.40384325f;
      sa[43] = -0.39458382f;
      sa[44] = 0.3847921f;
      sa[45] = -0.26047647f;
      sa[46] = 0.48304805f;
      sa[47] = 0.25084373f;
      sa[48] = -0.3576794f;
      sa[49] = -0.32560962f;
      sa[50] = 0.25816393f;
      sa[51] = -0.08486609f;
      sa[52] = 0.16036834f;
      sa[53] = 0.2307709f;
      sa[54] = -0.08060744f;
      sa[55] = 0.3421081f;
      sa[56] = -0.3861993f;
      sa[57] = -0.3430496f;
      sa[58] = 0.08939869f;
      sa[59] = -0.0056826896f;
      sa[60] = 0.30782828f;
      sa[61] = -0.34307083f;
      sa[62] = -0.088532254f;
      sa[63] = 0.17682123f;
      sa[64] = 0.34170902f;
      sa[65] = -0.10103128f;
      sa[66] = 0.1395772f;
      sa[67] = 0.3218263f;
      sa[68] = 0.16225316f;
      sa[69] = -0.24703993f;
      sa[70] = -0.4153808f;
      sa[71] = -0.05126504f;
      sa[72] = -0.25638425f;
      sa[73] = 0.3746506f;
      sa[74] = 0.4372421f;
      sa[75] = 8.056739E-4f;
      sa[76] = 0.13440874f;
      sa[77] = 0.10166531f;
      sa[78] = -0.35723764f;
      sa[79] = 0.3452656f;
      sa[80] = -0.04282285f;
      sa[81] = -0.043733176f;
      sa[82] = 0.3505164f;
      sa[83] = -0.14877231f;
      sa[84] = -0.38467896f;
      sa[85] = -0.3430978f;
      sa[86] = -0.020379763f;
      sa[87] = 0.28325725f;
      sa[88] = -0.5449444f;
      sa[89] = -0.26040444f;
      sa[90] = -0.49429882f;
      sa[91] = 0.3228002f;
      sa[92] = 0.15682355f;
      sa[93] = 0.26206192f;
      sa[94] = -0.296644f;
      sa[95] = -0.07157326f;
      sa[96] = -0.30490813f;
      sa[97] = 0.0064387387f;
      sa[98] = 0.02195993f;
      sa[99] = 0.08340524f;
      sa[100] = -0.31871155f;
      sa[101] = -0.17690349f;
      sa[102] = 0.36790392f;
      sa[103] = -0.002471591f;
      sa[104] = -0.35668346f;
      sa[105] = -0.15747137f;
      sa[106] = 0.36310405f;
      sa[107] = 0.3596993f;
      sa[108] = 0.34099728f;
      sa[109] = 0.011372079f;
      sa[110] = 0.2626619f;
      sa[111] = -0.2485734f;
      sa[112] = -0.1015029f;
      sa[113] = 0.012181525f;
      sa[114] = 0.3156234f;
      sa[115] = -0.16078554f;
      sa[116] = 0.223021f;
      sa[117] = 0.08292913f;
      sa[118] = -0.52581745f;
      sa[119] = -0.08728926f;
      sa[120] = -0.13597064f;
      sa[121] = 0.13725694f;
      sa[122] = -0.018610267f;
      sa[123] = 0.11187792f;
      sa[124] = -0.28296083f;
      sa[125] = 0.24109696f;
      sa[126] = -0.19059044f;
      sa[127] = 0.23359786f;
      sa[128] = -0.28759456f;
      sa[129] = 0.033443037f;
      sa[130] = 0.20121458f;
      sa[131] = 0.25191444f;
      sa[132] = 0.028538374f;
      sa[133] = 0.18933846f;
      sa[134] = 0.2941309f;
      sa[135] = -0.41586843f;
      sa[136] = 0.20171167f;
      sa[137] = -0.18676832f;
      sa[138] = 0.12138961f;
      sa[139] = 0.29762638f;
      sa[140] = -0.28970212f;
      sa[141] = -0.09782749f;
      sa[142] = -0.099226184f;
      sa[143] = -0.22388051f;
      sa[144] = 0.31981137f;
      sa[145] = -0.34556982f;
      sa[146] = 0.12861213f;
      sa[147] = 0.038257863f;
      sa[148] = -0.24259786f;
      sa[149] = 0.29242793f;
      sa[150] = -0.21933186f;
      sa[151] = -0.6151179f;
      sa[152] = 0.42014992f;
      sa[153] = -0.20620577f;
      sa[154] = 0.28527856f;
      sa[155] = -0.54353625f;
      sa[156] = -0.33516434f;
      sa[157] = -0.1925012f;
      sa[158] = -0.14749439f;
      sa[159] = -0.23128584f;
      sa[160] = 0.3897666f;
      sa[161] = -0.4154064f;
      sa[162] = 0.68500066f;
      sa[163] = -0.21108076f;
      sa[164] = 0.097436056f;
      sa[165] = -0.15356013f;
      sa[166] = 0.36675996f;
      sa[167] = -0.47445145f;
      sa[168] = 0.24592318f;
      sa[169] = -0.4488137f;
      sa[170] = 0.35142672f;
      sa[171] = 0.21870236f;
      sa[172] = 0.36757982f;
      sa[173] = 0.3046988f;
      sa[174] = -0.06913722f;
      sa[175] = 0.020991912f;
      sa[176] = -0.16461922f;
      sa[177] = 0.13878985f;
      sa[178] = -0.22616072f;
      sa[179] = 0.06222553f;
      sa[180] = -0.48389274f;
      sa[181] = -0.15211982f;
      sa[182] = -0.07836759f;
      sa[183] = -0.08365701f;
      sa[184] = 0.5247926f;
      sa[185] = 0.22392039f;
      sa[186] = -0.16166793f;
      sa[187] = -0.28260916f;
      sa[188] = -0.4342799f;
      sa[189] = -0.29286715f;
      sa[190] = -0.4393548f;
      sa[191] = -0.17711659f;
      sa[192] = -0.09502925f;
      sa[193] = 0.1601815f;
      sa[194] = -0.32417402f;
      sa[195] = -0.28650266f;
      sa[196] = 0.13095878f;
      sa[197] = -0.1642917f;
      sa[198] = 0.029805843f;
      sa[199] = 0.40271533f;
      sa[200] = 0.16801906f;
      sa[201] = 0.28351128f;
      sa[202] = 0.23355985f;
      sa[203] = -0.40612584f;
      sa[204] = 0.013337349f;
      sa[205] = 0.3373014f;
      sa[206] = -0.21913515f;
      sa[207] = 0.21172073f;
      sa[208] = 0.032223277f;
      sa[209] = 0.20797084f;
      sa[210] = -0.04187359f;
      sa[211] = -0.3003424f;
      sa[212] = -0.33763215f;
      sa[213] = 0.054424476f;
      sa[214] = -0.5696831f;
      sa[215] = 0.090868875f;
      sa[216] = 0.037591416f;
      sa[217] = 0.21431534f;
      sa[218] = -0.1614257f;
      sa[219] = 0.08988958f;
      sa[220] = 0.23416641f;
      sa[221] = 0.17367917f;
      sa[222] = -0.12117152f;
      sa[223] = -0.18885995f;
      sa[224] = 0.4106311f;
      sa[225] = 0.008387657f;
      sa[226] = -0.10676062f;
      sa[227] = 0.08346807f;
      sa[228] = -0.061998192f;
      sa[229] = -0.20222259f;
      sa[230] = -0.24628963f;
      sa[231] = -0.1839844f;
      sa[232] = 0.43801633f;
      sa[233] = -0.20837599f;
      sa[234] = -0.27798635f;
      sa[235] = -0.10457168f;
      sa[236] = -0.2325426f;
      sa[237] = 0.56202686f;
      sa[238] = 0.2181404f;
      sa[239] = -0.13916434f;
      sa[240] = -0.122246034f;
      sa[241] = -0.43502071f;
      sa[242] = -0.38654447f;
      sa[243] = 0.30573577f;
      sa[244] = 0.25895575f;
      sa[245] = 0.2859712f;
      sa[246] = 0.28470123f;
      sa[247] = -0.44826528f;
      sa[248] = -0.1730122f;
      sa[249] = 0.07469554f;
      sa[250] = 0.21040922f;
      sa[251] = 0.37454078f;
      sa[252] = 0.35124627f;
      sa[253] = -0.13489115f;
      sa[254] = 0.3977629f;
      sa[255] = 0.08777915f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_04_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_Tanh_04_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_04_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.08190883f;
      sa[1] = -1.4780535f;
      sa[2] = -1.6106713f;
      sa[3] = 1.3501325f;
      sa[4] = 0.5068848f;
      sa[5] = -0.17928901f;
      sa[6] = -1.6887505f;
      sa[7] = 1.5976228f;
      sa[8] = 1.771995f;
      sa[9] = 0.3598911f;
      sa[10] = 1.7374034f;
      sa[11] = 1.4337094f;
      sa[12] = 1.7960957f;
      sa[13] = -0.58332217f;
      sa[14] = -1.8421514f;
      sa[15] = -0.77441484f;
      sa[16] = 0.7878745f;
      sa[17] = -0.882757f;
      sa[18] = -1.430875f;
      sa[19] = -0.9315418f;
      sa[20] = -1.9409528f;
      sa[21] = 0.2629959f;
      sa[22] = -1.9613734f;
      sa[23] = -0.83332366f;
      sa[24] = -0.4848313f;
      sa[25] = 1.8877422f;
      sa[26] = -0.21589112f;
      sa[27] = 1.2314668f;
      sa[28] = 1.17464f;
      sa[29] = -0.8084805f;
      sa[30] = 0.17865174f;
      sa[31] = 0.18099882f;
      sa[32] = 0.58218694f;
      sa[33] = 0.19728774f;
      sa[34] = -0.557637f;
      sa[35] = 1.0167862f;
      sa[36] = 0.48543325f;
      sa[37] = -1.37586f;
      sa[38] = 0.7525748f;
      sa[39] = -0.26599902f;
      sa[40] = 0.315336f;
      sa[41] = -0.6621928f;
      sa[42] = 0.68993f;
      sa[43] = -0.007110007f;
      sa[44] = 1.0016549f;
      sa[45] = -2.0171504f;
      sa[46] = -2.269799f;
      sa[47] = 0.2977325f;
      sa[48] = 1.5804691f;
      sa[49] = -0.11628054f;
      sa[50] = -0.3965851f;
      sa[51] = 1.8552532f;
      sa[52] = -1.6068254f;
      sa[53] = 1.0686578f;
      sa[54] = 1.7302152f;
      sa[55] = 1.1263014f;
      sa[56] = -0.65704286f;
      sa[57] = -0.14555159f;
      sa[58] = 1.007776f;
      sa[59] = 0.7461526f;
      sa[60] = -1.4225864f;
      sa[61] = 0.95036954f;
      sa[62] = -0.34318468f;
      sa[63] = -0.84833425f;
      sa[64] = 0.8055022f;
      sa[65] = -0.79270524f;
      sa[66] = -1.8691919f;
      sa[67] = -0.10410474f;
      sa[68] = 0.88066816f;
      sa[69] = -1.3155887f;
      sa[70] = -1.9841516f;
      sa[71] = 0.17505062f;
      sa[72] = -1.1146249f;
      sa[73] = -1.3748543f;
      sa[74] = -1.2791052f;
      sa[75] = 1.2306598f;
      sa[76] = 2.0583508f;
      sa[77] = -0.14207126f;
      sa[78] = -1.3289706f;
      sa[79] = -0.5535594f;
      sa[80] = 0.7282956f;
      sa[81] = -1.588497f;
      sa[82] = -0.18943128f;
      sa[83] = -1.3926643f;
      sa[84] = 1.5713439f;
      sa[85] = 1.0761392f;
      sa[86] = -1.8926114f;
      sa[87] = 1.036501f;
      sa[88] = -1.6137979f;
      sa[89] = -0.9478515f;
      sa[90] = 0.308413f;
      sa[91] = 0.19725515f;
      sa[92] = 1.4535116f;
      sa[93] = 1.922925f;
      sa[94] = 1.6374758f;
      sa[95] = 0.690704f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_04 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_04_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_04_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_04_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_Tanh_04_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_04_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


