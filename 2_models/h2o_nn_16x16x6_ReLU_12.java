/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:52:52.827+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_12

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_12 > h2o_nn_16x16x6_ReLU_12.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_12.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_12", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_12 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_12_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_12_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_12_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_12_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_12_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_12_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_12.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_12_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.2864864864864865,0.13513513513513514,0.14594594594594595,0.2864864864864865,0.14594594594594595};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_12() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-400286822056445688L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_12_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_12_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_12_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_12_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_12_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_12_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_12_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_12_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.6111249757420649;
      sa[1] = 0.6214408425298951;
      sa[2] = 0.4452398405802222;
      sa[3] = 0.5436713543079366;
      sa[4] = 0.4499097407448565;
      sa[5] = 0.5486532925579023;
      sa[6] = 0.43414512417258866;
      sa[7] = 0.7045701514023203;
      sa[8] = 0.5045546250433424;
      sa[9] = 0.7258206828248277;
      sa[10] = 0.37859723609169027;
      sa[11] = 0.34562417937490164;
      sa[12] = 0.37889157628090453;
      sa[13] = 0.37498667080922243;
      sa[14] = 0.529097518845371;
      sa[15] = 0.6606381362862482;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_12_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.0618519477497328;
      sa[1] = 1.0038850463592108;
      sa[2] = 0.9608614651244752;
      sa[3] = 0.9667818994590778;
      sa[4] = 1.0121989808505343;
      sa[5] = 0.981653880333531;
      sa[6] = 0.9178578413509684;
      sa[7] = 0.9309427637141734;
      sa[8] = 0.9110600916507184;
      sa[9] = 1.036391894512561;
      sa[10] = 0.8966089133046621;
      sa[11] = 1.0936115238983015;
      sa[12] = 1.0544220038423886;
      sa[13] = 0.9795108872152226;
      sa[14] = 1.049099454161071;
      sa[15] = 1.0506281342351829;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_12_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_12_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.04895727097866897;
      sa[1] = 0.011227529165569107;
      sa[2] = -0.029579354672964873;
      sa[3] = -0.0246203812304406;
      sa[4] = 0.03271033118544932;
    }
  }
}
class h2o_nn_16x16x6_ReLU_12_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_12_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.090069614f;
      sa[1] = 0.3083713f;
      sa[2] = 0.29383305f;
      sa[3] = 0.14652233f;
      sa[4] = -0.116528995f;
      sa[5] = -0.12386664f;
      sa[6] = 0.015604922f;
      sa[7] = 0.39102617f;
      sa[8] = 0.16128853f;
      sa[9] = -0.1531251f;
      sa[10] = -0.1522463f;
      sa[11] = -0.24302493f;
      sa[12] = 0.14278519f;
      sa[13] = -0.21218026f;
      sa[14] = -0.13208523f;
      sa[15] = 0.10630145f;
      sa[16] = 0.20287617f;
      sa[17] = 0.22918229f;
      sa[18] = -0.310398f;
      sa[19] = 0.16033171f;
      sa[20] = 0.30974153f;
      sa[21] = -0.24590415f;
      sa[22] = 0.306921f;
      sa[23] = -0.09184398f;
      sa[24] = 0.35368478f;
      sa[25] = 0.23972026f;
      sa[26] = -0.30661774f;
      sa[27] = 0.38154954f;
      sa[28] = 0.33372757f;
      sa[29] = -0.19323023f;
      sa[30] = -0.10027653f;
      sa[31] = 0.28497306f;
      sa[32] = 0.17944315f;
      sa[33] = -0.21873046f;
      sa[34] = 0.051521745f;
      sa[35] = -0.14848222f;
      sa[36] = 0.052301694f;
      sa[37] = 0.2700849f;
      sa[38] = 0.01797376f;
      sa[39] = 0.0971879f;
      sa[40] = 0.13558368f;
      sa[41] = -0.05945751f;
      sa[42] = -0.11455737f;
      sa[43] = 0.1481834f;
      sa[44] = 0.18292236f;
      sa[45] = -0.22430903f;
      sa[46] = 0.08564701f;
      sa[47] = -0.070192166f;
      sa[48] = 0.26958743f;
      sa[49] = 0.2664877f;
      sa[50] = 0.22883798f;
      sa[51] = -0.24386127f;
      sa[52] = -0.07637292f;
      sa[53] = 0.30340907f;
      sa[54] = 0.25822377f;
      sa[55] = -0.010062737f;
      sa[56] = -0.13322549f;
      sa[57] = -0.21918923f;
      sa[58] = 0.33127287f;
      sa[59] = -0.07616762f;
      sa[60] = -0.26391718f;
      sa[61] = 0.26186275f;
      sa[62] = 0.17593658f;
      sa[63] = 0.08237649f;
      sa[64] = 0.20135845f;
      sa[65] = 0.22521025f;
      sa[66] = 0.06077154f;
      sa[67] = 0.2591686f;
      sa[68] = -0.12236273f;
      sa[69] = 0.20555238f;
      sa[70] = -0.11250929f;
      sa[71] = 0.38594344f;
      sa[72] = -0.11000784f;
      sa[73] = 0.19412315f;
      sa[74] = -0.25110364f;
      sa[75] = 0.11182488f;
      sa[76] = -0.24085279f;
      sa[77] = -0.08849054f;
      sa[78] = -0.08798165f;
      sa[79] = 0.111157514f;
      sa[80] = -0.18579184f;
      sa[81] = -0.14218694f;
      sa[82] = -0.0061331936f;
      sa[83] = 0.12509377f;
      sa[84] = -0.030739296f;
      sa[85] = -0.20575507f;
      sa[86] = 0.15390877f;
      sa[87] = 0.23698369f;
      sa[88] = 0.2081339f;
      sa[89] = 0.038846318f;
      sa[90] = -0.09348679f;
      sa[91] = 0.16347772f;
      sa[92] = 0.103867725f;
      sa[93] = -0.25133818f;
      sa[94] = -0.20083539f;
      sa[95] = -0.30265042f;
      sa[96] = 0.12554419f;
      sa[97] = 0.05705216f;
      sa[98] = 0.2340145f;
      sa[99] = -0.13921317f;
      sa[100] = -0.07467052f;
      sa[101] = -0.23001595f;
      sa[102] = -0.30381784f;
      sa[103] = -0.12052046f;
      sa[104] = 0.026287984f;
      sa[105] = -0.16707462f;
      sa[106] = -0.23886774f;
      sa[107] = 0.16091436f;
      sa[108] = 0.22521512f;
      sa[109] = -0.19561419f;
      sa[110] = -0.115892336f;
      sa[111] = 0.17566842f;
      sa[112] = 0.1286215f;
      sa[113] = 0.08263979f;
      sa[114] = -0.15391508f;
      sa[115] = -0.05818432f;
      sa[116] = -0.18963437f;
      sa[117] = -0.026509402f;
      sa[118] = -0.23434299f;
      sa[119] = -0.13712928f;
      sa[120] = 0.26993233f;
      sa[121] = 0.32059f;
      sa[122] = 0.36425954f;
      sa[123] = 0.32829317f;
      sa[124] = 0.3732088f;
      sa[125] = 0.33466825f;
      sa[126] = -0.36452037f;
      sa[127] = -0.07926184f;
      sa[128] = 0.084754534f;
      sa[129] = 0.14978886f;
      sa[130] = -0.13429454f;
      sa[131] = 0.29191408f;
      sa[132] = 0.23847724f;
      sa[133] = -0.27494043f;
      sa[134] = 0.06566212f;
      sa[135] = -0.3509655f;
      sa[136] = -0.25670058f;
      sa[137] = -0.010445112f;
      sa[138] = 0.19646713f;
      sa[139] = -0.10822812f;
      sa[140] = -0.08705888f;
      sa[141] = -0.18393722f;
      sa[142] = 0.12128596f;
      sa[143] = -0.435689f;
      sa[144] = 0.301182f;
      sa[145] = -0.1521912f;
      sa[146] = -0.2355589f;
      sa[147] = 0.21610099f;
      sa[148] = 0.15242241f;
      sa[149] = 0.20958321f;
      sa[150] = 0.30130213f;
      sa[151] = -0.3260531f;
      sa[152] = 0.07238097f;
      sa[153] = 0.28063533f;
      sa[154] = 0.30814844f;
      sa[155] = -0.18227986f;
      sa[156] = 0.1327452f;
      sa[157] = -0.19557144f;
      sa[158] = 0.09023818f;
      sa[159] = 0.0721604f;
      sa[160] = 0.10407715f;
      sa[161] = 0.23623942f;
      sa[162] = -0.2247737f;
      sa[163] = 0.011200779f;
      sa[164] = 0.22357368f;
      sa[165] = -0.09935683f;
      sa[166] = -0.11048918f;
      sa[167] = -0.15730399f;
      sa[168] = 0.2502372f;
      sa[169] = 0.37024277f;
      sa[170] = 0.03814353f;
      sa[171] = -0.10580498f;
      sa[172] = -0.078416824f;
      sa[173] = -0.1860804f;
      sa[174] = -0.019333618f;
      sa[175] = -0.31410024f;
      sa[176] = 0.01052196f;
      sa[177] = -0.0047180825f;
      sa[178] = -0.13225879f;
      sa[179] = 0.005073988f;
      sa[180] = -0.06814956f;
      sa[181] = -0.2600694f;
      sa[182] = -0.06504244f;
      sa[183] = 0.15447265f;
      sa[184] = 0.37681115f;
      sa[185] = 0.25639948f;
      sa[186] = -0.26486996f;
      sa[187] = 0.1387124f;
      sa[188] = -0.038880277f;
      sa[189] = 0.26591113f;
      sa[190] = -0.0034622687f;
      sa[191] = 8.1743824E-4f;
      sa[192] = -0.11332669f;
      sa[193] = 0.3072826f;
      sa[194] = 0.13835281f;
      sa[195] = 0.35232428f;
      sa[196] = 0.362267f;
      sa[197] = 0.00553028f;
      sa[198] = 0.09754119f;
      sa[199] = -0.16140826f;
      sa[200] = 0.03866703f;
      sa[201] = -0.26622164f;
      sa[202] = 0.16513462f;
      sa[203] = -0.019742994f;
      sa[204] = -0.21210398f;
      sa[205] = 0.20491081f;
      sa[206] = 0.23484804f;
      sa[207] = 0.13875806f;
      sa[208] = -0.2670165f;
      sa[209] = -0.04691049f;
      sa[210] = -0.25973755f;
      sa[211] = -0.2438836f;
      sa[212] = 0.27805194f;
      sa[213] = -0.19643772f;
      sa[214] = -0.15651646f;
      sa[215] = -0.0028088628f;
      sa[216] = 0.08872594f;
      sa[217] = 0.22245002f;
      sa[218] = -0.16974014f;
      sa[219] = 0.24445538f;
      sa[220] = -0.26241705f;
      sa[221] = 0.033786144f;
      sa[222] = 0.22273463f;
      sa[223] = 0.052551582f;
      sa[224] = 0.10388854f;
      sa[225] = 0.3573015f;
      sa[226] = -0.20926249f;
      sa[227] = 0.36685482f;
      sa[228] = 0.114076205f;
      sa[229] = 0.087968f;
      sa[230] = 0.26303518f;
      sa[231] = -0.28419608f;
      sa[232] = -0.22965172f;
      sa[233] = 0.12372477f;
      sa[234] = 0.13889676f;
      sa[235] = -0.3013201f;
      sa[236] = -0.06096661f;
      sa[237] = -0.2685837f;
      sa[238] = -0.26326776f;
      sa[239] = 0.11992811f;
      sa[240] = 0.02058937f;
      sa[241] = -0.21922435f;
      sa[242] = -0.0979166f;
      sa[243] = -0.23941429f;
      sa[244] = -0.24150342f;
      sa[245] = -0.15878288f;
      sa[246] = -0.29732275f;
      sa[247] = -0.07335821f;
      sa[248] = 0.2402871f;
      sa[249] = 0.25257418f;
      sa[250] = -0.18570705f;
      sa[251] = -0.047258273f;
      sa[252] = -0.27032635f;
      sa[253] = -0.268378f;
      sa[254] = -0.32924405f;
      sa[255] = 0.084290884f;
      sa[256] = -0.116172604f;
      sa[257] = 0.3751546f;
      sa[258] = -0.21768409f;
      sa[259] = -0.043074638f;
      sa[260] = -0.20549776f;
      sa[261] = 0.010252279f;
      sa[262] = -0.14491554f;
      sa[263] = 0.2043119f;
      sa[264] = -0.102739334f;
      sa[265] = 0.14018792f;
      sa[266] = -0.25084242f;
      sa[267] = -0.18161283f;
      sa[268] = 0.16041116f;
      sa[269] = -0.10068489f;
      sa[270] = 7.813911E-4f;
      sa[271] = 0.2216115f;
      sa[272] = -0.020852895f;
      sa[273] = -0.051021527f;
      sa[274] = 0.20733045f;
      sa[275] = 0.07357648f;
      sa[276] = 0.057854436f;
      sa[277] = -0.24789324f;
      sa[278] = -0.15701361f;
      sa[279] = 0.28512308f;
      sa[280] = -0.120704055f;
      sa[281] = 0.38003808f;
      sa[282] = -0.025484582f;
      sa[283] = 0.04155321f;
      sa[284] = -0.07310714f;
      sa[285] = -0.25993124f;
      sa[286] = 0.4559694f;
      sa[287] = 0.23982042f;
      sa[288] = -0.26894194f;
      sa[289] = -0.19712935f;
      sa[290] = -0.060750972f;
      sa[291] = 0.06673813f;
      sa[292] = 0.19115685f;
      sa[293] = -0.08177073f;
      sa[294] = 0.124970786f;
      sa[295] = 0.19129564f;
      sa[296] = 0.18161543f;
      sa[297] = 0.2272926f;
      sa[298] = -0.07758482f;
      sa[299] = -0.021894984f;
      sa[300] = 3.0552517E-5f;
      sa[301] = -0.06804203f;
      sa[302] = 0.19880775f;
      sa[303] = 0.08245309f;
      sa[304] = -0.19757512f;
      sa[305] = -0.009825261f;
      sa[306] = 0.24001037f;
      sa[307] = -0.27215803f;
      sa[308] = 0.097072735f;
      sa[309] = 0.19760995f;
      sa[310] = 0.32484978f;
      sa[311] = 0.36557835f;
      sa[312] = -0.20897327f;
      sa[313] = -0.20521127f;
      sa[314] = -0.12574454f;
      sa[315] = -0.03705713f;
      sa[316] = -0.015147875f;
      sa[317] = -0.059616756f;
      sa[318] = 0.11372923f;
      sa[319] = 0.3572217f;
      sa[320] = 0.026954016f;
      sa[321] = 0.3085031f;
      sa[322] = 0.08828384f;
      sa[323] = -0.3052227f;
      sa[324] = -0.016812874f;
      sa[325] = 0.27791333f;
      sa[326] = -0.10991389f;
      sa[327] = -0.14538428f;
      sa[328] = 0.037718706f;
      sa[329] = 0.3462142f;
      sa[330] = -0.12830038f;
      sa[331] = 0.11516709f;
      sa[332] = -0.3270822f;
      sa[333] = 0.17110679f;
      sa[334] = 0.0018405146f;
      sa[335] = 0.13933109f;
      sa[336] = -0.119362734f;
      sa[337] = -0.1214566f;
      sa[338] = 0.33603054f;
      sa[339] = -0.14705627f;
      sa[340] = -0.31847334f;
      sa[341] = -0.19763711f;
      sa[342] = 0.21329996f;
      sa[343] = -0.053820916f;
      sa[344] = -0.13118035f;
      sa[345] = 0.28738678f;
      sa[346] = 0.26610392f;
      sa[347] = -0.09483304f;
      sa[348] = 0.356248f;
      sa[349] = -0.24458344f;
      sa[350] = -0.18814936f;
      sa[351] = 0.22579853f;
      sa[352] = 0.28440812f;
      sa[353] = 0.04444696f;
      sa[354] = 0.17089657f;
      sa[355] = 0.24301142f;
      sa[356] = -0.15880036f;
      sa[357] = 0.24867854f;
      sa[358] = -0.30876687f;
      sa[359] = 0.056916513f;
      sa[360] = 0.053933397f;
      sa[361] = -0.05468643f;
      sa[362] = -0.1493021f;
      sa[363] = 0.23252815f;
      sa[364] = -0.18321925f;
      sa[365] = -0.2742853f;
      sa[366] = -0.05342707f;
      sa[367] = -0.35814255f;
      sa[368] = -0.26711285f;
      sa[369] = 0.2859279f;
      sa[370] = -0.15756851f;
      sa[371] = 0.14345701f;
      sa[372] = -0.04597454f;
      sa[373] = 0.27851927f;
      sa[374] = -0.19296908f;
      sa[375] = -0.3555988f;
      sa[376] = -0.34370294f;
      sa[377] = -0.2331616f;
      sa[378] = 0.27883434f;
      sa[379] = 0.13968693f;
      sa[380] = -0.16725138f;
      sa[381] = -0.15959232f;
      sa[382] = -0.08975739f;
      sa[383] = -0.16103618f;
      sa[384] = -0.10834846f;
      sa[385] = 0.17165942f;
      sa[386] = -0.28002232f;
      sa[387] = -0.22317472f;
      sa[388] = 0.06375026f;
      sa[389] = -0.04479855f;
      sa[390] = -0.033561893f;
      sa[391] = -0.16314876f;
      sa[392] = 0.3391897f;
      sa[393] = 0.3229252f;
      sa[394] = -0.1084861f;
      sa[395] = 0.25460723f;
      sa[396] = 0.34383565f;
      sa[397] = -0.2558748f;
      sa[398] = 0.0031466868f;
      sa[399] = 0.1569762f;
      sa[400] = 0.11353603f;
      sa[401] = 0.18667848f;
      sa[402] = -0.19796224f;
      sa[403] = -0.034286834f;
      sa[404] = 0.3269835f;
      sa[405] = -0.25470915f;
      sa[406] = -0.11759715f;
      sa[407] = 0.23521851f;
      sa[408] = -0.26623616f;
      sa[409] = -0.33251193f;
      sa[410] = -0.15829585f;
      sa[411] = 0.10140089f;
      sa[412] = -0.16976385f;
      sa[413] = 0.07742149f;
      sa[414] = 0.15645017f;
      sa[415] = 0.2820477f;
      sa[416] = -0.22216326f;
      sa[417] = -0.02059459f;
      sa[418] = -0.027001416f;
      sa[419] = 0.20437488f;
      sa[420] = 0.15000919f;
      sa[421] = 0.23565501f;
      sa[422] = 0.18418396f;
      sa[423] = -0.11699534f;
      sa[424] = 0.054931037f;
      sa[425] = -0.15464206f;
      sa[426] = -0.39234996f;
      sa[427] = 0.12029756f;
      sa[428] = -0.091863446f;
      sa[429] = -0.27123508f;
      sa[430] = 0.2757791f;
      sa[431] = 0.057041947f;
      sa[432] = -0.07332267f;
      sa[433] = 0.17983943f;
      sa[434] = 0.29708f;
      sa[435] = 0.053595234f;
      sa[436] = -0.328972f;
      sa[437] = -0.3031245f;
      sa[438] = -0.03211503f;
      sa[439] = -0.061243873f;
      sa[440] = 0.3278192f;
      sa[441] = -0.315525f;
      sa[442] = 0.13388348f;
      sa[443] = 0.07639093f;
      sa[444] = -0.2666077f;
      sa[445] = 0.04115374f;
      sa[446] = 0.21797489f;
      sa[447] = 0.044280216f;
      sa[448] = 0.24169092f;
      sa[449] = 0.295504f;
      sa[450] = -0.11847874f;
      sa[451] = 0.13340017f;
      sa[452] = 0.16719483f;
      sa[453] = -0.09837489f;
      sa[454] = -0.20948313f;
      sa[455] = -0.10806065f;
      sa[456] = -0.016734594f;
      sa[457] = 0.12008587f;
      sa[458] = -0.25174275f;
      sa[459] = 0.2846992f;
      sa[460] = 0.21577728f;
      sa[461] = 0.272846f;
      sa[462] = 0.032613203f;
      sa[463] = 0.21271066f;
      sa[464] = -0.3011012f;
      sa[465] = 0.19072556f;
      sa[466] = -0.0030172772f;
      sa[467] = 0.14185455f;
      sa[468] = 0.07494027f;
      sa[469] = 0.33922544f;
      sa[470] = 0.27655914f;
      sa[471] = 0.021254383f;
      sa[472] = -0.009825391f;
      sa[473] = -0.15656053f;
      sa[474] = -0.04934733f;
      sa[475] = 0.116859846f;
      sa[476] = 0.22912692f;
      sa[477] = -0.16236754f;
      sa[478] = 0.2074159f;
      sa[479] = -0.19088405f;
      sa[480] = -0.36732492f;
      sa[481] = -0.2844938f;
      sa[482] = -0.3277725f;
      sa[483] = 0.20524178f;
      sa[484] = 0.27244174f;
      sa[485] = 0.18175544f;
      sa[486] = -0.021505933f;
      sa[487] = -0.17922316f;
      sa[488] = -0.2411191f;
      sa[489] = 0.07341068f;
      sa[490] = -0.03807618f;
      sa[491] = -0.22191949f;
      sa[492] = 0.26923078f;
      sa[493] = 0.36201152f;
      sa[494] = -0.22798292f;
      sa[495] = 0.3473788f;
      sa[496] = -0.034132686f;
      sa[497] = 0.054109983f;
      sa[498] = 0.15210699f;
      sa[499] = 0.18612257f;
      sa[500] = -0.051398963f;
      sa[501] = 0.13978f;
      sa[502] = 0.2836998f;
      sa[503] = 0.10657007f;
      sa[504] = -0.15825327f;
      sa[505] = -0.18563168f;
      sa[506] = 0.216905f;
      sa[507] = -0.0052994713f;
      sa[508] = 0.116844974f;
      sa[509] = 0.28903276f;
      sa[510] = 0.21540213f;
      sa[511] = 0.032190643f;
      sa[512] = 0.12020665f;
      sa[513] = -0.0816206f;
      sa[514] = 0.22317475f;
      sa[515] = -0.15580149f;
      sa[516] = 0.04609096f;
      sa[517] = 0.17041756f;
      sa[518] = 0.18544647f;
      sa[519] = -0.05836116f;
      sa[520] = 0.35924003f;
      sa[521] = 0.19415109f;
      sa[522] = 0.047336865f;
      sa[523] = 0.1983201f;
      sa[524] = 0.22812107f;
      sa[525] = 0.19429517f;
      sa[526] = 0.017775059f;
      sa[527] = -0.15552929f;
      sa[528] = -0.049494684f;
      sa[529] = 0.086733066f;
      sa[530] = -0.26302245f;
      sa[531] = -0.1201839f;
      sa[532] = 0.18264152f;
      sa[533] = 0.142609f;
      sa[534] = 0.1845727f;
      sa[535] = -0.09237841f;
      sa[536] = 0.04912104f;
      sa[537] = -0.22711867f;
      sa[538] = 0.20728646f;
      sa[539] = 0.25220957f;
      sa[540] = -0.21797547f;
      sa[541] = -0.15702918f;
      sa[542] = 0.01570511f;
      sa[543] = -0.39808372f;
      sa[544] = 0.19918631f;
      sa[545] = 0.19007781f;
      sa[546] = 0.10806301f;
      sa[547] = 0.26603496f;
      sa[548] = 0.14352693f;
      sa[549] = 0.1739102f;
      sa[550] = 0.080742314f;
      sa[551] = -0.218795f;
      sa[552] = 0.08689616f;
      sa[553] = 0.019748824f;
      sa[554] = -0.1431993f;
      sa[555] = -0.109381326f;
      sa[556] = -0.1418387f;
      sa[557] = -0.21767317f;
      sa[558] = -0.27225754f;
      sa[559] = 0.26098543f;
      sa[560] = -0.29959995f;
      sa[561] = -0.070810534f;
      sa[562] = 0.22487268f;
      sa[563] = -0.010842569f;
      sa[564] = 0.38482037f;
      sa[565] = 0.11329154f;
      sa[566] = 0.3058038f;
      sa[567] = 0.120419085f;
      sa[568] = -0.013680111f;
      sa[569] = 0.0933323f;
      sa[570] = 0.06303003f;
      sa[571] = 9.227612E-4f;
      sa[572] = -0.14813885f;
      sa[573] = 0.06937937f;
      sa[574] = 0.26847386f;
      sa[575] = -0.26095316f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_12_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.44308618f;
      sa[1] = 0.03988126f;
      sa[2] = -0.18683301f;
      sa[3] = -0.22689545f;
      sa[4] = 0.067281425f;
      sa[5] = 0.07903346f;
      sa[6] = 0.26945394f;
      sa[7] = -0.046890657f;
      sa[8] = -0.2156124f;
      sa[9] = 0.21126927f;
      sa[10] = -0.093739584f;
      sa[11] = 0.16059387f;
      sa[12] = 0.11998252f;
      sa[13] = 0.10187367f;
      sa[14] = -0.21254735f;
      sa[15] = 0.3830924f;
      sa[16] = 0.4430415f;
      sa[17] = -0.08310144f;
      sa[18] = 0.027680792f;
      sa[19] = -0.084147796f;
      sa[20] = 0.33066165f;
      sa[21] = -0.03503077f;
      sa[22] = -0.32072785f;
      sa[23] = 0.24559277f;
      sa[24] = -0.36296403f;
      sa[25] = 0.09411499f;
      sa[26] = -0.12002457f;
      sa[27] = 0.4320246f;
      sa[28] = -0.3575637f;
      sa[29] = -0.13804275f;
      sa[30] = 0.12820072f;
      sa[31] = -0.2209316f;
      sa[32] = -0.3550896f;
      sa[33] = -0.3890781f;
      sa[34] = 0.010011725f;
      sa[35] = 0.37207907f;
      sa[36] = -0.10838558f;
      sa[37] = -0.08139302f;
      sa[38] = -0.025292672f;
      sa[39] = 0.26709086f;
      sa[40] = -0.22389106f;
      sa[41] = -0.39974296f;
      sa[42] = -0.30612037f;
      sa[43] = -0.3515299f;
      sa[44] = -0.039248545f;
      sa[45] = -0.42465156f;
      sa[46] = 0.30053586f;
      sa[47] = 0.29851183f;
      sa[48] = -0.40995634f;
      sa[49] = -0.28432503f;
      sa[50] = 0.10083564f;
      sa[51] = -0.11208419f;
      sa[52] = 0.17423168f;
      sa[53] = 0.22165473f;
      sa[54] = -0.092564225f;
      sa[55] = 0.33313677f;
      sa[56] = -0.2830013f;
      sa[57] = -0.31721938f;
      sa[58] = 0.05600387f;
      sa[59] = -0.04491399f;
      sa[60] = 0.31837243f;
      sa[61] = -0.20524488f;
      sa[62] = -0.12516974f;
      sa[63] = 0.15581787f;
      sa[64] = 0.46695304f;
      sa[65] = -0.16774155f;
      sa[66] = 0.17810026f;
      sa[67] = 0.40199053f;
      sa[68] = 0.21190497f;
      sa[69] = -0.2706484f;
      sa[70] = -0.46782765f;
      sa[71] = -0.09901898f;
      sa[72] = -0.37945706f;
      sa[73] = 0.29761454f;
      sa[74] = 0.3694435f;
      sa[75] = 0.010129975f;
      sa[76] = 0.28277254f;
      sa[77] = 0.19379532f;
      sa[78] = -0.30149698f;
      sa[79] = 0.3072224f;
      sa[80] = -0.28362012f;
      sa[81] = 0.07162384f;
      sa[82] = 0.18566684f;
      sa[83] = -0.18675798f;
      sa[84] = -0.45667902f;
      sa[85] = -0.33854714f;
      sa[86] = 0.05729943f;
      sa[87] = 0.37085858f;
      sa[88] = -0.3855503f;
      sa[89] = -0.12876037f;
      sa[90] = -0.26811415f;
      sa[91] = 0.41264158f;
      sa[92] = -0.16058037f;
      sa[93] = 0.031228792f;
      sa[94] = -0.43182683f;
      sa[95] = -0.069810905f;
      sa[96] = -0.3646099f;
      sa[97] = 0.024769057f;
      sa[98] = -0.03488017f;
      sa[99] = 0.05596572f;
      sa[100] = -0.38711065f;
      sa[101] = -0.19701716f;
      sa[102] = 0.20467894f;
      sa[103] = 0.06960431f;
      sa[104] = -0.09087342f;
      sa[105] = -0.20875186f;
      sa[106] = 0.3247077f;
      sa[107] = 0.33741054f;
      sa[108] = 0.14638616f;
      sa[109] = -0.033911567f;
      sa[110] = 0.17217304f;
      sa[111] = -0.24660075f;
      sa[112] = -0.39273047f;
      sa[113] = -0.0041172784f;
      sa[114] = 0.0366915f;
      sa[115] = -0.1430669f;
      sa[116] = 0.24574232f;
      sa[117] = -0.03399892f;
      sa[118] = -0.3961559f;
      sa[119] = -0.200827f;
      sa[120] = -0.12720047f;
      sa[121] = 0.263525f;
      sa[122] = -0.010704782f;
      sa[123] = 0.07716405f;
      sa[124] = -0.2488907f;
      sa[125] = 0.15607616f;
      sa[126] = -0.29946333f;
      sa[127] = 0.109593496f;
      sa[128] = -0.33596128f;
      sa[129] = 0.14019632f;
      sa[130] = -0.10009857f;
      sa[131] = 0.17680402f;
      sa[132] = 0.04974496f;
      sa[133] = 0.10947416f;
      sa[134] = 0.1683503f;
      sa[135] = -0.38859034f;
      sa[136] = 0.090906285f;
      sa[137] = -0.19772185f;
      sa[138] = 0.014283856f;
      sa[139] = 0.27815735f;
      sa[140] = -0.17800891f;
      sa[141] = -0.062360283f;
      sa[142] = -0.0065479977f;
      sa[143] = -0.26665816f;
      sa[144] = 0.24352002f;
      sa[145] = -0.19130157f;
      sa[146] = 0.028721025f;
      sa[147] = -0.040132906f;
      sa[148] = -0.21362229f;
      sa[149] = 0.3413721f;
      sa[150] = -0.2126088f;
      sa[151] = -0.47767597f;
      sa[152] = 0.46775213f;
      sa[153] = -0.115527235f;
      sa[154] = 0.3937701f;
      sa[155] = -0.44364488f;
      sa[156] = -0.38478863f;
      sa[157] = -0.31885505f;
      sa[158] = -0.08676745f;
      sa[159] = -0.18907277f;
      sa[160] = 0.2636122f;
      sa[161] = -0.3711173f;
      sa[162] = 0.39967597f;
      sa[163] = -0.26938614f;
      sa[164] = 0.13259742f;
      sa[165] = -0.2265221f;
      sa[166] = 0.31800714f;
      sa[167] = -0.46148044f;
      sa[168] = 0.20959927f;
      sa[169] = -0.46664208f;
      sa[170] = 0.33560127f;
      sa[171] = 0.20498338f;
      sa[172] = 0.33758855f;
      sa[173] = 0.33474338f;
      sa[174] = -0.10441839f;
      sa[175] = -0.07386391f;
      sa[176] = -0.19809763f;
      sa[177] = 0.06680355f;
      sa[178] = -0.26350585f;
      sa[179] = -0.040667593f;
      sa[180] = -0.37828115f;
      sa[181] = -0.17625606f;
      sa[182] = 0.1828831f;
      sa[183] = -0.26047018f;
      sa[184] = 0.48127303f;
      sa[185] = 0.41834676f;
      sa[186] = -0.055504587f;
      sa[187] = -0.22583331f;
      sa[188] = -0.13438253f;
      sa[189] = -0.18969701f;
      sa[190] = -0.39060247f;
      sa[191] = -0.19289267f;
      sa[192] = 0.07512728f;
      sa[193] = 0.13024023f;
      sa[194] = -0.24640337f;
      sa[195] = -0.22136122f;
      sa[196] = 0.19835806f;
      sa[197] = -0.15946986f;
      sa[198] = 0.09513206f;
      sa[199] = 0.3494015f;
      sa[200] = -0.020864058f;
      sa[201] = 0.28260118f;
      sa[202] = 0.2149026f;
      sa[203] = -0.4110778f;
      sa[204] = 0.24578725f;
      sa[205] = 0.46899152f;
      sa[206] = -0.12192831f;
      sa[207] = 0.19869384f;
      sa[208] = -0.24705401f;
      sa[209] = 0.16861357f;
      sa[210] = -0.15948142f;
      sa[211] = -0.31931096f;
      sa[212] = -0.3951043f;
      sa[213] = 0.01149796f;
      sa[214] = -0.4414017f;
      sa[215] = 0.037532218f;
      sa[216] = 0.1567117f;
      sa[217] = 0.3464954f;
      sa[218] = 0.009135945f;
      sa[219] = 0.0974287f;
      sa[220] = 0.110525705f;
      sa[221] = -0.038103092f;
      sa[222] = -0.26845443f;
      sa[223] = -0.29481384f;
      sa[224] = 0.2890446f;
      sa[225] = 0.09448325f;
      sa[226] = -0.042871546f;
      sa[227] = 0.09694079f;
      sa[228] = -0.08423447f;
      sa[229] = -0.16881223f;
      sa[230] = -0.18003008f;
      sa[231] = -0.102017716f;
      sa[232] = 0.48258173f;
      sa[233] = -0.1432362f;
      sa[234] = -0.16303587f;
      sa[235] = 0.039205097f;
      sa[236] = -0.36281207f;
      sa[237] = 0.435409f;
      sa[238] = 0.18124934f;
      sa[239] = -0.07957021f;
      sa[240] = -0.049793508f;
      sa[241] = -0.36518776f;
      sa[242] = -0.23491028f;
      sa[243] = 0.41056493f;
      sa[244] = 0.25111896f;
      sa[245] = 0.34281844f;
      sa[246] = 0.23734576f;
      sa[247] = -0.3920104f;
      sa[248] = -0.182986f;
      sa[249] = 0.017706785f;
      sa[250] = 0.23696294f;
      sa[251] = 0.42285636f;
      sa[252] = 0.25394353f;
      sa[253] = -0.30841526f;
      sa[254] = 0.4132928f;
      sa[255] = 0.16005436f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_12_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_ReLU_12_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.11608728f;
      sa[1] = -1.5775753f;
      sa[2] = -1.6143332f;
      sa[3] = 1.3388001f;
      sa[4] = 0.4043672f;
      sa[5] = -0.24158616f;
      sa[6] = -1.6764929f;
      sa[7] = 1.5045434f;
      sa[8] = 1.7647221f;
      sa[9] = 0.22032225f;
      sa[10] = 1.6230044f;
      sa[11] = 1.4734116f;
      sa[12] = 1.8520653f;
      sa[13] = -0.5642915f;
      sa[14] = -2.0124032f;
      sa[15] = -0.7222862f;
      sa[16] = 0.76823646f;
      sa[17] = -0.78315634f;
      sa[18] = -1.5187565f;
      sa[19] = -0.88902f;
      sa[20] = -1.9487078f;
      sa[21] = 0.29164794f;
      sa[22] = -1.9877204f;
      sa[23] = -0.6015615f;
      sa[24] = -0.54663455f;
      sa[25] = 1.8928583f;
      sa[26] = -0.32786456f;
      sa[27] = 1.2254529f;
      sa[28] = 1.2188057f;
      sa[29] = -0.7362033f;
      sa[30] = 0.16621844f;
      sa[31] = 0.14546579f;
      sa[32] = 0.43475905f;
      sa[33] = 0.2813272f;
      sa[34] = -0.6363706f;
      sa[35] = 1.0360488f;
      sa[36] = 0.5761505f;
      sa[37] = -1.3352864f;
      sa[38] = 0.56092924f;
      sa[39] = -0.22409692f;
      sa[40] = 0.21664925f;
      sa[41] = -0.8101895f;
      sa[42] = 0.5155262f;
      sa[43] = -0.30375105f;
      sa[44] = 0.9508453f;
      sa[45] = -2.0827794f;
      sa[46] = -2.1488583f;
      sa[47] = 0.020913318f;
      sa[48] = 1.5588025f;
      sa[49] = -0.25439444f;
      sa[50] = -0.48427823f;
      sa[51] = 1.7862403f;
      sa[52] = -1.754306f;
      sa[53] = 1.0054874f;
      sa[54] = 1.7941023f;
      sa[55] = 1.0851392f;
      sa[56] = -0.5656763f;
      sa[57] = -0.10950957f;
      sa[58] = 0.98394585f;
      sa[59] = 0.8230675f;
      sa[60] = -1.4228129f;
      sa[61] = 0.9423049f;
      sa[62] = -0.41074693f;
      sa[63] = -0.8736602f;
      sa[64] = 0.9539792f;
      sa[65] = -0.95953023f;
      sa[66] = -1.7622813f;
      sa[67] = -0.1411726f;
      sa[68] = 0.9086984f;
      sa[69] = -1.3768084f;
      sa[70] = -1.6593531f;
      sa[71] = -0.027030516f;
      sa[72] = -0.9989819f;
      sa[73] = -1.2003125f;
      sa[74] = -1.0726293f;
      sa[75] = 1.2352072f;
      sa[76] = 1.917341f;
      sa[77] = -0.6174006f;
      sa[78] = -1.3790238f;
      sa[79] = -0.35796252f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_12 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_12_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_12_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_12_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_ReLU_12_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


