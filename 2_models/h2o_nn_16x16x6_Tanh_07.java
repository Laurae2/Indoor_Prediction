/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:51:30.016+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_07

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_07 > h2o_nn_16x16x6_Tanh_07.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_07.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_07", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_07 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_07_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_07_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_07_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_07_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_07_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_07_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_07_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_07_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_07_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_07_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_07_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_07_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_07.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_07_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25,0.25,0.125,0.25,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_07() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-5074938006567585272L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_07_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_07_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_07_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_07_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_07_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_07_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_07_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_07_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_07_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_07_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_07_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.012597265310326093;
      sa[1] = -0.0028353741967149146;
      sa[2] = 0.04912534375310928;
      sa[3] = -0.032092752024879406;
      sa[4] = -0.006212842919249183;
      sa[5] = 0.005250291586163391;
      sa[6] = 0.08230109796471267;
      sa[7] = 0.06638383903283562;
      sa[8] = -0.04842876899956982;
      sa[9] = -0.04977106623219382;
      sa[10] = 0.01940288694930327;
      sa[11] = 0.04124949744674958;
      sa[12] = 0.03818688101885635;
      sa[13] = 0.015405534474978597;
      sa[14] = 0.06383009083149833;
      sa[15] = 0.04425711383908757;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_07_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_07_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.029451301648835197;
      sa[1] = 0.003393524735625843;
      sa[2] = -0.00874398493155636;
      sa[3] = 0.056637639524965096;
      sa[4] = 0.009200665594281043;
      sa[5] = 0.004473275180201089;
      sa[6] = 0.025403327510948624;
      sa[7] = 0.05273197932855285;
      sa[8] = -0.04611830297311137;
      sa[9] = -0.048499603394489305;
      sa[10] = 0.010926594544441552;
      sa[11] = -0.02567425947237847;
      sa[12] = -0.020584061163816607;
      sa[13] = 0.02715703231993141;
      sa[14] = -0.003986758276340072;
      sa[15] = -0.05285830167604109;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_07_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_07_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 9.475895647489904E-4;
      sa[1] = -0.06118373062393239;
      sa[2] = -0.037518764279690905;
      sa[3] = 0.022986635292169464;
      sa[4] = 0.021100623968222366;
    }
  }
}
class h2o_nn_16x16x6_Tanh_07_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_07_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_07_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.06478715f;
      sa[1] = 0.29618642f;
      sa[2] = 0.21289548f;
      sa[3] = 0.25923228f;
      sa[4] = -0.20187105f;
      sa[5] = -0.20604758f;
      sa[6] = -0.060055017f;
      sa[7] = 0.25540957f;
      sa[8] = 0.16029435f;
      sa[9] = -0.17701074f;
      sa[10] = -0.16669959f;
      sa[11] = -0.19801424f;
      sa[12] = 0.10140666f;
      sa[13] = -0.29124448f;
      sa[14] = -0.19401377f;
      sa[15] = 0.0022759635f;
      sa[16] = 0.17008464f;
      sa[17] = 0.18494387f;
      sa[18] = -0.24190159f;
      sa[19] = 0.13015124f;
      sa[20] = 0.28277162f;
      sa[21] = -0.32415107f;
      sa[22] = 0.2615479f;
      sa[23] = -0.15752596f;
      sa[24] = 0.33867115f;
      sa[25] = 0.17889416f;
      sa[26] = -0.29704764f;
      sa[27] = 0.2802351f;
      sa[28] = 0.2840011f;
      sa[29] = -0.29580712f;
      sa[30] = -0.18504661f;
      sa[31] = 0.2034305f;
      sa[32] = 0.28153843f;
      sa[33] = -0.27549255f;
      sa[34] = 0.08314105f;
      sa[35] = -0.11722328f;
      sa[36] = 0.114032336f;
      sa[37] = 0.3305675f;
      sa[38] = -0.064406306f;
      sa[39] = 0.22818455f;
      sa[40] = 0.0130868945f;
      sa[41] = -0.09583655f;
      sa[42] = -0.16346587f;
      sa[43] = 0.0612918f;
      sa[44] = 0.28604913f;
      sa[45] = -0.21957448f;
      sa[46] = 0.066760935f;
      sa[47] = -0.01462936f;
      sa[48] = 0.25887895f;
      sa[49] = 0.28121236f;
      sa[50] = 0.22860742f;
      sa[51] = -0.2863198f;
      sa[52] = -0.042696156f;
      sa[53] = 0.293642f;
      sa[54] = 0.19890837f;
      sa[55] = 0.089553125f;
      sa[56] = -0.1706088f;
      sa[57] = -0.31972405f;
      sa[58] = 0.29643536f;
      sa[59] = -0.1715249f;
      sa[60] = -0.29693642f;
      sa[61] = 0.20663077f;
      sa[62] = 0.1085602f;
      sa[63] = 0.031592492f;
      sa[64] = 0.1549282f;
      sa[65] = 0.12388793f;
      sa[66] = 0.012862054f;
      sa[67] = 0.16606474f;
      sa[68] = -0.05435525f;
      sa[69] = 0.15314522f;
      sa[70] = -0.107253104f;
      sa[71] = 0.37806812f;
      sa[72] = -0.15737331f;
      sa[73] = 0.16250472f;
      sa[74] = -0.22699998f;
      sa[75] = 0.020351712f;
      sa[76] = -0.18192194f;
      sa[77] = -0.044618327f;
      sa[78] = -0.04455797f;
      sa[79] = 0.16748844f;
      sa[80] = -0.24929792f;
      sa[81] = -0.18498217f;
      sa[82] = -0.06133122f;
      sa[83] = 0.111010075f;
      sa[84] = -0.0108638955f;
      sa[85] = -0.17502536f;
      sa[86] = 0.18489367f;
      sa[87] = 0.27427465f;
      sa[88] = 0.20420858f;
      sa[89] = -0.037198413f;
      sa[90] = -0.10726485f;
      sa[91] = 0.15628071f;
      sa[92] = 0.121532515f;
      sa[93] = -0.19987532f;
      sa[94] = -0.16822173f;
      sa[95] = -0.25850344f;
      sa[96] = 0.115319386f;
      sa[97] = 0.025691135f;
      sa[98] = 0.24865243f;
      sa[99] = -0.08515259f;
      sa[100] = -0.051305905f;
      sa[101] = -0.1739895f;
      sa[102] = -0.25731575f;
      sa[103] = -0.08605002f;
      sa[104] = -0.04844514f;
      sa[105] = -0.13257182f;
      sa[106] = -0.25550413f;
      sa[107] = 0.12050628f;
      sa[108] = 0.1759209f;
      sa[109] = -0.2543425f;
      sa[110] = -0.20010488f;
      sa[111] = 0.17551684f;
      sa[112] = 0.1361959f;
      sa[113] = 0.03238515f;
      sa[114] = -0.1770536f;
      sa[115] = -0.084973425f;
      sa[116] = -0.26606566f;
      sa[117] = -0.040288206f;
      sa[118] = -0.2948363f;
      sa[119] = -0.17818137f;
      sa[120] = 0.22329825f;
      sa[121] = 0.23864159f;
      sa[122] = 0.31098253f;
      sa[123] = 0.25186715f;
      sa[124] = 0.27250147f;
      sa[125] = 0.26847896f;
      sa[126] = -0.274679f;
      sa[127] = -0.24841182f;
      sa[128] = 0.06852113f;
      sa[129] = 0.16474126f;
      sa[130] = -0.1402876f;
      sa[131] = 0.30310932f;
      sa[132] = 0.19237436f;
      sa[133] = -0.33232749f;
      sa[134] = 0.11365434f;
      sa[135] = -0.2863632f;
      sa[136] = -0.3030986f;
      sa[137] = -0.03127305f;
      sa[138] = 0.124836504f;
      sa[139] = -0.12039322f;
      sa[140] = -0.08523118f;
      sa[141] = -0.16232336f;
      sa[142] = 0.15756366f;
      sa[143] = -0.32317019f;
      sa[144] = 0.31400043f;
      sa[145] = -0.16481216f;
      sa[146] = -0.29077613f;
      sa[147] = 0.20935252f;
      sa[148] = 0.19207329f;
      sa[149] = 0.20603874f;
      sa[150] = 0.31949332f;
      sa[151] = -0.27765146f;
      sa[152] = 0.065963246f;
      sa[153] = 0.28101313f;
      sa[154] = 0.24504505f;
      sa[155] = -0.18407609f;
      sa[156] = 0.14425707f;
      sa[157] = -0.20865259f;
      sa[158] = 0.09001847f;
      sa[159] = 0.083963834f;
      sa[160] = 0.063508354f;
      sa[161] = 0.18357047f;
      sa[162] = -0.1656874f;
      sa[163] = -0.12444882f;
      sa[164] = 0.26948577f;
      sa[165] = -0.016756715f;
      sa[166] = -0.062425315f;
      sa[167] = -0.10903484f;
      sa[168] = 0.1729654f;
      sa[169] = 0.32833132f;
      sa[170] = 0.031476352f;
      sa[171] = -0.08669313f;
      sa[172] = -0.060154684f;
      sa[173] = -0.15239578f;
      sa[174] = -0.017936584f;
      sa[175] = -0.27610108f;
      sa[176] = -0.047742654f;
      sa[177] = -0.05506032f;
      sa[178] = -0.09347136f;
      sa[179] = 0.07070822f;
      sa[180] = -0.06749856f;
      sa[181] = -0.28848433f;
      sa[182] = -0.16668174f;
      sa[183] = 0.11161125f;
      sa[184] = 0.3047448f;
      sa[185] = 0.17621009f;
      sa[186] = -0.34623602f;
      sa[187] = 0.047590397f;
      sa[188] = -0.03245999f;
      sa[189] = 0.21453258f;
      sa[190] = 0.023253372f;
      sa[191] = -0.016324226f;
      sa[192] = -0.1470141f;
      sa[193] = 0.24110052f;
      sa[194] = 0.07293374f;
      sa[195] = 0.28321213f;
      sa[196] = 0.31673726f;
      sa[197] = -0.06951471f;
      sa[198] = 0.12438817f;
      sa[199] = -0.12437041f;
      sa[200] = 0.026488947f;
      sa[201] = -0.3028392f;
      sa[202] = 0.13131963f;
      sa[203] = -0.027872112f;
      sa[204] = -0.19328229f;
      sa[205] = 0.21994448f;
      sa[206] = 0.25073567f;
      sa[207] = 0.13949783f;
      sa[208] = -0.28098372f;
      sa[209] = -0.08331609f;
      sa[210] = -0.31353098f;
      sa[211] = -0.2744677f;
      sa[212] = 0.30523324f;
      sa[213] = -0.24090947f;
      sa[214] = -0.09087254f;
      sa[215] = 0.016784575f;
      sa[216] = 0.061632566f;
      sa[217] = 0.18257147f;
      sa[218] = -0.19905087f;
      sa[219] = 0.19078642f;
      sa[220] = -0.21373835f;
      sa[221] = 0.06723547f;
      sa[222] = 0.2730526f;
      sa[223] = 0.057905488f;
      sa[224] = 0.07450447f;
      sa[225] = 0.29542714f;
      sa[226] = -0.2752245f;
      sa[227] = 0.34626317f;
      sa[228] = 0.14289503f;
      sa[229] = 0.1127633f;
      sa[230] = 0.29496863f;
      sa[231] = -0.26780713f;
      sa[232] = -0.28003046f;
      sa[233] = 0.05128678f;
      sa[234] = 0.17217435f;
      sa[235] = -0.3560215f;
      sa[236] = -0.030740788f;
      sa[237] = -0.22680423f;
      sa[238] = -0.21595335f;
      sa[239] = 0.1529517f;
      sa[240] = 0.007107047f;
      sa[241] = -0.2614344f;
      sa[242] = -0.07364357f;
      sa[243] = -0.25009498f;
      sa[244] = -0.21640947f;
      sa[245] = -0.1245948f;
      sa[246] = -0.2745322f;
      sa[247] = -0.053975537f;
      sa[248] = 0.23506472f;
      sa[249] = 0.2948275f;
      sa[250] = -0.23748417f;
      sa[251] = -0.13273098f;
      sa[252] = -0.33254188f;
      sa[253] = -0.32973775f;
      sa[254] = -0.25466877f;
      sa[255] = 0.17934985f;
      sa[256] = -0.17449099f;
      sa[257] = 0.3216239f;
      sa[258] = -0.24473138f;
      sa[259] = -0.114980705f;
      sa[260] = -0.26845038f;
      sa[261] = -0.119196735f;
      sa[262] = -0.15016454f;
      sa[263] = 0.2527914f;
      sa[264] = -0.15387543f;
      sa[265] = 0.07946753f;
      sa[266] = -0.2801708f;
      sa[267] = -0.25273207f;
      sa[268] = 0.10616398f;
      sa[269] = -0.18878238f;
      sa[270] = 0.01302915f;
      sa[271] = 0.2256125f;
      sa[272] = -0.09528592f;
      sa[273] = -0.12566918f;
      sa[274] = 0.15167783f;
      sa[275] = 0.0030281455f;
      sa[276] = 0.11961173f;
      sa[277] = -0.25465012f;
      sa[278] = -0.11147437f;
      sa[279] = 0.23989218f;
      sa[280] = -0.17938773f;
      sa[281] = 0.31428993f;
      sa[282] = -0.093372196f;
      sa[283] = -0.044716377f;
      sa[284] = -0.0052141473f;
      sa[285] = -0.20820804f;
      sa[286] = 0.27880263f;
      sa[287] = 0.17676538f;
      sa[288] = -0.19569454f;
      sa[289] = -0.15517627f;
      sa[290] = -0.11353835f;
      sa[291] = 0.098519124f;
      sa[292] = 0.11296463f;
      sa[293] = -0.12233831f;
      sa[294] = 0.063267484f;
      sa[295] = 0.104872815f;
      sa[296] = 0.26531574f;
      sa[297] = 0.22505303f;
      sa[298] = -0.027895924f;
      sa[299] = -0.0015038729f;
      sa[300] = -0.019753486f;
      sa[301] = -0.08113076f;
      sa[302] = 0.15656382f;
      sa[303] = 0.03526111f;
      sa[304] = -0.17327534f;
      sa[305] = -0.024159906f;
      sa[306] = 0.20459875f;
      sa[307] = -0.2064752f;
      sa[308] = 0.08601359f;
      sa[309] = 0.14624044f;
      sa[310] = 0.28871515f;
      sa[311] = 0.3312697f;
      sa[312] = -0.22522853f;
      sa[313] = -0.17898583f;
      sa[314] = -0.1869643f;
      sa[315] = -0.07926955f;
      sa[316] = -0.033040863f;
      sa[317] = -0.11165618f;
      sa[318] = 0.08215487f;
      sa[319] = 0.30424523f;
      sa[320] = 0.047838166f;
      sa[321] = 0.19616373f;
      sa[322] = 0.19812596f;
      sa[323] = -0.2374256f;
      sa[324] = 0.026090372f;
      sa[325] = 0.33040372f;
      sa[326] = -0.265402f;
      sa[327] = 0.03974983f;
      sa[328] = -0.08615155f;
      sa[329] = 0.24900606f;
      sa[330] = -0.21381609f;
      sa[331] = 0.008590377f;
      sa[332] = -0.2518554f;
      sa[333] = 0.19031082f;
      sa[334] = -0.046270277f;
      sa[335] = 0.2342331f;
      sa[336] = -0.17411141f;
      sa[337] = -0.18111265f;
      sa[338] = 0.28931004f;
      sa[339] = -0.23295906f;
      sa[340] = -0.34203082f;
      sa[341] = -0.23661205f;
      sa[342] = 0.18279861f;
      sa[343] = -0.083232224f;
      sa[344] = -0.18361348f;
      sa[345] = 0.21130854f;
      sa[346] = 0.21941963f;
      sa[347] = -0.18895963f;
      sa[348] = 0.31991303f;
      sa[349] = -0.24962272f;
      sa[350] = -0.27564096f;
      sa[351] = 0.13332157f;
      sa[352] = 0.21207146f;
      sa[353] = -0.05203548f;
      sa[354] = 0.085382566f;
      sa[355] = 0.124070376f;
      sa[356] = -0.13470778f;
      sa[357] = 0.18019886f;
      sa[358] = -0.32233846f;
      sa[359] = 0.054106582f;
      sa[360] = 0.109991044f;
      sa[361] = -0.05185544f;
      sa[362] = -0.19465226f;
      sa[363] = 0.18483825f;
      sa[364] = -0.10635101f;
      sa[365] = -0.2224479f;
      sa[366] = 0.017277941f;
      sa[367] = -0.30566898f;
      sa[368] = -0.17492978f;
      sa[369] = 0.2595919f;
      sa[370] = -0.24746847f;
      sa[371] = 0.144688f;
      sa[372] = -0.0038809134f;
      sa[373] = 0.32333878f;
      sa[374] = -0.1463433f;
      sa[375] = -0.3266822f;
      sa[376] = -0.35445017f;
      sa[377] = -0.29410672f;
      sa[378] = 0.35621387f;
      sa[379] = 0.040009204f;
      sa[380] = -0.1039687f;
      sa[381] = -0.06931065f;
      sa[382] = -0.014013808f;
      sa[383] = -0.13096158f;
      sa[384] = -0.19213963f;
      sa[385] = 0.09487098f;
      sa[386] = -0.24793044f;
      sa[387] = -0.26024735f;
      sa[388] = 0.110801786f;
      sa[389] = 0.019838035f;
      sa[390] = 0.011278248f;
      sa[391] = -0.110476114f;
      sa[392] = 0.22788548f;
      sa[393] = 0.24459238f;
      sa[394] = -0.118733175f;
      sa[395] = 0.2595203f;
      sa[396] = 0.28964263f;
      sa[397] = -0.31358957f;
      sa[398] = 0.115267895f;
      sa[399] = 0.037357878f;
      sa[400] = 0.22788632f;
      sa[401] = 0.3009603f;
      sa[402] = -0.114398174f;
      sa[403] = 0.08880918f;
      sa[404] = 0.21132337f;
      sa[405] = -0.28310382f;
      sa[406] = -0.12289235f;
      sa[407] = 0.16949634f;
      sa[408] = -0.22562423f;
      sa[409] = -0.24877766f;
      sa[410] = -0.10404658f;
      sa[411] = 0.19027066f;
      sa[412] = -0.17161223f;
      sa[413] = 0.09809621f;
      sa[414] = 0.16912037f;
      sa[415] = 0.33066717f;
      sa[416] = -0.20338342f;
      sa[417] = 0.03740857f;
      sa[418] = 0.013087597f;
      sa[419] = 0.29322875f;
      sa[420] = 0.19864222f;
      sa[421] = 0.24548432f;
      sa[422] = 0.26639646f;
      sa[423] = -2.0837838E-4f;
      sa[424] = 0.1089386f;
      sa[425] = -0.065003745f;
      sa[426] = -0.29575664f;
      sa[427] = 0.20823444f;
      sa[428] = -0.08129857f;
      sa[429] = -0.1265682f;
      sa[430] = 0.18118908f;
      sa[431] = -0.008968762f;
      sa[432] = -0.059571918f;
      sa[433] = 0.12112585f;
      sa[434] = 0.25848296f;
      sa[435] = -0.055739634f;
      sa[436] = -0.2525064f;
      sa[437] = -0.2512159f;
      sa[438] = 0.043712795f;
      sa[439] = 0.027543267f;
      sa[440] = 0.3186727f;
      sa[441] = -0.33663154f;
      sa[442] = 0.10929989f;
      sa[443] = 0.004287186f;
      sa[444] = -0.23007627f;
      sa[445] = 0.08212319f;
      sa[446] = 0.27486777f;
      sa[447] = 0.06437457f;
      sa[448] = 0.1710089f;
      sa[449] = 0.2499536f;
      sa[450] = -0.084103175f;
      sa[451] = 0.11760604f;
      sa[452] = 0.19464777f;
      sa[453] = -0.039922558f;
      sa[454] = -0.15371537f;
      sa[455] = -0.08040501f;
      sa[456] = -0.0758231f;
      sa[457] = 0.1170648f;
      sa[458] = -0.22009912f;
      sa[459] = 0.33957964f;
      sa[460] = 0.24216588f;
      sa[461] = 0.32166f;
      sa[462] = 0.07161342f;
      sa[463] = 0.22942644f;
      sa[464] = -0.41531703f;
      sa[465] = 0.23414479f;
      sa[466] = -0.03685684f;
      sa[467] = 0.13493787f;
      sa[468] = 0.16387528f;
      sa[469] = 0.3331f;
      sa[470] = 0.23185216f;
      sa[471] = 0.08353613f;
      sa[472] = 0.015407821f;
      sa[473] = -0.11419799f;
      sa[474] = 0.0029844227f;
      sa[475] = 0.16882455f;
      sa[476] = 0.33085862f;
      sa[477] = -0.14279814f;
      sa[478] = 0.15483159f;
      sa[479] = -0.17902869f;
      sa[480] = -0.30565783f;
      sa[481] = -0.21432538f;
      sa[482] = -0.24930735f;
      sa[483] = 0.25640485f;
      sa[484] = 0.23658517f;
      sa[485] = 0.14631453f;
      sa[486] = -0.039798677f;
      sa[487] = -0.20645568f;
      sa[488] = -0.19248956f;
      sa[489] = 0.10521731f;
      sa[490] = 0.021507733f;
      sa[491] = -0.24489783f;
      sa[492] = 0.20678438f;
      sa[493] = 0.31105718f;
      sa[494] = -0.26895177f;
      sa[495] = 0.1794364f;
      sa[496] = 0.0079517225f;
      sa[497] = 0.07829408f;
      sa[498] = 0.19290985f;
      sa[499] = 0.19048296f;
      sa[500] = -0.040470127f;
      sa[501] = 0.07431915f;
      sa[502] = 0.21447591f;
      sa[503] = 0.025741283f;
      sa[504] = -0.24949026f;
      sa[505] = -0.26214668f;
      sa[506] = 0.21747258f;
      sa[507] = -0.05375934f;
      sa[508] = 0.10789384f;
      sa[509] = 0.2455695f;
      sa[510] = 0.1951102f;
      sa[511] = -0.033808284f;
      sa[512] = 0.028120104f;
      sa[513] = -0.12925047f;
      sa[514] = 0.25892085f;
      sa[515] = -0.24743645f;
      sa[516] = 0.027058063f;
      sa[517] = 0.10251721f;
      sa[518] = 0.1537511f;
      sa[519] = -0.11129922f;
      sa[520] = 0.235225f;
      sa[521] = 0.13178375f;
      sa[522] = 0.12103306f;
      sa[523] = 0.21045694f;
      sa[524] = 0.19997874f;
      sa[525] = 0.17084019f;
      sa[526] = -0.004885876f;
      sa[527] = -0.107713506f;
      sa[528] = 0.022196904f;
      sa[529] = 0.110337585f;
      sa[530] = -0.17353052f;
      sa[531] = 0.0431901f;
      sa[532] = 0.1505791f;
      sa[533] = 0.1252873f;
      sa[534] = 0.13932088f;
      sa[535] = -0.105921626f;
      sa[536] = 0.12354387f;
      sa[537] = -0.20938829f;
      sa[538] = 0.22435127f;
      sa[539] = 0.3091357f;
      sa[540] = -0.27268243f;
      sa[541] = -0.1823738f;
      sa[542] = -0.05703294f;
      sa[543] = -0.34551603f;
      sa[544] = 0.17841214f;
      sa[545] = 0.12675655f;
      sa[546] = 0.10171589f;
      sa[547] = 0.2131241f;
      sa[548] = 0.07749484f;
      sa[549] = 0.17136087f;
      sa[550] = 0.004808123f;
      sa[551] = -0.1598764f;
      sa[552] = 0.05608525f;
      sa[553] = -0.055662964f;
      sa[554] = -0.15848592f;
      sa[555] = -0.16751961f;
      sa[556] = -0.22307163f;
      sa[557] = -0.28082165f;
      sa[558] = -0.21739183f;
      sa[559] = 0.14337672f;
      sa[560] = -0.32169423f;
      sa[561] = -0.08534701f;
      sa[562] = 0.23045631f;
      sa[563] = -0.09040222f;
      sa[564] = 0.2998123f;
      sa[565] = 0.0495118f;
      sa[566] = 0.2891098f;
      sa[567] = 0.036514793f;
      sa[568] = -0.07541697f;
      sa[569] = 0.038194526f;
      sa[570] = -0.014989415f;
      sa[571] = -0.07137815f;
      sa[572] = -0.209498f;
      sa[573] = 0.040521942f;
      sa[574] = 0.2765811f;
      sa[575] = -0.22330128f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_07_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_07_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.39211676f;
      sa[1] = -0.043764018f;
      sa[2] = -0.14428835f;
      sa[3] = -0.24088182f;
      sa[4] = 0.09684449f;
      sa[5] = 0.10894127f;
      sa[6] = 0.2702728f;
      sa[7] = -0.16181192f;
      sa[8] = -0.29784453f;
      sa[9] = 0.12226024f;
      sa[10] = -0.09656907f;
      sa[11] = 0.107830144f;
      sa[12] = 0.14376442f;
      sa[13] = 0.052175045f;
      sa[14] = -0.25954598f;
      sa[15] = 0.35802704f;
      sa[16] = 0.40031216f;
      sa[17] = -0.12375594f;
      sa[18] = 0.02164545f;
      sa[19] = -0.09050038f;
      sa[20] = 0.2669392f;
      sa[21] = -0.03291487f;
      sa[22] = -0.2838756f;
      sa[23] = 0.24685942f;
      sa[24] = -0.36414114f;
      sa[25] = 0.1423804f;
      sa[26] = -0.054038055f;
      sa[27] = 0.41125554f;
      sa[28] = -0.40424123f;
      sa[29] = -0.14626691f;
      sa[30] = 0.113440365f;
      sa[31] = -0.15836018f;
      sa[32] = -0.3449613f;
      sa[33] = -0.40070465f;
      sa[34] = 0.014356229f;
      sa[35] = 0.36915004f;
      sa[36] = -0.15083131f;
      sa[37] = -0.042466253f;
      sa[38] = 0.018858576f;
      sa[39] = 0.26545903f;
      sa[40] = -0.22614607f;
      sa[41] = -0.33064023f;
      sa[42] = -0.27584034f;
      sa[43] = -0.36420098f;
      sa[44] = 0.006729994f;
      sa[45] = -0.38302904f;
      sa[46] = 0.34315285f;
      sa[47] = 0.41188917f;
      sa[48] = -0.41247946f;
      sa[49] = -0.26679555f;
      sa[50] = 0.06646792f;
      sa[51] = -0.10891975f;
      sa[52] = 0.11619923f;
      sa[53] = 0.20564589f;
      sa[54] = -0.09366233f;
      sa[55] = 0.3067189f;
      sa[56] = -0.24167027f;
      sa[57] = -0.27217633f;
      sa[58] = 0.036002997f;
      sa[59] = -0.03404243f;
      sa[60] = 0.3713878f;
      sa[61] = -0.20565492f;
      sa[62] = -0.081107736f;
      sa[63] = 0.23580119f;
      sa[64] = 0.36613274f;
      sa[65] = -0.1711462f;
      sa[66] = 0.15277572f;
      sa[67] = 0.3980767f;
      sa[68] = 0.1816021f;
      sa[69] = -0.2736415f;
      sa[70] = -0.42511013f;
      sa[71] = -0.12409626f;
      sa[72] = -0.342829f;
      sa[73] = 0.3222861f;
      sa[74] = 0.35617238f;
      sa[75] = -0.0010141671f;
      sa[76] = 0.2003435f;
      sa[77] = 0.09415277f;
      sa[78] = -0.3436855f;
      sa[79] = 0.29805148f;
      sa[80] = -0.19655669f;
      sa[81] = 0.074711196f;
      sa[82] = 0.21703108f;
      sa[83] = -0.15727708f;
      sa[84] = -0.41197297f;
      sa[85] = -0.34601417f;
      sa[86] = 0.06668085f;
      sa[87] = 0.3354203f;
      sa[88] = -0.41499063f;
      sa[89] = -0.14455128f;
      sa[90] = -0.29031143f;
      sa[91] = 0.405007f;
      sa[92] = -0.037985004f;
      sa[93] = 0.10272783f;
      sa[94] = -0.40145573f;
      sa[95] = -0.05621827f;
      sa[96] = -0.3259448f;
      sa[97] = 0.03749646f;
      sa[98] = -0.021332728f;
      sa[99] = 0.08199277f;
      sa[100] = -0.4124708f;
      sa[101] = -0.120298356f;
      sa[102] = 0.31325614f;
      sa[103] = 0.04718996f;
      sa[104] = -0.06538191f;
      sa[105] = -0.13548473f;
      sa[106] = 0.36520907f;
      sa[107] = 0.3224817f;
      sa[108] = 0.22252138f;
      sa[109] = 0.009503753f;
      sa[110] = 0.22329235f;
      sa[111] = -0.14025155f;
      sa[112] = -0.3391012f;
      sa[113] = 0.04721591f;
      sa[114] = 0.014385741f;
      sa[115] = -0.11800963f;
      sa[116] = 0.31135967f;
      sa[117] = 0.00919227f;
      sa[118] = -0.37458834f;
      sa[119] = -0.23216195f;
      sa[120] = -0.06250259f;
      sa[121] = 0.29567355f;
      sa[122] = -0.035286456f;
      sa[123] = 0.09410485f;
      sa[124] = -0.16353934f;
      sa[125] = 0.17135607f;
      sa[126] = -0.2409796f;
      sa[127] = 0.18576698f;
      sa[128] = -0.30436364f;
      sa[129] = 0.21611355f;
      sa[130] = -0.111266755f;
      sa[131] = 0.19544259f;
      sa[132] = -0.024525646f;
      sa[133] = 0.10642699f;
      sa[134] = 0.24536692f;
      sa[135] = -0.29457963f;
      sa[136] = 0.18035404f;
      sa[137] = -0.08784433f;
      sa[138] = 0.044902727f;
      sa[139] = 0.32634002f;
      sa[140] = -0.23134321f;
      sa[141] = -0.048173316f;
      sa[142] = -0.032230113f;
      sa[143] = -0.26287875f;
      sa[144] = 0.2778259f;
      sa[145] = -0.19879432f;
      sa[146] = 0.03654176f;
      sa[147] = -0.028797807f;
      sa[148] = -0.22507009f;
      sa[149] = 0.2745888f;
      sa[150] = -0.2121422f;
      sa[151] = -0.4262918f;
      sa[152] = 0.44347695f;
      sa[153] = -0.13510728f;
      sa[154] = 0.3949447f;
      sa[155] = -0.43228778f;
      sa[156] = -0.39281204f;
      sa[157] = -0.24573712f;
      sa[158] = -0.1074138f;
      sa[159] = -0.27396518f;
      sa[160] = 0.26116633f;
      sa[161] = -0.2783164f;
      sa[162] = 0.38111177f;
      sa[163] = -0.21211053f;
      sa[164] = 0.025708457f;
      sa[165] = -0.21723807f;
      sa[166] = 0.40351808f;
      sa[167] = -0.3858736f;
      sa[168] = 0.32403544f;
      sa[169] = -0.32267803f;
      sa[170] = 0.3591888f;
      sa[171] = 0.24479604f;
      sa[172] = 0.35341206f;
      sa[173] = 0.33898267f;
      sa[174] = -0.10929874f;
      sa[175] = -0.004486313f;
      sa[176] = -0.18258211f;
      sa[177] = 0.038852643f;
      sa[178] = -0.27965137f;
      sa[179] = -0.08833589f;
      sa[180] = -0.3392684f;
      sa[181] = -0.22043256f;
      sa[182] = 0.09413581f;
      sa[183] = -0.28945577f;
      sa[184] = 0.38521832f;
      sa[185] = 0.30469707f;
      sa[186] = -0.14353468f;
      sa[187] = -0.27882272f;
      sa[188] = -0.09252911f;
      sa[189] = -0.1697047f;
      sa[190] = -0.39360824f;
      sa[191] = -0.29331574f;
      sa[192] = -0.05647427f;
      sa[193] = 0.12277462f;
      sa[194] = -0.29464787f;
      sa[195] = -0.24589455f;
      sa[196] = 0.16299719f;
      sa[197] = -0.22295012f;
      sa[198] = 0.03844594f;
      sa[199] = 0.38589746f;
      sa[200] = -0.0029991106f;
      sa[201] = 0.26861238f;
      sa[202] = 0.1897683f;
      sa[203] = -0.39477476f;
      sa[204] = 0.09036821f;
      sa[205] = 0.36294955f;
      sa[206] = -0.16652796f;
      sa[207] = 0.11386348f;
      sa[208] = -0.18524927f;
      sa[209] = 0.17511015f;
      sa[210] = -0.113541424f;
      sa[211] = -0.2753843f;
      sa[212] = -0.31292522f;
      sa[213] = 0.06296651f;
      sa[214] = -0.35510314f;
      sa[215] = -0.06571904f;
      sa[216] = 0.1264576f;
      sa[217] = 0.31703672f;
      sa[218] = 0.016816158f;
      sa[219] = 0.09425899f;
      sa[220] = 0.20964772f;
      sa[221] = -0.0138105145f;
      sa[222] = -0.2565185f;
      sa[223] = -0.2912495f;
      sa[224] = 0.31906593f;
      sa[225] = 0.063721046f;
      sa[226] = -0.022018705f;
      sa[227] = 0.090433665f;
      sa[228] = -0.070815325f;
      sa[229] = -0.19932623f;
      sa[230] = -0.24668843f;
      sa[231] = -0.11829472f;
      sa[232] = 0.41772726f;
      sa[233] = -0.20388627f;
      sa[234] = -0.16024068f;
      sa[235] = 0.03130611f;
      sa[236] = -0.3071965f;
      sa[237] = 0.463763f;
      sa[238] = 0.18148571f;
      sa[239] = -0.113066554f;
      sa[240] = -0.098046735f;
      sa[241] = -0.39413482f;
      sa[242] = -0.22169635f;
      sa[243] = 0.3966651f;
      sa[244] = 0.1559229f;
      sa[245] = 0.28679505f;
      sa[246] = 0.22694096f;
      sa[247] = -0.30567086f;
      sa[248] = -0.21018791f;
      sa[249] = 0.029732471f;
      sa[250] = 0.26552308f;
      sa[251] = 0.42258537f;
      sa[252] = 0.14282185f;
      sa[253] = -0.31340143f;
      sa[254] = 0.36805636f;
      sa[255] = 0.1104518f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_07_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_Tanh_07_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.20438077f;
      sa[1] = -1.545962f;
      sa[2] = -1.6210855f;
      sa[3] = 1.3441713f;
      sa[4] = 0.4308557f;
      sa[5] = -0.19638938f;
      sa[6] = -1.615747f;
      sa[7] = 1.5674142f;
      sa[8] = 1.8275992f;
      sa[9] = 0.2390379f;
      sa[10] = 1.6613251f;
      sa[11] = 1.5138936f;
      sa[12] = 1.9382684f;
      sa[13] = -0.5125594f;
      sa[14] = -1.9972004f;
      sa[15] = -0.69278324f;
      sa[16] = 0.77820885f;
      sa[17] = -0.77868706f;
      sa[18] = -1.6002138f;
      sa[19] = -0.91316557f;
      sa[20] = -1.9432367f;
      sa[21] = 0.3266497f;
      sa[22] = -1.9523363f;
      sa[23] = -0.69348335f;
      sa[24] = -0.5436981f;
      sa[25] = 1.8604681f;
      sa[26] = -0.2641713f;
      sa[27] = 1.2102282f;
      sa[28] = 1.2282245f;
      sa[29] = -0.76436883f;
      sa[30] = 0.15973157f;
      sa[31] = 0.098690994f;
      sa[32] = 0.4722509f;
      sa[33] = 0.2548376f;
      sa[34] = -0.6146656f;
      sa[35] = 1.04641f;
      sa[36] = 0.57792175f;
      sa[37] = -1.2887286f;
      sa[38] = 0.63228524f;
      sa[39] = -0.20051284f;
      sa[40] = 0.23266432f;
      sa[41] = -0.7349094f;
      sa[42] = 0.49936327f;
      sa[43] = -0.0042931475f;
      sa[44] = 1.0459207f;
      sa[45] = -1.9329587f;
      sa[46] = -2.169273f;
      sa[47] = 0.021543656f;
      sa[48] = 1.6208237f;
      sa[49] = -0.23089564f;
      sa[50] = -0.4585097f;
      sa[51] = 1.8896698f;
      sa[52] = -1.6984496f;
      sa[53] = 0.9248044f;
      sa[54] = 1.7836542f;
      sa[55] = 1.11008f;
      sa[56] = -0.56573355f;
      sa[57] = -0.077753246f;
      sa[58] = 1.0245959f;
      sa[59] = 0.8318502f;
      sa[60] = -1.4051795f;
      sa[61] = 0.91195637f;
      sa[62] = -0.37986708f;
      sa[63] = -0.8141512f;
      sa[64] = 0.92129207f;
      sa[65] = -0.79889405f;
      sa[66] = -1.7583414f;
      sa[67] = -0.044653863f;
      sa[68] = 0.8819795f;
      sa[69] = -1.4026004f;
      sa[70] = -1.7342669f;
      sa[71] = 0.0059352256f;
      sa[72] = -1.0583408f;
      sa[73] = -1.2139498f;
      sa[74] = -1.0896084f;
      sa[75] = 1.0979167f;
      sa[76] = 1.8245637f;
      sa[77] = -0.7095076f;
      sa[78] = -1.3698875f;
      sa[79] = -0.36915714f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_07 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_07_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_07_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_07_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_Tanh_07_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


