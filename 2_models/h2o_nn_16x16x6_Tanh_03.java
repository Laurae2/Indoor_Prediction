/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:50:30.961+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_03

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_03 > h2o_nn_16x16x6_Tanh_03.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_03.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_03", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_03 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_03_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_03_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_03_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_03_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_03_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_03_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_03_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_03_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_03_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_03_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_03_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_03_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_03.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_03_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.27956989247311825,0.13978494623655913,0.15053763440860216,0.27956989247311825,0.15053763440860216};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_03() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(8466622723386646528L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_03_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_03_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_03_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_03_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_03_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_03_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_03_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_03_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_03_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_03_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_03_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.03790361336260349;
      sa[1] = 8.313436768593915E-4;
      sa[2] = 0.10823918964895932;
      sa[3] = 0.026490720971007235;
      sa[4] = 0.025569782779717;
      sa[5] = -0.0067494515239231905;
      sa[6] = 0.05537881838333454;
      sa[7] = 0.027422429268442954;
      sa[8] = -0.1372015249540238;
      sa[9] = 0.007571837095858321;
      sa[10] = 0.02622956808837987;
      sa[11] = -0.011358631305421547;
      sa[12] = 0.040526488085246136;
      sa[13] = 4.95400626697476E-4;
      sa[14] = -0.025693076124531998;
      sa[15] = 0.03757151348825154;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_03_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_03_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.038766967946006925;
      sa[1] = -0.023639707257801477;
      sa[2] = -0.032162371631175454;
      sa[3] = 0.07635669377419828;
      sa[4] = 0.050814764893892875;
      sa[5] = -0.024845075599176755;
      sa[6] = -0.009356592361879695;
      sa[7] = 0.056155331689259444;
      sa[8] = 0.03321988272014874;
      sa[9] = -0.054654049830124604;
      sa[10] = 0.01971686601833324;
      sa[11] = -0.02024645721040389;
      sa[12] = 0.01671375382904419;
      sa[13] = 0.004807070959828357;
      sa[14] = -0.04009151621215436;
      sa[15] = -0.08597924030516117;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_03_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_03_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0350389133878856;
      sa[1] = -0.06770966745328219;
      sa[2] = -0.05103494962843996;
      sa[3] = -0.020711877837722655;
      sa[4] = 0.00407719200953948;
    }
  }
}
class h2o_nn_16x16x6_Tanh_03_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_03_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_03_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.08374985f;
      sa[1] = 0.3542977f;
      sa[2] = 0.21117038f;
      sa[3] = 0.15505034f;
      sa[4] = -0.17611565f;
      sa[5] = -0.14604661f;
      sa[6] = -0.025228433f;
      sa[7] = 0.33477888f;
      sa[8] = 0.17001139f;
      sa[9] = -0.13970537f;
      sa[10] = -0.11670045f;
      sa[11] = -0.19146699f;
      sa[12] = 0.09654629f;
      sa[13] = -0.2156239f;
      sa[14] = -0.17158747f;
      sa[15] = 0.062162086f;
      sa[16] = 0.19977868f;
      sa[17] = 0.22808863f;
      sa[18] = -0.31504196f;
      sa[19] = 0.16097282f;
      sa[20] = 0.2429215f;
      sa[21] = -0.3440635f;
      sa[22] = 0.25269198f;
      sa[23] = -0.17915535f;
      sa[24] = 0.31547943f;
      sa[25] = 0.26928648f;
      sa[26] = -0.32717466f;
      sa[27] = 0.4569873f;
      sa[28] = 0.27384126f;
      sa[29] = -0.27993697f;
      sa[30] = -0.13144653f;
      sa[31] = 0.22194457f;
      sa[32] = 0.20223339f;
      sa[33] = -0.24045591f;
      sa[34] = 0.056574393f;
      sa[35] = -0.14189492f;
      sa[36] = 0.122771375f;
      sa[37] = 0.24111804f;
      sa[38] = -0.11423991f;
      sa[39] = 0.1739479f;
      sa[40] = 0.07646443f;
      sa[41] = -0.080445774f;
      sa[42] = -0.12934735f;
      sa[43] = 0.103582285f;
      sa[44] = 0.2557977f;
      sa[45] = -0.2288978f;
      sa[46] = 0.08953631f;
      sa[47] = -0.030465866f;
      sa[48] = 0.2201556f;
      sa[49] = 0.25990412f;
      sa[50] = 0.1929077f;
      sa[51] = -0.27106878f;
      sa[52] = -0.105490044f;
      sa[53] = 0.34512016f;
      sa[54] = 0.23219846f;
      sa[55] = -0.10490519f;
      sa[56] = -0.1870866f;
      sa[57] = -0.2827962f;
      sa[58] = 0.31507143f;
      sa[59] = -0.15904094f;
      sa[60] = -0.37609544f;
      sa[61] = 0.23584945f;
      sa[62] = 0.14376825f;
      sa[63] = 0.061025966f;
      sa[64] = 0.13580675f;
      sa[65] = 0.14381006f;
      sa[66] = 0.011015128f;
      sa[67] = 0.19734791f;
      sa[68] = -0.11571117f;
      sa[69] = 0.21137936f;
      sa[70] = -0.12364748f;
      sa[71] = 0.35618368f;
      sa[72] = -0.16594346f;
      sa[73] = 0.15926662f;
      sa[74] = -0.21805371f;
      sa[75] = 0.100004226f;
      sa[76] = -0.23543291f;
      sa[77] = -0.09483824f;
      sa[78] = -0.08191575f;
      sa[79] = 0.066049084f;
      sa[80] = -0.22824581f;
      sa[81] = -0.18514054f;
      sa[82] = -0.09491167f;
      sa[83] = 0.10931033f;
      sa[84] = 0.03172747f;
      sa[85] = -0.18283175f;
      sa[86] = 0.20040156f;
      sa[87] = 0.19300255f;
      sa[88] = 0.14310746f;
      sa[89] = -0.0135325f;
      sa[90] = -0.06945459f;
      sa[91] = 0.21924284f;
      sa[92] = 0.16662991f;
      sa[93] = -0.21017748f;
      sa[94] = -0.16170943f;
      sa[95] = -0.28567457f;
      sa[96] = 0.14809214f;
      sa[97] = -0.059591897f;
      sa[98] = 0.2537222f;
      sa[99] = -0.20508985f;
      sa[100] = -0.027274111f;
      sa[101] = -0.20026648f;
      sa[102] = -0.2897402f;
      sa[103] = -0.15090382f;
      sa[104] = 0.002166725f;
      sa[105] = -0.24661645f;
      sa[106] = -0.20314609f;
      sa[107] = 0.16669485f;
      sa[108] = 0.17043212f;
      sa[109] = -0.20281442f;
      sa[110] = -0.16034603f;
      sa[111] = 0.1568463f;
      sa[112] = 0.10585639f;
      sa[113] = 0.05708062f;
      sa[114] = -0.16720486f;
      sa[115] = -0.11354584f;
      sa[116] = -0.24256288f;
      sa[117] = -0.03424169f;
      sa[118] = -0.28214166f;
      sa[119] = -0.13632607f;
      sa[120] = 0.26583517f;
      sa[121] = 0.29096144f;
      sa[122] = 0.3635461f;
      sa[123] = 0.2939753f;
      sa[124] = 0.32984677f;
      sa[125] = 0.32443577f;
      sa[126] = -0.3316033f;
      sa[127] = -0.07310531f;
      sa[128] = 0.0785534f;
      sa[129] = 0.13205606f;
      sa[130] = -0.1473031f;
      sa[131] = 0.28043807f;
      sa[132] = 0.26754853f;
      sa[133] = -0.32208562f;
      sa[134] = 0.09511691f;
      sa[135] = -0.3096053f;
      sa[136] = -0.27325076f;
      sa[137] = -0.028011499f;
      sa[138] = 0.1581601f;
      sa[139] = -0.12096437f;
      sa[140] = -0.06487218f;
      sa[141] = -0.16529042f;
      sa[142] = 0.13552608f;
      sa[143] = -0.3756971f;
      sa[144] = 0.26741338f;
      sa[145] = -0.1577441f;
      sa[146] = -0.24280538f;
      sa[147] = 0.20204969f;
      sa[148] = 0.17746307f;
      sa[149] = 0.22259307f;
      sa[150] = 0.32831383f;
      sa[151] = -0.28067046f;
      sa[152] = 0.041733436f;
      sa[153] = 0.27640796f;
      sa[154] = 0.26703086f;
      sa[155] = -0.20021045f;
      sa[156] = 0.16758986f;
      sa[157] = -0.17201784f;
      sa[158] = 0.12703235f;
      sa[159] = 0.111655414f;
      sa[160] = 0.092087224f;
      sa[161] = 0.23793879f;
      sa[162] = -0.1916924f;
      sa[163] = -0.0014218189f;
      sa[164] = 0.258861f;
      sa[165] = -0.054990593f;
      sa[166] = -0.07570788f;
      sa[167] = -0.09084345f;
      sa[168] = 0.253105f;
      sa[169] = 0.3599468f;
      sa[170] = 0.025956534f;
      sa[171] = -0.073916115f;
      sa[172] = -0.053672902f;
      sa[173] = -0.16021544f;
      sa[174] = -0.0031764586f;
      sa[175] = -0.27566504f;
      sa[176] = -0.018210936f;
      sa[177] = -0.033700973f;
      sa[178] = -0.08788104f;
      sa[179] = 0.06727822f;
      sa[180] = -0.05181734f;
      sa[181] = -0.24870062f;
      sa[182] = -0.18209092f;
      sa[183] = 0.11217094f;
      sa[184] = 0.29780933f;
      sa[185] = 0.19435993f;
      sa[186] = -0.33510804f;
      sa[187] = 0.050701376f;
      sa[188] = -0.007639844f;
      sa[189] = 0.24166429f;
      sa[190] = -0.012542249f;
      sa[191] = 0.018577537f;
      sa[192] = -0.11895074f;
      sa[193] = 0.27288824f;
      sa[194] = 0.10285787f;
      sa[195] = 0.29987225f;
      sa[196] = 0.3392544f;
      sa[197] = -0.03891319f;
      sa[198] = 0.096973866f;
      sa[199] = -0.13132218f;
      sa[200] = 0.020751823f;
      sa[201] = -0.32279882f;
      sa[202] = 0.1276125f;
      sa[203] = -0.081545524f;
      sa[204] = -0.22025773f;
      sa[205] = 0.21055777f;
      sa[206] = 0.23910254f;
      sa[207] = 0.12715505f;
      sa[208] = -0.27996767f;
      sa[209] = -0.08915377f;
      sa[210] = -0.29425463f;
      sa[211] = -0.27905047f;
      sa[212] = 0.254841f;
      sa[213] = -0.2915235f;
      sa[214] = -0.09983057f;
      sa[215] = 0.03792352f;
      sa[216] = 0.10478781f;
      sa[217] = 0.25053707f;
      sa[218] = -0.19187525f;
      sa[219] = 0.23917678f;
      sa[220] = -0.25509292f;
      sa[221] = 0.059504848f;
      sa[222] = 0.24212803f;
      sa[223] = 0.021294285f;
      sa[224] = 0.13403174f;
      sa[225] = 0.34282678f;
      sa[226] = -0.24391781f;
      sa[227] = 0.37515426f;
      sa[228] = 0.16100003f;
      sa[229] = 0.13495967f;
      sa[230] = 0.30638507f;
      sa[231] = -0.2804742f;
      sa[232] = -0.23481841f;
      sa[233] = 0.08574967f;
      sa[234] = 0.15318307f;
      sa[235] = -0.27583927f;
      sa[236] = -0.027305074f;
      sa[237] = -0.25087973f;
      sa[238] = -0.23944707f;
      sa[239] = 0.115174f;
      sa[240] = 0.037347596f;
      sa[241] = -0.2550398f;
      sa[242] = -0.1072678f;
      sa[243] = -0.3013619f;
      sa[244] = -0.20931302f;
      sa[245] = -0.13553694f;
      sa[246] = -0.26293162f;
      sa[247] = -0.059160065f;
      sa[248] = 0.2472406f;
      sa[249] = 0.20677339f;
      sa[250] = -0.19977634f;
      sa[251] = -0.08126559f;
      sa[252] = -0.2652566f;
      sa[253] = -0.26396307f;
      sa[254] = -0.2866823f;
      sa[255] = 0.110235624f;
      sa[256] = -0.18690783f;
      sa[257] = 0.29891172f;
      sa[258] = -0.2724347f;
      sa[259] = -0.11811847f;
      sa[260] = -0.21468347f;
      sa[261] = -0.053953134f;
      sa[262] = -0.111135215f;
      sa[263] = 0.27063882f;
      sa[264] = -0.17049643f;
      sa[265] = 0.06788508f;
      sa[266] = -0.30418152f;
      sa[267] = -0.25910717f;
      sa[268] = 0.15019341f;
      sa[269] = -0.14022233f;
      sa[270] = -0.033057034f;
      sa[271] = 0.2728703f;
      sa[272] = -0.081514575f;
      sa[273] = -0.1062063f;
      sa[274] = 0.14802057f;
      sa[275] = 0.034542125f;
      sa[276] = 0.08668664f;
      sa[277] = -0.23600602f;
      sa[278] = -0.17349051f;
      sa[279] = 0.29651272f;
      sa[280] = -0.1798487f;
      sa[281] = 0.3201216f;
      sa[282] = -0.10179871f;
      sa[283] = -0.04238168f;
      sa[284] = -0.04198285f;
      sa[285] = -0.25423026f;
      sa[286] = 0.3948819f;
      sa[287] = 0.24325281f;
      sa[288] = -0.2298952f;
      sa[289] = -0.2797989f;
      sa[290] = -0.1171987f;
      sa[291] = 0.09065994f;
      sa[292] = 0.14095059f;
      sa[293] = -0.11014818f;
      sa[294] = 0.085473746f;
      sa[295] = 0.15273595f;
      sa[296] = 0.2166339f;
      sa[297] = 0.20586684f;
      sa[298] = -0.029599395f;
      sa[299] = -0.02652204f;
      sa[300] = -0.04237767f;
      sa[301] = -0.0908033f;
      sa[302] = 0.15419856f;
      sa[303] = 0.035765924f;
      sa[304] = -0.2466185f;
      sa[305] = -0.04607873f;
      sa[306] = 0.2166323f;
      sa[307] = -0.27659774f;
      sa[308] = 0.054427594f;
      sa[309] = 0.13853844f;
      sa[310] = 0.2826221f;
      sa[311] = 0.29936045f;
      sa[312] = -0.27410948f;
      sa[313] = -0.16713548f;
      sa[314] = -0.13619162f;
      sa[315] = -0.015603359f;
      sa[316] = -0.058396004f;
      sa[317] = -0.115140356f;
      sa[318] = 0.07588815f;
      sa[319] = 0.3111728f;
      sa[320] = 0.02435534f;
      sa[321] = 0.2741676f;
      sa[322] = 0.097614445f;
      sa[323] = -0.29158777f;
      sa[324] = -0.003829449f;
      sa[325] = 0.28502017f;
      sa[326] = -0.2538563f;
      sa[327] = -0.009368638f;
      sa[328] = -0.04062763f;
      sa[329] = 0.28031027f;
      sa[330] = -0.177063f;
      sa[331] = 0.05628205f;
      sa[332] = -0.29897448f;
      sa[333] = 0.14164594f;
      sa[334] = -0.017690802f;
      sa[335] = 0.2059201f;
      sa[336] = -0.1838064f;
      sa[337] = -0.17607881f;
      sa[338] = 0.29266712f;
      sa[339] = -0.19585526f;
      sa[340] = -0.3435842f;
      sa[341] = -0.24207678f;
      sa[342] = 0.17463005f;
      sa[343] = -0.084969744f;
      sa[344] = -0.18824348f;
      sa[345] = 0.22911316f;
      sa[346] = 0.22976187f;
      sa[347] = -0.13667765f;
      sa[348] = 0.3417737f;
      sa[349] = -0.2510413f;
      sa[350] = -0.25542793f;
      sa[351] = 0.19613533f;
      sa[352] = 0.21503429f;
      sa[353] = -0.029655466f;
      sa[354] = 0.10070506f;
      sa[355] = 0.15222959f;
      sa[356] = -0.13821703f;
      sa[357] = 0.28728372f;
      sa[358] = -0.34161252f;
      sa[359] = 0.019219838f;
      sa[360] = 0.046811182f;
      sa[361] = -0.056970775f;
      sa[362] = -0.13445325f;
      sa[363] = 0.24068548f;
      sa[364] = -0.14623837f;
      sa[365] = -0.23304693f;
      sa[366] = -5.985588E-4f;
      sa[367] = -0.35319856f;
      sa[368] = -0.20552284f;
      sa[369] = 0.26853552f;
      sa[370] = -0.22418383f;
      sa[371] = 0.115209036f;
      sa[372] = 0.016111663f;
      sa[373] = 0.33885536f;
      sa[374] = -0.11886463f;
      sa[375] = -0.3278351f;
      sa[376] = -0.34146023f;
      sa[377] = -0.24953628f;
      sa[378] = 0.3453508f;
      sa[379] = 0.16152373f;
      sa[380] = -0.112240545f;
      sa[381] = -0.11772699f;
      sa[382] = -0.03890121f;
      sa[383] = -0.13029295f;
      sa[384] = -0.120054804f;
      sa[385] = 0.1114725f;
      sa[386] = -0.25697103f;
      sa[387] = -0.29452637f;
      sa[388] = 0.11121138f;
      sa[389] = -0.0052308748f;
      sa[390] = 0.005411649f;
      sa[391] = -0.1349111f;
      sa[392] = 0.3125091f;
      sa[393] = 0.22922145f;
      sa[394] = -0.09642084f;
      sa[395] = 0.27647817f;
      sa[396] = 0.33893406f;
      sa[397] = -0.26916808f;
      sa[398] = 0.10780116f;
      sa[399] = 0.09966928f;
      sa[400] = 0.17851262f;
      sa[401] = 0.24044992f;
      sa[402] = -0.16917406f;
      sa[403] = -0.021183718f;
      sa[404] = 0.2820735f;
      sa[405] = -0.24079011f;
      sa[406] = -0.11014082f;
      sa[407] = 0.20943008f;
      sa[408] = -0.23640163f;
      sa[409] = -0.28552434f;
      sa[410] = -0.13101521f;
      sa[411] = 0.10468739f;
      sa[412] = -0.16069767f;
      sa[413] = 0.09300747f;
      sa[414] = 0.17870735f;
      sa[415] = 0.33349842f;
      sa[416] = -0.17713231f;
      sa[417] = 0.04442587f;
      sa[418] = 0.006119263f;
      sa[419] = 0.26840588f;
      sa[420] = 0.19257243f;
      sa[421] = 0.20828862f;
      sa[422] = 0.2390519f;
      sa[423] = -0.10297814f;
      sa[424] = 0.11305662f;
      sa[425] = -0.08405472f;
      sa[426] = -0.34477463f;
      sa[427] = 0.16194986f;
      sa[428] = -0.058644433f;
      sa[429] = -0.17929195f;
      sa[430] = 0.21116096f;
      sa[431] = 0.009261723f;
      sa[432] = -0.07776792f;
      sa[433] = 0.14344272f;
      sa[434] = 0.32217517f;
      sa[435] = 0.040196892f;
      sa[436] = -0.29621908f;
      sa[437] = -0.2767319f;
      sa[438] = 0.0021212911f;
      sa[439] = -0.032214176f;
      sa[440] = 0.32593745f;
      sa[441] = -0.344352f;
      sa[442] = 0.11114832f;
      sa[443] = 0.027545894f;
      sa[444] = -0.2239023f;
      sa[445] = 0.07847741f;
      sa[446] = 0.26457378f;
      sa[447] = 0.0626527f;
      sa[448] = 0.19351391f;
      sa[449] = 0.2678256f;
      sa[450] = -0.08483958f;
      sa[451] = 0.15542677f;
      sa[452] = 0.21044752f;
      sa[453] = -0.053976446f;
      sa[454] = -0.16987835f;
      sa[455] = -0.042871103f;
      sa[456] = -0.012773401f;
      sa[457] = 0.1123231f;
      sa[458] = -0.22908928f;
      sa[459] = 0.2609445f;
      sa[460] = 0.2537842f;
      sa[461] = 0.30802253f;
      sa[462] = 0.060560353f;
      sa[463] = 0.22730352f;
      sa[464] = -0.27970463f;
      sa[465] = 0.24208176f;
      sa[466] = -0.030970976f;
      sa[467] = 0.13173366f;
      sa[468] = 0.10502026f;
      sa[469] = 0.30871478f;
      sa[470] = 0.23336978f;
      sa[471] = 0.08611121f;
      sa[472] = 0.018702772f;
      sa[473] = -0.117776506f;
      sa[474] = -0.0049660504f;
      sa[475] = 0.13405947f;
      sa[476] = 0.26950988f;
      sa[477] = -0.20181678f;
      sa[478] = 0.12976158f;
      sa[479] = -0.18851659f;
      sa[480] = -0.32908446f;
      sa[481] = -0.23524427f;
      sa[482] = -0.27707896f;
      sa[483] = 0.23576763f;
      sa[484] = 0.23337108f;
      sa[485] = 0.14231786f;
      sa[486] = -0.015759712f;
      sa[487] = -0.19394462f;
      sa[488] = -0.21833268f;
      sa[489] = 0.0877502f;
      sa[490] = -0.0040327874f;
      sa[491] = -0.22701828f;
      sa[492] = 0.24152876f;
      sa[493] = 0.32484752f;
      sa[494] = -0.23886465f;
      sa[495] = 0.20821075f;
      sa[496] = -0.009791688f;
      sa[497] = 0.066736236f;
      sa[498] = 0.18008932f;
      sa[499] = 0.181721f;
      sa[500] = -0.027458629f;
      sa[501] = 0.14431067f;
      sa[502] = 0.2216729f;
      sa[503] = 0.015895162f;
      sa[504] = -0.1732371f;
      sa[505] = -0.18420896f;
      sa[506] = 0.17572942f;
      sa[507] = -0.10176248f;
      sa[508] = 0.07611314f;
      sa[509] = 0.24276699f;
      sa[510] = 0.16452417f;
      sa[511] = -0.036848996f;
      sa[512] = 0.09280708f;
      sa[513] = -0.07286229f;
      sa[514] = 0.29417643f;
      sa[515] = -0.18425767f;
      sa[516] = 0.018078344f;
      sa[517] = 0.11471728f;
      sa[518] = 0.14475696f;
      sa[519] = -0.11541511f;
      sa[520] = 0.2725466f;
      sa[521] = 0.17777973f;
      sa[522] = 0.0581303f;
      sa[523] = 0.25033054f;
      sa[524] = 0.19003472f;
      sa[525] = 0.15270479f;
      sa[526] = -0.0322841f;
      sa[527] = -0.18100376f;
      sa[528] = -0.022275455f;
      sa[529] = 0.12448857f;
      sa[530] = -0.21975589f;
      sa[531] = 0.055911478f;
      sa[532] = 0.15005244f;
      sa[533] = 0.11802222f;
      sa[534] = 0.15073624f;
      sa[535] = -0.12057918f;
      sa[536] = 0.063470796f;
      sa[537] = -0.24076533f;
      sa[538] = 0.25188804f;
      sa[539] = 0.3216225f;
      sa[540] = -0.284607f;
      sa[541] = -0.16109939f;
      sa[542] = -0.028624738f;
      sa[543] = -0.34756374f;
      sa[544] = 0.14914379f;
      sa[545] = 0.13139944f;
      sa[546] = 0.08936751f;
      sa[547] = 0.20791385f;
      sa[548] = 0.08082912f;
      sa[549] = 0.16404808f;
      sa[550] = 0.034943417f;
      sa[551] = -0.17247425f;
      sa[552] = 0.06274215f;
      sa[553] = -0.034011167f;
      sa[554] = -0.14540567f;
      sa[555] = -0.14885482f;
      sa[556] = -0.17870362f;
      sa[557] = -0.23597132f;
      sa[558] = -0.24942854f;
      sa[559] = 0.28801864f;
      sa[560] = -0.33394578f;
      sa[561] = -0.11902119f;
      sa[562] = 0.20521303f;
      sa[563] = -0.0631224f;
      sa[564] = 0.38255405f;
      sa[565] = 0.09906018f;
      sa[566] = 0.2769043f;
      sa[567] = 0.053606115f;
      sa[568] = -0.07461657f;
      sa[569] = 0.026182435f;
      sa[570] = -0.010221016f;
      sa[571] = -0.07560143f;
      sa[572] = -0.15309022f;
      sa[573] = 0.078085184f;
      sa[574] = 0.28595254f;
      sa[575] = -0.24238622f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_03_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_03_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.3566392f;
      sa[1] = -0.0075826817f;
      sa[2] = -0.17931263f;
      sa[3] = -0.28263712f;
      sa[4] = 0.06444428f;
      sa[5] = 0.08151814f;
      sa[6] = 0.27825072f;
      sa[7] = -0.11771848f;
      sa[8] = -0.2540532f;
      sa[9] = 0.14559048f;
      sa[10] = -0.0782558f;
      sa[11] = 0.12730724f;
      sa[12] = 0.07850193f;
      sa[13] = 0.062532686f;
      sa[14] = -0.27105665f;
      sa[15] = 0.33753932f;
      sa[16] = 0.454174f;
      sa[17] = -0.09412894f;
      sa[18] = 0.029763201f;
      sa[19] = -0.099964336f;
      sa[20] = 0.33206093f;
      sa[21] = -0.012114796f;
      sa[22] = -0.3006332f;
      sa[23] = 0.25182807f;
      sa[24] = -0.39934105f;
      sa[25] = 0.0830919f;
      sa[26] = -0.09287519f;
      sa[27] = 0.40974435f;
      sa[28] = -0.34882128f;
      sa[29] = -0.100208506f;
      sa[30] = 0.15368985f;
      sa[31] = -0.20355012f;
      sa[32] = -0.31870368f;
      sa[33] = -0.39400357f;
      sa[34] = 0.049745955f;
      sa[35] = 0.41509563f;
      sa[36] = -0.0987164f;
      sa[37] = -0.029199377f;
      sa[38] = 0.026728861f;
      sa[39] = 0.2871779f;
      sa[40] = -0.23083852f;
      sa[41] = -0.38512635f;
      sa[42] = -0.26768443f;
      sa[43] = -0.35349503f;
      sa[44] = -0.021660589f;
      sa[45] = -0.37800026f;
      sa[46] = 0.35685515f;
      sa[47] = 0.33059388f;
      sa[48] = -0.40342587f;
      sa[49] = -0.29338187f;
      sa[50] = 0.14934099f;
      sa[51] = -0.07089298f;
      sa[52] = 0.12546575f;
      sa[53] = 0.21357055f;
      sa[54] = -0.09968689f;
      sa[55] = 0.39299494f;
      sa[56] = -0.2746281f;
      sa[57] = -0.30763954f;
      sa[58] = 0.14527741f;
      sa[59] = 0.037599847f;
      sa[60] = 0.26640347f;
      sa[61] = -0.26256865f;
      sa[62] = -0.047761768f;
      sa[63] = 0.2058145f;
      sa[64] = 0.4230718f;
      sa[65] = -0.19115265f;
      sa[66] = 0.17696227f;
      sa[67] = 0.41353807f;
      sa[68] = 0.18785787f;
      sa[69] = -0.2836351f;
      sa[70] = -0.42164153f;
      sa[71] = -0.1399419f;
      sa[72] = -0.36741278f;
      sa[73] = 0.30046192f;
      sa[74] = 0.34530687f;
      sa[75] = 0.004709255f;
      sa[76] = 0.25574568f;
      sa[77] = 0.12717985f;
      sa[78] = -0.32430267f;
      sa[79] = 0.30727676f;
      sa[80] = -0.2760326f;
      sa[81] = 0.075956024f;
      sa[82] = 0.21131594f;
      sa[83] = -0.15439366f;
      sa[84] = -0.4500999f;
      sa[85] = -0.33516246f;
      sa[86] = 0.07868501f;
      sa[87] = 0.39028618f;
      sa[88] = -0.36548012f;
      sa[89] = -0.10495226f;
      sa[90] = -0.22707345f;
      sa[91] = 0.4037196f;
      sa[92] = -0.15868603f;
      sa[93] = 0.036725264f;
      sa[94] = -0.43099365f;
      sa[95] = -0.08495974f;
      sa[96] = -0.297635f;
      sa[97] = 0.05048739f;
      sa[98] = 0.0017152735f;
      sa[99] = 0.100846365f;
      sa[100] = -0.3327407f;
      sa[101] = -0.11025442f;
      sa[102] = 0.3105421f;
      sa[103] = 0.09282082f;
      sa[104] = -0.074486814f;
      sa[105] = -0.19430776f;
      sa[106] = 0.38570756f;
      sa[107] = 0.37527624f;
      sa[108] = 0.17843612f;
      sa[109] = 0.024743909f;
      sa[110] = 0.2581969f;
      sa[111] = -0.18709801f;
      sa[112] = -0.35805696f;
      sa[113] = 0.014329051f;
      sa[114] = 0.068417385f;
      sa[115] = -0.09372426f;
      sa[116] = 0.2601738f;
      sa[117] = 0.017266765f;
      sa[118] = -0.35980058f;
      sa[119] = -0.17894368f;
      sa[120] = -0.06814031f;
      sa[121] = 0.30333516f;
      sa[122] = 0.058668926f;
      sa[123] = 0.14349587f;
      sa[124] = -0.28682265f;
      sa[125] = 0.1231101f;
      sa[126] = -0.23656553f;
      sa[127] = 0.164183f;
      sa[128] = -0.2752782f;
      sa[129] = 0.16186486f;
      sa[130] = -0.06429251f;
      sa[131] = 0.26589817f;
      sa[132] = 0.0678787f;
      sa[133] = 0.14559995f;
      sa[134] = 0.2239158f;
      sa[135] = -0.3224648f;
      sa[136] = 0.16107005f;
      sa[137] = -0.12060831f;
      sa[138] = 0.035896223f;
      sa[139] = 0.31672293f;
      sa[140] = -0.18067724f;
      sa[141] = -0.07270757f;
      sa[142] = 0.024019182f;
      sa[143] = -0.23590913f;
      sa[144] = 0.20033188f;
      sa[145] = -0.2031837f;
      sa[146] = 0.025908912f;
      sa[147] = -0.04679311f;
      sa[148] = -0.2630579f;
      sa[149] = 0.28958547f;
      sa[150] = -0.18828622f;
      sa[151] = -0.48655f;
      sa[152] = 0.47070727f;
      sa[153] = -0.08658329f;
      sa[154] = 0.40635172f;
      sa[155] = -0.48746794f;
      sa[156] = -0.39686635f;
      sa[157] = -0.33509254f;
      sa[158] = -0.19503325f;
      sa[159] = -0.25078025f;
      sa[160] = 0.29715815f;
      sa[161] = -0.33358502f;
      sa[162] = 0.4657013f;
      sa[163] = -0.17331733f;
      sa[164] = 0.11527219f;
      sa[165] = -0.17790118f;
      sa[166] = 0.3980098f;
      sa[167] = -0.36314535f;
      sa[168] = 0.28624234f;
      sa[169] = -0.3659386f;
      sa[170] = 0.40013874f;
      sa[171] = 0.26314947f;
      sa[172] = 0.29860002f;
      sa[173] = 0.28530818f;
      sa[174] = -0.06577338f;
      sa[175] = -0.017820083f;
      sa[176] = -0.26591763f;
      sa[177] = 0.02318637f;
      sa[178] = -0.3269819f;
      sa[179] = -0.10614866f;
      sa[180] = -0.39525416f;
      sa[181] = -0.22849116f;
      sa[182] = 0.11248734f;
      sa[183] = -0.28978333f;
      sa[184] = 0.49755633f;
      sa[185] = 0.36575818f;
      sa[186] = -0.10035178f;
      sa[187] = -0.26663324f;
      sa[188] = -0.18177544f;
      sa[189] = -0.21850827f;
      sa[190] = -0.4298597f;
      sa[191] = -0.24444348f;
      sa[192] = -0.035067454f;
      sa[193] = 0.10700434f;
      sa[194] = -0.28905138f;
      sa[195] = -0.24467143f;
      sa[196] = 0.14818877f;
      sa[197] = -0.22094905f;
      sa[198] = 0.03693675f;
      sa[199] = 0.35848516f;
      sa[200] = -0.031195037f;
      sa[201] = 0.26551107f;
      sa[202] = 0.16181268f;
      sa[203] = -0.41901156f;
      sa[204] = 0.1593263f;
      sa[205] = 0.37004882f;
      sa[206] = -0.17991933f;
      sa[207] = 0.14931858f;
      sa[208] = -0.23585632f;
      sa[209] = 0.18231827f;
      sa[210] = -0.14495973f;
      sa[211] = -0.319629f;
      sa[212] = -0.35274532f;
      sa[213] = 0.060121477f;
      sa[214] = -0.3718253f;
      sa[215] = 0.016931916f;
      sa[216] = 0.1795249f;
      sa[217] = 0.32987115f;
      sa[218] = 0.0643664f;
      sa[219] = 0.13931209f;
      sa[220] = 0.1021529f;
      sa[221] = -0.03725073f;
      sa[222] = -0.23976997f;
      sa[223] = -0.25352928f;
      sa[224] = 0.25115642f;
      sa[225] = 0.098101854f;
      sa[226] = -0.07433832f;
      sa[227] = 0.055204853f;
      sa[228] = -0.09185038f;
      sa[229] = -0.20234448f;
      sa[230] = -0.24243946f;
      sa[231] = -0.10996236f;
      sa[232] = 0.4538081f;
      sa[233] = -0.1714637f;
      sa[234] = -0.16151066f;
      sa[235] = 0.015866747f;
      sa[236] = -0.3580529f;
      sa[237] = 0.45105565f;
      sa[238] = 0.15046929f;
      sa[239] = -0.109536424f;
      sa[240] = -0.056355186f;
      sa[241] = -0.37269515f;
      sa[242] = -0.23971666f;
      sa[243] = 0.3896507f;
      sa[244] = 0.24085803f;
      sa[245] = 0.28046829f;
      sa[246] = 0.24735339f;
      sa[247] = -0.41216978f;
      sa[248] = -0.22846693f;
      sa[249] = 0.0150316935f;
      sa[250] = 0.1530748f;
      sa[251] = 0.3226855f;
      sa[252] = 0.2859286f;
      sa[253] = -0.26555306f;
      sa[254] = 0.3344531f;
      sa[255] = 0.10246056f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_03_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_Tanh_03_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.18435788f;
      sa[1] = -1.5381657f;
      sa[2] = -1.5721298f;
      sa[3] = 1.3555923f;
      sa[4] = 0.4440979f;
      sa[5] = -0.17337647f;
      sa[6] = -1.6209583f;
      sa[7] = 1.5581499f;
      sa[8] = 1.8219498f;
      sa[9] = 0.2686995f;
      sa[10] = 1.6539805f;
      sa[11] = 1.5054977f;
      sa[12] = 1.8838574f;
      sa[13] = -0.5347841f;
      sa[14] = -1.9994434f;
      sa[15] = -0.64977616f;
      sa[16] = 0.79812354f;
      sa[17] = -0.8098462f;
      sa[18] = -1.5714059f;
      sa[19] = -0.9128187f;
      sa[20] = -1.9513904f;
      sa[21] = 0.26487246f;
      sa[22] = -2.0077999f;
      sa[23] = -0.59681624f;
      sa[24] = -0.5564726f;
      sa[25] = 1.8847276f;
      sa[26] = -0.31120273f;
      sa[27] = 1.2279114f;
      sa[28] = 1.2588005f;
      sa[29] = -0.7229572f;
      sa[30] = 0.121548064f;
      sa[31] = 0.089073725f;
      sa[32] = 0.49441448f;
      sa[33] = 0.30495352f;
      sa[34] = -0.6000878f;
      sa[35] = 1.0282117f;
      sa[36] = 0.67572033f;
      sa[37] = -1.3124582f;
      sa[38] = 0.58088195f;
      sa[39] = -0.31442297f;
      sa[40] = 0.2051844f;
      sa[41] = -0.77511424f;
      sa[42] = 0.5548996f;
      sa[43] = -0.08520986f;
      sa[44] = 0.97325027f;
      sa[45] = -2.0880585f;
      sa[46] = -2.1429183f;
      sa[47] = 0.06407947f;
      sa[48] = 1.6031411f;
      sa[49] = -0.19453846f;
      sa[50] = -0.46434942f;
      sa[51] = 1.837283f;
      sa[52] = -1.7446535f;
      sa[53] = 0.96401435f;
      sa[54] = 1.8197612f;
      sa[55] = 1.1050744f;
      sa[56] = -0.5565477f;
      sa[57] = -0.09123534f;
      sa[58] = 1.0168804f;
      sa[59] = 0.85397136f;
      sa[60] = -1.3799968f;
      sa[61] = 0.939736f;
      sa[62] = -0.34538478f;
      sa[63] = -0.852171f;
      sa[64] = 0.9477605f;
      sa[65] = -0.9079577f;
      sa[66] = -1.7901814f;
      sa[67] = -0.14005819f;
      sa[68] = 0.89308673f;
      sa[69] = -1.4203699f;
      sa[70] = -1.7393216f;
      sa[71] = -0.03537626f;
      sa[72] = -1.0959488f;
      sa[73] = -1.3257942f;
      sa[74] = -1.0827657f;
      sa[75] = 1.1737628f;
      sa[76] = 1.978969f;
      sa[77] = -0.6815305f;
      sa[78] = -1.3708869f;
      sa[79] = -0.37543204f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_03 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_03_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_03_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_03_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_Tanh_03_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_03_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


