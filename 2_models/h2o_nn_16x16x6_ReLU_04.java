/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:50:44.135+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_04

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_04 > h2o_nn_16x16x6_ReLU_04.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_04.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_04", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_04 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_04_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_04_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_04_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_04_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_04_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_04_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_04_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_04_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_04_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_04_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_04_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_04_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_04.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_04_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.24528301886792453,0.12264150943396226,0.12264150943396226,0.1320754716981132,0.24528301886792453,0.1320754716981132};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_04() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(2203227561180857408L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_04_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_04_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_04_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_04_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_04_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_04_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_04_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_04_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_04_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_04_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_04_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_04_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_04_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_04_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_04_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_04_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.6128608264515647;
      sa[1] = 0.6539603145479939;
      sa[2] = 0.5820391505094902;
      sa[3] = 0.3786981723764348;
      sa[4] = 0.48540047499109373;
      sa[5] = 0.5521421688929056;
      sa[6] = 0.9083910521755821;
      sa[7] = 0.6021333562688806;
      sa[8] = 0.5640910859377906;
      sa[9] = 0.5411637092105316;
      sa[10] = 0.5660641735192294;
      sa[11] = 0.41764213092016894;
      sa[12] = 0.2905093076541797;
      sa[13] = 0.40106031956751514;
      sa[14] = 0.5328045702719265;
      sa[15] = 0.5682460039892948;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_04_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_04_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_04_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.0883029569827043;
      sa[1] = 1.045247102047509;
      sa[2] = 0.8728296960833356;
      sa[3] = 1.0114316576808537;
      sa[4] = 0.9497806496865955;
      sa[5] = 0.972388230276882;
      sa[6] = 0.9757175118558296;
      sa[7] = 0.8450454816628965;
      sa[8] = 0.87303197052582;
      sa[9] = 1.0170497721013168;
      sa[10] = 0.9173766573399297;
      sa[11] = 1.120004085203137;
      sa[12] = 1.0177636474850484;
      sa[13] = 0.833788584264295;
      sa[14] = 0.9734225080648177;
      sa[15] = 0.963141714211188;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_04_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_04_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_04_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.07731415175938386;
      sa[1] = 0.011785897681575487;
      sa[2] = -0.04202740534936233;
      sa[3] = -0.002331666925280826;
      sa[4] = 0.07581351507703957;
      sa[5] = -0.05549012426735444;
    }
  }
}
class h2o_nn_16x16x6_ReLU_04_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_04_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_04_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_04_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.11383448f;
      sa[1] = 0.1770656f;
      sa[2] = 0.058116f;
      sa[3] = 0.09482004f;
      sa[4] = -0.10195991f;
      sa[5] = -0.14632154f;
      sa[6] = 0.028305443f;
      sa[7] = 0.39540038f;
      sa[8] = 0.14068581f;
      sa[9] = -0.115919f;
      sa[10] = -0.1910967f;
      sa[11] = -0.25576603f;
      sa[12] = 0.09636913f;
      sa[13] = -0.28089717f;
      sa[14] = -0.16607909f;
      sa[15] = 0.0699314f;
      sa[16] = 0.056028694f;
      sa[17] = 0.21030162f;
      sa[18] = -0.21604899f;
      sa[19] = 0.052561987f;
      sa[20] = 0.29722694f;
      sa[21] = -0.25269872f;
      sa[22] = 0.33014917f;
      sa[23] = -0.096984036f;
      sa[24] = 0.21535926f;
      sa[25] = 0.17326044f;
      sa[26] = -0.26448253f;
      sa[27] = 0.44869184f;
      sa[28] = 0.2774648f;
      sa[29] = -0.24921048f;
      sa[30] = -0.15969351f;
      sa[31] = 0.2548791f;
      sa[32] = 0.16176368f;
      sa[33] = -0.29129815f;
      sa[34] = 0.16957085f;
      sa[35] = -0.03303868f;
      sa[36] = 0.20526405f;
      sa[37] = 0.27631876f;
      sa[38] = -0.19386783f;
      sa[39] = 0.22820036f;
      sa[40] = 0.08690194f;
      sa[41] = -0.06795356f;
      sa[42] = -0.11066746f;
      sa[43] = 0.051987976f;
      sa[44] = 0.3498982f;
      sa[45] = -0.2986134f;
      sa[46] = -0.067171074f;
      sa[47] = -0.0878885f;
      sa[48] = 0.24745755f;
      sa[49] = 0.26523548f;
      sa[50] = 0.23395585f;
      sa[51] = -0.3251002f;
      sa[52] = -0.11544f;
      sa[53] = 0.17969188f;
      sa[54] = 0.3226362f;
      sa[55] = -0.16362943f;
      sa[56] = -0.14092138f;
      sa[57] = -0.24964441f;
      sa[58] = 0.34452266f;
      sa[59] = -0.19887416f;
      sa[60] = -0.4092265f;
      sa[61] = 0.11530105f;
      sa[62] = 0.22341768f;
      sa[63] = 0.069846444f;
      sa[64] = 0.16261518f;
      sa[65] = 0.17589246f;
      sa[66] = 0.020457406f;
      sa[67] = 0.18044725f;
      sa[68] = -0.18508893f;
      sa[69] = 0.017175976f;
      sa[70] = 0.06476634f;
      sa[71] = 0.45762005f;
      sa[72] = -0.22616085f;
      sa[73] = 0.2462656f;
      sa[74] = -0.12966794f;
      sa[75] = -2.7503126E-4f;
      sa[76] = -0.2373035f;
      sa[77] = -0.044198394f;
      sa[78] = -0.06607052f;
      sa[79] = 0.094239846f;
      sa[80] = -0.2630964f;
      sa[81] = -0.19957201f;
      sa[82] = -0.025973191f;
      sa[83] = 0.12781745f;
      sa[84] = 0.046798617f;
      sa[85] = -0.120193176f;
      sa[86] = 0.21673669f;
      sa[87] = 0.26346102f;
      sa[88] = 0.24627541f;
      sa[89] = 0.069937944f;
      sa[90] = -0.168867f;
      sa[91] = 0.33548447f;
      sa[92] = 0.14157109f;
      sa[93] = -0.24367948f;
      sa[94] = -0.18883616f;
      sa[95] = -0.2718277f;
      sa[96] = 0.22887902f;
      sa[97] = 0.052562702f;
      sa[98] = 0.18300295f;
      sa[99] = -0.21343169f;
      sa[100] = -0.020884907f;
      sa[101] = -0.19835182f;
      sa[102] = -0.235942f;
      sa[103] = -0.12340838f;
      sa[104] = -0.015518239f;
      sa[105] = -0.17267685f;
      sa[106] = -0.25822985f;
      sa[107] = 0.12476334f;
      sa[108] = 0.20151746f;
      sa[109] = -0.3295497f;
      sa[110] = -0.2118366f;
      sa[111] = 0.0038090434f;
      sa[112] = 0.1357126f;
      sa[113] = -0.01810332f;
      sa[114] = -0.19798425f;
      sa[115] = -0.023891639f;
      sa[116] = -0.28520492f;
      sa[117] = 0.02999463f;
      sa[118] = -0.21421768f;
      sa[119] = -0.11828807f;
      sa[120] = 0.18875037f;
      sa[121] = 0.18235104f;
      sa[122] = 0.2654852f;
      sa[123] = 0.26171517f;
      sa[124] = 0.186345f;
      sa[125] = 0.28286958f;
      sa[126] = -0.23003809f;
      sa[127] = -0.2733618f;
      sa[128] = 0.068759464f;
      sa[129] = 0.18699734f;
      sa[130] = -0.13756678f;
      sa[131] = 0.415212f;
      sa[132] = 0.14583115f;
      sa[133] = -0.2737862f;
      sa[134] = 0.13529196f;
      sa[135] = -0.23186593f;
      sa[136] = -0.327664f;
      sa[137] = -0.04063994f;
      sa[138] = 0.07784409f;
      sa[139] = -0.1067411f;
      sa[140] = -0.04617442f;
      sa[141] = -0.083051f;
      sa[142] = 0.14100826f;
      sa[143] = -0.3027447f;
      sa[144] = 0.31129038f;
      sa[145] = -0.29150754f;
      sa[146] = -0.29778144f;
      sa[147] = 0.20997132f;
      sa[148] = 0.17871955f;
      sa[149] = 0.14839226f;
      sa[150] = 0.31237856f;
      sa[151] = -0.2614085f;
      sa[152] = 0.026135018f;
      sa[153] = 0.2699032f;
      sa[154] = 0.24238443f;
      sa[155] = -0.16279703f;
      sa[156] = 0.13013092f;
      sa[157] = -0.2696638f;
      sa[158] = 0.084858246f;
      sa[159] = 0.081659935f;
      sa[160] = -0.0339777f;
      sa[161] = 0.14743955f;
      sa[162] = -0.03929829f;
      sa[163] = -0.14226523f;
      sa[164] = 0.27320156f;
      sa[165] = -0.010298879f;
      sa[166] = -0.045012306f;
      sa[167] = -0.014171747f;
      sa[168] = 0.15705544f;
      sa[169] = 0.32916042f;
      sa[170] = 0.107928336f;
      sa[171] = -0.12203399f;
      sa[172] = -0.09003661f;
      sa[173] = -0.17829007f;
      sa[174] = -0.08056854f;
      sa[175] = -0.28412554f;
      sa[176] = 0.012758407f;
      sa[177] = 0.032980405f;
      sa[178] = -0.093279794f;
      sa[179] = 0.09842014f;
      sa[180] = -0.054659177f;
      sa[181] = -0.23342127f;
      sa[182] = -0.11782577f;
      sa[183] = 0.23039255f;
      sa[184] = 0.33384767f;
      sa[185] = 0.23327205f;
      sa[186] = -0.29561347f;
      sa[187] = 0.0886849f;
      sa[188] = -0.0042547896f;
      sa[189] = 0.22112703f;
      sa[190] = 0.018759053f;
      sa[191] = 0.0087105865f;
      sa[192] = -0.09897332f;
      sa[193] = 0.3063796f;
      sa[194] = 0.14332646f;
      sa[195] = 0.38159728f;
      sa[196] = 0.4293589f;
      sa[197] = -0.026033126f;
      sa[198] = 0.08566265f;
      sa[199] = -0.337637f;
      sa[200] = 0.035373103f;
      sa[201] = -0.31278592f;
      sa[202] = 0.15000331f;
      sa[203] = -0.07813542f;
      sa[204] = -0.17704259f;
      sa[205] = 0.22274707f;
      sa[206] = 0.24821946f;
      sa[207] = 0.096479416f;
      sa[208] = -0.25526744f;
      sa[209] = -0.0650101f;
      sa[210] = -0.2606147f;
      sa[211] = -0.23393895f;
      sa[212] = 0.27914563f;
      sa[213] = -0.2561431f;
      sa[214] = -0.19062215f;
      sa[215] = -0.116919555f;
      sa[216] = 0.06897334f;
      sa[217] = 0.15816398f;
      sa[218] = -0.10419444f;
      sa[219] = 0.082279325f;
      sa[220] = -0.20515966f;
      sa[221] = 0.17166932f;
      sa[222] = 0.30000114f;
      sa[223] = 0.081367955f;
      sa[224] = 0.13164388f;
      sa[225] = 0.3058721f;
      sa[226] = -0.20544103f;
      sa[227] = 0.37980142f;
      sa[228] = 0.26104403f;
      sa[229] = 0.24937853f;
      sa[230] = 0.40681285f;
      sa[231] = -0.20756406f;
      sa[232] = -0.29405951f;
      sa[233] = 0.065816864f;
      sa[234] = 0.10454908f;
      sa[235] = -0.17257231f;
      sa[236] = 0.019252306f;
      sa[237] = -0.22910485f;
      sa[238] = -0.21042424f;
      sa[239] = 0.14816971f;
      sa[240] = 0.1852136f;
      sa[241] = -0.18575066f;
      sa[242] = -0.14972651f;
      sa[243] = -0.37561205f;
      sa[244] = -0.12926887f;
      sa[245] = -0.06597727f;
      sa[246] = -0.16900706f;
      sa[247] = -0.008430504f;
      sa[248] = 0.19849016f;
      sa[249] = 0.15888177f;
      sa[250] = -0.3213273f;
      sa[251] = -0.13641512f;
      sa[252] = -0.20703758f;
      sa[253] = -0.3094357f;
      sa[254] = -0.34315366f;
      sa[255] = 0.15551132f;
      sa[256] = -0.1823354f;
      sa[257] = 0.2747689f;
      sa[258] = -0.2674694f;
      sa[259] = -0.13448839f;
      sa[260] = -0.118540354f;
      sa[261] = -0.062387742f;
      sa[262] = -0.25606227f;
      sa[263] = 0.33877108f;
      sa[264] = -0.15258099f;
      sa[265] = 0.046386074f;
      sa[266] = -0.29783034f;
      sa[267] = -0.25922775f;
      sa[268] = 0.092767864f;
      sa[269] = -0.23513876f;
      sa[270] = 0.0801407f;
      sa[271] = 0.14654316f;
      sa[272] = -0.04239198f;
      sa[273] = -0.08978122f;
      sa[274] = 0.16064909f;
      sa[275] = 0.020066563f;
      sa[276] = -0.017194474f;
      sa[277] = -0.4431963f;
      sa[278] = -0.0739404f;
      sa[279] = 0.14274386f;
      sa[280] = -0.16924965f;
      sa[281] = 0.32769412f;
      sa[282] = -0.13106441f;
      sa[283] = -0.031550746f;
      sa[284] = -0.0325489f;
      sa[285] = -0.30202845f;
      sa[286] = 0.44846705f;
      sa[287] = 0.27797285f;
      sa[288] = -0.30575222f;
      sa[289] = -0.19512874f;
      sa[290] = -0.11787249f;
      sa[291] = 0.35000485f;
      sa[292] = 0.16940549f;
      sa[293] = -0.041354224f;
      sa[294] = 0.13290522f;
      sa[295] = 0.12589371f;
      sa[296] = 0.19819574f;
      sa[297] = 0.08391103f;
      sa[298] = -0.09200222f;
      sa[299] = -0.41888818f;
      sa[300] = 0.004489178f;
      sa[301] = -0.04495891f;
      sa[302] = 0.20459625f;
      sa[303] = 0.028551292f;
      sa[304] = -0.17811559f;
      sa[305] = -0.06413983f;
      sa[306] = 0.16060027f;
      sa[307] = -0.2441194f;
      sa[308] = 0.065478295f;
      sa[309] = 0.1333843f;
      sa[310] = 0.32011288f;
      sa[311] = 0.2324654f;
      sa[312] = -0.2373542f;
      sa[313] = -0.21983106f;
      sa[314] = -0.15812008f;
      sa[315] = 0.13583493f;
      sa[316] = -0.025122616f;
      sa[317] = -0.08475491f;
      sa[318] = 0.14390159f;
      sa[319] = 0.2969696f;
      sa[320] = 0.03688633f;
      sa[321] = 0.12433074f;
      sa[322] = 0.24120419f;
      sa[323] = -0.30255505f;
      sa[324] = 0.08873734f;
      sa[325] = 0.19715469f;
      sa[326] = -0.3809936f;
      sa[327] = 0.015549622f;
      sa[328] = -0.021557298f;
      sa[329] = 0.23775105f;
      sa[330] = -0.1740469f;
      sa[331] = 0.058059793f;
      sa[332] = -0.26193005f;
      sa[333] = 0.16078714f;
      sa[334] = -0.14861947f;
      sa[335] = 0.22565009f;
      sa[336] = -0.1884076f;
      sa[337] = -0.21446796f;
      sa[338] = 0.27771294f;
      sa[339] = -0.23282115f;
      sa[340] = -0.48978528f;
      sa[341] = -0.3607802f;
      sa[342] = 0.3734016f;
      sa[343] = -0.36934668f;
      sa[344] = -0.1557107f;
      sa[345] = 0.2910754f;
      sa[346] = 0.2809763f;
      sa[347] = -0.10435933f;
      sa[348] = 0.22127526f;
      sa[349] = -0.36176533f;
      sa[350] = -0.16519776f;
      sa[351] = 0.18922776f;
      sa[352] = 0.20726007f;
      sa[353] = -0.02411585f;
      sa[354] = 0.06579166f;
      sa[355] = 0.1573826f;
      sa[356] = -0.16713391f;
      sa[357] = 0.22860582f;
      sa[358] = -0.2105409f;
      sa[359] = 0.15388878f;
      sa[360] = 0.09467475f;
      sa[361] = -0.16072235f;
      sa[362] = -0.10589397f;
      sa[363] = 0.1469732f;
      sa[364] = -0.1277052f;
      sa[365] = -0.23317772f;
      sa[366] = 0.017261492f;
      sa[367] = -0.28260165f;
      sa[368] = -0.19737785f;
      sa[369] = 0.20057449f;
      sa[370] = -0.20661786f;
      sa[371] = 0.2183725f;
      sa[372] = 0.019578332f;
      sa[373] = 0.331971f;
      sa[374] = -0.10628548f;
      sa[375] = -0.28269756f;
      sa[376] = -0.45047227f;
      sa[377] = -0.33660647f;
      sa[378] = 0.4261994f;
      sa[379] = 0.09547288f;
      sa[380] = -0.10728253f;
      sa[381] = -0.0978983f;
      sa[382] = -0.02158374f;
      sa[383] = -0.0643533f;
      sa[384] = -0.122626476f;
      sa[385] = 0.13877352f;
      sa[386] = -0.17023218f;
      sa[387] = -0.370524f;
      sa[388] = 0.10713285f;
      sa[389] = -0.0030072443f;
      sa[390] = -0.0076680556f;
      sa[391] = -0.10124741f;
      sa[392] = 0.32481635f;
      sa[393] = 0.38551053f;
      sa[394] = -0.2052242f;
      sa[395] = 0.20415267f;
      sa[396] = 0.33290866f;
      sa[397] = -0.071109615f;
      sa[398] = 0.20070603f;
      sa[399] = -0.12909791f;
      sa[400] = 0.17695975f;
      sa[401] = 0.2939029f;
      sa[402] = -0.16535188f;
      sa[403] = 0.058287323f;
      sa[404] = 0.2936707f;
      sa[405] = -0.16137727f;
      sa[406] = 0.029631538f;
      sa[407] = 0.48568282f;
      sa[408] = -0.22762936f;
      sa[409] = -0.22012448f;
      sa[410] = -0.119428046f;
      sa[411] = 0.19522485f;
      sa[412] = -0.005506434f;
      sa[413] = 0.21869197f;
      sa[414] = 0.043012064f;
      sa[415] = 0.48788556f;
      sa[416] = -0.20274071f;
      sa[417] = 0.016032673f;
      sa[418] = -0.039428335f;
      sa[419] = 0.2821383f;
      sa[420] = 0.29421788f;
      sa[421] = 0.37436903f;
      sa[422] = 0.1649892f;
      sa[423] = -0.11970817f;
      sa[424] = 0.13309115f;
      sa[425] = -0.061693486f;
      sa[426] = -0.28198895f;
      sa[427] = 0.21832152f;
      sa[428] = -0.07019747f;
      sa[429] = -0.08938345f;
      sa[430] = 0.10165202f;
      sa[431] = -0.08708682f;
      sa[432] = -0.08235183f;
      sa[433] = 0.18945964f;
      sa[434] = 0.38238356f;
      sa[435] = 0.051425297f;
      sa[436] = -0.3476108f;
      sa[437] = -0.33722314f;
      sa[438] = -0.04314776f;
      sa[439] = -0.08141175f;
      sa[440] = 0.33292636f;
      sa[441] = -0.26784238f;
      sa[442] = 0.12719606f;
      sa[443] = 0.20913458f;
      sa[444] = -0.29438972f;
      sa[445] = 0.013883683f;
      sa[446] = 0.20596462f;
      sa[447] = 0.011881488f;
      sa[448] = 0.22165315f;
      sa[449] = 0.3335335f;
      sa[450] = -0.061587505f;
      sa[451] = 0.14444454f;
      sa[452] = 0.13900253f;
      sa[453] = -0.11145813f;
      sa[454] = -0.22700581f;
      sa[455] = -0.11329141f;
      sa[456] = 0.06828377f;
      sa[457] = 0.1403875f;
      sa[458] = -0.2058131f;
      sa[459] = 0.15706909f;
      sa[460] = 0.18091221f;
      sa[461] = 0.23938897f;
      sa[462] = -0.017090008f;
      sa[463] = 0.15761924f;
      sa[464] = -0.27219296f;
      sa[465] = 0.2758519f;
      sa[466] = -0.047529154f;
      sa[467] = 0.115960605f;
      sa[468] = 0.12913209f;
      sa[469] = 0.29384914f;
      sa[470] = 0.21122213f;
      sa[471] = 0.0057431175f;
      sa[472] = 0.02058049f;
      sa[473] = -0.14471367f;
      sa[474] = -0.019344294f;
      sa[475] = 0.15614417f;
      sa[476] = 0.27161652f;
      sa[477] = -0.12734483f;
      sa[478] = 0.1698598f;
      sa[479] = -0.21516241f;
      sa[480] = -0.36955637f;
      sa[481] = -0.27393258f;
      sa[482] = -0.31400546f;
      sa[483] = 0.2123478f;
      sa[484] = 0.2297465f;
      sa[485] = 0.21681447f;
      sa[486] = -0.016895287f;
      sa[487] = -0.16246742f;
      sa[488] = -0.23190762f;
      sa[489] = 0.09808593f;
      sa[490] = -0.011438834f;
      sa[491] = -0.16545357f;
      sa[492] = 0.20695865f;
      sa[493] = 0.34388644f;
      sa[494] = -0.24684106f;
      sa[495] = 0.3332042f;
      sa[496] = -0.030062266f;
      sa[497] = 0.060640678f;
      sa[498] = 0.1542395f;
      sa[499] = 0.17090742f;
      sa[500] = -0.05818394f;
      sa[501] = 0.12943539f;
      sa[502] = 0.2964841f;
      sa[503] = 0.121030785f;
      sa[504] = -0.13768856f;
      sa[505] = -0.18492405f;
      sa[506] = 0.19071652f;
      sa[507] = -0.17657366f;
      sa[508] = 0.15336394f;
      sa[509] = 0.33792305f;
      sa[510] = 0.21906509f;
      sa[511] = 0.103614345f;
      sa[512] = 0.093312114f;
      sa[513] = 0.033699915f;
      sa[514] = 0.32796833f;
      sa[515] = -0.01891593f;
      sa[516] = 0.041200645f;
      sa[517] = 0.16367956f;
      sa[518] = 0.17300172f;
      sa[519] = -0.0072884783f;
      sa[520] = 0.31202397f;
      sa[521] = 0.32266352f;
      sa[522] = 0.049167797f;
      sa[523] = 0.15357822f;
      sa[524] = 0.20949051f;
      sa[525] = 0.20039256f;
      sa[526] = -0.009416089f;
      sa[527] = -0.09915745f;
      sa[528] = -0.033352498f;
      sa[529] = 0.16800222f;
      sa[530] = -0.22855558f;
      sa[531] = 0.07627151f;
      sa[532] = 0.18281704f;
      sa[533] = 0.16858785f;
      sa[534] = 0.2031174f;
      sa[535] = -0.022398464f;
      sa[536] = 0.08248004f;
      sa[537] = -0.10410061f;
      sa[538] = 0.12004277f;
      sa[539] = 0.21474886f;
      sa[540] = -0.20484576f;
      sa[541] = -0.27649826f;
      sa[542] = -0.15087017f;
      sa[543] = -0.37997162f;
      sa[544] = 0.19003631f;
      sa[545] = 0.0657169f;
      sa[546] = 0.09568435f;
      sa[547] = 0.24996501f;
      sa[548] = 0.083352335f;
      sa[549] = 0.18487774f;
      sa[550] = -0.0076541617f;
      sa[551] = -0.21105535f;
      sa[552] = 0.029075257f;
      sa[553] = -0.11765418f;
      sa[554] = -0.186857f;
      sa[555] = -0.1899001f;
      sa[556] = -0.33704534f;
      sa[557] = -0.346459f;
      sa[558] = -0.031617865f;
      sa[559] = 0.09745376f;
      sa[560] = -0.30159745f;
      sa[561] = -0.02926928f;
      sa[562] = 0.27528977f;
      sa[563] = 0.056809857f;
      sa[564] = 0.23696114f;
      sa[565] = 0.046028037f;
      sa[566] = 0.3506117f;
      sa[567] = 0.100073315f;
      sa[568] = -0.09892083f;
      sa[569] = 0.02873553f;
      sa[570] = -0.07055835f;
      sa[571] = -0.07081223f;
      sa[572] = -0.1779498f;
      sa[573] = 0.06849746f;
      sa[574] = 0.40645298f;
      sa[575] = -0.08776333f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_04_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_04_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_04_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.44237405f;
      sa[1] = 0.08713132f;
      sa[2] = -0.10273857f;
      sa[3] = -0.18584417f;
      sa[4] = 0.083984494f;
      sa[5] = 0.09331266f;
      sa[6] = 0.2567601f;
      sa[7] = 0.06187221f;
      sa[8] = -0.21863134f;
      sa[9] = 0.18612243f;
      sa[10] = -0.12726295f;
      sa[11] = 0.16896018f;
      sa[12] = 0.10658867f;
      sa[13] = 0.07694172f;
      sa[14] = -0.2267324f;
      sa[15] = 0.38119042f;
      sa[16] = 0.37397462f;
      sa[17] = -0.079685405f;
      sa[18] = 0.027233139f;
      sa[19] = -0.09803928f;
      sa[20] = 0.3551613f;
      sa[21] = 0.008892439f;
      sa[22] = -0.1902622f;
      sa[23] = 0.11658788f;
      sa[24] = -0.35155466f;
      sa[25] = 0.22468477f;
      sa[26] = -0.029418252f;
      sa[27] = 0.44848943f;
      sa[28] = -0.35677543f;
      sa[29] = -0.13669565f;
      sa[30] = 0.10656821f;
      sa[31] = -0.20600691f;
      sa[32] = -0.32755965f;
      sa[33] = -0.46726277f;
      sa[34] = 0.008112967f;
      sa[35] = 0.25855592f;
      sa[36] = -0.1115624f;
      sa[37] = -0.08707752f;
      sa[38] = 0.01795239f;
      sa[39] = 0.11362389f;
      sa[40] = -0.29194844f;
      sa[41] = -0.46657836f;
      sa[42] = -0.31628188f;
      sa[43] = -0.42878616f;
      sa[44] = 0.016228292f;
      sa[45] = -0.35565963f;
      sa[46] = 0.28873393f;
      sa[47] = 0.24089786f;
      sa[48] = -0.33811337f;
      sa[49] = -0.28469512f;
      sa[50] = 0.19988449f;
      sa[51] = -0.07760475f;
      sa[52] = 0.2014049f;
      sa[53] = 0.22545505f;
      sa[54] = -0.08521591f;
      sa[55] = 0.33697316f;
      sa[56] = -0.2897924f;
      sa[57] = -0.33163363f;
      sa[58] = 0.07027249f;
      sa[59] = -0.034287713f;
      sa[60] = 0.37202826f;
      sa[61] = -0.16641194f;
      sa[62] = -0.08739424f;
      sa[63] = 0.18993011f;
      sa[64] = 0.35562667f;
      sa[65] = -0.194438f;
      sa[66] = 0.10056642f;
      sa[67] = 0.37279877f;
      sa[68] = 0.17053656f;
      sa[69] = -0.3114143f;
      sa[70] = -0.4300042f;
      sa[71] = -0.10266732f;
      sa[72] = -0.36183533f;
      sa[73] = 0.31970358f;
      sa[74] = 0.41310725f;
      sa[75] = -0.030738108f;
      sa[76] = 0.21474403f;
      sa[77] = 0.11876678f;
      sa[78] = -0.36830047f;
      sa[79] = 0.2857515f;
      sa[80] = -0.14907247f;
      sa[81] = 0.039138548f;
      sa[82] = 0.29564473f;
      sa[83] = -0.18018654f;
      sa[84] = -0.44577312f;
      sa[85] = -0.3634369f;
      sa[86] = 0.065559976f;
      sa[87] = 0.30345017f;
      sa[88] = -0.46031785f;
      sa[89] = -0.19093214f;
      sa[90] = -0.30853093f;
      sa[91] = 0.3992199f;
      sa[92] = -0.04785202f;
      sa[93] = 0.11116124f;
      sa[94] = -0.40968797f;
      sa[95] = -0.11968193f;
      sa[96] = -0.30155504f;
      sa[97] = 0.009294586f;
      sa[98] = 0.05257415f;
      sa[99] = 0.06580346f;
      sa[100] = -0.33758083f;
      sa[101] = -0.17727797f;
      sa[102] = 0.3368652f;
      sa[103] = -0.035843726f;
      sa[104] = -0.13732192f;
      sa[105] = -0.1910842f;
      sa[106] = 0.34078434f;
      sa[107] = 0.34370786f;
      sa[108] = 0.22430095f;
      sa[109] = 0.041456662f;
      sa[110] = 0.19933277f;
      sa[111] = -0.22855838f;
      sa[112] = -0.26880574f;
      sa[113] = -0.0724317f;
      sa[114] = -8.906896E-5f;
      sa[115] = -0.17741284f;
      sa[116] = 0.2701654f;
      sa[117] = -0.053928744f;
      sa[118] = -0.4288393f;
      sa[119] = -0.26734686f;
      sa[120] = -0.21137378f;
      sa[121] = 0.12667084f;
      sa[122] = -0.09463826f;
      sa[123] = 0.03926705f;
      sa[124] = -0.20179231f;
      sa[125] = 0.24027517f;
      sa[126] = -0.25518835f;
      sa[127] = 0.039643656f;
      sa[128] = -0.32321244f;
      sa[129] = 0.0616722f;
      sa[130] = -0.032654982f;
      sa[131] = 0.16282265f;
      sa[132] = 0.0311247f;
      sa[133] = 0.10466303f;
      sa[134] = 0.1727866f;
      sa[135] = -0.44264922f;
      sa[136] = 0.0751192f;
      sa[137] = -0.24463692f;
      sa[138] = 0.013341361f;
      sa[139] = 0.25376773f;
      sa[140] = -0.18381847f;
      sa[141] = -0.088897094f;
      sa[142] = -0.022049654f;
      sa[143] = -0.29714492f;
      sa[144] = 0.26273462f;
      sa[145] = -0.25201517f;
      sa[146] = 0.0316499f;
      sa[147] = -0.0069214473f;
      sa[148] = -0.23089612f;
      sa[149] = 0.34289384f;
      sa[150] = -0.16905347f;
      sa[151] = -0.611655f;
      sa[152] = 0.47863105f;
      sa[153] = -0.12572797f;
      sa[154] = 0.35927045f;
      sa[155] = -0.4902911f;
      sa[156] = -0.3737621f;
      sa[157] = -0.31457812f;
      sa[158] = -0.14130393f;
      sa[159] = -0.23916891f;
      sa[160] = 0.37337554f;
      sa[161] = -0.38749036f;
      sa[162] = 0.5404555f;
      sa[163] = -0.24990697f;
      sa[164] = 0.14335486f;
      sa[165] = -0.21531849f;
      sa[166] = 0.29031008f;
      sa[167] = -0.39265552f;
      sa[168] = 0.198852f;
      sa[169] = -0.5247047f;
      sa[170] = 0.29852042f;
      sa[171] = 0.20469885f;
      sa[172] = 0.39781493f;
      sa[173] = 0.3921783f;
      sa[174] = -0.05483367f;
      sa[175] = -0.007973734f;
      sa[176] = 0.2575069f;
      sa[177] = 0.14502399f;
      sa[178] = -0.20903274f;
      sa[179] = 0.112024345f;
      sa[180] = -0.36949328f;
      sa[181] = -0.14613268f;
      sa[182] = 0.038065813f;
      sa[183] = 0.08640955f;
      sa[184] = 0.48953554f;
      sa[185] = 0.32769403f;
      sa[186] = -0.14513096f;
      sa[187] = -0.25238478f;
      sa[188] = -0.15026787f;
      sa[189] = -0.20358637f;
      sa[190] = -0.19501512f;
      sa[191] = -0.06519765f;
      sa[192] = -0.079731055f;
      sa[193] = 0.15383466f;
      sa[194] = -0.35893127f;
      sa[195] = -0.23249361f;
      sa[196] = 0.15112908f;
      sa[197] = -0.16477083f;
      sa[198] = 0.075539574f;
      sa[199] = 0.4364606f;
      sa[200] = 0.053346053f;
      sa[201] = 0.32575932f;
      sa[202] = 0.2656086f;
      sa[203] = -0.4141992f;
      sa[204] = 0.099974446f;
      sa[205] = 0.3311261f;
      sa[206] = -0.1695559f;
      sa[207] = 0.1703306f;
      sa[208] = -0.24228086f;
      sa[209] = 0.07549586f;
      sa[210] = -0.13989948f;
      sa[211] = -0.36787394f;
      sa[212] = -0.40650028f;
      sa[213] = -0.066873565f;
      sa[214] = -0.3987565f;
      sa[215] = -0.13126561f;
      sa[216] = 0.039713766f;
      sa[217] = 0.19214424f;
      sa[218] = -0.017662138f;
      sa[219] = 0.04859091f;
      sa[220] = 0.14495052f;
      sa[221] = -0.036111336f;
      sa[222] = -0.32867894f;
      sa[223] = -0.41108057f;
      sa[224] = 0.32762262f;
      sa[225] = 0.05654393f;
      sa[226] = -0.06571077f;
      sa[227] = 0.05204217f;
      sa[228] = -0.0970814f;
      sa[229] = -0.21556401f;
      sa[230] = -0.2906308f;
      sa[231] = -0.17632772f;
      sa[232] = 0.40129077f;
      sa[233] = -0.27093127f;
      sa[234] = -0.28574726f;
      sa[235] = 0.010164425f;
      sa[236] = -0.3406443f;
      sa[237] = 0.4821433f;
      sa[238] = 0.1865064f;
      sa[239] = -0.111694224f;
      sa[240] = -0.16038759f;
      sa[241] = -0.41652426f;
      sa[242] = -0.349482f;
      sa[243] = 0.33055276f;
      sa[244] = 0.21595567f;
      sa[245] = 0.31661674f;
      sa[246] = 0.3350448f;
      sa[247] = -0.48052034f;
      sa[248] = -0.20611653f;
      sa[249] = 0.08986135f;
      sa[250] = 0.2875891f;
      sa[251] = 0.40369162f;
      sa[252] = 0.19916439f;
      sa[253] = -0.32863995f;
      sa[254] = 0.36199284f;
      sa[255] = 0.11183819f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_04_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_ReLU_04_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_04_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.06514629f;
      sa[1] = -1.5845832f;
      sa[2] = -1.5345238f;
      sa[3] = 1.3004917f;
      sa[4] = 0.4065883f;
      sa[5] = -0.22918409f;
      sa[6] = -1.6854887f;
      sa[7] = 1.4413009f;
      sa[8] = 1.6691096f;
      sa[9] = 0.23293057f;
      sa[10] = 1.5807726f;
      sa[11] = 1.3641359f;
      sa[12] = 1.7443185f;
      sa[13] = -0.5690076f;
      sa[14] = -1.9579065f;
      sa[15] = -0.75426865f;
      sa[16] = 0.7536461f;
      sa[17] = -0.7945286f;
      sa[18] = -1.4744915f;
      sa[19] = -0.87793696f;
      sa[20] = -1.918057f;
      sa[21] = 0.29480496f;
      sa[22] = -1.9314854f;
      sa[23] = -0.5831278f;
      sa[24] = -0.5180106f;
      sa[25] = 1.8624892f;
      sa[26] = -0.32973874f;
      sa[27] = 1.1928205f;
      sa[28] = 1.193484f;
      sa[29] = -0.71088594f;
      sa[30] = 0.14911513f;
      sa[31] = 0.15538624f;
      sa[32] = 0.45613843f;
      sa[33] = 0.06822347f;
      sa[34] = -0.69092625f;
      sa[35] = 0.9360914f;
      sa[36] = 0.4840367f;
      sa[37] = -1.3294652f;
      sa[38] = 0.59146935f;
      sa[39] = -0.19383891f;
      sa[40] = 0.25350636f;
      sa[41] = -0.6888786f;
      sa[42] = 0.517578f;
      sa[43] = -0.035100415f;
      sa[44] = 0.9586217f;
      sa[45] = -1.9562082f;
      sa[46] = -2.344968f;
      sa[47] = 0.07919015f;
      sa[48] = 1.5841048f;
      sa[49] = -0.21895197f;
      sa[50] = -0.47840852f;
      sa[51] = 1.7792293f;
      sa[52] = -1.6509812f;
      sa[53] = 0.9539303f;
      sa[54] = 1.7410655f;
      sa[55] = 1.0704106f;
      sa[56] = -0.567576f;
      sa[57] = -0.18692581f;
      sa[58] = 1.0379393f;
      sa[59] = 0.76496506f;
      sa[60] = -1.3990177f;
      sa[61] = 0.89812064f;
      sa[62] = -0.34541225f;
      sa[63] = -0.83229375f;
      sa[64] = 1.0014576f;
      sa[65] = -0.8874499f;
      sa[66] = -1.7288303f;
      sa[67] = -0.106927425f;
      sa[68] = 0.8950052f;
      sa[69] = -1.3422968f;
      sa[70] = -1.5953093f;
      sa[71] = -0.026310898f;
      sa[72] = -0.95946383f;
      sa[73] = -1.1619798f;
      sa[74] = -1.1214031f;
      sa[75] = 1.3791491f;
      sa[76] = 1.9283471f;
      sa[77] = -0.5931078f;
      sa[78] = -1.3124893f;
      sa[79] = -0.35988727f;
      sa[80] = 0.57902616f;
      sa[81] = -1.6265891f;
      sa[82] = -0.19831726f;
      sa[83] = -1.3738142f;
      sa[84] = 1.568268f;
      sa[85] = 1.0613227f;
      sa[86] = -1.9386204f;
      sa[87] = 1.0368403f;
      sa[88] = -1.5877454f;
      sa[89] = -1.0969511f;
      sa[90] = 0.26114765f;
      sa[91] = 0.031114273f;
      sa[92] = 1.3307204f;
      sa[93] = 1.8738517f;
      sa[94] = 1.5654643f;
      sa[95] = 0.65006226f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_04 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_04_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_04_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_04_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_ReLU_04_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_04_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


