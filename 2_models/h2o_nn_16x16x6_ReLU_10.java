/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:52:20.545+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_10

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_10 > h2o_nn_16x16x6_ReLU_10.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_10.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_10", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_10 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_10_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_10_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_10_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_10_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_10_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_10_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_10_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_10_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_10_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_10_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_10_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_10_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_10.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_10_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.24761904761904763,0.18571428571428572,0.06190476190476191,0.12857142857142856,0.24761904761904763,0.12857142857142856};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_10() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(5020826853664510784L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_10_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_10_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_10_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_10_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_10_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_10_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_10_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_10_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_10_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_10_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_10_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.7658569882094118;
      sa[1] = 0.6773944738884216;
      sa[2] = 0.4817964055333127;
      sa[3] = 0.2219116872053942;
      sa[4] = 0.5291111305043964;
      sa[5] = 0.5342738200171921;
      sa[6] = 0.6903157674369921;
      sa[7] = 0.6586941672022671;
      sa[8] = 0.4425711075452971;
      sa[9] = 0.5946106033801015;
      sa[10] = 0.5475619888155047;
      sa[11] = 0.35362476817941063;
      sa[12] = 0.3811024929231947;
      sa[13] = 0.39240107338800023;
      sa[14] = 0.5724576630979438;
      sa[15] = 0.6004883256055469;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_10_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_10_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.1893129054462979;
      sa[1] = 1.1913009900557006;
      sa[2] = 0.9020346328248166;
      sa[3] = 1.0044209916628453;
      sa[4] = 0.9302538185925839;
      sa[5] = 0.9794104719119482;
      sa[6] = 0.9832472693406462;
      sa[7] = 0.9652063373789168;
      sa[8] = 0.9367015282646224;
      sa[9] = 1.0438300616491771;
      sa[10] = 0.898396198656436;
      sa[11] = 1.2102627743822043;
      sa[12] = 1.0358079379350111;
      sa[13] = 0.915065127025254;
      sa[14] = 0.9797916903576954;
      sa[15] = 0.9312985381560032;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_10_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_10_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.08819203702450935;
      sa[1] = 0.008188195692380228;
      sa[2] = -0.09563767934197075;
      sa[3] = -0.014115353832605263;
      sa[4] = 0.07908788173423277;
      sa[5] = -0.1277965198226267;
    }
  }
}
class h2o_nn_16x16x6_ReLU_10_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_10_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_10_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.16665563f;
      sa[1] = 0.21454024f;
      sa[2] = 0.07123587f;
      sa[3] = 0.25995687f;
      sa[4] = -0.0493497f;
      sa[5] = -0.12777372f;
      sa[6] = 0.07582357f;
      sa[7] = 0.43109068f;
      sa[8] = 0.08901294f;
      sa[9] = -0.060188487f;
      sa[10] = -0.0668755f;
      sa[11] = -0.1420383f;
      sa[12] = 0.119745955f;
      sa[13] = -0.26826897f;
      sa[14] = -0.12527616f;
      sa[15] = 0.17430162f;
      sa[16] = 0.14583313f;
      sa[17] = 0.34288698f;
      sa[18] = -0.16838767f;
      sa[19] = 0.060095698f;
      sa[20] = 0.26871586f;
      sa[21] = -0.28988504f;
      sa[22] = 0.3043857f;
      sa[23] = -0.05550812f;
      sa[24] = 0.23139153f;
      sa[25] = 0.20569174f;
      sa[26] = -0.22485657f;
      sa[27] = 0.579961f;
      sa[28] = 0.27702817f;
      sa[29] = -0.24245955f;
      sa[30] = -0.15010113f;
      sa[31] = 0.26477978f;
      sa[32] = 0.18706825f;
      sa[33] = -0.21601029f;
      sa[34] = 0.29322872f;
      sa[35] = 0.029767962f;
      sa[36] = 0.17051844f;
      sa[37] = 0.34865233f;
      sa[38] = -0.17692646f;
      sa[39] = 0.15779138f;
      sa[40] = 0.047294423f;
      sa[41] = -0.060354874f;
      sa[42] = -0.10845381f;
      sa[43] = 0.1070723f;
      sa[44] = 0.34211713f;
      sa[45] = -0.2502622f;
      sa[46] = 0.10602859f;
      sa[47] = -0.0036529517f;
      sa[48] = 0.32053354f;
      sa[49] = 0.33597162f;
      sa[50] = 0.31078252f;
      sa[51] = -0.11690222f;
      sa[52] = 0.0462309f;
      sa[53] = 0.29140976f;
      sa[54] = 0.27675414f;
      sa[55] = 0.021575958f;
      sa[56] = -0.14294216f;
      sa[57] = -0.30775335f;
      sa[58] = 0.33071965f;
      sa[59] = -0.07575705f;
      sa[60] = -0.39334348f;
      sa[61] = 0.21979329f;
      sa[62] = 0.22262228f;
      sa[63] = 0.20553634f;
      sa[64] = 0.19848295f;
      sa[65] = 0.1689486f;
      sa[66] = 0.03169623f;
      sa[67] = 0.27141204f;
      sa[68] = -0.14997827f;
      sa[69] = 0.105741985f;
      sa[70] = 0.1048373f;
      sa[71] = 0.4343165f;
      sa[72] = -0.2822906f;
      sa[73] = 0.23850034f;
      sa[74] = -0.14942606f;
      sa[75] = 0.052243467f;
      sa[76] = -0.23099007f;
      sa[77] = -0.024642793f;
      sa[78] = -0.075985946f;
      sa[79] = -0.019385088f;
      sa[80] = -0.23371463f;
      sa[81] = -0.14158072f;
      sa[82] = -0.14099428f;
      sa[83] = 0.072146505f;
      sa[84] = -0.03247542f;
      sa[85] = -0.15463288f;
      sa[86] = 0.13640666f;
      sa[87] = 0.12877479f;
      sa[88] = 0.19354652f;
      sa[89] = 0.05511561f;
      sa[90] = -0.095198646f;
      sa[91] = 0.21791328f;
      sa[92] = 0.105376095f;
      sa[93] = -0.23970428f;
      sa[94] = -0.20519304f;
      sa[95] = -0.44044924f;
      sa[96] = 0.20245631f;
      sa[97] = -0.008802829f;
      sa[98] = 0.24588212f;
      sa[99] = -0.2942348f;
      sa[100] = -0.041710228f;
      sa[101] = -0.20760885f;
      sa[102] = -0.23647906f;
      sa[103] = -0.2163123f;
      sa[104] = -0.031099966f;
      sa[105] = -0.24493687f;
      sa[106] = -0.3122513f;
      sa[107] = 0.079143934f;
      sa[108] = 0.35260797f;
      sa[109] = -0.3181692f;
      sa[110] = -0.30106607f;
      sa[111] = 0.11148089f;
      sa[112] = 0.11880813f;
      sa[113] = -0.038292453f;
      sa[114] = -0.20081098f;
      sa[115] = -0.020319061f;
      sa[116] = -0.2481431f;
      sa[117] = 0.12966065f;
      sa[118] = 0.018484404f;
      sa[119] = 0.009749028f;
      sa[120] = 0.061763156f;
      sa[121] = 0.13902739f;
      sa[122] = 0.2795657f;
      sa[123] = 0.1957581f;
      sa[124] = 0.17397246f;
      sa[125] = 0.3628791f;
      sa[126] = -0.050494093f;
      sa[127] = -0.26735523f;
      sa[128] = -0.08133104f;
      sa[129] = 0.07963223f;
      sa[130] = -0.20299576f;
      sa[131] = 0.25439262f;
      sa[132] = 0.07790621f;
      sa[133] = -0.19470495f;
      sa[134] = 0.18866861f;
      sa[135] = -0.123156175f;
      sa[136] = -0.47860375f;
      sa[137] = -0.1123493f;
      sa[138] = -0.012117715f;
      sa[139] = -0.22874388f;
      sa[140] = 0.010878246f;
      sa[141] = -0.014579021f;
      sa[142] = 0.10724227f;
      sa[143] = -0.23334765f;
      sa[144] = 0.37016523f;
      sa[145] = -0.3041653f;
      sa[146] = -0.29301563f;
      sa[147] = 0.09611211f;
      sa[148] = 0.13573037f;
      sa[149] = 0.055796795f;
      sa[150] = 0.2921909f;
      sa[151] = -0.21614146f;
      sa[152] = 0.10404421f;
      sa[153] = 0.23978102f;
      sa[154] = 0.23654842f;
      sa[155] = -0.14256379f;
      sa[156] = 0.14551333f;
      sa[157] = -0.30314532f;
      sa[158] = 0.118371285f;
      sa[159] = 0.102812804f;
      sa[160] = 0.045324665f;
      sa[161] = 0.124494724f;
      sa[162] = 0.06855472f;
      sa[163] = -0.10623618f;
      sa[164] = 0.300401f;
      sa[165] = -0.022036497f;
      sa[166] = -0.035671446f;
      sa[167] = -0.08481634f;
      sa[168] = 0.10444018f;
      sa[169] = 0.28795645f;
      sa[170] = 0.11584803f;
      sa[171] = 0.0062298495f;
      sa[172] = -0.11833362f;
      sa[173] = -0.2474498f;
      sa[174] = -0.23668547f;
      sa[175] = -0.3626904f;
      sa[176] = 0.03459727f;
      sa[177] = 0.033252478f;
      sa[178] = 0.018582439f;
      sa[179] = 0.18395978f;
      sa[180] = -0.04906719f;
      sa[181] = -0.3126305f;
      sa[182] = -0.08558646f;
      sa[183] = 0.3322432f;
      sa[184] = 0.30894417f;
      sa[185] = 0.18348603f;
      sa[186] = -0.3622305f;
      sa[187] = 0.09648396f;
      sa[188] = 0.025739536f;
      sa[189] = 0.17272697f;
      sa[190] = -0.06373543f;
      sa[191] = 0.07166679f;
      sa[192] = -0.12697588f;
      sa[193] = 0.23239817f;
      sa[194] = 0.06792396f;
      sa[195] = 0.43340617f;
      sa[196] = 0.3422875f;
      sa[197] = -0.076462775f;
      sa[198] = -0.0436435f;
      sa[199] = -0.37666184f;
      sa[200] = 0.059908524f;
      sa[201] = -0.2967303f;
      sa[202] = 0.11931251f;
      sa[203] = 0.08245911f;
      sa[204] = -0.13508789f;
      sa[205] = 0.16848584f;
      sa[206] = 0.2523037f;
      sa[207] = 0.06931564f;
      sa[208] = -0.23080912f;
      sa[209] = -0.03477346f;
      sa[210] = -0.2801521f;
      sa[211] = -0.058942277f;
      sa[212] = 0.35502967f;
      sa[213] = -0.13356677f;
      sa[214] = -0.21283758f;
      sa[215] = -0.086250335f;
      sa[216] = 0.14517638f;
      sa[217] = 0.0907632f;
      sa[218] = -0.120049275f;
      sa[219] = 0.051918235f;
      sa[220] = -0.16610385f;
      sa[221] = 0.18418705f;
      sa[222] = 0.3035584f;
      sa[223] = 0.19009133f;
      sa[224] = 0.12513484f;
      sa[225] = 0.28490126f;
      sa[226] = -0.20938481f;
      sa[227] = 0.430244f;
      sa[228] = 0.14502311f;
      sa[229] = 0.1819162f;
      sa[230] = 0.29077563f;
      sa[231] = -0.25982314f;
      sa[232] = -0.3290381f;
      sa[233] = -0.046341185f;
      sa[234] = 0.15895124f;
      sa[235] = -0.3886213f;
      sa[236] = -0.07002998f;
      sa[237] = -0.24995598f;
      sa[238] = -0.26845795f;
      sa[239] = 0.07240472f;
      sa[240] = 0.093042955f;
      sa[241] = -0.18696441f;
      sa[242] = -0.031878963f;
      sa[243] = -0.41668522f;
      sa[244] = -0.1776122f;
      sa[245] = -0.07413921f;
      sa[246] = -0.14299823f;
      sa[247] = -0.013640359f;
      sa[248] = 0.06274396f;
      sa[249] = 0.2723872f;
      sa[250] = -0.5052767f;
      sa[251] = -0.18629028f;
      sa[252] = -0.22993794f;
      sa[253] = -0.24809645f;
      sa[254] = -0.33020478f;
      sa[255] = -0.020070678f;
      sa[256] = -0.15403982f;
      sa[257] = 0.37669227f;
      sa[258] = -0.18969816f;
      sa[259] = -0.094812036f;
      sa[260] = -0.12816826f;
      sa[261] = -0.044470716f;
      sa[262] = -0.19685416f;
      sa[263] = 0.41147777f;
      sa[264] = -0.0807488f;
      sa[265] = 0.17218325f;
      sa[266] = -0.1901168f;
      sa[267] = -0.15037815f;
      sa[268] = 0.12421989f;
      sa[269] = -0.15040806f;
      sa[270] = 0.08865428f;
      sa[271] = 0.31052947f;
      sa[272] = -0.054423433f;
      sa[273] = -0.095847234f;
      sa[274] = 0.20343943f;
      sa[275] = 0.08180878f;
      sa[276] = 0.049297117f;
      sa[277] = -0.27533805f;
      sa[278] = -0.110566534f;
      sa[279] = 0.21841885f;
      sa[280] = -0.1420263f;
      sa[281] = 0.35639572f;
      sa[282] = -0.04038906f;
      sa[283] = 0.029171461f;
      sa[284] = -0.08353339f;
      sa[285] = -0.2656344f;
      sa[286] = 0.3627179f;
      sa[287] = 0.19670328f;
      sa[288] = -0.30213565f;
      sa[289] = -0.16397133f;
      sa[290] = -0.07924292f;
      sa[291] = 0.4880907f;
      sa[292] = 0.10729838f;
      sa[293] = -0.1739895f;
      sa[294] = -0.02978799f;
      sa[295] = 0.12748745f;
      sa[296] = 0.23000067f;
      sa[297] = 0.1588273f;
      sa[298] = -0.029269129f;
      sa[299] = -0.30256698f;
      sa[300] = -0.0073946794f;
      sa[301] = -0.16959332f;
      sa[302] = 0.09480526f;
      sa[303] = 0.11954617f;
      sa[304] = -0.14714175f;
      sa[305] = -0.036438365f;
      sa[306] = 0.07144117f;
      sa[307] = -0.32442153f;
      sa[308] = 0.13151672f;
      sa[309] = 0.16874813f;
      sa[310] = 0.2916952f;
      sa[311] = 0.413943f;
      sa[312] = -0.20237897f;
      sa[313] = -0.22373195f;
      sa[314] = -0.17931809f;
      sa[315] = -0.02225543f;
      sa[316] = 0.016686033f;
      sa[317] = -0.07455571f;
      sa[318] = 0.0814338f;
      sa[319] = 0.3885395f;
      sa[320] = 0.25475317f;
      sa[321] = 0.19070898f;
      sa[322] = 0.27891973f;
      sa[323] = -0.25374505f;
      sa[324] = 0.09186769f;
      sa[325] = 0.3164761f;
      sa[326] = -0.38189867f;
      sa[327] = -0.08903732f;
      sa[328] = -0.058623552f;
      sa[329] = 0.23564272f;
      sa[330] = -0.16058327f;
      sa[331] = 0.06268f;
      sa[332] = -0.2558092f;
      sa[333] = 0.17926283f;
      sa[334] = -0.046231825f;
      sa[335] = 0.28145933f;
      sa[336] = -0.13180117f;
      sa[337] = -0.17645746f;
      sa[338] = 0.37720016f;
      sa[339] = -0.08182694f;
      sa[340] = -0.2545403f;
      sa[341] = -0.2660846f;
      sa[342] = 0.4078179f;
      sa[343] = -0.03568066f;
      sa[344] = -0.15818228f;
      sa[345] = 0.22826037f;
      sa[346] = 0.26649767f;
      sa[347] = -0.0743289f;
      sa[348] = 0.21397328f;
      sa[349] = -0.33154228f;
      sa[350] = -0.15386595f;
      sa[351] = 0.37961724f;
      sa[352] = 0.2017515f;
      sa[353] = -0.050891418f;
      sa[354] = 0.048313204f;
      sa[355] = 0.16721895f;
      sa[356] = -0.15972178f;
      sa[357] = 0.27263588f;
      sa[358] = -0.035282683f;
      sa[359] = 0.20739414f;
      sa[360] = 0.25192955f;
      sa[361] = -0.26036033f;
      sa[362] = -0.22256105f;
      sa[363] = 0.17979234f;
      sa[364] = -0.15407412f;
      sa[365] = -0.28270656f;
      sa[366] = -0.01749663f;
      sa[367] = -0.23771861f;
      sa[368] = -0.09646404f;
      sa[369] = 0.19426851f;
      sa[370] = -0.21186829f;
      sa[371] = 0.28559846f;
      sa[372] = -0.10069695f;
      sa[373] = 0.24697666f;
      sa[374] = -0.17194848f;
      sa[375] = -0.37748665f;
      sa[376] = -0.5217956f;
      sa[377] = -0.39263603f;
      sa[378] = 0.50275767f;
      sa[379] = 0.015345377f;
      sa[380] = -0.1849009f;
      sa[381] = -0.14371821f;
      sa[382] = -0.06934982f;
      sa[383] = -0.1937157f;
      sa[384] = -0.22715726f;
      sa[385] = 0.007561747f;
      sa[386] = -0.15012378f;
      sa[387] = -0.3510315f;
      sa[388] = 0.016778056f;
      sa[389] = -0.053812675f;
      sa[390] = -0.107711844f;
      sa[391] = -0.18886137f;
      sa[392] = 0.3235832f;
      sa[393] = 0.3669682f;
      sa[394] = -0.21990533f;
      sa[395] = 0.25087386f;
      sa[396] = 0.45983493f;
      sa[397] = -0.14731804f;
      sa[398] = 0.16942f;
      sa[399] = -0.042288207f;
      sa[400] = 0.22339864f;
      sa[401] = 0.3577004f;
      sa[402] = -0.1483976f;
      sa[403] = 0.013825761f;
      sa[404] = 0.24175829f;
      sa[405] = -0.14651911f;
      sa[406] = -0.018538631f;
      sa[407] = 0.24424502f;
      sa[408] = -0.2769198f;
      sa[409] = -0.16722633f;
      sa[410] = -0.15956147f;
      sa[411] = 0.042680163f;
      sa[412] = -0.16020355f;
      sa[413] = 0.27935046f;
      sa[414] = -0.0056574373f;
      sa[415] = 0.5014153f;
      sa[416] = -0.34596637f;
      sa[417] = -0.075756215f;
      sa[418] = -0.10460089f;
      sa[419] = 0.15137388f;
      sa[420] = 0.27004033f;
      sa[421] = 0.3989715f;
      sa[422] = 0.12618728f;
      sa[423] = -0.11121669f;
      sa[424] = 0.08052701f;
      sa[425] = -0.07436027f;
      sa[426] = -0.21658997f;
      sa[427] = 0.1437243f;
      sa[428] = -0.14253962f;
      sa[429] = -0.19740832f;
      sa[430] = 0.029176164f;
      sa[431] = -0.08211931f;
      sa[432] = -0.051858302f;
      sa[433] = 0.12862149f;
      sa[434] = 0.28685185f;
      sa[435] = -0.14460143f;
      sa[436] = -0.3656074f;
      sa[437] = -0.33080387f;
      sa[438] = -0.029713012f;
      sa[439] = -0.08569596f;
      sa[440] = 0.36664808f;
      sa[441] = -0.290419f;
      sa[442] = 0.07610509f;
      sa[443] = 0.23460436f;
      sa[444] = -0.24569783f;
      sa[445] = 0.06394216f;
      sa[446] = 0.265444f;
      sa[447] = -0.0020235358f;
      sa[448] = 0.16877349f;
      sa[449] = 0.30251366f;
      sa[450] = 0.005627766f;
      sa[451] = 0.17900136f;
      sa[452] = 0.17877653f;
      sa[453] = -0.09077118f;
      sa[454] = -0.18748109f;
      sa[455] = -0.1577382f;
      sa[456] = -0.06269469f;
      sa[457] = 0.11511355f;
      sa[458] = -0.19542865f;
      sa[459] = 0.2480517f;
      sa[460] = 0.21241693f;
      sa[461] = 0.2591555f;
      sa[462] = 0.009217496f;
      sa[463] = 0.16543834f;
      sa[464] = -0.35410208f;
      sa[465] = 0.2491168f;
      sa[466] = -0.056556147f;
      sa[467] = 0.12688862f;
      sa[468] = 0.12394861f;
      sa[469] = 0.2932174f;
      sa[470] = 0.23424952f;
      sa[471] = 0.026084417f;
      sa[472] = 0.04090249f;
      sa[473] = -0.16684045f;
      sa[474] = 0.0012718416f;
      sa[475] = 0.15141898f;
      sa[476] = 0.2294901f;
      sa[477] = -0.097272165f;
      sa[478] = 0.31904864f;
      sa[479] = -0.22305688f;
      sa[480] = -0.37214288f;
      sa[481] = -0.30767086f;
      sa[482] = -0.31307745f;
      sa[483] = 0.18272263f;
      sa[484] = 0.24519539f;
      sa[485] = 0.19541876f;
      sa[486] = 0.048848107f;
      sa[487] = -0.21498708f;
      sa[488] = -0.25059226f;
      sa[489] = 0.093543924f;
      sa[490] = -0.0026854747f;
      sa[491] = -0.28858912f;
      sa[492] = 0.15850492f;
      sa[493] = 0.36983982f;
      sa[494] = -0.25219736f;
      sa[495] = 0.35603786f;
      sa[496] = -0.06976805f;
      sa[497] = 0.02070752f;
      sa[498] = 0.08699082f;
      sa[499] = 0.08634748f;
      sa[500] = -0.070917524f;
      sa[501] = 0.13915001f;
      sa[502] = 0.39367262f;
      sa[503] = 0.17818934f;
      sa[504] = -0.064611904f;
      sa[505] = -0.18505444f;
      sa[506] = 0.17841285f;
      sa[507] = -0.025034234f;
      sa[508] = 0.34694737f;
      sa[509] = 0.5724704f;
      sa[510] = 0.32774842f;
      sa[511] = 0.18082409f;
      sa[512] = 0.018240554f;
      sa[513] = 0.1688754f;
      sa[514] = 0.3272372f;
      sa[515] = 0.058904648f;
      sa[516] = -0.06985547f;
      sa[517] = 0.23344417f;
      sa[518] = 0.065831825f;
      sa[519] = -0.013415979f;
      sa[520] = 0.27434385f;
      sa[521] = 0.38789394f;
      sa[522] = 0.05686563f;
      sa[523] = 0.040787123f;
      sa[524] = 0.111789495f;
      sa[525] = 0.15113792f;
      sa[526] = -0.10483827f;
      sa[527] = -0.090180375f;
      sa[528] = 0.054986533f;
      sa[529] = 0.17952569f;
      sa[530] = -0.1628582f;
      sa[531] = 0.17135958f;
      sa[532] = 0.1579741f;
      sa[533] = 0.20428568f;
      sa[534] = 0.32625413f;
      sa[535] = 0.050820787f;
      sa[536] = 0.050740436f;
      sa[537] = 0.14719744f;
      sa[538] = 0.09949233f;
      sa[539] = 0.27113062f;
      sa[540] = -0.122883394f;
      sa[541] = -0.111324325f;
      sa[542] = -0.16299641f;
      sa[543] = -0.5603541f;
      sa[544] = 0.15041018f;
      sa[545] = 0.05995938f;
      sa[546] = 0.11512829f;
      sa[547] = 0.22285049f;
      sa[548] = 0.1418534f;
      sa[549] = 0.26037017f;
      sa[550] = 0.20195594f;
      sa[551] = -0.08297547f;
      sa[552] = 0.111087635f;
      sa[553] = -0.06511584f;
      sa[554] = -0.06748258f;
      sa[555] = -0.09205476f;
      sa[556] = -0.15100218f;
      sa[557] = -0.24645726f;
      sa[558] = 0.17599188f;
      sa[559] = 0.23034051f;
      sa[560] = -0.27582133f;
      sa[561] = -0.0726481f;
      sa[562] = 0.3126795f;
      sa[563] = -0.022697385f;
      sa[564] = 0.20047949f;
      sa[565] = 0.12285854f;
      sa[566] = 0.38583007f;
      sa[567] = 0.21371076f;
      sa[568] = -0.1016179f;
      sa[569] = -0.011801326f;
      sa[570] = -0.13208175f;
      sa[571] = -0.1549318f;
      sa[572] = -0.15312243f;
      sa[573] = 0.04802273f;
      sa[574] = 0.5650159f;
      sa[575] = -0.015206122f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_10_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_10_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.5933414f;
      sa[1] = 0.11515473f;
      sa[2] = -0.121575706f;
      sa[3] = -0.17336042f;
      sa[4] = 0.091070145f;
      sa[5] = 0.008697372f;
      sa[6] = 0.13251479f;
      sa[7] = 0.36783868f;
      sa[8] = -0.26224953f;
      sa[9] = 0.2921823f;
      sa[10] = -0.23812218f;
      sa[11] = 0.2339181f;
      sa[12] = 0.16523464f;
      sa[13] = 0.06597216f;
      sa[14] = -0.14590405f;
      sa[15] = 0.63586867f;
      sa[16] = 0.3934632f;
      sa[17] = 0.030536419f;
      sa[18] = -0.003539058f;
      sa[19] = -0.022125304f;
      sa[20] = 0.34530193f;
      sa[21] = -0.010951624f;
      sa[22] = -0.13206813f;
      sa[23] = 0.23924804f;
      sa[24] = -0.3155026f;
      sa[25] = 0.42554614f;
      sa[26] = 0.022484198f;
      sa[27] = 0.54091763f;
      sa[28] = -0.3317626f;
      sa[29] = -0.21052162f;
      sa[30] = 0.15006739f;
      sa[31] = -0.05329345f;
      sa[32] = -0.39353728f;
      sa[33] = -0.47914252f;
      sa[34] = 0.05823191f;
      sa[35] = 0.30333894f;
      sa[36] = -0.13004981f;
      sa[37] = -0.06283916f;
      sa[38] = 0.055091128f;
      sa[39] = 0.14659604f;
      sa[40] = -0.26384643f;
      sa[41] = -0.3751787f;
      sa[42] = -0.3250684f;
      sa[43] = -0.43507364f;
      sa[44] = -0.07519353f;
      sa[45] = -0.44759122f;
      sa[46] = 0.25094554f;
      sa[47] = 0.2592241f;
      sa[48] = -0.3718793f;
      sa[49] = -0.30361748f;
      sa[50] = 0.21084575f;
      sa[51] = -0.12512617f;
      sa[52] = 0.15857589f;
      sa[53] = 0.1516952f;
      sa[54] = -0.105663694f;
      sa[55] = 0.33983707f;
      sa[56] = -0.2912834f;
      sa[57] = -0.34217072f;
      sa[58] = 0.04428725f;
      sa[59] = -0.03564901f;
      sa[60] = 0.34126756f;
      sa[61] = -0.23323324f;
      sa[62] = -0.121035226f;
      sa[63] = 0.19402805f;
      sa[64] = 0.30490384f;
      sa[65] = -0.15094131f;
      sa[66] = 0.093644254f;
      sa[67] = 0.30659688f;
      sa[68] = 0.19515347f;
      sa[69] = -0.27934605f;
      sa[70] = -0.44695157f;
      sa[71] = -0.08925234f;
      sa[72] = -0.392161f;
      sa[73] = 0.2822408f;
      sa[74] = 0.48321733f;
      sa[75] = -0.05644242f;
      sa[76] = 0.24883273f;
      sa[77] = 0.15867873f;
      sa[78] = -0.35396546f;
      sa[79] = 0.35771045f;
      sa[80] = -0.23365991f;
      sa[81] = 0.023147803f;
      sa[82] = 0.35087588f;
      sa[83] = -0.14867568f;
      sa[84] = -0.47562352f;
      sa[85] = -0.31434476f;
      sa[86] = 0.10842124f;
      sa[87] = 0.26842716f;
      sa[88] = -0.4413552f;
      sa[89] = -0.15801723f;
      sa[90] = -0.33328006f;
      sa[91] = 0.3771498f;
      sa[92] = -0.1235372f;
      sa[93] = 0.020586867f;
      sa[94] = -0.44057703f;
      sa[95] = -0.16473491f;
      sa[96] = -0.33779046f;
      sa[97] = -0.003257665f;
      sa[98] = 0.041759722f;
      sa[99] = 0.04662732f;
      sa[100] = -0.3797228f;
      sa[101] = -0.31237337f;
      sa[102] = 0.26555112f;
      sa[103] = 0.0050580925f;
      sa[104] = -0.19729252f;
      sa[105] = -0.04494033f;
      sa[106] = 0.28570682f;
      sa[107] = 0.35246485f;
      sa[108] = 0.18531553f;
      sa[109] = -0.0049508563f;
      sa[110] = 0.177941f;
      sa[111] = -0.11255321f;
      sa[112] = -0.16939074f;
      sa[113] = 0.013871557f;
      sa[114] = 0.17517737f;
      sa[115] = -0.14403912f;
      sa[116] = 0.30920416f;
      sa[117] = -0.033900682f;
      sa[118] = -0.46081337f;
      sa[119] = -0.048423756f;
      sa[120] = -0.09335193f;
      sa[121] = 0.19832268f;
      sa[122] = -0.097238496f;
      sa[123] = 0.04119853f;
      sa[124] = -0.21935196f;
      sa[125] = 0.27099898f;
      sa[126] = -0.23007157f;
      sa[127] = 0.13444899f;
      sa[128] = -0.3887162f;
      sa[129] = 0.09896922f;
      sa[130] = -0.04141035f;
      sa[131] = 0.18107261f;
      sa[132] = 0.060638875f;
      sa[133] = 0.13431442f;
      sa[134] = 0.2346692f;
      sa[135] = -0.50712705f;
      sa[136] = 0.14235581f;
      sa[137] = -0.24526246f;
      sa[138] = 0.019204022f;
      sa[139] = 0.26202184f;
      sa[140] = -0.19291025f;
      sa[141] = -0.042227067f;
      sa[142] = -0.014079812f;
      sa[143] = -0.30994627f;
      sa[144] = 0.34271222f;
      sa[145] = -0.2572491f;
      sa[146] = 0.06038905f;
      sa[147] = 0.007245407f;
      sa[148] = -0.24477515f;
      sa[149] = 0.34042323f;
      sa[150] = -0.20152965f;
      sa[151] = -0.516315f;
      sa[152] = 0.5174866f;
      sa[153] = -0.16109508f;
      sa[154] = 0.37131727f;
      sa[155] = -0.4440159f;
      sa[156] = -0.4238532f;
      sa[157] = -0.2884969f;
      sa[158] = -0.15281062f;
      sa[159] = -0.33334807f;
      sa[160] = 0.218614f;
      sa[161] = -0.4074217f;
      sa[162] = 0.5086928f;
      sa[163] = -0.27772f;
      sa[164] = 0.14832976f;
      sa[165] = -0.22943357f;
      sa[166] = 0.31886497f;
      sa[167] = -0.42251182f;
      sa[168] = 0.23054071f;
      sa[169] = -0.5132038f;
      sa[170] = 0.28640217f;
      sa[171] = 0.18602543f;
      sa[172] = 0.32107618f;
      sa[173] = 0.36902305f;
      sa[174] = -0.15017898f;
      sa[175] = -0.09013419f;
      sa[176] = 0.059340905f;
      sa[177] = 0.21440427f;
      sa[178] = -0.22481996f;
      sa[179] = 0.07755627f;
      sa[180] = -0.40277594f;
      sa[181] = -0.14647223f;
      sa[182] = 0.004887175f;
      sa[183] = 0.22243384f;
      sa[184] = 0.59331465f;
      sa[185] = 0.27890617f;
      sa[186] = -0.17767514f;
      sa[187] = -0.20859659f;
      sa[188] = -0.05829472f;
      sa[189] = -0.29694852f;
      sa[190] = -0.21257721f;
      sa[191] = -0.03414632f;
      sa[192] = -0.08671044f;
      sa[193] = 0.17470933f;
      sa[194] = -0.35934442f;
      sa[195] = -0.21850364f;
      sa[196] = 0.17130989f;
      sa[197] = -0.025867933f;
      sa[198] = 0.17650339f;
      sa[199] = 0.35025993f;
      sa[200] = 0.1686647f;
      sa[201] = 0.2672012f;
      sa[202] = 0.38362926f;
      sa[203] = -0.42745858f;
      sa[204] = 0.14113393f;
      sa[205] = 0.3350526f;
      sa[206] = -0.16554543f;
      sa[207] = 0.09473207f;
      sa[208] = -0.21517134f;
      sa[209] = 0.06593449f;
      sa[210] = -0.055074576f;
      sa[211] = -0.328147f;
      sa[212] = -0.42532927f;
      sa[213] = -0.03705785f;
      sa[214] = -0.39884722f;
      sa[215] = -0.04622793f;
      sa[216] = 0.0649432f;
      sa[217] = 0.28737545f;
      sa[218] = -0.025627589f;
      sa[219] = 0.046518322f;
      sa[220] = 0.12539086f;
      sa[221] = -0.047074698f;
      sa[222] = -0.3133156f;
      sa[223] = -0.35248575f;
      sa[224] = 0.37704226f;
      sa[225] = 0.06447416f;
      sa[226] = -0.026242623f;
      sa[227] = 0.0965067f;
      sa[228] = 0.020352146f;
      sa[229] = -0.17534375f;
      sa[230] = -0.32862756f;
      sa[231] = -0.08838228f;
      sa[232] = 0.39611503f;
      sa[233] = -0.2111038f;
      sa[234] = -0.31028908f;
      sa[235] = -0.0017182889f;
      sa[236] = -0.38313904f;
      sa[237] = 0.5752134f;
      sa[238] = 0.22404033f;
      sa[239] = -0.096156225f;
      sa[240] = -0.2117039f;
      sa[241] = -0.44350764f;
      sa[242] = -0.3551806f;
      sa[243] = 0.37375402f;
      sa[244] = 0.27100164f;
      sa[245] = 0.43489358f;
      sa[246] = 0.3848358f;
      sa[247] = -0.71291965f;
      sa[248] = -0.17816222f;
      sa[249] = 0.10124187f;
      sa[250] = 0.36714286f;
      sa[251] = 0.36974084f;
      sa[252] = 0.18798977f;
      sa[253] = -0.28427842f;
      sa[254] = 0.34403226f;
      sa[255] = 0.016401066f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_10_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_ReLU_10_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.01704084f;
      sa[1] = -1.7634133f;
      sa[2] = -1.543056f;
      sa[3] = 1.2912189f;
      sa[4] = 0.346604f;
      sa[5] = -0.26475793f;
      sa[6] = -1.6660999f;
      sa[7] = 1.4276737f;
      sa[8] = 1.7207551f;
      sa[9] = 0.2251334f;
      sa[10] = 1.6213858f;
      sa[11] = 1.3487189f;
      sa[12] = 1.7350973f;
      sa[13] = -0.54343826f;
      sa[14] = -1.9554626f;
      sa[15] = -0.7354195f;
      sa[16] = 0.72179466f;
      sa[17] = -0.77327967f;
      sa[18] = -1.4674263f;
      sa[19] = -0.9216796f;
      sa[20] = -1.9691736f;
      sa[21] = 0.31816098f;
      sa[22] = -1.9399036f;
      sa[23] = -0.64925224f;
      sa[24] = -0.4960804f;
      sa[25] = 1.9069115f;
      sa[26] = -0.29851726f;
      sa[27] = 1.1984392f;
      sa[28] = 1.1781574f;
      sa[29] = -0.7241581f;
      sa[30] = 0.17118579f;
      sa[31] = 0.16781294f;
      sa[32] = 0.33404908f;
      sa[33] = -0.1477509f;
      sa[34] = -0.745047f;
      sa[35] = 0.875437f;
      sa[36] = 0.294162f;
      sa[37] = -1.433315f;
      sa[38] = 0.63512754f;
      sa[39] = -0.3255923f;
      sa[40] = 0.31989735f;
      sa[41] = -0.7426328f;
      sa[42] = 0.53223306f;
      sa[43] = -0.038681675f;
      sa[44] = 0.9406636f;
      sa[45] = -1.9923414f;
      sa[46] = -2.7263105f;
      sa[47] = 0.0929369f;
      sa[48] = 1.6192456f;
      sa[49] = -0.17049806f;
      sa[50] = -0.41111386f;
      sa[51] = 1.7812469f;
      sa[52] = -1.5939775f;
      sa[53] = 1.0216295f;
      sa[54] = 1.6545433f;
      sa[55] = 1.1398675f;
      sa[56] = -0.72367483f;
      sa[57] = -0.33111146f;
      sa[58] = 0.9415894f;
      sa[59] = 0.7217247f;
      sa[60] = -1.4549098f;
      sa[61] = 0.887978f;
      sa[62] = -0.33151415f;
      sa[63] = -0.9147548f;
      sa[64] = 1.0922948f;
      sa[65] = -0.79193646f;
      sa[66] = -1.7401048f;
      sa[67] = -0.05818812f;
      sa[68] = 0.93426496f;
      sa[69] = -1.3428667f;
      sa[70] = -1.5843602f;
      sa[71] = 0.017862659f;
      sa[72] = -0.9748003f;
      sa[73] = -1.1953746f;
      sa[74] = -1.1237801f;
      sa[75] = 1.348178f;
      sa[76] = 1.9241872f;
      sa[77] = -0.5948832f;
      sa[78] = -1.3223014f;
      sa[79] = -0.3487472f;
      sa[80] = 0.5115979f;
      sa[81] = -1.6855623f;
      sa[82] = -0.26276508f;
      sa[83] = -1.4096435f;
      sa[84] = 1.5369225f;
      sa[85] = 1.036733f;
      sa[86] = -2.0336986f;
      sa[87] = 1.0152678f;
      sa[88] = -1.7350072f;
      sa[89] = -1.0814927f;
      sa[90] = 0.206072f;
      sa[91] = -0.0016641672f;
      sa[92] = 1.265372f;
      sa[93] = 1.8668126f;
      sa[94] = 1.5152764f;
      sa[95] = 0.57271534f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_10 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_10_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_10_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_10_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_ReLU_10_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_10_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


