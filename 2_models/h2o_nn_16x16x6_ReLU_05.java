/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:50:58.045+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_05

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_05 > h2o_nn_16x16x6_ReLU_05.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_05.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_05", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_05 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_05_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_05_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_05_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_05_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_05_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_05_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_05_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_05_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_05_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_05_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_05_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_05_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_05.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_05_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.29347826086956524,0.13043478260869565,0.14130434782608695,0.29347826086956524,0.14130434782608695};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_05() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(4258849563482341736L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_05_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_05_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_05_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_05_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_05_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_05_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_05_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_05_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_05_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_05_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_05_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.6331161797066144;
      sa[1] = 0.6633944215829509;
      sa[2] = 0.39464697355702955;
      sa[3] = 0.47351401166478235;
      sa[4] = 0.459234733207961;
      sa[5] = 0.5531380485531959;
      sa[6] = 0.3221157997400838;
      sa[7] = 0.7231890754782392;
      sa[8] = 0.5649367556026695;
      sa[9] = 0.6781659745712697;
      sa[10] = 0.3577467989810716;
      sa[11] = 0.34189840842060815;
      sa[12] = 0.4298536287205606;
      sa[13] = 0.44287711811601166;
      sa[14] = 0.49882763650612116;
      sa[15] = 0.5730794308102392;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_05_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_05_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.0312007201720657;
      sa[1] = 0.9810543113725808;
      sa[2] = 0.9604229853737672;
      sa[3] = 0.9738362017482559;
      sa[4] = 1.0018449828694058;
      sa[5] = 0.9999816243386047;
      sa[6] = 0.9295387529438872;
      sa[7] = 0.9306365608385414;
      sa[8] = 0.908044006061912;
      sa[9] = 1.052397673693603;
      sa[10] = 0.8730802124097042;
      sa[11] = 1.098356763004974;
      sa[12] = 1.0317159526724338;
      sa[13] = 0.9994247573209821;
      sa[14] = 1.0507755306949216;
      sa[15] = 1.0406468518707268;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_05_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_05_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.04103490046114315;
      sa[1] = 0.012205305326683395;
      sa[2] = -0.02461954900132306;
      sa[3] = -0.018433890171484456;
      sa[4] = 0.029396259741948396;
    }
  }
}
class h2o_nn_16x16x6_ReLU_05_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_05_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_05_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.0444015f;
      sa[1] = 0.28397584f;
      sa[2] = 0.3357961f;
      sa[3] = 0.16972096f;
      sa[4] = -0.11135654f;
      sa[5] = -0.12075381f;
      sa[6] = 0.032091852f;
      sa[7] = 0.38559434f;
      sa[8] = 0.09526379f;
      sa[9] = -0.07916282f;
      sa[10] = -0.17321211f;
      sa[11] = -0.23892067f;
      sa[12] = 0.15418921f;
      sa[13] = -0.22105558f;
      sa[14] = -0.11727079f;
      sa[15] = 0.102072224f;
      sa[16] = 0.2549616f;
      sa[17] = 0.29944074f;
      sa[18] = -0.24931803f;
      sa[19] = 0.17396334f;
      sa[20] = 0.32529756f;
      sa[21] = -0.2586473f;
      sa[22] = 0.3245193f;
      sa[23] = -0.07875304f;
      sa[24] = 0.42715827f;
      sa[25] = 0.19536468f;
      sa[26] = -0.2835961f;
      sa[27] = 0.3076208f;
      sa[28] = 0.3332021f;
      sa[29] = -0.22223584f;
      sa[30] = -0.11161154f;
      sa[31] = 0.2785954f;
      sa[32] = 0.24150726f;
      sa[33] = -0.2819972f;
      sa[34] = 0.046064597f;
      sa[35] = -0.12823741f;
      sa[36] = -0.1827605f;
      sa[37] = 0.29262716f;
      sa[38] = 0.029125238f;
      sa[39] = 0.110821016f;
      sa[40] = 0.11259183f;
      sa[41] = -0.07039234f;
      sa[42] = -0.115026586f;
      sa[43] = 0.110590175f;
      sa[44] = -0.0015021083f;
      sa[45] = -0.08986066f;
      sa[46] = 0.019960452f;
      sa[47] = -0.054740813f;
      sa[48] = 0.32044205f;
      sa[49] = 0.3023484f;
      sa[50] = 0.259839f;
      sa[51] = -0.23547934f;
      sa[52] = -0.033117995f;
      sa[53] = 0.43575674f;
      sa[54] = 0.29742634f;
      sa[55] = -0.005589161f;
      sa[56] = -0.10261793f;
      sa[57] = -0.20912644f;
      sa[58] = 0.3534147f;
      sa[59] = -0.10404666f;
      sa[60] = -0.22793181f;
      sa[61] = 0.17897578f;
      sa[62] = 0.1991696f;
      sa[63] = 0.06420761f;
      sa[64] = 0.2303495f;
      sa[65] = 0.2335399f;
      sa[66] = 0.07687794f;
      sa[67] = 0.2536388f;
      sa[68] = -0.07646334f;
      sa[69] = 0.2076648f;
      sa[70] = -0.13967171f;
      sa[71] = 0.35766953f;
      sa[72] = -0.14532161f;
      sa[73] = 0.2053284f;
      sa[74] = -0.25273558f;
      sa[75] = 0.1030831f;
      sa[76] = -0.24048997f;
      sa[77] = -0.0873239f;
      sa[78] = -0.09304168f;
      sa[79] = 0.12328303f;
      sa[80] = -0.21833822f;
      sa[81] = -0.17275257f;
      sa[82] = -0.007298605f;
      sa[83] = 0.13958353f;
      sa[84] = -0.056462128f;
      sa[85] = -0.21537498f;
      sa[86] = 0.13949738f;
      sa[87] = 0.23889624f;
      sa[88] = 0.23945016f;
      sa[89] = 0.011994769f;
      sa[90] = -0.1176638f;
      sa[91] = 0.15351497f;
      sa[92] = 0.083602995f;
      sa[93] = -0.25620106f;
      sa[94] = -0.21212322f;
      sa[95] = -0.2890752f;
      sa[96] = 0.1057222f;
      sa[97] = 0.06261813f;
      sa[98] = 0.21168503f;
      sa[99] = -0.090258524f;
      sa[100] = -0.097274296f;
      sa[101] = -0.23777324f;
      sa[102] = -0.31229895f;
      sa[103] = -0.12342647f;
      sa[104] = -0.014684076f;
      sa[105] = -0.14979021f;
      sa[106] = -0.21783285f;
      sa[107] = 0.14921354f;
      sa[108] = 0.29283944f;
      sa[109] = -0.20669359f;
      sa[110] = -0.15958045f;
      sa[111] = 0.24449244f;
      sa[112] = 0.12997434f;
      sa[113] = 0.057305753f;
      sa[114] = -0.17090902f;
      sa[115] = -0.059449825f;
      sa[116] = -0.18348368f;
      sa[117] = -0.028577812f;
      sa[118] = -0.2308227f;
      sa[119] = -0.16153151f;
      sa[120] = 0.22580838f;
      sa[121] = 0.2608475f;
      sa[122] = 0.3244821f;
      sa[123] = 0.2780754f;
      sa[124] = 0.34759855f;
      sa[125] = 0.30780548f;
      sa[126] = -0.36463124f;
      sa[127] = -0.10000868f;
      sa[128] = 0.06856587f;
      sa[129] = 0.15236998f;
      sa[130] = -0.14632522f;
      sa[131] = 0.2879576f;
      sa[132] = 0.1933662f;
      sa[133] = -0.2826046f;
      sa[134] = 0.0802849f;
      sa[135] = -0.31368548f;
      sa[136] = -0.29296726f;
      sa[137] = -0.022089964f;
      sa[138] = 0.1436002f;
      sa[139] = -0.11183295f;
      sa[140] = -0.074830435f;
      sa[141] = -0.16653512f;
      sa[142] = 0.15338239f;
      sa[143] = -0.38684073f;
      sa[144] = 0.36288387f;
      sa[145] = -0.14610109f;
      sa[146] = -0.2507995f;
      sa[147] = 0.23417696f;
      sa[148] = 0.17073728f;
      sa[149] = 0.2149337f;
      sa[150] = 0.30282852f;
      sa[151] = -0.29836679f;
      sa[152] = 0.12762338f;
      sa[153] = 0.2867062f;
      sa[154] = 0.312878f;
      sa[155] = -0.17711657f;
      sa[156] = 0.12547348f;
      sa[157] = -0.20487599f;
      sa[158] = 0.076715186f;
      sa[159] = 0.07219194f;
      sa[160] = 0.11059926f;
      sa[161] = 0.22831118f;
      sa[162] = -0.21824394f;
      sa[163] = 0.0067660604f;
      sa[164] = 0.23230405f;
      sa[165] = -0.063341215f;
      sa[166] = -0.10875958f;
      sa[167] = -0.1348437f;
      sa[168] = 0.21118653f;
      sa[169] = 0.3740924f;
      sa[170] = 0.028488765f;
      sa[171] = -0.040073447f;
      sa[172] = -0.06883095f;
      sa[173] = -0.16139911f;
      sa[174] = -0.0110571245f;
      sa[175] = -0.28104827f;
      sa[176] = 0.019339908f;
      sa[177] = -0.023180887f;
      sa[178] = -0.10821375f;
      sa[179] = 0.051542375f;
      sa[180] = -0.049173303f;
      sa[181] = -0.2980838f;
      sa[182] = -0.035148926f;
      sa[183] = 0.15917756f;
      sa[184] = 0.3670294f;
      sa[185] = 0.24885164f;
      sa[186] = -0.23608068f;
      sa[187] = 0.12783328f;
      sa[188] = -0.05987701f;
      sa[189] = 0.29498804f;
      sa[190] = -0.035538275f;
      sa[191] = 0.0022967593f;
      sa[192] = -0.11014477f;
      sa[193] = 0.2909646f;
      sa[194] = 0.15943408f;
      sa[195] = 0.3348249f;
      sa[196] = 0.3160452f;
      sa[197] = 0.014920978f;
      sa[198] = 0.10720543f;
      sa[199] = -0.1718265f;
      sa[200] = 0.04805284f;
      sa[201] = -0.2668007f;
      sa[202] = 0.19422898f;
      sa[203] = -0.015084108f;
      sa[204] = -0.16246197f;
      sa[205] = 0.2043609f;
      sa[206] = 0.16873844f;
      sa[207] = 0.08277522f;
      sa[208] = -0.2781184f;
      sa[209] = -0.074154705f;
      sa[210] = -0.2915911f;
      sa[211] = -0.2918368f;
      sa[212] = 0.33364874f;
      sa[213] = -0.20114449f;
      sa[214] = -0.19333132f;
      sa[215] = -0.011408068f;
      sa[216] = 0.06000566f;
      sa[217] = 0.22536631f;
      sa[218] = -0.21224776f;
      sa[219] = 0.24233848f;
      sa[220] = -0.30094436f;
      sa[221] = 0.0072894604f;
      sa[222] = 0.18371224f;
      sa[223] = 0.016059302f;
      sa[224] = 0.073561564f;
      sa[225] = 0.3490702f;
      sa[226] = -0.20138836f;
      sa[227] = 0.38027442f;
      sa[228] = 0.075787365f;
      sa[229] = 0.052191958f;
      sa[230] = 0.22389026f;
      sa[231] = -0.31627044f;
      sa[232] = -0.21230996f;
      sa[233] = 0.1328178f;
      sa[234] = 0.11824752f;
      sa[235] = -0.27575302f;
      sa[236] = -0.09744995f;
      sa[237] = -0.31029496f;
      sa[238] = -0.29627392f;
      sa[239] = 0.09663599f;
      sa[240] = 0.012237934f;
      sa[241] = -0.18898383f;
      sa[242] = -0.1152348f;
      sa[243] = -0.20237152f;
      sa[244] = -0.28044304f;
      sa[245] = -0.1994602f;
      sa[246] = -0.3362637f;
      sa[247] = -0.10434813f;
      sa[248] = 0.23364557f;
      sa[249] = 0.25672188f;
      sa[250] = -0.16502929f;
      sa[251] = -0.059561454f;
      sa[252] = -0.24384002f;
      sa[253] = -0.28893977f;
      sa[254] = -0.29141384f;
      sa[255] = 0.1424393f;
      sa[256] = -0.12805018f;
      sa[257] = 0.3462173f;
      sa[258] = -0.20927867f;
      sa[259] = -0.050516106f;
      sa[260] = -0.21125132f;
      sa[261] = -0.06384061f;
      sa[262] = -0.2584718f;
      sa[263] = 0.21596271f;
      sa[264] = -0.08859836f;
      sa[265] = 0.13136396f;
      sa[266] = -0.23021783f;
      sa[267] = -0.17396171f;
      sa[268] = 0.18132855f;
      sa[269] = -0.13758722f;
      sa[270] = 0.014557684f;
      sa[271] = 0.24356022f;
      sa[272] = 0.005789255f;
      sa[273] = -0.028586613f;
      sa[274] = 0.24084717f;
      sa[275] = 0.08218423f;
      sa[276] = 0.07449356f;
      sa[277] = -0.319845f;
      sa[278] = -0.15982255f;
      sa[279] = 0.24548677f;
      sa[280] = -0.111347f;
      sa[281] = 0.38432813f;
      sa[282] = -0.040596653f;
      sa[283] = 0.032666747f;
      sa[284] = -0.10948284f;
      sa[285] = -0.28375235f;
      sa[286] = 0.4180315f;
      sa[287] = 0.23219788f;
      sa[288] = -0.4184734f;
      sa[289] = -0.20419636f;
      sa[290] = -0.019832328f;
      sa[291] = 0.10915398f;
      sa[292] = 0.18860734f;
      sa[293] = -0.067665696f;
      sa[294] = 0.14651555f;
      sa[295] = 0.17737463f;
      sa[296] = 0.09310339f;
      sa[297] = 0.3062027f;
      sa[298] = -0.071897246f;
      sa[299] = -0.0048594545f;
      sa[300] = 0.023247577f;
      sa[301] = -0.04393369f;
      sa[302] = 0.22570644f;
      sa[303] = 0.07876586f;
      sa[304] = -0.2094061f;
      sa[305] = 0.045507737f;
      sa[306] = 0.266388f;
      sa[307] = -0.2499712f;
      sa[308] = 0.116641976f;
      sa[309] = 0.19755617f;
      sa[310] = 0.3437775f;
      sa[311] = 0.3687768f;
      sa[312] = -0.1527447f;
      sa[313] = -0.20482327f;
      sa[314] = -0.118464306f;
      sa[315] = -0.06797246f;
      sa[316] = -0.008135336f;
      sa[317] = -0.069738716f;
      sa[318] = 0.11392007f;
      sa[319] = 0.33146366f;
      sa[320] = 0.07541626f;
      sa[321] = 0.2946471f;
      sa[322] = 0.126923f;
      sa[323] = -0.25186044f;
      sa[324] = -0.045503348f;
      sa[325] = 0.3223296f;
      sa[326] = -0.19806905f;
      sa[327] = -0.061426748f;
      sa[328] = 0.0129153645f;
      sa[329] = 0.3103664f;
      sa[330] = -0.1707551f;
      sa[331] = 0.0764684f;
      sa[332] = -0.341292f;
      sa[333] = 0.2098238f;
      sa[334] = -0.021376045f;
      sa[335] = 0.18468289f;
      sa[336] = -0.10784275f;
      sa[337] = -0.127825f;
      sa[338] = 0.3186286f;
      sa[339] = -0.15709844f;
      sa[340] = -0.29657644f;
      sa[341] = -0.18142992f;
      sa[342] = 0.21717921f;
      sa[343] = -0.03951213f;
      sa[344] = -0.09879251f;
      sa[345] = 0.31471622f;
      sa[346] = 0.25788516f;
      sa[347] = -0.08227872f;
      sa[348] = 0.38801703f;
      sa[349] = -0.28772548f;
      sa[350] = -0.19659054f;
      sa[351] = 0.23924616f;
      sa[352] = 0.33066657f;
      sa[353] = 0.094767995f;
      sa[354] = 0.19608653f;
      sa[355] = 0.25317723f;
      sa[356] = -0.104319036f;
      sa[357] = 0.24873148f;
      sa[358] = -0.33600503f;
      sa[359] = 0.029480724f;
      sa[360] = 0.1294659f;
      sa[361] = -0.04612976f;
      sa[362] = -0.177521f;
      sa[363] = 0.22961198f;
      sa[364] = -0.17582157f;
      sa[365] = -0.27381015f;
      sa[366] = -0.059452582f;
      sa[367] = -0.3624536f;
      sa[368] = -0.1666489f;
      sa[369] = 0.29705107f;
      sa[370] = -0.17921326f;
      sa[371] = 0.1550744f;
      sa[372] = -0.054734815f;
      sa[373] = 0.27874786f;
      sa[374] = -0.201298f;
      sa[375] = -0.35815945f;
      sa[376] = -0.32613608f;
      sa[377] = -0.24253392f;
      sa[378] = 0.2882474f;
      sa[379] = 0.13319144f;
      sa[380] = -0.16319554f;
      sa[381] = -0.14572582f;
      sa[382] = -0.09197527f;
      sa[383] = -0.16756576f;
      sa[384] = -0.16186605f;
      sa[385] = 0.1473131f;
      sa[386] = -0.2777229f;
      sa[387] = -0.17881721f;
      sa[388] = 0.07016831f;
      sa[389] = -0.027640225f;
      sa[390] = -0.025971746f;
      sa[391] = -0.14080572f;
      sa[392] = 0.37965485f;
      sa[393] = 0.3096721f;
      sa[394] = -0.09885721f;
      sa[395] = 0.27427092f;
      sa[396] = 0.31507406f;
      sa[397] = -0.27505141f;
      sa[398] = 0.020857805f;
      sa[399] = 0.12937537f;
      sa[400] = 0.13154785f;
      sa[401] = 0.22865084f;
      sa[402] = -0.19192043f;
      sa[403] = 7.0582835E-5f;
      sa[404] = 0.27938882f;
      sa[405] = -0.28083083f;
      sa[406] = -0.10200143f;
      sa[407] = 0.22023463f;
      sa[408] = -0.2764052f;
      sa[409] = -0.30882615f;
      sa[410] = -0.15980019f;
      sa[411] = 0.12077314f;
      sa[412] = -0.16470213f;
      sa[413] = 0.057871804f;
      sa[414] = 0.13968806f;
      sa[415] = 0.2639038f;
      sa[416] = -0.24588734f;
      sa[417] = -0.040039316f;
      sa[418] = -0.033544894f;
      sa[419] = 0.22046566f;
      sa[420] = 0.11376183f;
      sa[421] = 0.26382777f;
      sa[422] = 0.22058477f;
      sa[423] = -0.06448984f;
      sa[424] = 0.048050933f;
      sa[425] = -0.17021146f;
      sa[426] = -0.39060155f;
      sa[427] = 0.13226353f;
      sa[428] = -0.11421961f;
      sa[429] = -0.18220416f;
      sa[430] = 0.24499966f;
      sa[431] = 0.032022655f;
      sa[432] = -0.033553243f;
      sa[433] = 0.17733724f;
      sa[434] = 0.2629144f;
      sa[435] = 0.03582097f;
      sa[436] = -0.3092093f;
      sa[437] = -0.2858078f;
      sa[438] = -0.029305208f;
      sa[439] = -0.02934603f;
      sa[440] = 0.36108938f;
      sa[441] = -0.34421247f;
      sa[442] = 0.13978288f;
      sa[443] = 0.03772154f;
      sa[444] = -0.26075453f;
      sa[445] = 0.053889327f;
      sa[446] = 0.21589713f;
      sa[447] = 0.05829516f;
      sa[448] = 0.23141187f;
      sa[449] = 0.2723059f;
      sa[450] = -0.1329154f;
      sa[451] = 0.12792474f;
      sa[452] = 0.18472773f;
      sa[453] = -0.06743633f;
      sa[454] = -0.19946063f;
      sa[455] = -0.071459025f;
      sa[456] = -0.07851484f;
      sa[457] = 0.108680986f;
      sa[458] = -0.24379733f;
      sa[459] = 0.3209568f;
      sa[460] = 0.23689298f;
      sa[461] = 0.30313805f;
      sa[462] = 0.05569464f;
      sa[463] = 0.23981628f;
      sa[464] = -0.3109809f;
      sa[465] = 0.23397183f;
      sa[466] = -0.014384297f;
      sa[467] = 0.13233872f;
      sa[468] = 0.020632906f;
      sa[469] = 0.3632712f;
      sa[470] = 0.24041122f;
      sa[471] = -0.018860467f;
      sa[472] = 0.006027228f;
      sa[473] = -0.12767212f;
      sa[474] = -0.056148466f;
      sa[475] = 0.11948219f;
      sa[476] = 0.175971f;
      sa[477] = -0.1298231f;
      sa[478] = 0.1553663f;
      sa[479] = -0.230764f;
      sa[480] = -0.3302361f;
      sa[481] = -0.23836891f;
      sa[482] = -0.3164731f;
      sa[483] = 0.24075322f;
      sa[484] = 0.31667396f;
      sa[485] = 0.21443634f;
      sa[486] = -0.020123351f;
      sa[487] = -0.17042789f;
      sa[488] = -0.20759703f;
      sa[489] = 0.092014246f;
      sa[490] = -0.024319354f;
      sa[491] = -0.21203175f;
      sa[492] = 0.27575278f;
      sa[493] = 0.29200464f;
      sa[494] = -0.21816176f;
      sa[495] = 0.27057633f;
      sa[496] = 0.01384187f;
      sa[497] = 0.08779438f;
      sa[498] = 0.19773203f;
      sa[499] = 0.23568982f;
      sa[500] = -0.017113475f;
      sa[501] = 0.13994212f;
      sa[502] = 0.25900996f;
      sa[503] = 0.056225095f;
      sa[504] = -0.12872864f;
      sa[505] = -0.19445308f;
      sa[506] = 0.27750173f;
      sa[507] = 0.06638604f;
      sa[508] = 0.12272034f;
      sa[509] = 0.27418894f;
      sa[510] = 0.24896288f;
      sa[511] = 0.029603925f;
      sa[512] = 0.08849465f;
      sa[513] = -0.05911968f;
      sa[514] = 0.23153804f;
      sa[515] = -0.1654386f;
      sa[516] = 0.031135889f;
      sa[517] = 0.13050584f;
      sa[518] = 0.20496778f;
      sa[519] = -0.08350036f;
      sa[520] = 0.32450774f;
      sa[521] = 0.20957147f;
      sa[522] = 0.040393826f;
      sa[523] = 0.20691302f;
      sa[524] = 0.205667f;
      sa[525] = 0.18224561f;
      sa[526] = 0.016960077f;
      sa[527] = -0.12463488f;
      sa[528] = -0.019919762f;
      sa[529] = 0.102037534f;
      sa[530] = -0.29063106f;
      sa[531] = -0.035325985f;
      sa[532] = 0.13921387f;
      sa[533] = 0.113998465f;
      sa[534] = 0.14008364f;
      sa[535] = -0.13954367f;
      sa[536] = 0.04782427f;
      sa[537] = -0.22913288f;
      sa[538] = 0.2048379f;
      sa[539] = 0.28319022f;
      sa[540] = -0.19994701f;
      sa[541] = -0.16169104f;
      sa[542] = -0.020603232f;
      sa[543] = -0.3804166f;
      sa[544] = 0.18146569f;
      sa[545] = 0.14266613f;
      sa[546] = 0.08580629f;
      sa[547] = 0.24082927f;
      sa[548] = 0.16743629f;
      sa[549] = 0.18198952f;
      sa[550] = 0.06382071f;
      sa[551] = -0.19588622f;
      sa[552] = 0.05875851f;
      sa[553] = -0.03661297f;
      sa[554] = -0.16833651f;
      sa[555] = -0.13265672f;
      sa[556] = -0.15027283f;
      sa[557] = -0.2288402f;
      sa[558] = -0.24614418f;
      sa[559] = 0.2650632f;
      sa[560] = -0.31192195f;
      sa[561] = -0.08032959f;
      sa[562] = 0.2106519f;
      sa[563] = -0.043618124f;
      sa[564] = 0.35342228f;
      sa[565] = 0.082861975f;
      sa[566] = 0.30116913f;
      sa[567] = 0.09290743f;
      sa[568] = -0.044720706f;
      sa[569] = 0.074662685f;
      sa[570] = 0.018926578f;
      sa[571] = -0.0066277124f;
      sa[572] = -0.120852694f;
      sa[573] = 0.07534549f;
      sa[574] = 0.27485305f;
      sa[575] = -0.2637185f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_05_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_05_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.39623725f;
      sa[1] = -0.003962002f;
      sa[2] = -0.15043093f;
      sa[3] = -0.21887295f;
      sa[4] = 0.028099125f;
      sa[5] = 0.050413113f;
      sa[6] = 0.2845579f;
      sa[7] = -0.099945314f;
      sa[8] = -0.22293791f;
      sa[9] = 0.20108527f;
      sa[10] = -0.07700985f;
      sa[11] = 0.1263268f;
      sa[12] = 0.09878427f;
      sa[13] = 0.05181408f;
      sa[14] = -0.27381787f;
      sa[15] = 0.35218272f;
      sa[16] = 0.42111146f;
      sa[17] = -0.12238957f;
      sa[18] = 0.024430532f;
      sa[19] = -0.062184177f;
      sa[20] = 0.33390877f;
      sa[21] = -0.052099295f;
      sa[22] = -0.30645886f;
      sa[23] = 0.25197893f;
      sa[24] = -0.38001308f;
      sa[25] = 0.07375124f;
      sa[26] = -0.114316866f;
      sa[27] = 0.43280056f;
      sa[28] = -0.36879203f;
      sa[29] = -0.15776257f;
      sa[30] = 0.12473915f;
      sa[31] = -0.22678238f;
      sa[32] = -0.37863952f;
      sa[33] = -0.40087306f;
      sa[34] = 0.01673975f;
      sa[35] = 0.36842877f;
      sa[36] = -0.101772f;
      sa[37] = -0.059435174f;
      sa[38] = -0.0014466194f;
      sa[39] = 0.26846975f;
      sa[40] = -0.22442977f;
      sa[41] = -0.41936845f;
      sa[42] = -0.29921737f;
      sa[43] = -0.35507253f;
      sa[44] = -0.031198189f;
      sa[45] = -0.4107344f;
      sa[46] = 0.31260166f;
      sa[47] = 0.33153757f;
      sa[48] = -0.4961281f;
      sa[49] = -0.28055635f;
      sa[50] = 0.08735322f;
      sa[51] = -0.104801476f;
      sa[52] = 0.1886922f;
      sa[53] = 0.2263978f;
      sa[54] = -0.08362459f;
      sa[55] = 0.3725493f;
      sa[56] = -0.278737f;
      sa[57] = -0.3146763f;
      sa[58] = 0.058604933f;
      sa[59] = -0.044250432f;
      sa[60] = 0.3040707f;
      sa[61] = -0.25079483f;
      sa[62] = -0.13760436f;
      sa[63] = 0.17130178f;
      sa[64] = 0.49371222f;
      sa[65] = -0.17225452f;
      sa[66] = 0.15158135f;
      sa[67] = 0.3981408f;
      sa[68] = 0.21599741f;
      sa[69] = -0.26770228f;
      sa[70] = -0.4290638f;
      sa[71] = -0.12100845f;
      sa[72] = -0.381091f;
      sa[73] = 0.2936963f;
      sa[74] = 0.36533877f;
      sa[75] = -0.0063942694f;
      sa[76] = 0.33388427f;
      sa[77] = 0.2311718f;
      sa[78] = -0.32609478f;
      sa[79] = 0.29559043f;
      sa[80] = -0.2953108f;
      sa[81] = 0.082975164f;
      sa[82] = 0.20960155f;
      sa[83] = -0.16781126f;
      sa[84] = -0.4510282f;
      sa[85] = -0.33828545f;
      sa[86] = 0.057441123f;
      sa[87] = 0.37445316f;
      sa[88] = -0.37801057f;
      sa[89] = -0.116687074f;
      sa[90] = -0.27240708f;
      sa[91] = 0.4149267f;
      sa[92] = -0.15812111f;
      sa[93] = 0.013819652f;
      sa[94] = -0.41591325f;
      sa[95] = -0.055511516f;
      sa[96] = -0.40961534f;
      sa[97] = 0.016341055f;
      sa[98] = -0.036636703f;
      sa[99] = 0.059045244f;
      sa[100] = -0.3831606f;
      sa[101] = -0.16542074f;
      sa[102] = 0.27920935f;
      sa[103] = 0.06411177f;
      sa[104] = -0.094511f;
      sa[105] = -0.2378493f;
      sa[106] = 0.34514946f;
      sa[107] = 0.3200939f;
      sa[108] = 0.147631f;
      sa[109] = -0.0247756f;
      sa[110] = 0.17034939f;
      sa[111] = -0.22975744f;
      sa[112] = -0.4658261f;
      sa[113] = -0.013210635f;
      sa[114] = 0.027513964f;
      sa[115] = -0.13312268f;
      sa[116] = 0.26748946f;
      sa[117] = -0.017284421f;
      sa[118] = -0.37810865f;
      sa[119] = -0.19576684f;
      sa[120] = -0.12226953f;
      sa[121] = 0.2648697f;
      sa[122] = -0.01928746f;
      sa[123] = 0.071759015f;
      sa[124] = -0.27498898f;
      sa[125] = 0.12929937f;
      sa[126] = -0.3178307f;
      sa[127] = 0.11636405f;
      sa[128] = -0.39660972f;
      sa[129] = 0.13162534f;
      sa[130] = -0.11876913f;
      sa[131] = 0.17721692f;
      sa[132] = 0.07737809f;
      sa[133] = 0.14749984f;
      sa[134] = 0.18221253f;
      sa[135] = -0.39120364f;
      sa[136] = 0.0966777f;
      sa[137] = -0.19211663f;
      sa[138] = 0.0057574078f;
      sa[139] = 0.27920818f;
      sa[140] = -0.19577836f;
      sa[141] = -0.08392171f;
      sa[142] = -0.0014448378f;
      sa[143] = -0.2687718f;
      sa[144] = 0.2747065f;
      sa[145] = -0.1618569f;
      sa[146] = 0.052082162f;
      sa[147] = -0.04228482f;
      sa[148] = -0.21030185f;
      sa[149] = 0.35953936f;
      sa[150] = -0.23216334f;
      sa[151] = -0.5066808f;
      sa[152] = 0.47300467f;
      sa[153] = -0.104775704f;
      sa[154] = 0.39953983f;
      sa[155] = -0.42767808f;
      sa[156] = -0.40638277f;
      sa[157] = -0.3347845f;
      sa[158] = -0.08205607f;
      sa[159] = -0.19245645f;
      sa[160] = 0.20870668f;
      sa[161] = -0.40807733f;
      sa[162] = 0.38720998f;
      sa[163] = -0.26577902f;
      sa[164] = 0.13593931f;
      sa[165] = -0.20741142f;
      sa[166] = 0.3463588f;
      sa[167] = -0.49400258f;
      sa[168] = 0.21270096f;
      sa[169] = -0.46264946f;
      sa[170] = 0.31308818f;
      sa[171] = 0.2024726f;
      sa[172] = 0.33215994f;
      sa[173] = 0.31957793f;
      sa[174] = -0.1909666f;
      sa[175] = -0.058176592f;
      sa[176] = -0.1781835f;
      sa[177] = 0.10865154f;
      sa[178] = -0.27056658f;
      sa[179] = -0.059571423f;
      sa[180] = -0.35482576f;
      sa[181] = -0.16195428f;
      sa[182] = 0.13566057f;
      sa[183] = -0.24809177f;
      sa[184] = 0.463535f;
      sa[185] = 0.43572026f;
      sa[186] = -0.069145575f;
      sa[187] = -0.24662602f;
      sa[188] = -0.1322527f;
      sa[189] = -0.17619644f;
      sa[190] = -0.35281166f;
      sa[191] = -0.17312607f;
      sa[192] = 0.07974242f;
      sa[193] = 0.12491846f;
      sa[194] = -0.28031304f;
      sa[195] = -0.23186849f;
      sa[196] = 0.19276424f;
      sa[197] = -0.17735164f;
      sa[198] = 0.059573486f;
      sa[199] = 0.36540642f;
      sa[200] = -0.021906689f;
      sa[201] = 0.28006604f;
      sa[202] = 0.19858243f;
      sa[203] = -0.3986221f;
      sa[204] = 0.19264348f;
      sa[205] = 0.4134409f;
      sa[206] = -0.1307653f;
      sa[207] = 0.16349478f;
      sa[208] = -0.23731655f;
      sa[209] = 0.18732983f;
      sa[210] = -0.13095659f;
      sa[211] = -0.2787936f;
      sa[212] = -0.393766f;
      sa[213] = 0.015533571f;
      sa[214] = -0.38964385f;
      sa[215] = -8.3768356E-4f;
      sa[216] = 0.16002731f;
      sa[217] = 0.3536585f;
      sa[218] = 0.018730266f;
      sa[219] = 0.09496629f;
      sa[220] = 0.12520774f;
      sa[221] = -0.031201582f;
      sa[222] = -0.27129257f;
      sa[223] = -0.29642856f;
      sa[224] = 0.3135362f;
      sa[225] = 0.10903805f;
      sa[226] = -0.016351985f;
      sa[227] = 0.10141716f;
      sa[228] = -0.11709559f;
      sa[229] = -0.20132264f;
      sa[230] = -0.21880667f;
      sa[231] = -0.0872892f;
      sa[232] = 0.48367056f;
      sa[233] = -0.13757576f;
      sa[234] = -0.15060656f;
      sa[235] = 0.04110291f;
      sa[236] = -0.37671217f;
      sa[237] = 0.42223457f;
      sa[238] = 0.19214469f;
      sa[239] = -0.071913436f;
      sa[240] = -0.00752034f;
      sa[241] = -0.36735404f;
      sa[242] = -0.22356266f;
      sa[243] = 0.3975465f;
      sa[244] = 0.23842843f;
      sa[245] = 0.3311415f;
      sa[246] = 0.21688762f;
      sa[247] = -0.39487588f;
      sa[248] = -0.18755774f;
      sa[249] = 0.018727299f;
      sa[250] = 0.24625234f;
      sa[251] = 0.42982307f;
      sa[252] = 0.24780019f;
      sa[253] = -0.31045604f;
      sa[254] = 0.41170236f;
      sa[255] = 0.14858407f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_05_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_ReLU_05_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.14639652f;
      sa[1] = -1.5988054f;
      sa[2] = -1.6406367f;
      sa[3] = 1.3468765f;
      sa[4] = 0.3971395f;
      sa[5] = -0.26017055f;
      sa[6] = -1.6711221f;
      sa[7] = 1.5142249f;
      sa[8] = 1.7808033f;
      sa[9] = 0.21442214f;
      sa[10] = 1.6341105f;
      sa[11] = 1.4756665f;
      sa[12] = 1.8625437f;
      sa[13] = -0.564249f;
      sa[14] = -2.013566f;
      sa[15] = -0.7115043f;
      sa[16] = 0.7701332f;
      sa[17] = -0.7684567f;
      sa[18] = -1.5238458f;
      sa[19] = -0.9042249f;
      sa[20] = -1.9468212f;
      sa[21] = 0.27831715f;
      sa[22] = -1.986464f;
      sa[23] = -0.5998165f;
      sa[24] = -0.54808015f;
      sa[25] = 1.8950903f;
      sa[26] = -0.3290494f;
      sa[27] = 1.217555f;
      sa[28] = 1.2171203f;
      sa[29] = -0.72555333f;
      sa[30] = 0.17258927f;
      sa[31] = 0.14604378f;
      sa[32] = 0.44007218f;
      sa[33] = 0.28211886f;
      sa[34] = -0.62441826f;
      sa[35] = 1.050628f;
      sa[36] = 0.5675157f;
      sa[37] = -1.3398561f;
      sa[38] = 0.5612718f;
      sa[39] = -0.22123338f;
      sa[40] = 0.21337256f;
      sa[41] = -0.8023131f;
      sa[42] = 0.5185627f;
      sa[43] = -0.5349616f;
      sa[44] = 0.9693765f;
      sa[45] = -2.0793831f;
      sa[46] = -2.150196f;
      sa[47] = 0.02514877f;
      sa[48] = 1.5748065f;
      sa[49] = -0.26402482f;
      sa[50] = -0.47520748f;
      sa[51] = 1.8006725f;
      sa[52] = -1.7483178f;
      sa[53] = 1.0170208f;
      sa[54] = 1.7975717f;
      sa[55] = 1.0853351f;
      sa[56] = -0.5624066f;
      sa[57] = -0.11578643f;
      sa[58] = 1.0081542f;
      sa[59] = 0.83870727f;
      sa[60] = -1.4132183f;
      sa[61] = 0.9300858f;
      sa[62] = -0.40584734f;
      sa[63] = -0.8569559f;
      sa[64] = 0.93944275f;
      sa[65] = -0.96870106f;
      sa[66] = -1.7666473f;
      sa[67] = -0.15675482f;
      sa[68] = 0.9029134f;
      sa[69] = -1.3739965f;
      sa[70] = -1.6575317f;
      sa[71] = -0.038301066f;
      sa[72] = -0.9974524f;
      sa[73] = -1.1963345f;
      sa[74] = -1.0838671f;
      sa[75] = 1.2194183f;
      sa[76] = 1.905238f;
      sa[77] = -0.6013592f;
      sa[78] = -1.3851293f;
      sa[79] = -0.3642359f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_05 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_05_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_05_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_05_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_ReLU_05_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_05_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


