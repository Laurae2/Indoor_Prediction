/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:50:59.698+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_05

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_05 > h2o_nn_16x16x6_Tanh_05.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_05.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_05", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_05 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_05_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_05_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_05_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_05_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_05_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_05_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_05.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_05_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.29347826086956524,0.13043478260869565,0.14130434782608695,0.29347826086956524,0.14130434782608695};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_05() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(8895166182546041728L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_05_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_05_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_05_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_05_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_05_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_05_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_05_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_05_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_05_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_05_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_05_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.004253468203439817;
      sa[1] = 0.016079521932928872;
      sa[2] = 0.05388773150210092;
      sa[3] = -0.042439693131490853;
      sa[4] = 0.026095631400036123;
      sa[5] = -5.862805070386835E-4;
      sa[6] = 0.05336512330217997;
      sa[7] = 0.019492837112852143;
      sa[8] = -0.0325635476154725;
      sa[9] = 0.02148521901992865;
      sa[10] = 0.03038089075761701;
      sa[11] = -0.020861726889728358;
      sa[12] = 0.06598411736054785;
      sa[13] = 0.03691388052533035;
      sa[14] = -0.08082559240279893;
      sa[15] = 0.03855963095496028;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_05_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_05_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.04497411798965412;
      sa[1] = -0.08326607946628273;
      sa[2] = -0.040441234817692566;
      sa[3] = 0.049289735591773604;
      sa[4] = 0.0629171581240298;
      sa[5] = -0.016292229157300345;
      sa[6] = -0.021651462657732764;
      sa[7] = 0.0566918289923007;
      sa[8] = 0.036933175538638126;
      sa[9] = -0.03168717604556382;
      sa[10] = 0.05187542920545725;
      sa[11] = 0.09342678383253296;
      sa[12] = 0.01371069098762544;
      sa[13] = 0.020747108895537752;
      sa[14] = -0.03740713202539038;
      sa[15] = -0.07330276360593668;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_05_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_05_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.07622735059972381;
      sa[1] = -0.05459114959367001;
      sa[2] = -0.06262857991546052;
      sa[3] = -0.013809889966488081;
      sa[4] = 0.0063015865242518655;
    }
  }
}
class h2o_nn_16x16x6_Tanh_05_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_05_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_05_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.087216705f;
      sa[1] = 0.28134522f;
      sa[2] = 0.27875474f;
      sa[3] = 0.21419932f;
      sa[4] = -0.15419495f;
      sa[5] = -0.17143849f;
      sa[6] = -0.014051374f;
      sa[7] = 0.3543957f;
      sa[8] = 0.14716038f;
      sa[9] = -0.13809513f;
      sa[10] = -0.16401608f;
      sa[11] = -0.20762727f;
      sa[12] = 0.11232357f;
      sa[13] = -0.26296976f;
      sa[14] = -0.15740554f;
      sa[15] = 0.075749665f;
      sa[16] = 0.16515894f;
      sa[17] = 0.23955242f;
      sa[18] = -0.26679698f;
      sa[19] = 0.2036609f;
      sa[20] = 0.2916103f;
      sa[21] = -0.29632092f;
      sa[22] = 0.28613624f;
      sa[23] = -0.11032662f;
      sa[24] = 0.38020313f;
      sa[25] = 0.21112259f;
      sa[26] = -0.31823397f;
      sa[27] = 0.3096794f;
      sa[28] = 0.29792032f;
      sa[29] = -0.26117545f;
      sa[30] = -0.14973052f;
      sa[31] = 0.24048175f;
      sa[32] = 0.22913952f;
      sa[33] = -0.29898113f;
      sa[34] = 0.07367787f;
      sa[35] = -0.12349856f;
      sa[36] = -0.077859305f;
      sa[37] = 0.28423464f;
      sa[38] = -0.056700375f;
      sa[39] = 0.12539719f;
      sa[40] = 0.055884577f;
      sa[41] = -0.12334668f;
      sa[42] = -0.17371044f;
      sa[43] = 0.067159764f;
      sa[44] = 0.11063516f;
      sa[45] = -0.20531462f;
      sa[46] = 0.020138483f;
      sa[47] = -0.027050368f;
      sa[48] = 0.2652616f;
      sa[49] = 0.25840113f;
      sa[50] = 0.20462711f;
      sa[51] = -0.2799293f;
      sa[52] = -0.07939704f;
      sa[53] = 0.33595514f;
      sa[54] = 0.31393912f;
      sa[55] = -0.020243749f;
      sa[56] = -0.14564276f;
      sa[57] = -0.26111978f;
      sa[58] = 0.30923548f;
      sa[59] = -0.13696325f;
      sa[60] = -0.2399102f;
      sa[61] = 0.18191217f;
      sa[62] = 0.1650287f;
      sa[63] = 0.07066048f;
      sa[64] = 0.17144224f;
      sa[65] = 0.1583111f;
      sa[66] = 0.015764974f;
      sa[67] = 0.20623349f;
      sa[68] = -0.036775235f;
      sa[69] = 0.21214963f;
      sa[70] = -0.14415659f;
      sa[71] = 0.36571297f;
      sa[72] = -0.0454669f;
      sa[73] = 0.19173123f;
      sa[74] = -0.3150149f;
      sa[75] = 0.090192795f;
      sa[76] = -0.22600505f;
      sa[77] = -0.06671044f;
      sa[78] = -0.07471688f;
      sa[79] = 0.09637998f;
      sa[80] = -0.12513678f;
      sa[81] = -0.20408626f;
      sa[82] = -0.02832841f;
      sa[83] = 0.111829095f;
      sa[84] = -0.023467919f;
      sa[85] = -0.18911314f;
      sa[86] = 0.16562992f;
      sa[87] = 0.21494268f;
      sa[88] = 0.17924963f;
      sa[89] = -0.034956656f;
      sa[90] = -0.08865599f;
      sa[91] = 0.13495933f;
      sa[92] = 0.10302378f;
      sa[93] = -0.24539617f;
      sa[94] = -0.19069855f;
      sa[95] = -0.32613432f;
      sa[96] = 0.055193216f;
      sa[97] = 0.02760488f;
      sa[98] = 0.25685918f;
      sa[99] = -0.14040412f;
      sa[100] = -0.07625537f;
      sa[101] = -0.22776634f;
      sa[102] = -0.28795153f;
      sa[103] = -0.14108044f;
      sa[104] = -0.04098484f;
      sa[105] = -0.17655955f;
      sa[106] = -0.21974236f;
      sa[107] = 0.1521123f;
      sa[108] = 0.24843785f;
      sa[109] = -0.2072462f;
      sa[110] = -0.12928182f;
      sa[111] = 0.23591445f;
      sa[112] = 0.13310902f;
      sa[113] = 0.056899827f;
      sa[114] = -0.16563684f;
      sa[115] = -0.050606884f;
      sa[116] = -0.19839028f;
      sa[117] = -0.023394348f;
      sa[118] = -0.22450721f;
      sa[119] = -0.16194281f;
      sa[120] = 0.22672127f;
      sa[121] = 0.25969368f;
      sa[122] = 0.32594362f;
      sa[123] = 0.2852912f;
      sa[124] = 0.37464145f;
      sa[125] = 0.31792325f;
      sa[126] = -0.3803844f;
      sa[127] = -0.10755752f;
      sa[128] = 0.06633748f;
      sa[129] = 0.15325032f;
      sa[130] = -0.14525507f;
      sa[131] = 0.29861054f;
      sa[132] = 0.22563748f;
      sa[133] = -0.29127064f;
      sa[134] = 0.08339904f;
      sa[135] = -0.296759f;
      sa[136] = -0.29375955f;
      sa[137] = -0.023572162f;
      sa[138] = 0.14230183f;
      sa[139] = -0.10842459f;
      sa[140] = -0.0848925f;
      sa[141] = -0.17238782f;
      sa[142] = 0.16523768f;
      sa[143] = -0.37639067f;
      sa[144] = 0.34919155f;
      sa[145] = -0.14632475f;
      sa[146] = -0.27089682f;
      sa[147] = 0.20142634f;
      sa[148] = 0.19081523f;
      sa[149] = 0.2283652f;
      sa[150] = 0.32046807f;
      sa[151] = -0.27703735f;
      sa[152] = 0.1137277f;
      sa[153] = 0.2840847f;
      sa[154] = 0.30311272f;
      sa[155] = -0.2046378f;
      sa[156] = 0.14342286f;
      sa[157] = -0.18734796f;
      sa[158] = 0.09370664f;
      sa[159] = 0.08722948f;
      sa[160] = 0.107447274f;
      sa[161] = 0.22471508f;
      sa[162] = -0.20674434f;
      sa[163] = 0.047111563f;
      sa[164] = 0.24942373f;
      sa[165] = -0.046568096f;
      sa[166] = -0.08947541f;
      sa[167] = -0.1233633f;
      sa[168] = 0.21266177f;
      sa[169] = 0.35705832f;
      sa[170] = 0.03136721f;
      sa[171] = -0.039818756f;
      sa[172] = -0.04780402f;
      sa[173] = -0.13419025f;
      sa[174] = 0.014139271f;
      sa[175] = -0.25309777f;
      sa[176] = -0.0041153515f;
      sa[177] = -0.03837374f;
      sa[178] = -0.09629744f;
      sa[179] = 0.029910788f;
      sa[180] = 0.04764391f;
      sa[181] = -0.3025672f;
      sa[182] = -0.15342323f;
      sa[183] = 0.12662897f;
      sa[184] = 0.30969372f;
      sa[185] = 0.21297053f;
      sa[186] = -0.3012712f;
      sa[187] = 0.061493985f;
      sa[188] = 0.07834204f;
      sa[189] = 0.13461684f;
      sa[190] = 0.029967787f;
      sa[191] = 0.003929309f;
      sa[192] = -0.15868446f;
      sa[193] = 0.25966585f;
      sa[194] = 0.099959075f;
      sa[195] = 0.2628758f;
      sa[196] = 0.25721037f;
      sa[197] = -0.1258363f;
      sa[198] = 0.08141209f;
      sa[199] = -0.0904646f;
      sa[200] = -0.0081703225f;
      sa[201] = -0.33384135f;
      sa[202] = 0.13001126f;
      sa[203] = -0.071422786f;
      sa[204] = -0.23015311f;
      sa[205] = 0.24263816f;
      sa[206] = 0.21076173f;
      sa[207] = 0.1123501f;
      sa[208] = -0.3203026f;
      sa[209] = -0.11919577f;
      sa[210] = -0.32325348f;
      sa[211] = -0.33863306f;
      sa[212] = 0.2877983f;
      sa[213] = -0.281358f;
      sa[214] = -0.1481882f;
      sa[215] = 0.02571705f;
      sa[216] = 0.18970913f;
      sa[217] = 0.2125754f;
      sa[218] = -0.22937295f;
      sa[219] = 0.32163215f;
      sa[220] = -0.23534334f;
      sa[221] = 0.07257075f;
      sa[222] = 0.2664951f;
      sa[223] = 0.06801537f;
      sa[224] = 0.18898857f;
      sa[225] = 0.27729967f;
      sa[226] = -0.24645157f;
      sa[227] = 0.3471843f;
      sa[228] = 0.13238488f;
      sa[229] = 0.11419983f;
      sa[230] = 0.2975576f;
      sa[231] = -0.27749562f;
      sa[232] = -0.28375986f;
      sa[233] = 0.03518483f;
      sa[234] = 0.14367028f;
      sa[235] = -0.32371977f;
      sa[236] = -0.041793253f;
      sa[237] = -0.2488709f;
      sa[238] = -0.22366324f;
      sa[239] = 0.115877904f;
      sa[240] = -0.028830955f;
      sa[241] = -0.23910008f;
      sa[242] = -0.10787879f;
      sa[243] = -0.35175273f;
      sa[244] = -0.23719016f;
      sa[245] = -0.15610424f;
      sa[246] = -0.28426218f;
      sa[247] = -0.09467357f;
      sa[248] = 0.17821854f;
      sa[249] = 0.23961632f;
      sa[250] = -0.20045534f;
      sa[251] = -0.09125621f;
      sa[252] = -0.2695121f;
      sa[253] = -0.29878017f;
      sa[254] = -0.3562849f;
      sa[255] = 0.14222756f;
      sa[256] = -0.2092757f;
      sa[257] = 0.28745472f;
      sa[258] = -0.29020697f;
      sa[259] = -0.10903647f;
      sa[260] = -0.18341677f;
      sa[261] = -0.12214995f;
      sa[262] = -0.1624747f;
      sa[263] = 0.1947683f;
      sa[264] = -0.14574137f;
      sa[265] = 0.06933651f;
      sa[266] = -0.30120274f;
      sa[267] = -0.21615976f;
      sa[268] = 0.19467458f;
      sa[269] = -0.21483026f;
      sa[270] = -0.04558612f;
      sa[271] = 0.26966673f;
      sa[272] = -0.049536753f;
      sa[273] = -0.096431024f;
      sa[274] = 0.17890376f;
      sa[275] = 0.053685267f;
      sa[276] = 0.05269838f;
      sa[277] = -0.26391083f;
      sa[278] = -0.15065643f;
      sa[279] = 0.28125185f;
      sa[280] = -0.1633049f;
      sa[281] = 0.32307377f;
      sa[282] = -0.0955563f;
      sa[283] = 0.009729086f;
      sa[284] = -0.16360556f;
      sa[285] = -0.31480008f;
      sa[286] = 0.50751185f;
      sa[287] = 0.3106797f;
      sa[288] = -0.32648706f;
      sa[289] = -0.1858725f;
      sa[290] = -0.057332877f;
      sa[291] = 0.10454962f;
      sa[292] = 0.1558468f;
      sa[293] = -0.10366722f;
      sa[294] = 0.11568837f;
      sa[295] = 0.14548236f;
      sa[296] = 0.14064485f;
      sa[297] = 0.26083344f;
      sa[298] = -0.047271382f;
      sa[299] = 0.014160655f;
      sa[300] = -0.0059161843f;
      sa[301] = -0.07591726f;
      sa[302] = 0.19494219f;
      sa[303] = 0.048676666f;
      sa[304] = -0.22619703f;
      sa[305] = 0.018773988f;
      sa[306] = 0.2516156f;
      sa[307] = -0.24836029f;
      sa[308] = 0.08989577f;
      sa[309] = 0.16853431f;
      sa[310] = 0.3195173f;
      sa[311] = 0.33711243f;
      sa[312] = -0.14756486f;
      sa[313] = -0.1718334f;
      sa[314] = -0.16118985f;
      sa[315] = -0.053350173f;
      sa[316] = -0.038592048f;
      sa[317] = -0.10588494f;
      sa[318] = 0.07840823f;
      sa[319] = 0.29270163f;
      sa[320] = 0.0656049f;
      sa[321] = 0.22808065f;
      sa[322] = 0.1464676f;
      sa[323] = -0.24156997f;
      sa[324] = -0.06804709f;
      sa[325] = 0.32370612f;
      sa[326] = -0.21914947f;
      sa[327] = -0.026902385f;
      sa[328] = -0.04505633f;
      sa[329] = 0.26827493f;
      sa[330] = -0.21007599f;
      sa[331] = 0.0320574f;
      sa[332] = -0.357074f;
      sa[333] = 0.20725022f;
      sa[334] = -0.049501155f;
      sa[335] = 0.22068381f;
      sa[336] = -0.15533216f;
      sa[337] = -0.16756427f;
      sa[338] = 0.285715f;
      sa[339] = -0.19311178f;
      sa[340] = -0.29079267f;
      sa[341] = -0.20029537f;
      sa[342] = 0.19612737f;
      sa[343] = -0.040811796f;
      sa[344] = -0.15269905f;
      sa[345] = 0.2535259f;
      sa[346] = 0.22139627f;
      sa[347] = -0.1307066f;
      sa[348] = 0.37898967f;
      sa[349] = -0.28789353f;
      sa[350] = -0.22598308f;
      sa[351] = 0.2396791f;
      sa[352] = 0.26757514f;
      sa[353] = 0.018639436f;
      sa[354] = 0.13198295f;
      sa[355] = 0.19167954f;
      sa[356] = -0.07054342f;
      sa[357] = 0.27730596f;
      sa[358] = -0.3504218f;
      sa[359] = 0.020416416f;
      sa[360] = 0.18673792f;
      sa[361] = -0.045181163f;
      sa[362] = -0.27773035f;
      sa[363] = 0.23336317f;
      sa[364] = -0.15733905f;
      sa[365] = -0.22164945f;
      sa[366] = -0.035100963f;
      sa[367] = -0.39101592f;
      sa[368] = -0.07057266f;
      sa[369] = 0.19354217f;
      sa[370] = -0.15855803f;
      sa[371] = 0.12848167f;
      sa[372] = -0.039412435f;
      sa[373] = 0.31989223f;
      sa[374] = -0.18268026f;
      sa[375] = -0.39341548f;
      sa[376] = -0.39542252f;
      sa[377] = -0.33295977f;
      sa[378] = 0.31135038f;
      sa[379] = 0.15319629f;
      sa[380] = -0.16409609f;
      sa[381] = -0.14864562f;
      sa[382] = -0.08662799f;
      sa[383] = -0.22759612f;
      sa[384] = -0.28989652f;
      sa[385] = 0.12974952f;
      sa[386] = -0.2458503f;
      sa[387] = -0.20951848f;
      sa[388] = 0.08490596f;
      sa[389] = -0.014230133f;
      sa[390] = 0.010584398f;
      sa[391] = -0.16391769f;
      sa[392] = 0.30748034f;
      sa[393] = 0.23156962f;
      sa[394] = -0.09454408f;
      sa[395] = 0.25856367f;
      sa[396] = 0.3372655f;
      sa[397] = -0.28573486f;
      sa[398] = 0.047614392f;
      sa[399] = 0.120597504f;
      sa[400] = 0.1751965f;
      sa[401] = 0.25967702f;
      sa[402] = -0.15801293f;
      sa[403] = 0.016337486f;
      sa[404] = 0.3094678f;
      sa[405] = -0.30087084f;
      sa[406] = -0.09276593f;
      sa[407] = 0.19471559f;
      sa[408] = -0.24554893f;
      sa[409] = -0.27739048f;
      sa[410] = -0.13456687f;
      sa[411] = 0.119142264f;
      sa[412] = -0.1811106f;
      sa[413] = 0.05923481f;
      sa[414] = 0.16337651f;
      sa[415] = 0.26953205f;
      sa[416] = -0.2129087f;
      sa[417] = 0.0028683294f;
      sa[418] = -0.007908056f;
      sa[419] = 0.21822411f;
      sa[420] = 0.14538677f;
      sa[421] = 0.26536328f;
      sa[422] = 0.24889766f;
      sa[423] = -0.08648084f;
      sa[424] = 0.082311235f;
      sa[425] = -0.12668669f;
      sa[426] = -0.33619925f;
      sa[427] = 0.1384142f;
      sa[428] = -0.1138598f;
      sa[429] = -0.15263255f;
      sa[430] = 0.2061052f;
      sa[431] = 0.016287798f;
      sa[432] = -0.0030323656f;
      sa[433] = 0.15287884f;
      sa[434] = 0.2128594f;
      sa[435] = -0.017210595f;
      sa[436] = -0.29739353f;
      sa[437] = -0.267508f;
      sa[438] = -0.01996883f;
      sa[439] = -0.03212997f;
      sa[440] = 0.42997852f;
      sa[441] = -0.40203762f;
      sa[442] = 0.13706212f;
      sa[443] = -0.033574115f;
      sa[444] = -0.24017185f;
      sa[445] = 0.07291632f;
      sa[446] = 0.23039523f;
      sa[447] = 0.05498031f;
      sa[448] = 0.17013818f;
      sa[449] = 0.19399239f;
      sa[450] = -0.096867785f;
      sa[451] = 0.13031025f;
      sa[452] = 0.19956172f;
      sa[453] = -0.056699585f;
      sa[454] = -0.18836711f;
      sa[455] = -0.07162738f;
      sa[456] = -0.12054584f;
      sa[457] = 0.11124322f;
      sa[458] = -0.20746894f;
      sa[459] = 0.32871994f;
      sa[460] = 0.25713202f;
      sa[461] = 0.32342303f;
      sa[462] = 0.08057155f;
      sa[463] = 0.2514719f;
      sa[464] = -0.31286073f;
      sa[465] = 0.21704198f;
      sa[466] = -0.010327087f;
      sa[467] = 0.13379455f;
      sa[468] = 0.106242985f;
      sa[469] = 0.33177227f;
      sa[470] = 0.20022851f;
      sa[471] = 0.027335646f;
      sa[472] = 0.014442414f;
      sa[473] = -0.11576931f;
      sa[474] = -0.03445817f;
      sa[475] = 0.104884036f;
      sa[476] = 0.25484022f;
      sa[477] = -0.18848598f;
      sa[478] = 0.14961435f;
      sa[479] = -0.21256824f;
      sa[480] = -0.32396784f;
      sa[481] = -0.22763747f;
      sa[482] = -0.3020273f;
      sa[483] = 0.2227308f;
      sa[484] = 0.24368432f;
      sa[485] = 0.14506406f;
      sa[486] = 0.0039334707f;
      sa[487] = -0.15849812f;
      sa[488] = -0.20621343f;
      sa[489] = 0.09224451f;
      sa[490] = -0.027030066f;
      sa[491] = -0.23581055f;
      sa[492] = 0.25365025f;
      sa[493] = 0.28702593f;
      sa[494] = -0.2154091f;
      sa[495] = 0.26174262f;
      sa[496] = 0.028441621f;
      sa[497] = 0.10329133f;
      sa[498] = 0.21001488f;
      sa[499] = 0.22745907f;
      sa[500] = 0.023679163f;
      sa[501] = 0.1868304f;
      sa[502] = 0.19768333f;
      sa[503] = 0.0032383613f;
      sa[504] = -0.16080257f;
      sa[505] = -0.23504785f;
      sa[506] = 0.2576786f;
      sa[507] = 0.041036185f;
      sa[508] = 0.08692199f;
      sa[509] = 0.24273294f;
      sa[510] = 0.20713216f;
      sa[511] = 0.021301918f;
      sa[512] = 0.096542776f;
      sa[513] = -0.08405276f;
      sa[514] = 0.26058412f;
      sa[515] = -0.15280636f;
      sa[516] = 0.008662135f;
      sa[517] = 0.10324372f;
      sa[518] = 0.17108917f;
      sa[519] = -0.0781191f;
      sa[520] = 0.29819798f;
      sa[521] = 0.19282672f;
      sa[522] = 0.046339598f;
      sa[523] = 0.24129736f;
      sa[524] = 0.18542755f;
      sa[525] = 0.16189986f;
      sa[526] = 0.0027794398f;
      sa[527] = -0.13506475f;
      sa[528] = 0.01177312f;
      sa[529] = 0.13884494f;
      sa[530] = -0.24548346f;
      sa[531] = -0.06343009f;
      sa[532] = 0.11218772f;
      sa[533] = 0.08290656f;
      sa[534] = 0.11809726f;
      sa[535] = -0.16467372f;
      sa[536] = 0.049257364f;
      sa[537] = -0.24219806f;
      sa[538] = 0.24314451f;
      sa[539] = 0.32165256f;
      sa[540] = -0.18796962f;
      sa[541] = -0.1543846f;
      sa[542] = -0.07823525f;
      sa[543] = -0.3940996f;
      sa[544] = 0.14601253f;
      sa[545] = 0.12260792f;
      sa[546] = 0.055498857f;
      sa[547] = 0.19422875f;
      sa[548] = 0.1462361f;
      sa[549] = 0.16731472f;
      sa[550] = 0.05826899f;
      sa[551] = -0.20435856f;
      sa[552] = 0.04388009f;
      sa[553] = -0.054346453f;
      sa[554] = -0.18721598f;
      sa[555] = -0.17338306f;
      sa[556] = -0.16578084f;
      sa[557] = -0.26363438f;
      sa[558] = -0.26488897f;
      sa[559] = 0.29357612f;
      sa[560] = -0.3333798f;
      sa[561] = -0.11303448f;
      sa[562] = 0.1825544f;
      sa[563] = -0.08476599f;
      sa[564] = 0.31702077f;
      sa[565] = 0.07311917f;
      sa[566] = 0.28872973f;
      sa[567] = 0.10617916f;
      sa[568] = -0.06425677f;
      sa[569] = 0.05200616f;
      sa[570] = 5.880958E-4f;
      sa[571] = -0.032960176f;
      sa[572] = -0.15514533f;
      sa[573] = 0.06375467f;
      sa[574] = 0.29683405f;
      sa[575] = -0.2465677f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_05_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_05_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.35278425f;
      sa[1] = -0.029895997f;
      sa[2] = -0.15303558f;
      sa[3] = -0.23819917f;
      sa[4] = -0.004795265f;
      sa[5] = 0.02659275f;
      sa[6] = 0.25707367f;
      sa[7] = -0.07617079f;
      sa[8] = -0.24052584f;
      sa[9] = 0.14515549f;
      sa[10] = -0.09400798f;
      sa[11] = 0.10085326f;
      sa[12] = 0.08111007f;
      sa[13] = 0.044662733f;
      sa[14] = -0.25872588f;
      sa[15] = 0.36164728f;
      sa[16] = 0.45433265f;
      sa[17] = -0.11589007f;
      sa[18] = 0.034526747f;
      sa[19] = -0.057930227f;
      sa[20] = 0.37386537f;
      sa[21] = -0.05325591f;
      sa[22] = -0.31515968f;
      sa[23] = 0.29090458f;
      sa[24] = -0.38836136f;
      sa[25] = 0.049619596f;
      sa[26] = -0.111930355f;
      sa[27] = 0.446392f;
      sa[28] = -0.347233f;
      sa[29] = -0.09827936f;
      sa[30] = 0.17035443f;
      sa[31] = -0.18452707f;
      sa[32] = -0.32903618f;
      sa[33] = -0.37092495f;
      sa[34] = 0.034729213f;
      sa[35] = 0.39473468f;
      sa[36] = -0.07959297f;
      sa[37] = -0.061262026f;
      sa[38] = -5.9184566E-4f;
      sa[39] = 0.36244288f;
      sa[40] = -0.2107842f;
      sa[41] = -0.41794208f;
      sa[42] = -0.28261265f;
      sa[43] = -0.33115044f;
      sa[44] = 0.01659194f;
      sa[45] = -0.35941997f;
      sa[46] = 0.3593079f;
      sa[47] = 0.38177004f;
      sa[48] = -0.4168908f;
      sa[49] = -0.22313656f;
      sa[50] = 0.10917809f;
      sa[51] = -0.10773534f;
      sa[52] = 0.16678227f;
      sa[53] = 0.26863617f;
      sa[54] = -0.09163519f;
      sa[55] = 0.35579067f;
      sa[56] = -0.25924546f;
      sa[57] = -0.31902987f;
      sa[58] = 0.1480032f;
      sa[59] = -0.008085678f;
      sa[60] = 0.33675054f;
      sa[61] = -0.20034474f;
      sa[62] = -0.10905726f;
      sa[63] = 0.22006842f;
      sa[64] = 0.43991032f;
      sa[65] = -0.16621f;
      sa[66] = 0.16798227f;
      sa[67] = 0.37477493f;
      sa[68] = 0.23759973f;
      sa[69] = -0.24392489f;
      sa[70] = -0.4550179f;
      sa[71] = -0.1413425f;
      sa[72] = -0.41359305f;
      sa[73] = 0.2727469f;
      sa[74] = 0.3209378f;
      sa[75] = 0.045229394f;
      sa[76] = 0.2789308f;
      sa[77] = 0.14973898f;
      sa[78] = -0.31559363f;
      sa[79] = 0.31355032f;
      sa[80] = -0.29248574f;
      sa[81] = 0.10299416f;
      sa[82] = 0.21735191f;
      sa[83] = -0.16426024f;
      sa[84] = -0.55198f;
      sa[85] = -0.34536847f;
      sa[86] = 0.09095034f;
      sa[87] = 0.39660135f;
      sa[88] = -0.35294533f;
      sa[89] = -0.107067786f;
      sa[90] = -0.17515056f;
      sa[91] = 0.39740527f;
      sa[92] = -0.14163455f;
      sa[93] = 0.028195113f;
      sa[94] = -0.43907565f;
      sa[95] = -0.06405758f;
      sa[96] = -0.31807795f;
      sa[97] = 0.065300055f;
      sa[98] = -0.0071295835f;
      sa[99] = 0.09233642f;
      sa[100] = -0.35376924f;
      sa[101] = -0.1280538f;
      sa[102] = 0.30493203f;
      sa[103] = 0.1353124f;
      sa[104] = -0.044700533f;
      sa[105] = -0.20010786f;
      sa[106] = 0.3837475f;
      sa[107] = 0.3523771f;
      sa[108] = 0.20377207f;
      sa[109] = 0.028624324f;
      sa[110] = 0.22031714f;
      sa[111] = -0.16958712f;
      sa[112] = -0.36343244f;
      sa[113] = 0.07706248f;
      sa[114] = 0.050242122f;
      sa[115] = -0.12037537f;
      sa[116] = 0.24022762f;
      sa[117] = 0.062182598f;
      sa[118] = -0.3627576f;
      sa[119] = -0.17384896f;
      sa[120] = -0.068647705f;
      sa[121] = 0.3017082f;
      sa[122] = 0.07109857f;
      sa[123] = 0.12344104f;
      sa[124] = -0.22551604f;
      sa[125] = 0.16869158f;
      sa[126] = -0.28124028f;
      sa[127] = 0.18103297f;
      sa[128] = -0.2944829f;
      sa[129] = 0.21732326f;
      sa[130] = -0.08181488f;
      sa[131] = 0.19658259f;
      sa[132] = 0.09483085f;
      sa[133] = 0.21472192f;
      sa[134] = 0.25449282f;
      sa[135] = -0.38246274f;
      sa[136] = 0.14933988f;
      sa[137] = -0.10741273f;
      sa[138] = 0.06750234f;
      sa[139] = 0.33794194f;
      sa[140] = -0.16921642f;
      sa[141] = -0.049654182f;
      sa[142] = -0.03763742f;
      sa[143] = -0.2513671f;
      sa[144] = 0.24051869f;
      sa[145] = -0.21931997f;
      sa[146] = 0.0254884f;
      sa[147] = -0.064157575f;
      sa[148] = -0.2319224f;
      sa[149] = 0.2974561f;
      sa[150] = -0.18685655f;
      sa[151] = -0.47909477f;
      sa[152] = 0.45523438f;
      sa[153] = -0.09499016f;
      sa[154] = 0.41773504f;
      sa[155] = -0.45786938f;
      sa[156] = -0.42195112f;
      sa[157] = -0.3193454f;
      sa[158] = -0.110170536f;
      sa[159] = -0.24750991f;
      sa[160] = 0.25976488f;
      sa[161] = -0.2592524f;
      sa[162] = 0.43068174f;
      sa[163] = -0.24494024f;
      sa[164] = 0.14310539f;
      sa[165] = -0.083009504f;
      sa[166] = 0.40425372f;
      sa[167] = -0.3725298f;
      sa[168] = 0.298411f;
      sa[169] = -0.38244626f;
      sa[170] = 0.431379f;
      sa[171] = 0.31085908f;
      sa[172] = 0.33489105f;
      sa[173] = 0.33168092f;
      sa[174] = -0.11597356f;
      sa[175] = -0.0015585634f;
      sa[176] = -0.27420637f;
      sa[177] = 0.027698072f;
      sa[178] = -0.32413903f;
      sa[179] = -0.13546266f;
      sa[180] = -0.47898602f;
      sa[181] = -0.19413985f;
      sa[182] = 0.11491018f;
      sa[183] = -0.33815405f;
      sa[184] = 0.4687477f;
      sa[185] = 0.40319884f;
      sa[186] = -0.11528189f;
      sa[187] = -0.32363012f;
      sa[188] = -0.19425012f;
      sa[189] = -0.23363346f;
      sa[190] = -0.42373905f;
      sa[191] = -0.23534793f;
      sa[192] = -0.015462312f;
      sa[193] = 0.0981867f;
      sa[194] = -0.29227218f;
      sa[195] = -0.24736282f;
      sa[196] = 0.18981355f;
      sa[197] = -0.19660574f;
      sa[198] = 0.04814971f;
      sa[199] = 0.30735713f;
      sa[200] = -0.050214093f;
      sa[201] = 0.27268144f;
      sa[202] = 0.16047639f;
      sa[203] = -0.4172188f;
      sa[204] = 0.14182134f;
      sa[205] = 0.3770655f;
      sa[206] = -0.16608028f;
      sa[207] = 0.1289564f;
      sa[208] = -0.25264376f;
      sa[209] = 0.2003814f;
      sa[210] = -0.11562807f;
      sa[211] = -0.28194636f;
      sa[212] = -0.44880223f;
      sa[213] = 0.035275728f;
      sa[214] = -0.36793804f;
      sa[215] = 0.02893839f;
      sa[216] = 0.18008617f;
      sa[217] = 0.34714678f;
      sa[218] = 0.06116808f;
      sa[219] = 0.09860341f;
      sa[220] = 0.13734643f;
      sa[221] = -0.0481388f;
      sa[222] = -0.26682547f;
      sa[223] = -0.27030239f;
      sa[224] = 0.26598176f;
      sa[225] = 0.058866706f;
      sa[226] = -0.054417666f;
      sa[227] = 0.107595585f;
      sa[228] = -0.15119322f;
      sa[229] = -0.25391087f;
      sa[230] = -0.2295167f;
      sa[231] = -0.0970451f;
      sa[232] = 0.4843704f;
      sa[233] = -0.15565419f;
      sa[234] = -0.16541342f;
      sa[235] = -0.041178897f;
      sa[236] = -0.38139856f;
      sa[237] = 0.42948025f;
      sa[238] = 0.17655963f;
      sa[239] = -0.11406141f;
      sa[240] = -0.027039217f;
      sa[241] = -0.44310674f;
      sa[242] = -0.23748721f;
      sa[243] = 0.38739666f;
      sa[244] = 0.27491826f;
      sa[245] = 0.26324898f;
      sa[246] = 0.22770223f;
      sa[247] = -0.39474946f;
      sa[248] = -0.2354324f;
      sa[249] = 0.00789738f;
      sa[250] = 0.16090456f;
      sa[251] = 0.39013284f;
      sa[252] = 0.2325373f;
      sa[253] = -0.29119292f;
      sa[254] = 0.39033845f;
      sa[255] = 0.10382174f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_05_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_Tanh_05_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.24415855f;
      sa[1] = -1.5788656f;
      sa[2] = -1.6625952f;
      sa[3] = 1.3490739f;
      sa[4] = 0.41952246f;
      sa[5] = -0.20389564f;
      sa[6] = -1.613727f;
      sa[7] = 1.5838639f;
      sa[8] = 1.8409803f;
      sa[9] = 0.26810735f;
      sa[10] = 1.6704898f;
      sa[11] = 1.5407888f;
      sa[12] = 1.8994867f;
      sa[13] = -0.4803372f;
      sa[14] = -2.0250812f;
      sa[15] = -0.6563437f;
      sa[16] = 0.77352434f;
      sa[17] = -0.81044674f;
      sa[18] = -1.5486554f;
      sa[19] = -0.9542045f;
      sa[20] = -1.9489579f;
      sa[21] = 0.26337513f;
      sa[22] = -1.9900314f;
      sa[23] = -0.6613934f;
      sa[24] = -0.5478882f;
      sa[25] = 1.9038187f;
      sa[26] = -0.30888745f;
      sa[27] = 1.2227429f;
      sa[28] = 1.203899f;
      sa[29] = -0.77784854f;
      sa[30] = 0.16731858f;
      sa[31] = 0.13960491f;
      sa[32] = 0.5012855f;
      sa[33] = 0.36629587f;
      sa[34] = -0.61676675f;
      sa[35] = 1.052909f;
      sa[36] = 0.6782931f;
      sa[37] = -1.3227541f;
      sa[38] = 0.575762f;
      sa[39] = -0.24886915f;
      sa[40] = 0.22551647f;
      sa[41] = -0.80706894f;
      sa[42] = 0.57252795f;
      sa[43] = -0.12826777f;
      sa[44] = 1.0147495f;
      sa[45] = -2.1037598f;
      sa[46] = -2.1229508f;
      sa[47] = 0.07697934f;
      sa[48] = 1.6026542f;
      sa[49] = -0.21633284f;
      sa[50] = -0.4547365f;
      sa[51] = 1.9362422f;
      sa[52] = -1.7346532f;
      sa[53] = 1.0063931f;
      sa[54] = 1.8450127f;
      sa[55] = 1.0942779f;
      sa[56] = -0.55951226f;
      sa[57] = -0.102737896f;
      sa[58] = 1.0224608f;
      sa[59] = 0.8436181f;
      sa[60] = -1.3641425f;
      sa[61] = 0.98386204f;
      sa[62] = -0.3767706f;
      sa[63] = -0.8662824f;
      sa[64] = 0.90383893f;
      sa[65] = -0.8879725f;
      sa[66] = -1.7359115f;
      sa[67] = -0.11770636f;
      sa[68] = 0.96707165f;
      sa[69] = -1.395913f;
      sa[70] = -1.7906251f;
      sa[71] = -0.07105969f;
      sa[72] = -1.2060614f;
      sa[73] = -1.3491307f;
      sa[74] = -1.1487347f;
      sa[75] = 1.1825509f;
      sa[76] = 1.9142168f;
      sa[77] = -0.68000156f;
      sa[78] = -1.3645625f;
      sa[79] = -0.4111071f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_05 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_05_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_05_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_05_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_Tanh_05_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


