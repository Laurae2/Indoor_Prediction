/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:51:46.863+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_08

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_08 > h2o_nn_16x16x6_Tanh_08.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_08.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_08", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_08 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_08_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_08_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_08_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_08_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_08_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_08_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_08_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_08_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_08_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_08_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_08_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_08_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_08.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_08_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.24528301886792453,0.12264150943396226,0.12264150943396226,0.1320754716981132,0.24528301886792453,0.1320754716981132};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_08() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(6690686581552617936L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_08_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_08_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_08_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_08_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_08_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_08_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_08_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_08_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_08_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_08_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_08_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_08_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_08_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_08_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_08_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_08_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.05996313718074275;
      sa[1] = -0.030731562497518503;
      sa[2] = 0.13220176085326332;
      sa[3] = -0.034485298360189584;
      sa[4] = -0.002323577372156343;
      sa[5] = 0.003230908098228051;
      sa[6] = 0.0504003549253139;
      sa[7] = -0.05338563509498508;
      sa[8] = -0.07480845905838046;
      sa[9] = -0.0057734963870710665;
      sa[10] = -0.016626282640902122;
      sa[11] = 0.0035794781796607035;
      sa[12] = 0.10705513970280695;
      sa[13] = -0.032073783171494105;
      sa[14] = -0.03996290005710964;
      sa[15] = -0.030635465254445774;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_08_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_08_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_08_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.05290971944709449;
      sa[1] = -0.006839449979581329;
      sa[2] = -0.05641626828244219;
      sa[3] = 0.061474903939853776;
      sa[4] = -0.02792013232135471;
      sa[5] = -0.06330630469200993;
      sa[6] = 0.04277249071111772;
      sa[7] = 0.010359500618640405;
      sa[8] = -0.008414059840310953;
      sa[9] = -0.08660165748979674;
      sa[10] = 0.07613515636551159;
      sa[11] = 0.18409085274167133;
      sa[12] = -0.03307629516965562;
      sa[13] = -0.017301444258168555;
      sa[14] = -0.06981396114587501;
      sa[15] = -0.09580112357455842;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_08_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_08_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_08_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.03601190255413073;
      sa[1] = -0.08866261350442425;
      sa[2] = -0.026365561472627145;
      sa[3] = 0.04933403676447965;
      sa[4] = 0.05600292716422196;
      sa[5] = -0.07677432945987529;
    }
  }
}
class h2o_nn_16x16x6_Tanh_08_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_08_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_08_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_08_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.0788427f;
      sa[1] = 0.26783264f;
      sa[2] = 0.14164682f;
      sa[3] = 0.17421767f;
      sa[4] = -0.16531885f;
      sa[5] = -0.20203777f;
      sa[6] = -0.03713847f;
      sa[7] = 0.33701926f;
      sa[8] = 0.13307321f;
      sa[9] = -0.11363593f;
      sa[10] = -0.15903755f;
      sa[11] = -0.2074104f;
      sa[12] = 0.07134544f;
      sa[13] = -0.3116327f;
      sa[14] = -0.20599179f;
      sa[15] = 0.014976945f;
      sa[16] = 0.11807768f;
      sa[17] = 0.21383114f;
      sa[18] = -0.23462632f;
      sa[19] = 0.029807096f;
      sa[20] = 0.25754547f;
      sa[21] = -0.31118733f;
      sa[22] = 0.27393556f;
      sa[23] = -0.14625631f;
      sa[24] = 0.26004127f;
      sa[25] = 0.20525414f;
      sa[26] = -0.29167205f;
      sa[27] = 0.44434568f;
      sa[28] = 0.24942492f;
      sa[29] = -0.2988671f;
      sa[30] = -0.1986105f;
      sa[31] = 0.1934261f;
      sa[32] = 0.19451618f;
      sa[33] = -0.276172f;
      sa[34] = 0.12435389f;
      sa[35] = -0.06357225f;
      sa[36] = 0.13824081f;
      sa[37] = 0.32244068f;
      sa[38] = -0.15902516f;
      sa[39] = 0.30627283f;
      sa[40] = 0.028990569f;
      sa[41] = -0.122101344f;
      sa[42] = -0.16449618f;
      sa[43] = 0.0011991097f;
      sa[44] = 0.2966512f;
      sa[45] = -0.26093283f;
      sa[46] = -0.033385452f;
      sa[47] = -0.11132741f;
      sa[48] = 0.21167268f;
      sa[49] = 0.22636549f;
      sa[50] = 0.18550047f;
      sa[51] = -0.3720999f;
      sa[52] = -0.07617858f;
      sa[53] = 0.21986794f;
      sa[54] = 0.25403783f;
      sa[55] = 7.8092555E-5f;
      sa[56] = -0.18445282f;
      sa[57] = -0.301325f;
      sa[58] = 0.30236533f;
      sa[59] = -0.23120016f;
      sa[60] = -0.3679133f;
      sa[61] = 0.12362772f;
      sa[62] = 0.15179956f;
      sa[63] = 0.06511125f;
      sa[64] = 0.124367155f;
      sa[65] = 0.12030078f;
      sa[66] = -0.017228166f;
      sa[67] = 0.115956716f;
      sa[68] = -0.18614274f;
      sa[69] = 0.03105352f;
      sa[70] = 0.050637078f;
      sa[71] = 0.4709346f;
      sa[72] = -0.21319672f;
      sa[73] = 0.20742208f;
      sa[74] = -0.110592835f;
      sa[75] = 0.06647482f;
      sa[76] = -0.232612f;
      sa[77] = -0.040179256f;
      sa[78] = -0.06612911f;
      sa[79] = 0.10783262f;
      sa[80] = -0.25255337f;
      sa[81] = -0.24201624f;
      sa[82] = -0.0097640045f;
      sa[83] = 0.043545555f;
      sa[84] = 0.032850694f;
      sa[85] = -0.13421354f;
      sa[86] = 0.21119273f;
      sa[87] = 0.28008988f;
      sa[88] = 0.24340038f;
      sa[89] = 0.03986891f;
      sa[90] = -0.18585992f;
      sa[91] = 0.4031658f;
      sa[92] = 0.13618705f;
      sa[93] = -0.23677634f;
      sa[94] = -0.19021489f;
      sa[95] = -0.26287624f;
      sa[96] = 0.20991851f;
      sa[97] = 0.06770226f;
      sa[98] = 0.1924461f;
      sa[99] = -0.17660734f;
      sa[100] = -0.014870153f;
      sa[101] = -0.18539606f;
      sa[102] = -0.23494476f;
      sa[103] = -0.09266402f;
      sa[104] = 0.035458915f;
      sa[105] = -0.15365161f;
      sa[106] = -0.34672967f;
      sa[107] = 0.021893013f;
      sa[108] = 0.19664457f;
      sa[109] = -0.3208722f;
      sa[110] = -0.218877f;
      sa[111] = 0.05413419f;
      sa[112] = 0.15025942f;
      sa[113] = 0.013345406f;
      sa[114] = -0.16564766f;
      sa[115] = -0.014085988f;
      sa[116] = -0.2725739f;
      sa[117] = 0.01300941f;
      sa[118] = -0.25380835f;
      sa[119] = -0.08011208f;
      sa[120] = 0.21884818f;
      sa[121] = 0.21881646f;
      sa[122] = 0.31417486f;
      sa[123] = 0.2932993f;
      sa[124] = 0.22759439f;
      sa[125] = 0.27801976f;
      sa[126] = -0.20797004f;
      sa[127] = -0.30233583f;
      sa[128] = 0.07964633f;
      sa[129] = 0.18939711f;
      sa[130] = -0.119907685f;
      sa[131] = 0.3846121f;
      sa[132] = 0.165411f;
      sa[133] = -0.30454522f;
      sa[134] = 0.14177588f;
      sa[135] = -0.2942264f;
      sa[136] = -0.30897495f;
      sa[137] = -0.029678307f;
      sa[138] = 0.10414261f;
      sa[139] = -0.09285629f;
      sa[140] = -0.05921366f;
      sa[141] = -0.096754946f;
      sa[142] = 0.12509304f;
      sa[143] = -0.34866434f;
      sa[144] = 0.30435306f;
      sa[145] = -0.24217325f;
      sa[146] = -0.29543242f;
      sa[147] = 0.20852481f;
      sa[148] = 0.17549576f;
      sa[149] = 0.15234035f;
      sa[150] = 0.31039467f;
      sa[151] = -0.29914087f;
      sa[152] = 0.03229763f;
      sa[153] = 0.26574335f;
      sa[154] = 0.23378085f;
      sa[155] = -0.15354966f;
      sa[156] = 0.13791397f;
      sa[157] = -0.24429226f;
      sa[158] = 0.095396064f;
      sa[159] = 0.066535585f;
      sa[160] = 0.0064309496f;
      sa[161] = 0.16320398f;
      sa[162] = -0.093221195f;
      sa[163] = -0.10619624f;
      sa[164] = 0.26693934f;
      sa[165] = -0.023246825f;
      sa[166] = -0.05531673f;
      sa[167] = -0.064770445f;
      sa[168] = 0.18244605f;
      sa[169] = 0.3221128f;
      sa[170] = 0.070850365f;
      sa[171] = -0.15118507f;
      sa[172] = -0.082757816f;
      sa[173] = -0.17348549f;
      sa[174] = -0.06003222f;
      sa[175] = -0.29226848f;
      sa[176] = -0.02069148f;
      sa[177] = -0.017678902f;
      sa[178] = -0.06583594f;
      sa[179] = 0.10407346f;
      sa[180] = -0.050848857f;
      sa[181] = -0.24614362f;
      sa[182] = -0.12391473f;
      sa[183] = 0.11945808f;
      sa[184] = 0.299285f;
      sa[185] = 0.20127271f;
      sa[186] = -0.33263472f;
      sa[187] = 0.056155674f;
      sa[188] = -0.007495815f;
      sa[189] = 0.22192071f;
      sa[190] = 0.036946118f;
      sa[191] = 0.0011332138f;
      sa[192] = -0.12149449f;
      sa[193] = 0.2763459f;
      sa[194] = 0.10612593f;
      sa[195] = 0.30653802f;
      sa[196] = 0.35872716f;
      sa[197] = -0.04291993f;
      sa[198] = 0.09374676f;
      sa[199] = -0.13454248f;
      sa[200] = 0.018635485f;
      sa[201] = -0.32796016f;
      sa[202] = 0.12887982f;
      sa[203] = -0.083271705f;
      sa[204] = -0.17632462f;
      sa[205] = 0.23720275f;
      sa[206] = 0.23955147f;
      sa[207] = 0.10633887f;
      sa[208] = -0.28037944f;
      sa[209] = -0.0889233f;
      sa[210] = -0.29344606f;
      sa[211] = -0.2775493f;
      sa[212] = 0.25687456f;
      sa[213] = -0.29225162f;
      sa[214] = -0.14398302f;
      sa[215] = -0.028796399f;
      sa[216] = 0.11029678f;
      sa[217] = 0.25625712f;
      sa[218] = -0.13822642f;
      sa[219] = 0.19755782f;
      sa[220] = -0.23662952f;
      sa[221] = 0.08093256f;
      sa[222] = 0.2559632f;
      sa[223] = 0.08311023f;
      sa[224] = 0.12800288f;
      sa[225] = 0.32789874f;
      sa[226] = -0.22416653f;
      sa[227] = 0.46145996f;
      sa[228] = 0.15494868f;
      sa[229] = 0.13148145f;
      sa[230] = 0.31457153f;
      sa[231] = -0.22990055f;
      sa[232] = -0.21176696f;
      sa[233] = 0.0893231f;
      sa[234] = 0.13565023f;
      sa[235] = -0.33193946f;
      sa[236] = -0.03356427f;
      sa[237] = -0.2528478f;
      sa[238] = -0.24274535f;
      sa[239] = 0.13304512f;
      sa[240] = 0.04824402f;
      sa[241] = -0.21656433f;
      sa[242] = -0.1003855f;
      sa[243] = -0.35716978f;
      sa[244] = -0.2074375f;
      sa[245] = -0.12969828f;
      sa[246] = -0.26114643f;
      sa[247] = -0.020494126f;
      sa[248] = 0.2665132f;
      sa[249] = 0.28835f;
      sa[250] = -0.29960224f;
      sa[251] = -0.2313804f;
      sa[252] = -0.22383982f;
      sa[253] = -0.27501637f;
      sa[254] = -0.31937245f;
      sa[255] = 0.08551523f;
      sa[256] = -0.20308241f;
      sa[257] = 0.24552526f;
      sa[258] = -0.29128098f;
      sa[259] = -0.14569066f;
      sa[260] = -0.15413082f;
      sa[261] = -0.014118616f;
      sa[262] = -0.15955757f;
      sa[263] = 0.37793952f;
      sa[264] = -0.21223636f;
      sa[265] = -2.8153585E-4f;
      sa[266] = -0.33254436f;
      sa[267] = -0.29867277f;
      sa[268] = 0.10603477f;
      sa[269] = -0.19039783f;
      sa[270] = 0.08591119f;
      sa[271] = 0.17984909f;
      sa[272] = -0.09405011f;
      sa[273] = -0.112236835f;
      sa[274] = 0.13509443f;
      sa[275] = 0.0069198296f;
      sa[276] = 0.036819384f;
      sa[277] = -0.28908697f;
      sa[278] = -0.08248406f;
      sa[279] = 0.18765394f;
      sa[280] = -0.21802558f;
      sa[281] = 0.29434717f;
      sa[282] = -0.17084013f;
      sa[283] = -0.070540704f;
      sa[284] = -0.05678966f;
      sa[285] = -0.24857679f;
      sa[286] = 0.4729243f;
      sa[287] = 0.25591063f;
      sa[288] = -0.24772495f;
      sa[289] = -0.20288154f;
      sa[290] = -0.120554164f;
      sa[291] = 0.21226645f;
      sa[292] = 0.13118015f;
      sa[293] = -0.11521565f;
      sa[294] = 0.08632945f;
      sa[295] = 0.11360714f;
      sa[296] = 0.20238152f;
      sa[297] = 0.110944584f;
      sa[298] = -0.07248468f;
      sa[299] = -0.16929273f;
      sa[300] = -0.041694943f;
      sa[301] = -0.12042217f;
      sa[302] = 0.15512961f;
      sa[303] = 0.00920011f;
      sa[304] = -0.21422398f;
      sa[305] = -0.06444719f;
      sa[306] = 0.19863205f;
      sa[307] = -0.2693134f;
      sa[308] = 0.058579918f;
      sa[309] = 0.13355386f;
      sa[310] = 0.29897067f;
      sa[311] = 0.27823097f;
      sa[312] = -0.26387924f;
      sa[313] = -0.21441416f;
      sa[314] = -0.12888403f;
      sa[315] = 0.027288977f;
      sa[316] = -0.057549257f;
      sa[317] = -0.122994155f;
      sa[318] = 0.07407074f;
      sa[319] = 0.2855987f;
      sa[320] = 0.11397918f;
      sa[321] = 0.20135683f;
      sa[322] = 0.17591722f;
      sa[323] = -0.26013017f;
      sa[324] = 0.02158836f;
      sa[325] = 0.2326381f;
      sa[326] = -0.33349332f;
      sa[327] = 0.0388224f;
      sa[328] = -0.059355542f;
      sa[329] = 0.23225763f;
      sa[330] = -0.20018698f;
      sa[331] = -0.0013547839f;
      sa[332] = -0.28691363f;
      sa[333] = 0.13286075f;
      sa[334] = -0.12484323f;
      sa[335] = 0.18996903f;
      sa[336] = -0.19682808f;
      sa[337] = -0.21157148f;
      sa[338] = 0.27581826f;
      sa[339] = -0.27058944f;
      sa[340] = -0.44536963f;
      sa[341] = -0.3544734f;
      sa[342] = 0.27467963f;
      sa[343] = -0.15726463f;
      sa[344] = -0.17761356f;
      sa[345] = 0.24241847f;
      sa[346] = 0.2441154f;
      sa[347] = -0.15273188f;
      sa[348] = 0.26408324f;
      sa[349] = -0.3356014f;
      sa[350] = -0.22471221f;
      sa[351] = 0.18249828f;
      sa[352] = 0.20066409f;
      sa[353] = -0.046649482f;
      sa[354] = 0.06439167f;
      sa[355] = 0.10648812f;
      sa[356] = -0.17086723f;
      sa[357] = 0.2087122f;
      sa[358] = -0.1869181f;
      sa[359] = 0.1557959f;
      sa[360] = 0.094155215f;
      sa[361] = -0.11609575f;
      sa[362] = -0.11744741f;
      sa[363] = 0.21804552f;
      sa[364] = -0.15697338f;
      sa[365] = -0.28799438f;
      sa[366] = -0.017126547f;
      sa[367] = -0.35275897f;
      sa[368] = -0.19996345f;
      sa[369] = 0.241093f;
      sa[370] = -0.23704377f;
      sa[371] = 0.21285896f;
      sa[372] = -0.0049828268f;
      sa[373] = 0.27071807f;
      sa[374] = -0.13956395f;
      sa[375] = -0.34644768f;
      sa[376] = -0.39830098f;
      sa[377] = -0.30846474f;
      sa[378] = 0.42089954f;
      sa[379] = 0.088237226f;
      sa[380] = -0.119754285f;
      sa[381] = -0.1138182f;
      sa[382] = -0.034132015f;
      sa[383] = -0.104994826f;
      sa[384] = -0.13228548f;
      sa[385] = 0.11394345f;
      sa[386] = -0.20938902f;
      sa[387] = -0.38899314f;
      sa[388] = 0.087104596f;
      sa[389] = -0.035218496f;
      sa[390] = -0.061738763f;
      sa[391] = -0.13366064f;
      sa[392] = 0.31390196f;
      sa[393] = 0.29818976f;
      sa[394] = -0.14485492f;
      sa[395] = 0.26943856f;
      sa[396] = 0.3091852f;
      sa[397] = -0.18439095f;
      sa[398] = 0.18612234f;
      sa[399] = -0.046335664f;
      sa[400] = 0.19182996f;
      sa[401] = 0.2941597f;
      sa[402] = -0.14615326f;
      sa[403] = 0.07013774f;
      sa[404] = 0.27525917f;
      sa[405] = -0.2166025f;
      sa[406] = -0.02741002f;
      sa[407] = 0.26031005f;
      sa[408] = -0.21496075f;
      sa[409] = -0.23282674f;
      sa[410] = -0.109969914f;
      sa[411] = 0.20104986f;
      sa[412] = -0.013630624f;
      sa[413] = 0.19828553f;
      sa[414] = 0.0483438f;
      sa[415] = 0.52635837f;
      sa[416] = -0.18892545f;
      sa[417] = 0.02406184f;
      sa[418] = -0.019099869f;
      sa[419] = 0.2916465f;
      sa[420] = 0.2631296f;
      sa[421] = 0.333815f;
      sa[422] = 0.20834018f;
      sa[423] = -0.066921465f;
      sa[424] = 0.13842642f;
      sa[425] = -0.062075224f;
      sa[426] = -0.28501558f;
      sa[427] = 0.22320913f;
      sa[428] = -0.04612483f;
      sa[429] = -0.12560035f;
      sa[430] = 0.123239964f;
      sa[431] = -0.048292663f;
      sa[432] = -0.06396204f;
      sa[433] = 0.119212024f;
      sa[434] = 0.31310394f;
      sa[435] = -0.030863456f;
      sa[436] = -0.2780638f;
      sa[437] = -0.2659264f;
      sa[438] = 0.013120746f;
      sa[439] = -0.0141610615f;
      sa[440] = 0.32071617f;
      sa[441] = -0.3344868f;
      sa[442] = 0.10888338f;
      sa[443] = 0.07289307f;
      sa[444] = -0.20480269f;
      sa[445] = 0.0961466f;
      sa[446] = 0.27683595f;
      sa[447] = 0.0731899f;
      sa[448] = 0.15198827f;
      sa[449] = 0.2525409f;
      sa[450] = -0.075879f;
      sa[451] = 0.19318192f;
      sa[452] = 0.23056239f;
      sa[453] = -0.028063178f;
      sa[454] = -0.15270814f;
      sa[455] = -0.0071198205f;
      sa[456] = 6.996522E-4f;
      sa[457] = 0.115504585f;
      sa[458] = -0.23978288f;
      sa[459] = 0.2165805f;
      sa[460] = 0.27237725f;
      sa[461] = 0.32622948f;
      sa[462] = 0.072069146f;
      sa[463] = 0.23717725f;
      sa[464] = -0.30467144f;
      sa[465] = 0.19451119f;
      sa[466] = -0.025458654f;
      sa[467] = 0.16635035f;
      sa[468] = 0.10151717f;
      sa[469] = 0.28696275f;
      sa[470] = 0.19001769f;
      sa[471] = 0.1254586f;
      sa[472] = 0.013781429f;
      sa[473] = -0.14110883f;
      sa[474] = -0.01875564f;
      sa[475] = 0.13004442f;
      sa[476] = 0.259801f;
      sa[477] = -0.19381747f;
      sa[478] = 0.11830614f;
      sa[479] = -0.28729478f;
      sa[480] = -0.34945607f;
      sa[481] = -0.25848076f;
      sa[482] = -0.30499774f;
      sa[483] = 0.20099926f;
      sa[484] = 0.21542843f;
      sa[485] = 0.14905635f;
      sa[486] = -0.037862603f;
      sa[487] = -0.12525459f;
      sa[488] = -0.22333105f;
      sa[489] = 0.09365718f;
      sa[490] = -0.0044312775f;
      sa[491] = -0.20834285f;
      sa[492] = 0.20152496f;
      sa[493] = 0.2932206f;
      sa[494] = -0.25851902f;
      sa[495] = 0.29118016f;
      sa[496] = -0.019396182f;
      sa[497] = 0.060984164f;
      sa[498] = 0.16668601f;
      sa[499] = 0.16165045f;
      sa[500] = -0.021526422f;
      sa[501] = 0.12090926f;
      sa[502] = 0.2784107f;
      sa[503] = 0.082479335f;
      sa[504] = -0.1318696f;
      sa[505] = -0.19640392f;
      sa[506] = 0.18226878f;
      sa[507] = -0.21403027f;
      sa[508] = 0.13076587f;
      sa[509] = 0.29985544f;
      sa[510] = 0.19508216f;
      sa[511] = 0.0680594f;
      sa[512] = 0.10606772f;
      sa[513] = 0.012706872f;
      sa[514] = 0.35007176f;
      sa[515] = -0.009259021f;
      sa[516] = 0.01721645f;
      sa[517] = 0.13370958f;
      sa[518] = 0.1446632f;
      sa[519] = -0.029808572f;
      sa[520] = 0.27078947f;
      sa[521] = 0.24023475f;
      sa[522] = 0.07772365f;
      sa[523] = 0.14571884f;
      sa[524] = 0.19343767f;
      sa[525] = 0.17911236f;
      sa[526] = -0.029944582f;
      sa[527] = -0.12571034f;
      sa[528] = -0.029665625f;
      sa[529] = 0.18112014f;
      sa[530] = -0.19749412f;
      sa[531] = 0.026852204f;
      sa[532] = 0.1606862f;
      sa[533] = 0.14555791f;
      sa[534] = 0.17066927f;
      sa[535] = -0.042069644f;
      sa[536] = 0.085268766f;
      sa[537] = -0.07239465f;
      sa[538] = 0.13585459f;
      sa[539] = 0.24972193f;
      sa[540] = -0.25838798f;
      sa[541] = -0.26942018f;
      sa[542] = -0.10109304f;
      sa[543] = -0.3760529f;
      sa[544] = 0.15814026f;
      sa[545] = 0.06650038f;
      sa[546] = 0.07118405f;
      sa[547] = 0.21541083f;
      sa[548] = 0.059878003f;
      sa[549] = 0.17794816f;
      sa[550] = 0.014219906f;
      sa[551] = -0.14311871f;
      sa[552] = 0.020295532f;
      sa[553] = -0.107726984f;
      sa[554] = -0.19923586f;
      sa[555] = -0.1979134f;
      sa[556] = -0.2872976f;
      sa[557] = -0.31351042f;
      sa[558] = -0.13027053f;
      sa[559] = 0.13345283f;
      sa[560] = -0.3362241f;
      sa[561] = -0.089427136f;
      sa[562] = 0.21907488f;
      sa[563] = -0.02526071f;
      sa[564] = 0.28407133f;
      sa[565] = 0.061352756f;
      sa[566] = 0.32098845f;
      sa[567] = 0.042394713f;
      sa[568] = -0.10853391f;
      sa[569] = 0.011879224f;
      sa[570] = -0.06473563f;
      sa[571] = -0.096716404f;
      sa[572] = -0.15658966f;
      sa[573] = 0.097362734f;
      sa[574] = 0.32727098f;
      sa[575] = -0.16716893f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_08_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_08_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_08_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.40370667f;
      sa[1] = 0.024795413f;
      sa[2] = -0.16912901f;
      sa[3] = -0.22048657f;
      sa[4] = 0.07994887f;
      sa[5] = 0.04132752f;
      sa[6] = 0.24501534f;
      sa[7] = -0.13724689f;
      sa[8] = -0.31897828f;
      sa[9] = 0.1343546f;
      sa[10] = -0.111945614f;
      sa[11] = 0.1353944f;
      sa[12] = 0.15885358f;
      sa[13] = 0.07928779f;
      sa[14] = -0.24964201f;
      sa[15] = 0.31362498f;
      sa[16] = 0.39476573f;
      sa[17] = -0.100599796f;
      sa[18] = 0.013728813f;
      sa[19] = -0.13058497f;
      sa[20] = 0.34113085f;
      sa[21] = -0.07019609f;
      sa[22] = -0.23985754f;
      sa[23] = 0.1629293f;
      sa[24] = -0.4137413f;
      sa[25] = 0.1473517f;
      sa[26] = -0.07373328f;
      sa[27] = 0.4283981f;
      sa[28] = -0.2933044f;
      sa[29] = -0.121353656f;
      sa[30] = 0.09347726f;
      sa[31] = -0.2346868f;
      sa[32] = -0.29308563f;
      sa[33] = -0.453151f;
      sa[34] = 0.05594008f;
      sa[35] = 0.2566428f;
      sa[36] = -0.0042879824f;
      sa[37] = -0.041740976f;
      sa[38] = 0.11957934f;
      sa[39] = 0.056039702f;
      sa[40] = -0.288573f;
      sa[41] = -0.35436168f;
      sa[42] = -0.3594617f;
      sa[43] = -0.40275562f;
      sa[44] = 0.22523195f;
      sa[45] = -0.28367138f;
      sa[46] = 0.3584315f;
      sa[47] = 0.3034817f;
      sa[48] = -0.3423074f;
      sa[49] = -0.3108987f;
      sa[50] = 0.15912859f;
      sa[51] = -0.06761585f;
      sa[52] = 0.16110379f;
      sa[53] = 0.20239899f;
      sa[54] = -0.07770044f;
      sa[55] = 0.32008556f;
      sa[56] = -0.3526483f;
      sa[57] = -0.31463024f;
      sa[58] = 0.049158055f;
      sa[59] = -0.026238723f;
      sa[60] = 0.35001504f;
      sa[61] = -0.24599631f;
      sa[62] = -0.08081771f;
      sa[63] = 0.18913664f;
      sa[64] = 0.34632993f;
      sa[65] = -0.1532393f;
      sa[66] = 0.1375769f;
      sa[67] = 0.37964594f;
      sa[68] = 0.17616756f;
      sa[69] = -0.25469336f;
      sa[70] = -0.41345036f;
      sa[71] = -0.06777667f;
      sa[72] = -0.2822864f;
      sa[73] = 0.34457332f;
      sa[74] = 0.39939532f;
      sa[75] = -0.011203698f;
      sa[76] = 0.15001166f;
      sa[77] = 0.09113077f;
      sa[78] = -0.34029007f;
      sa[79] = 0.31348506f;
      sa[80] = -0.103803776f;
      sa[81] = 0.0077353176f;
      sa[82] = 0.29473364f;
      sa[83] = -0.16633794f;
      sa[84] = -0.3724045f;
      sa[85] = -0.33060494f;
      sa[86] = 0.010325816f;
      sa[87] = 0.30338284f;
      sa[88] = -0.5126053f;
      sa[89] = -0.22428022f;
      sa[90] = -0.4043228f;
      sa[91] = 0.3538538f;
      sa[92] = 0.089261055f;
      sa[93] = 0.20477185f;
      sa[94] = -0.33652368f;
      sa[95] = -0.074643485f;
      sa[96] = -0.28216186f;
      sa[97] = 0.045724623f;
      sa[98] = 0.011013651f;
      sa[99] = 0.08309787f;
      sa[100] = -0.31748116f;
      sa[101] = -0.15102409f;
      sa[102] = 0.34749714f;
      sa[103] = -0.027104776f;
      sa[104] = -0.18155643f;
      sa[105] = -0.1621448f;
      sa[106] = 0.36253163f;
      sa[107] = 0.33559638f;
      sa[108] = 0.29190743f;
      sa[109] = 0.047533497f;
      sa[110] = 0.21095562f;
      sa[111] = -0.22400098f;
      sa[112] = -0.17374316f;
      sa[113] = -0.0054183817f;
      sa[114] = 0.1331749f;
      sa[115] = -0.0979462f;
      sa[116] = 0.26756117f;
      sa[117] = 0.032251246f;
      sa[118] = -0.45626175f;
      sa[119] = -0.13875303f;
      sa[120] = -0.15229362f;
      sa[121] = 0.20870385f;
      sa[122] = -0.05137869f;
      sa[123] = 0.111676216f;
      sa[124] = -0.22524206f;
      sa[125] = 0.22824605f;
      sa[126] = -0.14540996f;
      sa[127] = 0.19661008f;
      sa[128] = -0.26834768f;
      sa[129] = 0.09009755f;
      sa[130] = 0.005944051f;
      sa[131] = 0.2651299f;
      sa[132] = 0.017486552f;
      sa[133] = 0.13699512f;
      sa[134] = 0.26246327f;
      sa[135] = -0.34697467f;
      sa[136] = 0.14914604f;
      sa[137] = -0.12831151f;
      sa[138] = 0.045424394f;
      sa[139] = 0.30045125f;
      sa[140] = -0.22329347f;
      sa[141] = -0.07468286f;
      sa[142] = -0.033635672f;
      sa[143] = -0.22859497f;
      sa[144] = 0.30573475f;
      sa[145] = -0.2914148f;
      sa[146] = 0.0931165f;
      sa[147] = -0.018404458f;
      sa[148] = -0.24025601f;
      sa[149] = 0.29606345f;
      sa[150] = -0.21340871f;
      sa[151] = -0.5427774f;
      sa[152] = 0.40018165f;
      sa[153] = -0.16639853f;
      sa[154] = 0.33021992f;
      sa[155] = -0.5056816f;
      sa[156] = -0.33734703f;
      sa[157] = -0.23666255f;
      sa[158] = -0.12350549f;
      sa[159] = -0.23457286f;
      sa[160] = 0.39983243f;
      sa[161] = -0.38356784f;
      sa[162] = 0.50560236f;
      sa[163] = -0.19600761f;
      sa[164] = 0.12563339f;
      sa[165] = -0.17913216f;
      sa[166] = 0.383694f;
      sa[167] = -0.44290975f;
      sa[168] = 0.23796734f;
      sa[169] = -0.40859365f;
      sa[170] = 0.32472298f;
      sa[171] = 0.22803792f;
      sa[172] = 0.3928424f;
      sa[173] = 0.35068217f;
      sa[174] = -0.05114031f;
      sa[175] = 0.0019790768f;
      sa[176] = -0.19807126f;
      sa[177] = 0.07945051f;
      sa[178] = -0.2973374f;
      sa[179] = 0.04327477f;
      sa[180] = -0.4750783f;
      sa[181] = -0.22946844f;
      sa[182] = 0.0060894317f;
      sa[183] = -0.16261816f;
      sa[184] = 0.44441706f;
      sa[185] = 0.29105476f;
      sa[186] = -0.150945f;
      sa[187] = -0.25498363f;
      sa[188] = -0.2787589f;
      sa[189] = -0.28190705f;
      sa[190] = -0.35560325f;
      sa[191] = -0.21612121f;
      sa[192] = -0.09889025f;
      sa[193] = 0.11785039f;
      sa[194] = -0.31256577f;
      sa[195] = -0.25180367f;
      sa[196] = 0.124040164f;
      sa[197] = -0.18577786f;
      sa[198] = 0.036079857f;
      sa[199] = 0.4287059f;
      sa[200] = 0.073636904f;
      sa[201] = 0.2759124f;
      sa[202] = 0.21211806f;
      sa[203] = -0.40246394f;
      sa[204] = 0.038333036f;
      sa[205] = 0.31924698f;
      sa[206] = -0.1782206f;
      sa[207] = 0.1726673f;
      sa[208] = -0.03991692f;
      sa[209] = 0.18512735f;
      sa[210] = -0.087992325f;
      sa[211] = -0.28867415f;
      sa[212] = -0.31945843f;
      sa[213] = 0.06754407f;
      sa[214] = -0.48652098f;
      sa[215] = 0.018282253f;
      sa[216] = 0.055327836f;
      sa[217] = 0.23951639f;
      sa[218] = -0.08663511f;
      sa[219] = 0.094513595f;
      sa[220] = 0.24348189f;
      sa[221] = 0.12061803f;
      sa[222] = -0.13391109f;
      sa[223] = -0.23062794f;
      sa[224] = 0.3609574f;
      sa[225] = 0.05884565f;
      sa[226] = -0.043264214f;
      sa[227] = 0.042762257f;
      sa[228] = -0.05111823f;
      sa[229] = -0.1742761f;
      sa[230] = -0.26192448f;
      sa[231] = -0.1589571f;
      sa[232] = 0.4129893f;
      sa[233] = -0.21465799f;
      sa[234] = -0.21147832f;
      sa[235] = -0.03568467f;
      sa[236] = -0.26567093f;
      sa[237] = 0.5206839f;
      sa[238] = 0.19692536f;
      sa[239] = -0.11594625f;
      sa[240] = -0.13972306f;
      sa[241] = -0.4106923f;
      sa[242] = -0.28001785f;
      sa[243] = 0.3011121f;
      sa[244] = 0.26296833f;
      sa[245] = 0.33482224f;
      sa[246] = 0.23502985f;
      sa[247] = -0.40995875f;
      sa[248] = -0.15304865f;
      sa[249] = 0.03498623f;
      sa[250] = 0.24531673f;
      sa[251] = 0.39428267f;
      sa[252] = 0.25707072f;
      sa[253] = -0.25535008f;
      sa[254] = 0.3621828f;
      sa[255] = 0.13114402f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_08_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_Tanh_08_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_08_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.15494825f;
      sa[1] = -1.4543358f;
      sa[2] = -1.5167547f;
      sa[3] = 1.3321233f;
      sa[4] = 0.47133705f;
      sa[5] = -0.13876729f;
      sa[6] = -1.6135798f;
      sa[7] = 1.4164741f;
      sa[8] = 1.7464738f;
      sa[9] = 0.27637678f;
      sa[10] = 1.6200488f;
      sa[11] = 1.4431533f;
      sa[12] = 1.8305542f;
      sa[13] = -0.57646656f;
      sa[14] = -1.8933415f;
      sa[15] = -0.6724372f;
      sa[16] = 0.7876241f;
      sa[17] = -0.8306073f;
      sa[18] = -1.4948612f;
      sa[19] = -0.87776566f;
      sa[20] = -1.9165885f;
      sa[21] = 0.28806144f;
      sa[22] = -1.9353923f;
      sa[23] = -0.69767284f;
      sa[24] = -0.51647043f;
      sa[25] = 1.8529114f;
      sa[26] = -0.2235228f;
      sa[27] = 1.2014183f;
      sa[28] = 1.1949043f;
      sa[29] = -0.7680216f;
      sa[30] = 0.10584204f;
      sa[31] = 0.11848866f;
      sa[32] = 0.5624404f;
      sa[33] = 0.21396981f;
      sa[34] = -0.63757277f;
      sa[35] = 1.0091136f;
      sa[36] = 0.52889633f;
      sa[37] = -1.3258051f;
      sa[38] = 0.6344097f;
      sa[39] = -0.2013826f;
      sa[40] = 0.27013004f;
      sa[41] = -0.6626182f;
      sa[42] = 0.63517845f;
      sa[43] = -0.0059486623f;
      sa[44] = 1.0282922f;
      sa[45] = -1.9625901f;
      sa[46] = -2.1936853f;
      sa[47] = 0.11857633f;
      sa[48] = 1.5874995f;
      sa[49] = -0.17827186f;
      sa[50] = -0.43373892f;
      sa[51] = 1.7860887f;
      sa[52] = -1.6226563f;
      sa[53] = 0.9860442f;
      sa[54] = 1.7203567f;
      sa[55] = 1.0846176f;
      sa[56] = -0.59158814f;
      sa[57] = -0.102328114f;
      sa[58] = 1.0338846f;
      sa[59] = 0.78598326f;
      sa[60] = -1.3961542f;
      sa[61] = 0.91712826f;
      sa[62] = -0.34403053f;
      sa[63] = -0.82283235f;
      sa[64] = 0.8116686f;
      sa[65] = -0.8684423f;
      sa[66] = -1.7440383f;
      sa[67] = -0.1258612f;
      sa[68] = 0.82716364f;
      sa[69] = -1.3298956f;
      sa[70] = -1.8280954f;
      sa[71] = 0.044696648f;
      sa[72] = -1.0226511f;
      sa[73] = -1.2612047f;
      sa[74] = -1.1913623f;
      sa[75] = 1.1911229f;
      sa[76] = 1.9070606f;
      sa[77] = -0.407501f;
      sa[78] = -1.3230932f;
      sa[79] = -0.44941056f;
      sa[80] = 0.68225175f;
      sa[81] = -1.5852476f;
      sa[82] = -0.19743532f;
      sa[83] = -1.3308012f;
      sa[84] = 1.5835057f;
      sa[85] = 1.0519779f;
      sa[86] = -1.8864882f;
      sa[87] = 1.0732015f;
      sa[88] = -1.5781425f;
      sa[89] = -0.9393256f;
      sa[90] = 0.2992232f;
      sa[91] = 0.21059352f;
      sa[92] = 1.4310297f;
      sa[93] = 1.9060806f;
      sa[94] = 1.6031562f;
      sa[95] = 0.6940923f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_08 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_08_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_08_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_08_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_Tanh_08_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_08_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


