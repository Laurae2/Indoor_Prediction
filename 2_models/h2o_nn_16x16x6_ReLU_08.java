/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:51:45.255+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_08

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_08 > h2o_nn_16x16x6_ReLU_08.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_08.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_08", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_08 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_08_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_08_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_08_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_08_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_08_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_08_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_08_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_08_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_08_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_08_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_08_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_08_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_08.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_08_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.24528301886792453,0.12264150943396226,0.12264150943396226,0.1320754716981132,0.24528301886792453,0.1320754716981132};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_08() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-4402929692606714880L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_08_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_08_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_08_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_08_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_08_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_08_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_08_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_08_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_08_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_08_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_08_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.6443634423657777;
      sa[1] = 0.6083236819379245;
      sa[2] = 0.6226055355233151;
      sa[3] = 0.35670416783164416;
      sa[4] = 0.473020320528389;
      sa[5] = 0.5448108301155465;
      sa[6] = 0.9463033274641056;
      sa[7] = 0.5720940165340365;
      sa[8] = 0.5782402148750484;
      sa[9] = 0.5006382197240065;
      sa[10] = 0.5646706706009563;
      sa[11] = 0.44051408013862287;
      sa[12] = 0.2832220594312803;
      sa[13] = 0.37567865523375144;
      sa[14] = 0.585247863996888;
      sa[15] = 0.5658216701783048;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_08_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_08_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.0984988761846897;
      sa[1] = 1.0507298870550656;
      sa[2] = 0.8968492408121068;
      sa[3] = 1.0190203998768734;
      sa[4] = 0.9447906992860173;
      sa[5] = 0.9855333460241893;
      sa[6] = 0.9760272445397603;
      sa[7] = 0.8481096352557543;
      sa[8] = 0.8803675380213181;
      sa[9] = 1.0228044573207;
      sa[10] = 0.9253261914277211;
      sa[11] = 1.1217830554050978;
      sa[12] = 1.0207533057265967;
      sa[13] = 0.8340078234614076;
      sa[14] = 0.9918673440275766;
      sa[15] = 0.9636723734606142;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_08_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_08_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.08664416542355556;
      sa[1] = 0.004955242996413596;
      sa[2] = -0.04383074197906496;
      sa[3] = -0.0038568032488892874;
      sa[4] = 0.08800654939412861;
      sa[5] = -0.05810835584424754;
    }
  }
}
class h2o_nn_16x16x6_ReLU_08_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_08_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_08_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.13069087f;
      sa[1] = 0.16445398f;
      sa[2] = 0.029999807f;
      sa[3] = 0.047414206f;
      sa[4] = -0.0677122f;
      sa[5] = -0.12330182f;
      sa[6] = 0.05187773f;
      sa[7] = 0.43521807f;
      sa[8] = 0.13503754f;
      sa[9] = -0.12200303f;
      sa[10] = -0.20410043f;
      sa[11] = -0.26190487f;
      sa[12] = 0.08890532f;
      sa[13] = -0.27999526f;
      sa[14] = -0.16752781f;
      sa[15] = 0.09394261f;
      sa[16] = 0.052177228f;
      sa[17] = 0.22704864f;
      sa[18] = -0.23115392f;
      sa[19] = 0.036746558f;
      sa[20] = 0.30309996f;
      sa[21] = -0.22440828f;
      sa[22] = 0.3443659f;
      sa[23] = -0.07370634f;
      sa[24] = 0.19413126f;
      sa[25] = 0.16013844f;
      sa[26] = -0.2635692f;
      sa[27] = 0.50031936f;
      sa[28] = 0.2845556f;
      sa[29] = -0.22806643f;
      sa[30] = -0.14594243f;
      sa[31] = 0.27929002f;
      sa[32] = 0.13869877f;
      sa[33] = -0.26447564f;
      sa[34] = 0.20382263f;
      sa[35] = -0.035431214f;
      sa[36] = 0.27143663f;
      sa[37] = 0.28169647f;
      sa[38] = -0.1974905f;
      sa[39] = 0.24967586f;
      sa[40] = 0.09540075f;
      sa[41] = -0.0754471f;
      sa[42] = -0.11478212f;
      sa[43] = 0.053123143f;
      sa[44] = 0.3892612f;
      sa[45] = -0.2785116f;
      sa[46] = -0.05075406f;
      sa[47] = -0.10757374f;
      sa[48] = 0.22385576f;
      sa[49] = 0.24248305f;
      sa[50] = 0.21417063f;
      sa[51] = -0.33873343f;
      sa[52] = -0.123776846f;
      sa[53] = 0.17931263f;
      sa[54] = 0.32741684f;
      sa[55] = -0.21352348f;
      sa[56] = -0.13990484f;
      sa[57] = -0.23251206f;
      sa[58] = 0.34376746f;
      sa[59] = -0.20378341f;
      sa[60] = -0.4251354f;
      sa[61] = 0.11488082f;
      sa[62] = 0.23512301f;
      sa[63] = 0.08142092f;
      sa[64] = 0.16233219f;
      sa[65] = 0.19268218f;
      sa[66] = 0.01727515f;
      sa[67] = 0.20110959f;
      sa[68] = -0.20201921f;
      sa[69] = -0.026859399f;
      sa[70] = 0.10293962f;
      sa[71] = 0.46681073f;
      sa[72] = -0.303381f;
      sa[73] = 0.21886304f;
      sa[74] = -0.12776813f;
      sa[75] = 0.014440172f;
      sa[76] = -0.25661144f;
      sa[77] = -0.048300676f;
      sa[78] = -0.07070787f;
      sa[79] = 0.037636768f;
      sa[80] = -0.30089098f;
      sa[81] = -0.24479757f;
      sa[82] = -0.039629385f;
      sa[83] = 0.110842206f;
      sa[84] = 0.07261026f;
      sa[85] = -0.1042548f;
      sa[86] = 0.2370789f;
      sa[87] = 0.22517855f;
      sa[88] = 0.23705038f;
      sa[89] = 0.0537663f;
      sa[90] = -0.16765727f;
      sa[91] = 0.41084957f;
      sa[92] = 0.14242165f;
      sa[93] = -0.2673468f;
      sa[94] = -0.19048004f;
      sa[95] = -0.30048543f;
      sa[96] = 0.24915974f;
      sa[97] = 0.04272223f;
      sa[98] = 0.18816784f;
      sa[99] = -0.30436546f;
      sa[100] = -0.024579389f;
      sa[101] = -0.22552542f;
      sa[102] = -0.24701549f;
      sa[103] = -0.18263349f;
      sa[104] = 0.009979266f;
      sa[105] = -0.18030003f;
      sa[106] = -0.27715838f;
      sa[107] = 0.11869487f;
      sa[108] = 0.22406347f;
      sa[109] = -0.30863604f;
      sa[110] = -0.22244145f;
      sa[111] = -0.077439465f;
      sa[112] = 0.14468919f;
      sa[113] = -0.031417403f;
      sa[114] = -0.19893928f;
      sa[115] = 0.00413699f;
      sa[116] = -0.2881842f;
      sa[117] = 0.03507019f;
      sa[118] = -0.22137697f;
      sa[119] = -0.08647159f;
      sa[120] = 0.16838609f;
      sa[121] = 0.15884402f;
      sa[122] = 0.24550667f;
      sa[123] = 0.2705731f;
      sa[124] = 0.18110415f;
      sa[125] = 0.2625839f;
      sa[126] = -0.22001348f;
      sa[127] = -0.27888578f;
      sa[128] = 0.07072599f;
      sa[129] = 0.20359462f;
      sa[130] = -0.13066298f;
      sa[131] = 0.45379123f;
      sa[132] = 0.11130414f;
      sa[133] = -0.28739852f;
      sa[134] = 0.13680159f;
      sa[135] = -0.19637723f;
      sa[136] = -0.33605513f;
      sa[137] = -0.04067735f;
      sa[138] = 0.06254859f;
      sa[139] = -0.09677008f;
      sa[140] = -0.050658148f;
      sa[141] = -0.052092172f;
      sa[142] = 0.14542612f;
      sa[143] = -0.2778917f;
      sa[144] = 0.3378943f;
      sa[145] = -0.31063947f;
      sa[146] = -0.2991136f;
      sa[147] = 0.20915875f;
      sa[148] = 0.17008053f;
      sa[149] = 0.12636308f;
      sa[150] = 0.3077487f;
      sa[151] = -0.24632247f;
      sa[152] = 0.041877516f;
      sa[153] = 0.25916943f;
      sa[154] = 0.24324904f;
      sa[155] = -0.15164867f;
      sa[156] = 0.12204284f;
      sa[157] = -0.29037374f;
      sa[158] = 0.08459618f;
      sa[159] = 0.08158106f;
      sa[160] = -0.05816377f;
      sa[161] = 0.10825705f;
      sa[162] = 0.015653817f;
      sa[163] = -0.15265352f;
      sa[164] = 0.2762781f;
      sa[165] = -0.0058680596f;
      sa[166] = -0.035305977f;
      sa[167] = 0.027793078f;
      sa[168] = 0.13789028f;
      sa[169] = 0.3273723f;
      sa[170] = 0.14229383f;
      sa[171] = -0.12612565f;
      sa[172] = -0.10429818f;
      sa[173] = -0.19381954f;
      sa[174] = -0.10715037f;
      sa[175] = -0.28851324f;
      sa[176] = 0.031750478f;
      sa[177] = 0.044757664f;
      sa[178] = -0.11258645f;
      sa[179] = 0.110419214f;
      sa[180] = -0.05690794f;
      sa[181] = -0.26536855f;
      sa[182] = -0.10662628f;
      sa[183] = 0.27324647f;
      sa[184] = 0.34380606f;
      sa[185] = 0.25308943f;
      sa[186] = -0.28590953f;
      sa[187] = 0.091406204f;
      sa[188] = 0.0012037046f;
      sa[189] = 0.22882384f;
      sa[190] = 0.02154373f;
      sa[191] = 0.023022158f;
      sa[192] = -0.0839448f;
      sa[193] = 0.32659993f;
      sa[194] = 0.15783879f;
      sa[195] = 0.40194842f;
      sa[196] = 0.42196494f;
      sa[197] = -5.43829E-4f;
      sa[198] = 0.08106833f;
      sa[199] = -0.4496367f;
      sa[200] = 0.03524294f;
      sa[201] = -0.31806168f;
      sa[202] = 0.14758995f;
      sa[203] = -0.106125444f;
      sa[204] = -0.1605907f;
      sa[205] = 0.23043062f;
      sa[206] = 0.25510633f;
      sa[207] = 0.064039834f;
      sa[208] = -0.24549279f;
      sa[209] = -0.05422428f;
      sa[210] = -0.24226256f;
      sa[211] = -0.21961445f;
      sa[212] = 0.28357688f;
      sa[213] = -0.23966298f;
      sa[214] = -0.20113543f;
      sa[215] = -0.15880065f;
      sa[216] = 0.04681989f;
      sa[217] = 0.15904805f;
      sa[218] = -0.086094014f;
      sa[219] = 0.058853038f;
      sa[220] = -0.20959838f;
      sa[221] = 0.18929769f;
      sa[222] = 0.30046332f;
      sa[223] = 0.06868131f;
      sa[224] = 0.12904462f;
      sa[225] = 0.324122f;
      sa[226] = -0.18510658f;
      sa[227] = 0.3963216f;
      sa[228] = 0.29019856f;
      sa[229] = 0.2827518f;
      sa[230] = 0.4308729f;
      sa[231] = -0.2036375f;
      sa[232] = -0.27692774f;
      sa[233] = 0.09945733f;
      sa[234] = 0.092207864f;
      sa[235] = -0.15883884f;
      sa[236] = 0.019164486f;
      sa[237] = -0.24369666f;
      sa[238] = -0.2181456f;
      sa[239] = 0.121471755f;
      sa[240] = 0.23653807f;
      sa[241] = -0.1524605f;
      sa[242] = -0.16605635f;
      sa[243] = -0.40730366f;
      sa[244] = -0.116545014f;
      sa[245] = -0.065466166f;
      sa[246] = -0.1493944f;
      sa[247] = -0.006705544f;
      sa[248] = 0.17269613f;
      sa[249] = 0.12863234f;
      sa[250] = -0.35578525f;
      sa[251] = -0.12567095f;
      sa[252] = -0.17767122f;
      sa[253] = -0.2946443f;
      sa[254] = -0.33145458f;
      sa[255] = 0.16660771f;
      sa[256] = -0.21150973f;
      sa[257] = 0.23655015f;
      sa[258] = -0.29254103f;
      sa[259] = -0.16353862f;
      sa[260] = -0.076598346f;
      sa[261] = -0.045554135f;
      sa[262] = -0.24896608f;
      sa[263] = 0.3409173f;
      sa[264] = -0.14739123f;
      sa[265] = 0.030549707f;
      sa[266] = -0.3186487f;
      sa[267] = -0.2817668f;
      sa[268] = 0.07295473f;
      sa[269] = -0.24970597f;
      sa[270] = 0.09692782f;
      sa[271] = 0.1708729f;
      sa[272] = -0.024728265f;
      sa[273] = -0.0877909f;
      sa[274] = 0.1544207f;
      sa[275] = 0.0148589555f;
      sa[276] = -0.02770732f;
      sa[277] = -0.492151f;
      sa[278] = -0.074222006f;
      sa[279] = 0.12225363f;
      sa[280] = -0.15567394f;
      sa[281] = 0.32210857f;
      sa[282] = -0.14558908f;
      sa[283] = -0.035407044f;
      sa[284] = -0.03117222f;
      sa[285] = -0.37461954f;
      sa[286] = 0.4788885f;
      sa[287] = 0.323115f;
      sa[288] = -0.3348719f;
      sa[289] = -0.22899154f;
      sa[290] = -0.11401116f;
      sa[291] = 0.44672504f;
      sa[292] = 0.18323033f;
      sa[293] = -0.019275306f;
      sa[294] = 0.15515588f;
      sa[295] = 0.12429866f;
      sa[296] = 0.18322802f;
      sa[297] = 0.05319371f;
      sa[298] = -0.09551651f;
      sa[299] = -0.5577907f;
      sa[300] = 0.0013024813f;
      sa[301] = -0.04370975f;
      sa[302] = 0.21435386f;
      sa[303] = 0.025454951f;
      sa[304] = -0.1861107f;
      sa[305] = -0.075609714f;
      sa[306] = 0.14168319f;
      sa[307] = -0.26760253f;
      sa[308] = 0.046571866f;
      sa[309] = 0.11829228f;
      sa[310] = 0.31948113f;
      sa[311] = 0.1910756f;
      sa[312] = -0.23038219f;
      sa[313] = -0.21923466f;
      sa[314] = -0.13403547f;
      sa[315] = 0.15554361f;
      sa[316] = -0.027072899f;
      sa[317] = -0.07639532f;
      sa[318] = 0.15804341f;
      sa[319] = 0.29118717f;
      sa[320] = 0.06145703f;
      sa[321] = 0.124768585f;
      sa[322] = 0.2631109f;
      sa[323] = -0.36803117f;
      sa[324] = 0.14380786f;
      sa[325] = 0.20263533f;
      sa[326] = -0.39069045f;
      sa[327] = 0.0030471694f;
      sa[328] = -0.012860414f;
      sa[329] = 0.22331427f;
      sa[330] = -0.17698103f;
      sa[331] = 0.08325245f;
      sa[332] = -0.24217254f;
      sa[333] = 0.171881f;
      sa[334] = -0.1514468f;
      sa[335] = 0.2550675f;
      sa[336] = -0.20963797f;
      sa[337] = -0.23698737f;
      sa[338] = 0.2556299f;
      sa[339] = -0.22839557f;
      sa[340] = -0.50920105f;
      sa[341] = -0.37785476f;
      sa[342] = 0.41043028f;
      sa[343] = -0.4577977f;
      sa[344] = -0.15264891f;
      sa[345] = 0.31009665f;
      sa[346] = 0.2854475f;
      sa[347] = -0.0815449f;
      sa[348] = 0.18180707f;
      sa[349] = -0.37673905f;
      sa[350] = -0.14076889f;
      sa[351] = 0.2069773f;
      sa[352] = 0.20114072f;
      sa[353] = -0.018063275f;
      sa[354] = 0.052466597f;
      sa[355] = 0.18045533f;
      sa[356] = -0.17636871f;
      sa[357] = 0.23489475f;
      sa[358] = -0.19806553f;
      sa[359] = 0.16453199f;
      sa[360] = 0.09102605f;
      sa[361] = -0.20376123f;
      sa[362] = -0.0821759f;
      sa[363] = 0.16212168f;
      sa[364] = -0.14705065f;
      sa[365] = -0.25166065f;
      sa[366] = 0.011186861f;
      sa[367] = -0.28733975f;
      sa[368] = -0.18135461f;
      sa[369] = 0.15565085f;
      sa[370] = -0.20480496f;
      sa[371] = 0.23142385f;
      sa[372] = 0.01939086f;
      sa[373] = 0.32395273f;
      sa[374] = -0.09424992f;
      sa[375] = -0.2895221f;
      sa[376] = -0.48710862f;
      sa[377] = -0.39555314f;
      sa[378] = 0.4715047f;
      sa[379] = 0.10737939f;
      sa[380] = -0.11544487f;
      sa[381] = -0.11664003f;
      sa[382] = -0.023172438f;
      sa[383] = -0.05053572f;
      sa[384] = -0.115244f;
      sa[385] = 0.14660494f;
      sa[386] = -0.12717195f;
      sa[387] = -0.44233826f;
      sa[388] = 0.08473343f;
      sa[389] = -0.03150796f;
      sa[390] = -0.036877465f;
      sa[391] = -0.12580867f;
      sa[392] = 0.34660295f;
      sa[393] = 0.3978332f;
      sa[394] = -0.24427763f;
      sa[395] = 0.20016584f;
      sa[396] = 0.32972324f;
      sa[397] = -0.031949602f;
      sa[398] = 0.20123874f;
      sa[399] = -0.22349338f;
      sa[400] = 0.191749f;
      sa[401] = 0.31370676f;
      sa[402] = -0.15106098f;
      sa[403] = 0.08371258f;
      sa[404] = 0.28911844f;
      sa[405] = -0.12447097f;
      sa[406] = 0.05454849f;
      sa[407] = 0.57871366f;
      sa[408] = -0.21391048f;
      sa[409] = -0.19669841f;
      sa[410] = -0.10640488f;
      sa[411] = 0.20998587f;
      sa[412] = 0.02021849f;
      sa[413] = 0.24570662f;
      sa[414] = 0.028052766f;
      sa[415] = 0.5164339f;
      sa[416] = -0.19215272f;
      sa[417] = 0.02810137f;
      sa[418] = -0.032762997f;
      sa[419] = 0.29798147f;
      sa[420] = 0.31874114f;
      sa[421] = 0.39875683f;
      sa[422] = 0.13836135f;
      sa[423] = -0.13267094f;
      sa[424] = 0.14888938f;
      sa[425] = -0.046251573f;
      sa[426] = -0.26249304f;
      sa[427] = 0.23084599f;
      sa[428] = -0.089671634f;
      sa[429] = -0.07144275f;
      sa[430] = 0.08581908f;
      sa[431] = -0.08487975f;
      sa[432] = -0.06346975f;
      sa[433] = 0.21333665f;
      sa[434] = 0.39665964f;
      sa[435] = 0.075040765f;
      sa[436] = -0.35394815f;
      sa[437] = -0.338251f;
      sa[438] = -0.043944746f;
      sa[439] = -0.084973134f;
      sa[440] = 0.37370774f;
      sa[441] = -0.2445867f;
      sa[442] = 0.131469f;
      sa[443] = 0.22851081f;
      sa[444] = -0.28639132f;
      sa[445] = 0.029999193f;
      sa[446] = 0.21819045f;
      sa[447] = 0.016471652f;
      sa[448] = 0.2482804f;
      sa[449] = 0.35577017f;
      sa[450] = -0.03526758f;
      sa[451] = 0.14973871f;
      sa[452] = 0.1397898f;
      sa[453] = -0.11326719f;
      sa[454] = -0.2262639f;
      sa[455] = -0.1120648f;
      sa[456] = 0.08927256f;
      sa[457] = 0.14917201f;
      sa[458] = -0.18373932f;
      sa[459] = 0.13734186f;
      sa[460] = 0.18064582f;
      sa[461] = 0.2337162f;
      sa[462] = -0.017609451f;
      sa[463] = 0.15377967f;
      sa[464] = -0.2579487f;
      sa[465] = 0.2513632f;
      sa[466] = -0.061334524f;
      sa[467] = 0.11719945f;
      sa[468] = 0.14080626f;
      sa[469] = 0.31919518f;
      sa[470] = 0.21207666f;
      sa[471] = -0.015926352f;
      sa[472] = 0.027893417f;
      sa[473] = -0.14773452f;
      sa[474] = -0.01630276f;
      sa[475] = 0.18028839f;
      sa[476] = 0.2734273f;
      sa[477] = -0.11245279f;
      sa[478] = 0.19926684f;
      sa[479] = -0.22702278f;
      sa[480] = -0.38216156f;
      sa[481] = -0.28418204f;
      sa[482] = -0.3211633f;
      sa[483] = 0.22303496f;
      sa[484] = 0.25532758f;
      sa[485] = 0.25242254f;
      sa[486] = -0.021440255f;
      sa[487] = -0.14064671f;
      sa[488] = -0.2324112f;
      sa[489] = 0.10755264f;
      sa[490] = -0.0069199475f;
      sa[491] = -0.12133987f;
      sa[492] = 0.19331792f;
      sa[493] = 0.35755444f;
      sa[494] = -0.24572892f;
      sa[495] = 0.3983067f;
      sa[496] = -0.033104036f;
      sa[497] = 0.06471113f;
      sa[498] = 0.14967023f;
      sa[499] = 0.17687628f;
      sa[500] = -0.05289064f;
      sa[501] = 0.14415754f;
      sa[502] = 0.3093993f;
      sa[503] = 0.13474482f;
      sa[504] = -0.116905995f;
      sa[505] = -0.16213952f;
      sa[506] = 0.17416854f;
      sa[507] = -0.24284746f;
      sa[508] = 0.20156427f;
      sa[509] = 0.39460084f;
      sa[510] = 0.25814128f;
      sa[511] = 0.15387046f;
      sa[512] = 0.089951724f;
      sa[513] = 0.089941464f;
      sa[514] = 0.3249851f;
      sa[515] = 0.09733187f;
      sa[516] = 0.063811466f;
      sa[517] = 0.20244792f;
      sa[518] = 0.19481535f;
      sa[519] = 0.048079483f;
      sa[520] = 0.3383873f;
      sa[521] = 0.41596738f;
      sa[522] = 0.026026506f;
      sa[523] = 0.10753289f;
      sa[524] = 0.2313295f;
      sa[525] = 0.23918873f;
      sa[526] = 0.012644792f;
      sa[527] = -0.07399261f;
      sa[528] = -0.041309487f;
      sa[529] = 0.16638517f;
      sa[530] = -0.25987896f;
      sa[531] = 0.10659222f;
      sa[532] = 0.21698265f;
      sa[533] = 0.21445866f;
      sa[534] = 0.24762256f;
      sa[535] = 0.03321583f;
      sa[536] = 0.051493887f;
      sa[537] = -0.037213624f;
      sa[538] = 0.09436429f;
      sa[539] = 0.20061035f;
      sa[540] = -0.18492286f;
      sa[541] = -0.2621499f;
      sa[542] = -0.16361883f;
      sa[543] = -0.36056796f;
      sa[544] = 0.18166703f;
      sa[545] = 0.030547937f;
      sa[546] = 0.08227037f;
      sa[547] = 0.23618096f;
      sa[548] = 0.09594495f;
      sa[549] = 0.16847043f;
      sa[550] = -0.023823908f;
      sa[551] = -0.25453496f;
      sa[552] = 0.011485439f;
      sa[553] = -0.14868055f;
      sa[554] = -0.20350079f;
      sa[555] = -0.22611713f;
      sa[556] = -0.35442618f;
      sa[557] = -0.40636736f;
      sa[558] = 0.013061191f;
      sa[559] = 0.123666726f;
      sa[560] = -0.29351515f;
      sa[561] = -0.014224491f;
      sa[562] = 0.288413f;
      sa[563] = 0.090420194f;
      sa[564] = 0.20804793f;
      sa[565] = 0.01684122f;
      sa[566] = 0.36484787f;
      sa[567] = 0.12171374f;
      sa[568] = -0.112837315f;
      sa[569] = 0.017703976f;
      sa[570] = -0.09846917f;
      sa[571] = -0.09005606f;
      sa[572] = -0.1622305f;
      sa[573] = 0.03687474f;
      sa[574] = 0.4375455f;
      sa[575] = -0.050810084f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_08_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_08_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.46602687f;
      sa[1] = 0.10790165f;
      sa[2] = -0.10787301f;
      sa[3] = -0.1725214f;
      sa[4] = 0.085373804f;
      sa[5] = 0.07990333f;
      sa[6] = 0.24604815f;
      sa[7] = 0.13831648f;
      sa[8] = -0.2277203f;
      sa[9] = 0.19304526f;
      sa[10] = -0.1617652f;
      sa[11] = 0.18493581f;
      sa[12] = 0.10578898f;
      sa[13] = 0.07520242f;
      sa[14] = -0.1930274f;
      sa[15] = 0.40079927f;
      sa[16] = 0.34827355f;
      sa[17] = -0.073136784f;
      sa[18] = 5.1348144E-4f;
      sa[19] = -0.08514728f;
      sa[20] = 0.36763242f;
      sa[21] = 0.022871539f;
      sa[22] = -0.16048096f;
      sa[23] = 0.10327759f;
      sa[24] = -0.38181683f;
      sa[25] = 0.26699707f;
      sa[26] = -0.01817231f;
      sa[27] = 0.478424f;
      sa[28] = -0.35439116f;
      sa[29] = -0.1537259f;
      sa[30] = 0.13476391f;
      sa[31] = -0.22754966f;
      sa[32] = -0.2943893f;
      sa[33] = -0.4525035f;
      sa[34] = 0.045222457f;
      sa[35] = 0.26941547f;
      sa[36] = -0.11579054f;
      sa[37] = -0.090844795f;
      sa[38] = 0.027481264f;
      sa[39] = 0.14943099f;
      sa[40] = -0.2838571f;
      sa[41] = -0.4491149f;
      sa[42] = -0.3162256f;
      sa[43] = -0.42633376f;
      sa[44] = 0.018327657f;
      sa[45] = -0.3531814f;
      sa[46] = 0.2991285f;
      sa[47] = 0.25359398f;
      sa[48] = -0.33531293f;
      sa[49] = -0.28484407f;
      sa[50] = 0.25562847f;
      sa[51] = -0.086292155f;
      sa[52] = 0.2059863f;
      sa[53] = 0.2306671f;
      sa[54] = -0.08307275f;
      sa[55] = 0.35620233f;
      sa[56] = -0.28684556f;
      sa[57] = -0.34926882f;
      sa[58] = 0.104215585f;
      sa[59] = -0.028259126f;
      sa[60] = 0.37538287f;
      sa[61] = -0.17120464f;
      sa[62] = -0.08582264f;
      sa[63] = 0.20104593f;
      sa[64] = 0.3523522f;
      sa[65] = -0.1864433f;
      sa[66] = 0.0960528f;
      sa[67] = 0.35392317f;
      sa[68] = 0.16178665f;
      sa[69] = -0.32663557f;
      sa[70] = -0.44023275f;
      sa[71] = -0.08391923f;
      sa[72] = -0.36705488f;
      sa[73] = 0.33139914f;
      sa[74] = 0.43329725f;
      sa[75] = -0.02912213f;
      sa[76] = 0.21289149f;
      sa[77] = 0.12664662f;
      sa[78] = -0.3833692f;
      sa[79] = 0.30268642f;
      sa[80] = -0.12786062f;
      sa[81] = 0.030879796f;
      sa[82] = 0.33909178f;
      sa[83] = -0.17199644f;
      sa[84] = -0.4551932f;
      sa[85] = -0.36054477f;
      sa[86] = 0.078301586f;
      sa[87] = 0.29585814f;
      sa[88] = -0.46373665f;
      sa[89] = -0.18940969f;
      sa[90] = -0.30686375f;
      sa[91] = 0.40523523f;
      sa[92] = -0.030946659f;
      sa[93] = 0.12440593f;
      sa[94] = -0.39944202f;
      sa[95] = -0.13656214f;
      sa[96] = -0.3072358f;
      sa[97] = 0.004241886f;
      sa[98] = 0.07416249f;
      sa[99] = 0.062434137f;
      sa[100] = -0.33911356f;
      sa[101] = -0.18942103f;
      sa[102] = 0.3471527f;
      sa[103] = -0.030855348f;
      sa[104] = -0.17710625f;
      sa[105] = -0.18456335f;
      sa[106] = 0.33723795f;
      sa[107] = 0.3675515f;
      sa[108] = 0.23022316f;
      sa[109] = 0.04021768f;
      sa[110] = 0.21861546f;
      sa[111] = -0.23961589f;
      sa[112] = -0.25165308f;
      sa[113] = -0.06433202f;
      sa[114] = -0.008884268f;
      sa[115] = -0.17929685f;
      sa[116] = 0.27587178f;
      sa[117] = -0.053558424f;
      sa[118] = -0.43148625f;
      sa[119] = -0.2600962f;
      sa[120] = -0.20850405f;
      sa[121] = 0.12538642f;
      sa[122] = -0.09759534f;
      sa[123] = 0.04226978f;
      sa[124] = -0.19902343f;
      sa[125] = 0.2565491f;
      sa[126] = -0.24504618f;
      sa[127] = 0.05318095f;
      sa[128] = -0.3340043f;
      sa[129] = 0.05288035f;
      sa[130] = 0.0456972f;
      sa[131] = 0.1483823f;
      sa[132] = 0.037979398f;
      sa[133] = 0.11918514f;
      sa[134] = 0.17452008f;
      sa[135] = -0.46223575f;
      sa[136] = 0.094795756f;
      sa[137] = -0.27502322f;
      sa[138] = 0.04490697f;
      sa[139] = 0.23794083f;
      sa[140] = -0.18414368f;
      sa[141] = -0.0929221f;
      sa[142] = -0.045533743f;
      sa[143] = -0.27995878f;
      sa[144] = 0.25699154f;
      sa[145] = -0.27668354f;
      sa[146] = 0.00967594f;
      sa[147] = 0.016874652f;
      sa[148] = -0.22505513f;
      sa[149] = 0.3639959f;
      sa[150] = -0.15053909f;
      sa[151] = -0.6782448f;
      sa[152] = 0.52092046f;
      sa[153] = -0.12788922f;
      sa[154] = 0.35713068f;
      sa[155] = -0.51421297f;
      sa[156] = -0.38550094f;
      sa[157] = -0.32930452f;
      sa[158] = -0.15345035f;
      sa[159] = -0.243942f;
      sa[160] = 0.38276163f;
      sa[161] = -0.40022832f;
      sa[162] = 0.64950794f;
      sa[163] = -0.25512215f;
      sa[164] = 0.13651444f;
      sa[165] = -0.21565284f;
      sa[166] = 0.28144556f;
      sa[167] = -0.39156032f;
      sa[168] = 0.20554376f;
      sa[169] = -0.5621401f;
      sa[170] = 0.31016016f;
      sa[171] = 0.19428027f;
      sa[172] = 0.4107057f;
      sa[173] = 0.4120052f;
      sa[174] = -0.060130477f;
      sa[175] = 0.010377623f;
      sa[176] = 0.3316257f;
      sa[177] = 0.1543899f;
      sa[178] = -0.18429923f;
      sa[179] = 0.114531174f;
      sa[180] = -0.36588216f;
      sa[181] = -0.14752679f;
      sa[182] = 0.015626179f;
      sa[183] = 0.13277578f;
      sa[184] = 0.52228f;
      sa[185] = 0.29185578f;
      sa[186] = -0.15405993f;
      sa[187] = -0.28012878f;
      sa[188] = -0.16985346f;
      sa[189] = -0.2509561f;
      sa[190] = -0.2274982f;
      sa[191] = -0.0042007277f;
      sa[192] = -0.08549171f;
      sa[193] = 0.16763115f;
      sa[194] = -0.37911454f;
      sa[195] = -0.23415537f;
      sa[196] = 0.16086403f;
      sa[197] = -0.14772077f;
      sa[198] = 0.08369517f;
      sa[199] = 0.42978176f;
      sa[200] = 0.07991274f;
      sa[201] = 0.342031f;
      sa[202] = 0.30707774f;
      sa[203] = -0.42400128f;
      sa[204] = 0.0959563f;
      sa[205] = 0.32542932f;
      sa[206] = -0.18909349f;
      sa[207] = 0.17654745f;
      sa[208] = -0.24214739f;
      sa[209] = 0.075613596f;
      sa[210] = -0.13969818f;
      sa[211] = -0.36779115f;
      sa[212] = -0.40642494f;
      sa[213] = -0.066651136f;
      sa[214] = -0.3986386f;
      sa[215] = -0.13126309f;
      sa[216] = 0.03990294f;
      sa[217] = 0.19232818f;
      sa[218] = -0.017512608f;
      sa[219] = 0.04859091f;
      sa[220] = 0.14495052f;
      sa[221] = -0.036111336f;
      sa[222] = -0.32865745f;
      sa[223] = -0.41103265f;
      sa[224] = 0.35573262f;
      sa[225] = 0.06780341f;
      sa[226] = -0.07486082f;
      sa[227] = 0.07431652f;
      sa[228] = -0.095694125f;
      sa[229] = -0.21620749f;
      sa[230] = -0.28537568f;
      sa[231] = -0.17280613f;
      sa[232] = 0.41912195f;
      sa[233] = -0.24210688f;
      sa[234] = -0.32328454f;
      sa[235] = 0.007961496f;
      sa[236] = -0.33681968f;
      sa[237] = 0.5045845f;
      sa[238] = 0.21544276f;
      sa[239] = -0.10306659f;
      sa[240] = -0.17556755f;
      sa[241] = -0.41497275f;
      sa[242] = -0.40158206f;
      sa[243] = 0.34263465f;
      sa[244] = 0.2187398f;
      sa[245] = 0.32861805f;
      sa[246] = 0.3760099f;
      sa[247] = -0.51410615f;
      sa[248] = -0.21273513f;
      sa[249] = 0.17297214f;
      sa[250] = 0.2972713f;
      sa[251] = 0.41045994f;
      sa[252] = 0.20113716f;
      sa[253] = -0.31896606f;
      sa[254] = 0.36697006f;
      sa[255] = 0.08151819f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_08_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_ReLU_08_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.040577486f;
      sa[1] = -1.6378882f;
      sa[2] = -1.5280178f;
      sa[3] = 1.3232481f;
      sa[4] = 0.41546586f;
      sa[5] = -0.25275114f;
      sa[6] = -1.7052283f;
      sa[7] = 1.4409263f;
      sa[8] = 1.6606823f;
      sa[9] = 0.28900096f;
      sa[10] = 1.6104735f;
      sa[11] = 1.347609f;
      sa[12] = 1.7229487f;
      sa[13] = -0.5689905f;
      sa[14] = -1.958795f;
      sa[15] = -0.78904027f;
      sa[16] = 0.74104804f;
      sa[17] = -0.8200289f;
      sa[18] = -1.4772233f;
      sa[19] = -0.912977f;
      sa[20] = -1.9372323f;
      sa[21] = 0.26970676f;
      sa[22] = -1.935789f;
      sa[23] = -0.58399624f;
      sa[24] = -0.50384986f;
      sa[25] = 1.8796016f;
      sa[26] = -0.34422487f;
      sa[27] = 1.1901422f;
      sa[28] = 1.1816856f;
      sa[29] = -0.71089476f;
      sa[30] = 0.13584885f;
      sa[31] = 0.16655207f;
      sa[32] = 0.45211506f;
      sa[33] = 0.07666616f;
      sa[34] = -0.70731115f;
      sa[35] = 0.91810524f;
      sa[36] = 0.46650195f;
      sa[37] = -1.3460044f;
      sa[38] = 0.62323636f;
      sa[39] = -0.19392754f;
      sa[40] = 0.2850098f;
      sa[41] = -0.69353265f;
      sa[42] = 0.51213396f;
      sa[43] = -0.054317452f;
      sa[44] = 0.95772433f;
      sa[45] = -1.9562098f;
      sa[46] = -2.4891803f;
      sa[47] = 0.1366636f;
      sa[48] = 1.5833083f;
      sa[49] = -0.21129386f;
      sa[50] = -0.47081414f;
      sa[51] = 1.7933338f;
      sa[52] = -1.6501738f;
      sa[53] = 0.9729891f;
      sa[54] = 1.7342633f;
      sa[55] = 1.0694203f;
      sa[56] = -0.60533214f;
      sa[57] = -0.24090056f;
      sa[58] = 1.0409025f;
      sa[59] = 0.7558443f;
      sa[60] = -1.4121118f;
      sa[61] = 0.89811945f;
      sa[62] = -0.3289726f;
      sa[63] = -0.8573845f;
      sa[64] = 1.0328623f;
      sa[65] = -0.868462f;
      sa[66] = -1.730861f;
      sa[67] = -0.08787117f;
      sa[68] = 0.9089215f;
      sa[69] = -1.3569828f;
      sa[70] = -1.6079917f;
      sa[71] = -0.027683059f;
      sa[72] = -1.0099038f;
      sa[73] = -1.2027549f;
      sa[74] = -1.1808164f;
      sa[75] = 1.4123174f;
      sa[76] = 1.9518932f;
      sa[77] = -0.593108f;
      sa[78] = -1.2997471f;
      sa[79] = -0.38543054f;
      sa[80] = 0.5772191f;
      sa[81] = -1.627555f;
      sa[82] = -0.20044048f;
      sa[83] = -1.3942288f;
      sa[84] = 1.5695893f;
      sa[85] = 1.0678298f;
      sa[86] = -1.9464384f;
      sa[87] = 1.0408744f;
      sa[88] = -1.6145097f;
      sa[89] = -1.1181747f;
      sa[90] = 0.26323065f;
      sa[91] = 0.027244931f;
      sa[92] = 1.328158f;
      sa[93] = 1.8738515f;
      sa[94] = 1.5788603f;
      sa[95] = 0.63229644f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_08 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_08_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_08_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_08_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_ReLU_08_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_08_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


