/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:52:38.161+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_11

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_11 > h2o_nn_16x16x6_ReLU_11.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_11.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_11", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_11 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_11_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_11_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_11_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_11_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_11_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_11_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_11.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_11_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.2548076923076923,0.18269230769230768,0.057692307692307696,0.125,0.2548076923076923,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_11() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-3232422259986914604L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_11_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_11_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_11_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_11_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_11_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_11_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_11_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_11_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.7676161374140622;
      sa[1] = 0.7583171604537849;
      sa[2] = 0.35046138762611456;
      sa[3] = 0.3320930648184275;
      sa[4] = 0.546990725744089;
      sa[5] = 0.6080204509957704;
      sa[6] = 0.5939753706545455;
      sa[7] = 0.8573026110854253;
      sa[8] = 0.5466482466242495;
      sa[9] = 0.5240356220993717;
      sa[10] = 0.5137503882109519;
      sa[11] = 0.28952875994459826;
      sa[12] = 0.38849406150148075;
      sa[13] = 0.535402613490246;
      sa[14] = 0.5578958756152255;
      sa[15] = 0.6237633312943744;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_11_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.1356399671797792;
      sa[1] = 1.118950776934794;
      sa[2] = 0.9233851225830008;
      sa[3] = 0.9920066609021088;
      sa[4] = 0.9186723441449277;
      sa[5] = 0.9777764842869898;
      sa[6] = 0.9862687342354103;
      sa[7] = 0.9527674699572454;
      sa[8] = 0.927101949032986;
      sa[9] = 1.0409867563947437;
      sa[10] = 0.9065790302304882;
      sa[11] = 1.1748469520231286;
      sa[12] = 1.0189737204816098;
      sa[13] = 0.8635152146274798;
      sa[14] = 0.9537138415163943;
      sa[15] = 0.8794678809786824;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_11_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_11_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.10095252739431344;
      sa[1] = 0.00266475168006291;
      sa[2] = -0.057261073944225666;
      sa[3] = 0.005965467685281281;
      sa[4] = 0.08935057125099087;
      sa[5] = -0.11923759076800626;
    }
  }
}
class h2o_nn_16x16x6_ReLU_11_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_11_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.008985952f;
      sa[1] = 0.23273471f;
      sa[2] = 0.19167566f;
      sa[3] = 0.2060728f;
      sa[4] = -0.09245091f;
      sa[5] = -0.18890671f;
      sa[6] = 0.03425173f;
      sa[7] = 0.3404136f;
      sa[8] = 0.09216129f;
      sa[9] = -0.02064619f;
      sa[10] = -0.1547432f;
      sa[11] = -0.20261796f;
      sa[12] = 0.13943985f;
      sa[13] = -0.26007286f;
      sa[14] = -0.083919495f;
      sa[15] = 0.08174199f;
      sa[16] = 0.16925377f;
      sa[17] = 0.30512738f;
      sa[18] = -0.056396343f;
      sa[19] = 0.117842644f;
      sa[20] = 0.29208705f;
      sa[21] = -0.26656634f;
      sa[22] = 0.31321457f;
      sa[23] = -0.08638458f;
      sa[24] = 0.25756347f;
      sa[25] = 0.20935725f;
      sa[26] = -0.19773795f;
      sa[27] = 0.4365315f;
      sa[28] = 0.3017072f;
      sa[29] = -0.23625924f;
      sa[30] = -0.17158864f;
      sa[31] = 0.23339607f;
      sa[32] = 0.26044166f;
      sa[33] = -0.27032354f;
      sa[34] = 0.2527579f;
      sa[35] = 0.09370493f;
      sa[36] = 0.09796669f;
      sa[37] = 0.25958377f;
      sa[38] = -0.19033669f;
      sa[39] = 0.13731927f;
      sa[40] = 0.052024465f;
      sa[41] = -0.07017539f;
      sa[42] = -0.09019247f;
      sa[43] = 0.09941791f;
      sa[44] = 0.33532822f;
      sa[45] = -0.2633462f;
      sa[46] = 0.008476282f;
      sa[47] = -0.008170756f;
      sa[48] = 0.35016865f;
      sa[49] = 0.3568099f;
      sa[50] = 0.33824694f;
      sa[51] = -0.19857232f;
      sa[52] = -0.007211707f;
      sa[53] = 0.30401424f;
      sa[54] = 0.36368108f;
      sa[55] = 0.10428468f;
      sa[56] = -0.11215881f;
      sa[57] = -0.30333662f;
      sa[58] = 0.3142112f;
      sa[59] = -0.123380475f;
      sa[60] = -0.46617454f;
      sa[61] = 0.2784454f;
      sa[62] = 0.22302005f;
      sa[63] = 0.20386624f;
      sa[64] = 0.22628514f;
      sa[65] = 0.1749518f;
      sa[66] = 0.04341898f;
      sa[67] = 0.22466858f;
      sa[68] = -0.34682977f;
      sa[69] = 0.038546503f;
      sa[70] = 0.13522753f;
      sa[71] = 0.51804507f;
      sa[72] = -0.15021442f;
      sa[73] = 0.23173551f;
      sa[74] = -0.0471118f;
      sa[75] = 0.063503474f;
      sa[76] = -0.2717375f;
      sa[77] = -0.07875431f;
      sa[78] = -0.13377318f;
      sa[79] = 0.09181078f;
      sa[80] = -0.211771f;
      sa[81] = -0.16216438f;
      sa[82] = 0.08085406f;
      sa[83] = 0.13149147f;
      sa[84] = -0.060647372f;
      sa[85] = -0.21273918f;
      sa[86] = 0.103674315f;
      sa[87] = 0.22783029f;
      sa[88] = 0.22999728f;
      sa[89] = -0.0045100492f;
      sa[90] = -0.16754529f;
      sa[91] = 0.18237646f;
      sa[92] = 0.07788128f;
      sa[93] = -0.27914864f;
      sa[94] = -0.24078138f;
      sa[95] = -0.32019663f;
      sa[96] = 0.20792638f;
      sa[97] = 0.13391238f;
      sa[98] = 0.23247531f;
      sa[99] = -0.05776188f;
      sa[100] = -0.08393128f;
      sa[101] = -0.23401609f;
      sa[102] = -0.28839496f;
      sa[103] = -0.13566646f;
      sa[104] = -0.037097204f;
      sa[105] = -0.15635227f;
      sa[106] = -0.22603057f;
      sa[107] = 0.15588796f;
      sa[108] = 0.14289208f;
      sa[109] = -0.23344503f;
      sa[110] = -0.20140886f;
      sa[111] = 0.10058166f;
      sa[112] = 0.09501473f;
      sa[113] = -0.0012926466f;
      sa[114] = -0.21288617f;
      sa[115] = -0.07472002f;
      sa[116] = -0.32653645f;
      sa[117] = 0.07936216f;
      sa[118] = -0.22114377f;
      sa[119] = -0.13974017f;
      sa[120] = 0.19072089f;
      sa[121] = 0.21847819f;
      sa[122] = 0.30862567f;
      sa[123] = 0.25875643f;
      sa[124] = 0.26892146f;
      sa[125] = 0.37255016f;
      sa[126] = -0.26532286f;
      sa[127] = -0.26168263f;
      sa[128] = 0.016165795f;
      sa[129] = 0.12865378f;
      sa[130] = -0.16544779f;
      sa[131] = 0.2778742f;
      sa[132] = 0.20331028f;
      sa[133] = -0.29590946f;
      sa[134] = 0.128418f;
      sa[135] = -0.19132033f;
      sa[136] = -0.36621124f;
      sa[137] = -0.083896816f;
      sa[138] = 0.072996154f;
      sa[139] = -0.17767753f;
      sa[140] = 0.006848338f;
      sa[141] = -0.08061209f;
      sa[142] = 0.15438917f;
      sa[143] = -0.31417304f;
      sa[144] = 0.31558517f;
      sa[145] = -0.18783152f;
      sa[146] = -0.3943513f;
      sa[147] = 0.15474927f;
      sa[148] = 0.1607101f;
      sa[149] = 0.17808731f;
      sa[150] = 0.30014908f;
      sa[151] = -0.2602956f;
      sa[152] = 0.0940104f;
      sa[153] = 0.26974133f;
      sa[154] = 0.2730754f;
      sa[155] = -0.11737612f;
      sa[156] = 0.15780394f;
      sa[157] = -0.21181156f;
      sa[158] = 0.13024753f;
      sa[159] = 0.1274381f;
      sa[160] = 0.042256307f;
      sa[161] = 0.17824708f;
      sa[162] = -0.045526426f;
      sa[163] = -0.14538436f;
      sa[164] = 0.26928204f;
      sa[165] = -0.051224425f;
      sa[166] = -0.075946055f;
      sa[167] = -0.10322234f;
      sa[168] = 0.15602364f;
      sa[169] = 0.3382346f;
      sa[170] = 0.1115225f;
      sa[171] = -0.008086636f;
      sa[172] = -0.07598392f;
      sa[173] = -0.1861416f;
      sa[174] = -0.059669532f;
      sa[175] = -0.29694095f;
      sa[176] = 0.07588802f;
      sa[177] = 0.03351463f;
      sa[178] = -0.02725164f;
      sa[179] = 0.083748914f;
      sa[180] = -0.076275036f;
      sa[181] = -0.27763864f;
      sa[182] = 0.062828705f;
      sa[183] = 0.48691502f;
      sa[184] = 0.36919832f;
      sa[185] = 0.20452519f;
      sa[186] = -0.25785035f;
      sa[187] = 0.0921746f;
      sa[188] = 8.251169E-4f;
      sa[189] = 0.09592691f;
      sa[190] = -0.07318001f;
      sa[191] = 0.106794044f;
      sa[192] = -0.091019064f;
      sa[193] = 0.26440555f;
      sa[194] = 0.1388245f;
      sa[195] = 0.39905202f;
      sa[196] = 0.31433427f;
      sa[197] = -0.11977506f;
      sa[198] = 0.048826266f;
      sa[199] = -0.26483795f;
      sa[200] = 0.086205564f;
      sa[201] = -0.23294972f;
      sa[202] = 0.19680977f;
      sa[203] = 0.082056776f;
      sa[204] = -0.1309037f;
      sa[205] = 0.16490747f;
      sa[206] = 0.128552f;
      sa[207] = -0.24414724f;
      sa[208] = -0.22256826f;
      sa[209] = -0.068061486f;
      sa[210] = -0.3019867f;
      sa[211] = -0.20095807f;
      sa[212] = 0.36021334f;
      sa[213] = -0.20788006f;
      sa[214] = -0.21778183f;
      sa[215] = -0.26573145f;
      sa[216] = 0.1355684f;
      sa[217] = 0.22300996f;
      sa[218] = -0.194916f;
      sa[219] = 0.21504273f;
      sa[220] = -0.18662807f;
      sa[221] = 0.12339678f;
      sa[222] = 0.28827223f;
      sa[223] = 0.16783892f;
      sa[224] = 0.117998935f;
      sa[225] = 0.2349694f;
      sa[226] = -0.24661942f;
      sa[227] = 0.33336422f;
      sa[228] = 0.14579906f;
      sa[229] = 0.13903052f;
      sa[230] = 0.30178517f;
      sa[231] = -0.25002748f;
      sa[232] = -0.30271024f;
      sa[233] = -0.010926205f;
      sa[234] = 0.086308636f;
      sa[235] = -0.36139867f;
      sa[236] = -0.02884069f;
      sa[237] = -0.21923678f;
      sa[238] = -0.2023418f;
      sa[239] = 0.14155845f;
      sa[240] = 0.02199887f;
      sa[241] = -0.24412103f;
      sa[242] = -0.13669164f;
      sa[243] = -0.34283718f;
      sa[244] = -0.2131282f;
      sa[245] = -0.11686002f;
      sa[246] = -0.24955618f;
      sa[247] = -0.050330687f;
      sa[248] = 0.17856582f;
      sa[249] = 0.2787166f;
      sa[250] = -0.34045315f;
      sa[251] = -0.2220043f;
      sa[252] = -0.19066198f;
      sa[253] = -0.35990843f;
      sa[254] = -0.44495744f;
      sa[255] = -0.14205259f;
      sa[256] = -0.12056026f;
      sa[257] = 0.4355693f;
      sa[258] = -0.11379563f;
      sa[259] = 0.033405486f;
      sa[260] = -0.17707737f;
      sa[261] = -0.16410524f;
      sa[262] = -0.22732362f;
      sa[263] = 0.3865388f;
      sa[264] = 0.0021671087f;
      sa[265] = 0.29070306f;
      sa[266] = -0.13909784f;
      sa[267] = -0.061612643f;
      sa[268] = 0.094891414f;
      sa[269] = -0.22653054f;
      sa[270] = -0.07849776f;
      sa[271] = 0.12687461f;
      sa[272] = -0.04901058f;
      sa[273] = -0.09789266f;
      sa[274] = 0.29537362f;
      sa[275] = 0.08337896f;
      sa[276] = -0.048499834f;
      sa[277] = -0.20936145f;
      sa[278] = -0.2574102f;
      sa[279] = 0.2212017f;
      sa[280] = -0.15996689f;
      sa[281] = 0.2941802f;
      sa[282] = -0.021483503f;
      sa[283] = -0.017882783f;
      sa[284] = -0.13280368f;
      sa[285] = -0.15171663f;
      sa[286] = 0.32402202f;
      sa[287] = 0.15312387f;
      sa[288] = -0.2871399f;
      sa[289] = -0.11980658f;
      sa[290] = -0.027995162f;
      sa[291] = 0.22769694f;
      sa[292] = 0.16470486f;
      sa[293] = -0.17900378f;
      sa[294] = 0.06635515f;
      sa[295] = 0.083799906f;
      sa[296] = 0.22734307f;
      sa[297] = 0.28094003f;
      sa[298] = -0.059447426f;
      sa[299] = -0.051083528f;
      sa[300] = 0.005784671f;
      sa[301] = -0.16373867f;
      sa[302] = 0.13934305f;
      sa[303] = 0.044455197f;
      sa[304] = -0.12755686f;
      sa[305] = 0.048549257f;
      sa[306] = 0.33305576f;
      sa[307] = -0.20445506f;
      sa[308] = 0.13841453f;
      sa[309] = 0.2043479f;
      sa[310] = 0.2857019f;
      sa[311] = 0.39980993f;
      sa[312] = -0.22417735f;
      sa[313] = -0.20495528f;
      sa[314] = -0.06593324f;
      sa[315] = -0.0649156f;
      sa[316] = 0.04948163f;
      sa[317] = -0.023294888f;
      sa[318] = 0.08544173f;
      sa[319] = 0.37507364f;
      sa[320] = 0.13933988f;
      sa[321] = 0.16918312f;
      sa[322] = 0.2602451f;
      sa[323] = -0.17087904f;
      sa[324] = -0.028570438f;
      sa[325] = 0.2403125f;
      sa[326] = -0.35516477f;
      sa[327] = -0.02046964f;
      sa[328] = -0.09439817f;
      sa[329] = 0.22287692f;
      sa[330] = -0.19556628f;
      sa[331] = 0.011916732f;
      sa[332] = -0.26400328f;
      sa[333] = 0.18994075f;
      sa[334] = -0.074602656f;
      sa[335] = 0.2826478f;
      sa[336] = -0.15265411f;
      sa[337] = -0.16796707f;
      sa[338] = 0.35064453f;
      sa[339] = -0.16303088f;
      sa[340] = -0.3078936f;
      sa[341] = -0.23945223f;
      sa[342] = 0.3087739f;
      sa[343] = -0.09646147f;
      sa[344] = -0.18205474f;
      sa[345] = 0.20207077f;
      sa[346] = 0.21749903f;
      sa[347] = -0.15851295f;
      sa[348] = 0.2586447f;
      sa[349] = -0.2734319f;
      sa[350] = -0.15835145f;
      sa[351] = 0.3696258f;
      sa[352] = 0.20514423f;
      sa[353] = -0.052462958f;
      sa[354] = 0.063987546f;
      sa[355] = 0.1264589f;
      sa[356] = -0.13666901f;
      sa[357] = 0.25523233f;
      sa[358] = -0.16042075f;
      sa[359] = 0.22324425f;
      sa[360] = 0.21498717f;
      sa[361] = -0.14440414f;
      sa[362] = -0.35339496f;
      sa[363] = 0.22853243f;
      sa[364] = -0.1598528f;
      sa[365] = -0.29530063f;
      sa[366] = -0.059886795f;
      sa[367] = -0.3258448f;
      sa[368] = -0.06252417f;
      sa[369] = 0.2251815f;
      sa[370] = -0.19141297f;
      sa[371] = 0.20381312f;
      sa[372] = -0.076918736f;
      sa[373] = 0.25437483f;
      sa[374] = -0.21870837f;
      sa[375] = -0.35999453f;
      sa[376] = -0.49888143f;
      sa[377] = -0.38067764f;
      sa[378] = 0.48153254f;
      sa[379] = -0.0074321576f;
      sa[380] = -0.17214578f;
      sa[381] = -0.14880453f;
      sa[382] = -0.11598712f;
      sa[383] = -0.1831532f;
      sa[384] = -0.25477445f;
      sa[385] = 0.09262315f;
      sa[386] = -0.14240204f;
      sa[387] = -0.23816f;
      sa[388] = 0.042691298f;
      sa[389] = -0.03924048f;
      sa[390] = -0.081822395f;
      sa[391] = -0.15784466f;
      sa[392] = 0.37923804f;
      sa[393] = 0.29642716f;
      sa[394] = -0.055592533f;
      sa[395] = 0.22833578f;
      sa[396] = 0.40492204f;
      sa[397] = -0.220121f;
      sa[398] = 0.17083727f;
      sa[399] = 0.09557498f;
      sa[400] = 0.15552554f;
      sa[401] = 0.28593293f;
      sa[402] = -0.202719f;
      sa[403] = 0.017970659f;
      sa[404] = 0.2502084f;
      sa[405] = -0.2400423f;
      sa[406] = -0.07537247f;
      sa[407] = 0.16114184f;
      sa[408] = -0.27721286f;
      sa[409] = -0.26822937f;
      sa[410] = -0.18992925f;
      sa[411] = 0.098794155f;
      sa[412] = -0.13854438f;
      sa[413] = 0.17633407f;
      sa[414] = -0.07801776f;
      sa[415] = 0.42583185f;
      sa[416] = -0.25377616f;
      sa[417] = -0.02606641f;
      sa[418] = -0.05117633f;
      sa[419] = 0.2165906f;
      sa[420] = 0.2448128f;
      sa[421] = 0.29221866f;
      sa[422] = 0.10646312f;
      sa[423] = -0.03692899f;
      sa[424] = 0.08544103f;
      sa[425] = -0.102888174f;
      sa[426] = -0.29288638f;
      sa[427] = 0.17870077f;
      sa[428] = -0.17283678f;
      sa[429] = -0.1738692f;
      sa[430] = 0.12188675f;
      sa[431] = -0.072554894f;
      sa[432] = -0.022885857f;
      sa[433] = 0.12274685f;
      sa[434] = 0.21242854f;
      sa[435] = -0.021524763f;
      sa[436] = -0.3286474f;
      sa[437] = -0.2529141f;
      sa[438] = -0.02908198f;
      sa[439] = -0.046462156f;
      sa[440] = 0.3537042f;
      sa[441] = -0.39141876f;
      sa[442] = 0.10784126f;
      sa[443] = 0.061244387f;
      sa[444] = -0.25319332f;
      sa[445] = 0.07732861f;
      sa[446] = 0.22930765f;
      sa[447] = 0.045331262f;
      sa[448] = 0.179108f;
      sa[449] = 0.25146827f;
      sa[450] = -0.08458987f;
      sa[451] = 0.12794131f;
      sa[452] = 0.16475041f;
      sa[453] = -0.105716035f;
      sa[454] = -0.19082268f;
      sa[455] = -0.1405308f;
      sa[456] = -0.08601144f;
      sa[457] = 0.10606666f;
      sa[458] = -0.1970397f;
      sa[459] = 0.31276357f;
      sa[460] = 0.20597224f;
      sa[461] = 0.24986108f;
      sa[462] = 0.03143372f;
      sa[463] = 0.18021953f;
      sa[464] = -0.4746385f;
      sa[465] = 0.24433023f;
      sa[466] = 0.0075548305f;
      sa[467] = 0.11246372f;
      sa[468] = 8.547498E-4f;
      sa[469] = 0.32972735f;
      sa[470] = 0.2341788f;
      sa[471] = -0.05460736f;
      sa[472] = 0.011245959f;
      sa[473] = -0.14625067f;
      sa[474] = -0.04534408f;
      sa[475] = 0.10387477f;
      sa[476] = 0.19940333f;
      sa[477] = -0.09577592f;
      sa[478] = 0.1430192f;
      sa[479] = -0.2371299f;
      sa[480] = -0.32410824f;
      sa[481] = -0.24775918f;
      sa[482] = -0.29867327f;
      sa[483] = 0.21085587f;
      sa[484] = 0.27536646f;
      sa[485] = 0.2189945f;
      sa[486] = 0.14916424f;
      sa[487] = -0.19622721f;
      sa[488] = -0.22242463f;
      sa[489] = 0.091908626f;
      sa[490] = -0.028958824f;
      sa[491] = -0.2754018f;
      sa[492] = 0.2724324f;
      sa[493] = 0.29056558f;
      sa[494] = -0.13390253f;
      sa[495] = 0.39186466f;
      sa[496] = -0.0033564179f;
      sa[497] = 0.091287784f;
      sa[498] = 0.18010262f;
      sa[499] = 0.17772229f;
      sa[500] = -0.02665133f;
      sa[501] = 0.07611413f;
      sa[502] = 0.29601732f;
      sa[503] = 0.22825488f;
      sa[504] = -0.231426f;
      sa[505] = -0.22267146f;
      sa[506] = 0.44312662f;
      sa[507] = 0.06864266f;
      sa[508] = 0.17300469f;
      sa[509] = 0.3086896f;
      sa[510] = 0.30289796f;
      sa[511] = 0.113481395f;
      sa[512] = -0.037663534f;
      sa[513] = -0.024854794f;
      sa[514] = 0.17030495f;
      sa[515] = -0.12454223f;
      sa[516] = 0.05805184f;
      sa[517] = 0.18857081f;
      sa[518] = 0.23686747f;
      sa[519] = -0.017239815f;
      sa[520] = 0.2656562f;
      sa[521] = 0.2452173f;
      sa[522] = 0.01444925f;
      sa[523] = 0.09429603f;
      sa[524] = 0.2110342f;
      sa[525] = 0.21224965f;
      sa[526] = 0.09016693f;
      sa[527] = -0.039929967f;
      sa[528] = 0.08919077f;
      sa[529] = 0.087496884f;
      sa[530] = -0.2700739f;
      sa[531] = -0.079386644f;
      sa[532] = 0.16552794f;
      sa[533] = 0.15151486f;
      sa[534] = 0.20154732f;
      sa[535] = -0.060488176f;
      sa[536] = 0.1853496f;
      sa[537] = -0.07035742f;
      sa[538] = 0.10570167f;
      sa[539] = 0.23141721f;
      sa[540] = -0.23987715f;
      sa[541] = -0.20673837f;
      sa[542] = -0.24184008f;
      sa[543] = -0.47096136f;
      sa[544] = 0.12259742f;
      sa[545] = 0.10708054f;
      sa[546] = 0.06404448f;
      sa[547] = 0.22972904f;
      sa[548] = 0.10880808f;
      sa[549] = 0.22981487f;
      sa[550] = 0.07418156f;
      sa[551] = -0.11684572f;
      sa[552] = 0.09392896f;
      sa[553] = -0.02454637f;
      sa[554] = -0.100131474f;
      sa[555] = -0.08610902f;
      sa[556] = -0.1919529f;
      sa[557] = -0.22976571f;
      sa[558] = -0.097200714f;
      sa[559] = 0.12011625f;
      sa[560] = -0.3114644f;
      sa[561] = -0.113987364f;
      sa[562] = 0.22669902f;
      sa[563] = -0.0775076f;
      sa[564] = 0.2402982f;
      sa[565] = 0.09350815f;
      sa[566] = 0.38108152f;
      sa[567] = 0.2721442f;
      sa[568] = -0.07451452f;
      sa[569] = 0.01898423f;
      sa[570] = -0.035605185f;
      sa[571] = -0.08198361f;
      sa[572] = -0.1395325f;
      sa[573] = 0.07177912f;
      sa[574] = 0.40293282f;
      sa[575] = -0.13886255f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_11_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.49237677f;
      sa[1] = 0.16779986f;
      sa[2] = -0.14972061f;
      sa[3] = -0.13592242f;
      sa[4] = 0.080801666f;
      sa[5] = 0.026492333f;
      sa[6] = 0.13564272f;
      sa[7] = 0.06477661f;
      sa[8] = -0.21564732f;
      sa[9] = 0.24624242f;
      sa[10] = -0.19945924f;
      sa[11] = 0.20664817f;
      sa[12] = 0.18295613f;
      sa[13] = 0.09239381f;
      sa[14] = -0.18015827f;
      sa[15] = 0.4781823f;
      sa[16] = 0.43496662f;
      sa[17] = -0.11393244f;
      sa[18] = -0.027692053f;
      sa[19] = -0.0025736908f;
      sa[20] = 0.32340753f;
      sa[21] = 0.005243908f;
      sa[22] = -0.18968675f;
      sa[23] = 0.2701642f;
      sa[24] = -0.31472543f;
      sa[25] = 0.21061176f;
      sa[26] = -0.07485279f;
      sa[27] = 0.42798072f;
      sa[28] = -0.38103467f;
      sa[29] = -0.18898578f;
      sa[30] = 0.11117017f;
      sa[31] = -0.17301078f;
      sa[32] = -0.38930464f;
      sa[33] = -0.46772102f;
      sa[34] = -0.0069964956f;
      sa[35] = 0.34055376f;
      sa[36] = -0.1268859f;
      sa[37] = -0.024040937f;
      sa[38] = 0.07587715f;
      sa[39] = 0.17080362f;
      sa[40] = -0.2670156f;
      sa[41] = -0.3496578f;
      sa[42] = -0.40738696f;
      sa[43] = -0.43430662f;
      sa[44] = -0.07255592f;
      sa[45] = -0.4576485f;
      sa[46] = 0.27934408f;
      sa[47] = 0.310002f;
      sa[48] = -0.36198997f;
      sa[49] = -0.2722836f;
      sa[50] = 0.078557685f;
      sa[51] = -0.08440126f;
      sa[52] = 0.13419034f;
      sa[53] = 0.13332655f;
      sa[54] = -0.111593746f;
      sa[55] = 0.35163903f;
      sa[56] = -0.31211028f;
      sa[57] = -0.29233962f;
      sa[58] = -0.010396249f;
      sa[59] = -0.03363974f;
      sa[60] = 0.36434337f;
      sa[61] = -0.22722013f;
      sa[62] = -0.14119089f;
      sa[63] = 0.21464151f;
      sa[64] = 0.31038836f;
      sa[65] = -0.17993718f;
      sa[66] = 0.12220307f;
      sa[67] = 0.33229792f;
      sa[68] = 0.18900268f;
      sa[69] = -0.3157784f;
      sa[70] = -0.4553629f;
      sa[71] = -0.15494172f;
      sa[72] = -0.3870407f;
      sa[73] = 0.28427613f;
      sa[74] = 0.45228148f;
      sa[75] = -0.062595375f;
      sa[76] = 0.22059259f;
      sa[77] = 0.14179957f;
      sa[78] = -0.39229876f;
      sa[79] = 0.29453367f;
      sa[80] = -0.19908701f;
      sa[81] = 0.023857636f;
      sa[82] = 0.22696729f;
      sa[83] = -0.14314856f;
      sa[84] = -0.4268569f;
      sa[85] = -0.35247132f;
      sa[86] = 0.07027747f;
      sa[87] = 0.29949513f;
      sa[88] = -0.44943702f;
      sa[89] = -0.1495596f;
      sa[90] = -0.35600924f;
      sa[91] = 0.39258695f;
      sa[92] = -0.09242714f;
      sa[93] = 0.071693555f;
      sa[94] = -0.42311537f;
      sa[95] = -0.09784722f;
      sa[96] = -0.2950858f;
      sa[97] = 0.0071048914f;
      sa[98] = -0.06477487f;
      sa[99] = 0.11157199f;
      sa[100] = -0.38294283f;
      sa[101] = -0.20965026f;
      sa[102] = 0.25694585f;
      sa[103] = 0.06787903f;
      sa[104] = -0.11408421f;
      sa[105] = -0.13691561f;
      sa[106] = 0.19204727f;
      sa[107] = 0.3123329f;
      sa[108] = 0.18973428f;
      sa[109] = -0.0047001094f;
      sa[110] = 0.15922926f;
      sa[111] = -0.1708544f;
      sa[112] = -0.24187735f;
      sa[113] = 0.0148911765f;
      sa[114] = 0.053327248f;
      sa[115] = -0.12804376f;
      sa[116] = 0.271211f;
      sa[117] = -0.071503006f;
      sa[118] = -0.41295582f;
      sa[119] = -0.17646626f;
      sa[120] = -0.14031981f;
      sa[121] = 0.26213297f;
      sa[122] = -0.07131929f;
      sa[123] = 0.06790773f;
      sa[124] = -0.20451689f;
      sa[125] = 0.2295632f;
      sa[126] = -0.2562416f;
      sa[127] = 0.19362755f;
      sa[128] = -0.44967672f;
      sa[129] = 0.12976f;
      sa[130] = -0.10186329f;
      sa[131] = 0.16457082f;
      sa[132] = 0.031910997f;
      sa[133] = 0.16984789f;
      sa[134] = 0.25147972f;
      sa[135] = -0.5486971f;
      sa[136] = 0.11692255f;
      sa[137] = -0.16317622f;
      sa[138] = 0.041079074f;
      sa[139] = 0.2649677f;
      sa[140] = -0.1592714f;
      sa[141] = -0.052443802f;
      sa[142] = -0.05184829f;
      sa[143] = -0.3022068f;
      sa[144] = 0.347552f;
      sa[145] = -0.23739685f;
      sa[146] = 0.07594803f;
      sa[147] = -0.0029094254f;
      sa[148] = -0.2657576f;
      sa[149] = 0.35101205f;
      sa[150] = -0.20035493f;
      sa[151] = -0.5004534f;
      sa[152] = 0.47597897f;
      sa[153] = -0.12661262f;
      sa[154] = 0.4141825f;
      sa[155] = -0.4080129f;
      sa[156] = -0.38131586f;
      sa[157] = -0.28307936f;
      sa[158] = -0.034969993f;
      sa[159] = -0.38863385f;
      sa[160] = 0.14975184f;
      sa[161] = -0.33753106f;
      sa[162] = 0.39270487f;
      sa[163] = -0.30405328f;
      sa[164] = 0.12702985f;
      sa[165] = -0.24224496f;
      sa[166] = 0.32709852f;
      sa[167] = -0.42951244f;
      sa[168] = 0.19092624f;
      sa[169] = -0.46127212f;
      sa[170] = 0.2864951f;
      sa[171] = 0.20797727f;
      sa[172] = 0.36278805f;
      sa[173] = 0.3725157f;
      sa[174] = -0.13967754f;
      sa[175] = -0.05512688f;
      sa[176] = -0.019803885f;
      sa[177] = 0.31591505f;
      sa[178] = -0.25266907f;
      sa[179] = -0.036583614f;
      sa[180] = -0.3053004f;
      sa[181] = -0.17318031f;
      sa[182] = 0.0541696f;
      sa[183] = -0.08421077f;
      sa[184] = 0.4967615f;
      sa[185] = 0.33781603f;
      sa[186] = -0.07245937f;
      sa[187] = -0.15145943f;
      sa[188] = 0.013221407f;
      sa[189] = -0.14137053f;
      sa[190] = -0.20412748f;
      sa[191] = -0.07057163f;
      sa[192] = -0.10043881f;
      sa[193] = 0.14691992f;
      sa[194] = -0.2617587f;
      sa[195] = -0.26494497f;
      sa[196] = 0.19057761f;
      sa[197] = -0.10480752f;
      sa[198] = 0.16611466f;
      sa[199] = 0.35885924f;
      sa[200] = 0.0681103f;
      sa[201] = 0.26354194f;
      sa[202] = 0.39553574f;
      sa[203] = -0.41026688f;
      sa[204] = 0.13251255f;
      sa[205] = 0.36672944f;
      sa[206] = -0.14284816f;
      sa[207] = 0.12250349f;
      sa[208] = -0.31473503f;
      sa[209] = 0.08733931f;
      sa[210] = -0.12222418f;
      sa[211] = -0.34589198f;
      sa[212] = -0.42832318f;
      sa[213] = -0.033006653f;
      sa[214] = -0.37886402f;
      sa[215] = -0.113321476f;
      sa[216] = 0.06260445f;
      sa[217] = 0.28626436f;
      sa[218] = -0.030936144f;
      sa[219] = 0.05908264f;
      sa[220] = 0.13340229f;
      sa[221] = -0.050149705f;
      sa[222] = -0.34237048f;
      sa[223] = -0.38638204f;
      sa[224] = 0.40399092f;
      sa[225] = -0.0034016205f;
      sa[226] = -0.0019047271f;
      sa[227] = 0.072594196f;
      sa[228] = -0.068227865f;
      sa[229] = -0.2729975f;
      sa[230] = -0.31883988f;
      sa[231] = -0.1314946f;
      sa[232] = 0.35193592f;
      sa[233] = -0.2416113f;
      sa[234] = -0.31863654f;
      sa[235] = 0.0041270577f;
      sa[236] = -0.3868412f;
      sa[237] = 0.52125144f;
      sa[238] = 0.23538643f;
      sa[239] = -0.08745047f;
      sa[240] = -0.17651391f;
      sa[241] = -0.67733616f;
      sa[242] = -0.23340851f;
      sa[243] = 0.34470722f;
      sa[244] = 0.20507409f;
      sa[245] = 0.38405162f;
      sa[246] = 0.31436607f;
      sa[247] = -0.4899707f;
      sa[248] = -0.21966922f;
      sa[249] = -0.04362803f;
      sa[250] = 0.3048224f;
      sa[251] = 0.3537049f;
      sa[252] = 0.09551784f;
      sa[253] = -0.3614135f;
      sa[254] = 0.3550893f;
      sa[255] = 0.04615283f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_11_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_ReLU_11_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.018720262f;
      sa[1] = -1.6768165f;
      sa[2] = -1.5869422f;
      sa[3] = 1.2558793f;
      sa[4] = 0.35455158f;
      sa[5] = -0.23584306f;
      sa[6] = -1.6722045f;
      sa[7] = 1.4263111f;
      sa[8] = 1.7128724f;
      sa[9] = 0.16722205f;
      sa[10] = 1.5926658f;
      sa[11] = 1.3312902f;
      sa[12] = 1.6789509f;
      sa[13] = -0.5417147f;
      sa[14] = -2.0049753f;
      sa[15] = -0.73815185f;
      sa[16] = 0.72453916f;
      sa[17] = -0.7541857f;
      sa[18] = -1.4686854f;
      sa[19] = -0.91754717f;
      sa[20] = -2.0138607f;
      sa[21] = 0.21443346f;
      sa[22] = -1.9237261f;
      sa[23] = -0.6853091f;
      sa[24] = -0.51624554f;
      sa[25] = 1.8828261f;
      sa[26] = -0.30514136f;
      sa[27] = 1.1672617f;
      sa[28] = 1.144374f;
      sa[29] = -0.7188363f;
      sa[30] = 0.16007143f;
      sa[31] = 0.16880523f;
      sa[32] = 0.3949118f;
      sa[33] = 0.06810501f;
      sa[34] = -0.5994312f;
      sa[35] = 0.9410698f;
      sa[36] = 0.43571147f;
      sa[37] = -1.3626845f;
      sa[38] = 0.556975f;
      sa[39] = -0.2412828f;
      sa[40] = 0.25098822f;
      sa[41] = -0.6653734f;
      sa[42] = 0.5278119f;
      sa[43] = -0.03726051f;
      sa[44] = 0.9109003f;
      sa[45] = -1.968182f;
      sa[46] = -2.2817364f;
      sa[47] = 0.054705057f;
      sa[48] = 1.628665f;
      sa[49] = -0.166254f;
      sa[50] = -0.46500468f;
      sa[51] = 1.7772995f;
      sa[52] = -1.583713f;
      sa[53] = 0.96826285f;
      sa[54] = 1.7327359f;
      sa[55] = 1.1001065f;
      sa[56] = -0.6740006f;
      sa[57] = -0.28375557f;
      sa[58] = 0.9525818f;
      sa[59] = 0.80773926f;
      sa[60] = -1.3655668f;
      sa[61] = 0.90221524f;
      sa[62] = -0.3399011f;
      sa[63] = -0.89504766f;
      sa[64] = 1.040611f;
      sa[65] = -0.818298f;
      sa[66] = -1.7520949f;
      sa[67] = -0.06598399f;
      sa[68] = 0.93217707f;
      sa[69] = -1.3019693f;
      sa[70] = -1.5763383f;
      sa[71] = 0.030839141f;
      sa[72] = -0.9637084f;
      sa[73] = -1.1859115f;
      sa[74] = -1.0718783f;
      sa[75] = 1.3692056f;
      sa[76] = 1.9520531f;
      sa[77] = -0.59654146f;
      sa[78] = -1.3130414f;
      sa[79] = -0.386278f;
      sa[80] = 0.4816055f;
      sa[81] = -1.6647973f;
      sa[82] = -0.21079957f;
      sa[83] = -1.4131548f;
      sa[84] = 1.547124f;
      sa[85] = 0.9821886f;
      sa[86] = -2.0295966f;
      sa[87] = 1.0093646f;
      sa[88] = -1.6621174f;
      sa[89] = -1.0673853f;
      sa[90] = 0.22485083f;
      sa[91] = -0.047260888f;
      sa[92] = 1.2192329f;
      sa[93] = 1.8302256f;
      sa[94] = 1.530027f;
      sa[95] = 0.6179033f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_11 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_11_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_11_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_11_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_ReLU_11_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


