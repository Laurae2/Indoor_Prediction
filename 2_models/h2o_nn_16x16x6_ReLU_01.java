/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:50:01.995+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_01

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_01 > h2o_nn_16x16x6_ReLU_01.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_01.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_01", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_01 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_01_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_01_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_01_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_01_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_01_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_01_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_01_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_01_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_01_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_01_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_01_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_01_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_01.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_01_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25,0.25,0.125,0.25,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_01() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-1650548895934952480L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_01_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_01_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_01_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_01_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_01_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_01_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_01_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_01_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_01_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_01_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_01_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_01_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_01_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_01_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_01_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_01_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.6414644267590274;
      sa[1] = 0.5719204229526639;
      sa[2] = 0.43165595546343616;
      sa[3] = 0.5302819883062446;
      sa[4] = 0.44309764425946724;
      sa[5] = 0.5839586921225459;
      sa[6] = 0.5178472780217656;
      sa[7] = 0.7070362373673685;
      sa[8] = 0.48694655139636395;
      sa[9] = 0.4114573784834094;
      sa[10] = 0.3912692255715558;
      sa[11] = 0.41597366391717855;
      sa[12] = 0.27977779947153103;
      sa[13] = 0.4853152477748656;
      sa[14] = 0.5837366201355348;
      sa[15] = 0.6784997640754675;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_01_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_01_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_01_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.0721664880027215;
      sa[1] = 0.9709274759578856;
      sa[2] = 0.9701509886571327;
      sa[3] = 0.9858823663546114;
      sa[4] = 0.9996703485863608;
      sa[5] = 0.9816767878607476;
      sa[6] = 0.9459338350148023;
      sa[7] = 0.9613454878506635;
      sa[8] = 0.8742240929723412;
      sa[9] = 1.0044083007881606;
      sa[10] = 0.8458402014966863;
      sa[11] = 0.9978922821498142;
      sa[12] = 1.0142772530837598;
      sa[13] = 0.9528532302660059;
      sa[14] = 1.072248020481774;
      sa[15] = 0.9938634833510909;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_01_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_01_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_01_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.05529489056885513;
      sa[1] = 6.60268387606805E-4;
      sa[2] = -0.04057966467057794;
      sa[3] = 0.004280532590140051;
      sa[4] = 0.044692895734816204;
    }
  }
}
class h2o_nn_16x16x6_ReLU_01_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_01_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_01_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_01_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.018939335f;
      sa[1] = 0.29406384f;
      sa[2] = 0.27520573f;
      sa[3] = 0.33721277f;
      sa[4] = -0.15454732f;
      sa[5] = -0.16347809f;
      sa[6] = -0.0035684824f;
      sa[7] = 0.29884002f;
      sa[8] = 0.1266346f;
      sa[9] = -0.11693656f;
      sa[10] = -0.11643371f;
      sa[11] = -0.27751985f;
      sa[12] = 0.14956883f;
      sa[13] = -0.25336155f;
      sa[14] = -0.14854589f;
      sa[15] = 0.05549244f;
      sa[16] = 0.15100342f;
      sa[17] = 0.23523909f;
      sa[18] = -0.26118913f;
      sa[19] = 0.16998836f;
      sa[20] = 0.32537037f;
      sa[21] = -0.28445604f;
      sa[22] = 0.32630995f;
      sa[23] = -0.09986626f;
      sa[24] = 0.33701378f;
      sa[25] = 0.19389611f;
      sa[26] = -0.30865714f;
      sa[27] = 0.2979551f;
      sa[28] = 0.31558865f;
      sa[29] = -0.26247454f;
      sa[30] = -0.15052895f;
      sa[31] = 0.23985994f;
      sa[32] = 0.2978605f;
      sa[33] = -0.38467473f;
      sa[34] = 0.09747507f;
      sa[35] = -0.06000536f;
      sa[36] = 0.08294663f;
      sa[37] = 0.3440878f;
      sa[38] = 0.014471215f;
      sa[39] = 0.22989804f;
      sa[40] = 0.026424184f;
      sa[41] = -0.08283921f;
      sa[42] = -0.12898642f;
      sa[43] = 0.13904607f;
      sa[44] = 0.2531721f;
      sa[45] = -0.1671103f;
      sa[46] = 0.12433302f;
      sa[47] = -0.06500106f;
      sa[48] = 0.30152595f;
      sa[49] = 0.30376902f;
      sa[50] = 0.27380973f;
      sa[51] = -0.20944574f;
      sa[52] = -0.038056098f;
      sa[53] = 0.3871297f;
      sa[54] = 0.20805486f;
      sa[55] = 0.13777302f;
      sa[56] = -0.13059835f;
      sa[57] = -0.30169365f;
      sa[58] = 0.3446653f;
      sa[59] = -0.10996902f;
      sa[60] = -0.24360624f;
      sa[61] = 0.25372604f;
      sa[62] = 0.11023666f;
      sa[63] = 0.09659766f;
      sa[64] = 0.175371f;
      sa[65] = 0.13314275f;
      sa[66] = 0.021319749f;
      sa[67] = 0.20754479f;
      sa[68] = -0.009573915f;
      sa[69] = 0.09713121f;
      sa[70] = -0.08553758f;
      sa[71] = 0.4225361f;
      sa[72] = -0.14766109f;
      sa[73] = 0.19925508f;
      sa[74] = -0.24812506f;
      sa[75] = -0.028800825f;
      sa[76] = -0.22192158f;
      sa[77] = -0.07092758f;
      sa[78] = -0.07307323f;
      sa[79] = 0.15003866f;
      sa[80] = -0.22967283f;
      sa[81] = -0.17111857f;
      sa[82] = -0.03997571f;
      sa[83] = 0.09350434f;
      sa[84] = -0.0454139f;
      sa[85] = -0.1979258f;
      sa[86] = 0.17144674f;
      sa[87] = 0.25327918f;
      sa[88] = 0.22083473f;
      sa[89] = 0.0075538075f;
      sa[90] = -0.11445851f;
      sa[91] = 0.21677713f;
      sa[92] = 0.08514747f;
      sa[93] = -0.24776638f;
      sa[94] = -0.21335849f;
      sa[95] = -0.28034496f;
      sa[96] = 0.13683714f;
      sa[97] = 0.05419801f;
      sa[98] = 0.24376783f;
      sa[99] = -0.03758191f;
      sa[100] = -0.083501585f;
      sa[101] = -0.21568185f;
      sa[102] = -0.29002854f;
      sa[103] = -0.11346567f;
      sa[104] = -0.1122426f;
      sa[105] = -0.11520487f;
      sa[106] = -0.19670337f;
      sa[107] = 0.1493542f;
      sa[108] = 0.16956906f;
      sa[109] = -0.25622246f;
      sa[110] = -0.15918572f;
      sa[111] = 0.1777464f;
      sa[112] = 0.15902165f;
      sa[113] = 0.050735302f;
      sa[114] = -0.15791775f;
      sa[115] = -0.074071564f;
      sa[116] = -0.25061202f;
      sa[117] = -0.03178812f;
      sa[118] = -0.29304215f;
      sa[119] = -0.21563245f;
      sa[120] = 0.24140622f;
      sa[121] = 0.25045604f;
      sa[122] = 0.31687284f;
      sa[123] = 0.2527213f;
      sa[124] = 0.27371457f;
      sa[125] = 0.25370693f;
      sa[126] = -0.28149724f;
      sa[127] = -0.25112873f;
      sa[128] = 0.108092435f;
      sa[129] = 0.20906825f;
      sa[130] = -0.107983366f;
      sa[131] = 0.32326338f;
      sa[132] = 0.20261821f;
      sa[133] = -0.3378273f;
      sa[134] = 0.115467824f;
      sa[135] = -0.30410406f;
      sa[136] = -0.27695283f;
      sa[137] = -0.009013101f;
      sa[138] = 0.14328438f;
      sa[139] = -0.09969194f;
      sa[140] = -0.101620816f;
      sa[141] = -0.21358474f;
      sa[142] = 0.122153826f;
      sa[143] = -0.320807f;
      sa[144] = 0.29650545f;
      sa[145] = -0.16568683f;
      sa[146] = -0.25975415f;
      sa[147] = 0.2213947f;
      sa[148] = 0.18684524f;
      sa[149] = 0.1945774f;
      sa[150] = 0.30106655f;
      sa[151] = -0.27655137f;
      sa[152] = 0.06991217f;
      sa[153] = 0.2922394f;
      sa[154] = 0.27253985f;
      sa[155] = -0.19704106f;
      sa[156] = 0.12897864f;
      sa[157] = -0.22677444f;
      sa[158] = 0.06316541f;
      sa[159] = 0.06459563f;
      sa[160] = 0.061101247f;
      sa[161] = 0.12331748f;
      sa[162] = -0.1619415f;
      sa[163] = -0.13740928f;
      sa[164] = 0.27221256f;
      sa[165] = -0.010381534f;
      sa[166] = -0.07032244f;
      sa[167] = -0.12527879f;
      sa[168] = 0.17533024f;
      sa[169] = 0.33831382f;
      sa[170] = 0.037261516f;
      sa[171] = -0.108755015f;
      sa[172] = -0.060535774f;
      sa[173] = -0.15537742f;
      sa[174] = -0.023381507f;
      sa[175] = -0.2847408f;
      sa[176] = -0.021576485f;
      sa[177] = -0.07338789f;
      sa[178] = -0.12429788f;
      sa[179] = 0.037473153f;
      sa[180] = -0.07993334f;
      sa[181] = -0.18146436f;
      sa[182] = -0.2040183f;
      sa[183] = 0.2151665f;
      sa[184] = 0.30490714f;
      sa[185] = 0.17456692f;
      sa[186] = -0.3594473f;
      sa[187] = 0.013798094f;
      sa[188] = -0.07102357f;
      sa[189] = 0.19913895f;
      sa[190] = -0.027045064f;
      sa[191] = 0.022480331f;
      sa[192] = -0.13834107f;
      sa[193] = 0.24343428f;
      sa[194] = 0.06548191f;
      sa[195] = 0.31292593f;
      sa[196] = 0.4270693f;
      sa[197] = 0.008344446f;
      sa[198] = 0.078536324f;
      sa[199] = -0.12425816f;
      sa[200] = 0.058130756f;
      sa[201] = -0.28624874f;
      sa[202] = 0.114344545f;
      sa[203] = 0.046857968f;
      sa[204] = -0.18451352f;
      sa[205] = 0.10853493f;
      sa[206] = 0.21306978f;
      sa[207] = 0.114843816f;
      sa[208] = -0.2250893f;
      sa[209] = -0.051172372f;
      sa[210] = -0.2969185f;
      sa[211] = -0.2171054f;
      sa[212] = 0.41479918f;
      sa[213] = -0.12506332f;
      sa[214] = -0.037301116f;
      sa[215] = 0.028946236f;
      sa[216] = 0.035921514f;
      sa[217] = 0.16552165f;
      sa[218] = -0.20316988f;
      sa[219] = 0.1426745f;
      sa[220] = -0.22277944f;
      sa[221] = 0.08677721f;
      sa[222] = 0.2728637f;
      sa[223] = 0.036165733f;
      sa[224] = 0.065021485f;
      sa[225] = 0.3380393f;
      sa[226] = -0.25105506f;
      sa[227] = 0.28991142f;
      sa[228] = 0.123449266f;
      sa[229] = 0.11630957f;
      sa[230] = 0.29142797f;
      sa[231] = -0.3018435f;
      sa[232] = -0.2639934f;
      sa[233] = 0.09617452f;
      sa[234] = 0.14797491f;
      sa[235] = -0.21633323f;
      sa[236] = -0.0708168f;
      sa[237] = -0.27129027f;
      sa[238] = -0.25042224f;
      sa[239] = 0.10098155f;
      sa[240] = 0.017733138f;
      sa[241] = -0.22562802f;
      sa[242] = -0.103168815f;
      sa[243] = -0.12097576f;
      sa[244] = -0.24877283f;
      sa[245] = -0.15171702f;
      sa[246] = -0.26314315f;
      sa[247] = -0.10703237f;
      sa[248] = 0.20377658f;
      sa[249] = 0.2324438f;
      sa[250] = -0.18128256f;
      sa[251] = -0.053827304f;
      sa[252] = -0.34336904f;
      sa[253] = -0.37034616f;
      sa[254] = -0.25099304f;
      sa[255] = 0.186648f;
      sa[256] = -0.12463006f;
      sa[257] = 0.37055194f;
      sa[258] = -0.20709954f;
      sa[259] = -0.09546161f;
      sa[260] = -0.27746072f;
      sa[261] = -0.08592357f;
      sa[262] = -0.14664172f;
      sa[263] = 0.24021035f;
      sa[264] = -0.12049832f;
      sa[265] = 0.12112396f;
      sa[266] = -0.25087705f;
      sa[267] = -0.22057337f;
      sa[268] = 0.08507789f;
      sa[269] = -0.17169867f;
      sa[270] = 0.017463475f;
      sa[271] = 0.20221056f;
      sa[272] = -0.057054557f;
      sa[273] = -0.07882742f;
      sa[274] = 0.18068035f;
      sa[275] = 0.05495382f;
      sa[276] = 0.13681163f;
      sa[277] = -0.2470387f;
      sa[278] = -0.09111527f;
      sa[279] = 0.22417602f;
      sa[280] = -0.12156695f;
      sa[281] = 0.37854877f;
      sa[282] = -0.011408101f;
      sa[283] = 0.025405897f;
      sa[284] = 0.027997004f;
      sa[285] = -0.2019648f;
      sa[286] = 0.25952226f;
      sa[287] = 0.15053491f;
      sa[288] = -0.18861128f;
      sa[289] = -0.11538975f;
      sa[290] = -0.11690236f;
      sa[291] = 0.2165943f;
      sa[292] = 0.10444618f;
      sa[293] = -0.14039472f;
      sa[294] = 0.04557184f;
      sa[295] = 0.10431549f;
      sa[296] = 0.2675248f;
      sa[297] = 0.22227609f;
      sa[298] = -0.032112226f;
      sa[299] = 0.058712363f;
      sa[300] = -0.008303071f;
      sa[301] = -0.08693113f;
      sa[302] = 0.14842026f;
      sa[303] = 0.07370266f;
      sa[304] = -0.11180693f;
      sa[305] = -7.3356275E-4f;
      sa[306] = 0.16617967f;
      sa[307] = -0.2473011f;
      sa[308] = 0.12985502f;
      sa[309] = 0.17221011f;
      sa[310] = 0.29068452f;
      sa[311] = 0.3807829f;
      sa[312] = -0.23037827f;
      sa[313] = -0.18898512f;
      sa[314] = -0.19921555f;
      sa[315] = -0.110073745f;
      sa[316] = -0.003911824f;
      sa[317] = -0.089525074f;
      sa[318] = 0.08380799f;
      sa[319] = 0.35014015f;
      sa[320] = 0.17535727f;
      sa[321] = 0.28532526f;
      sa[322] = 0.16866058f;
      sa[323] = -0.25902817f;
      sa[324] = 0.030184042f;
      sa[325] = 0.37858084f;
      sa[326] = -0.25796697f;
      sa[327] = 0.08869315f;
      sa[328] = -0.11384457f;
      sa[329] = 0.21272896f;
      sa[330] = -0.24754691f;
      sa[331] = -0.013004533f;
      sa[332] = -0.24213748f;
      sa[333] = 0.12053846f;
      sa[334] = -0.11423665f;
      sa[335] = 0.26129004f;
      sa[336] = -0.19009653f;
      sa[337] = -0.22803697f;
      sa[338] = 0.25834212f;
      sa[339] = -0.25642616f;
      sa[340] = -0.33364707f;
      sa[341] = -0.39896178f;
      sa[342] = 0.21140797f;
      sa[343] = -0.17955624f;
      sa[344] = -0.17439291f;
      sa[345] = 0.22279611f;
      sa[346] = 0.20594193f;
      sa[347] = -0.18298322f;
      sa[348] = 0.319065f;
      sa[349] = -0.4058778f;
      sa[350] = -0.24559662f;
      sa[351] = 0.05760958f;
      sa[352] = 0.21494319f;
      sa[353] = -0.057739727f;
      sa[354] = 0.0386495f;
      sa[355] = 0.14724274f;
      sa[356] = -0.0987221f;
      sa[357] = 0.23042399f;
      sa[358] = -0.39021152f;
      sa[359] = -0.023319969f;
      sa[360] = 0.053326365f;
      sa[361] = -0.046070088f;
      sa[362] = -0.11369659f;
      sa[363] = 0.16774471f;
      sa[364] = -0.13641371f;
      sa[365] = -0.25208202f;
      sa[366] = -0.014930621f;
      sa[367] = -0.31146982f;
      sa[368] = -0.23444752f;
      sa[369] = 0.26214853f;
      sa[370] = -0.25639248f;
      sa[371] = 0.07984058f;
      sa[372] = -0.038518723f;
      sa[373] = 0.29821303f;
      sa[374] = -0.19847047f;
      sa[375] = -0.3471695f;
      sa[376] = -0.39735505f;
      sa[377] = -0.35585752f;
      sa[378] = 0.3220904f;
      sa[379] = 0.067060925f;
      sa[380] = -0.14741714f;
      sa[381] = -0.10656452f;
      sa[382] = -0.05314969f;
      sa[383] = -0.15322416f;
      sa[384] = -0.12185207f;
      sa[385] = 0.07612903f;
      sa[386] = -0.26532602f;
      sa[387] = -0.2747781f;
      sa[388] = 0.074366786f;
      sa[389] = -0.02255707f;
      sa[390] = -0.014503282f;
      sa[391] = -0.12492224f;
      sa[392] = 0.2305431f;
      sa[393] = 0.2246949f;
      sa[394] = -0.072963364f;
      sa[395] = 0.30065578f;
      sa[396] = 0.216819f;
      sa[397] = -0.30876505f;
      sa[398] = 0.07523371f;
      sa[399] = -0.053560734f;
      sa[400] = 0.1977751f;
      sa[401] = 0.28240812f;
      sa[402] = -0.12844338f;
      sa[403] = 0.06454716f;
      sa[404] = 0.13774388f;
      sa[405] = -0.29466733f;
      sa[406] = -0.14390786f;
      sa[407] = 0.1607382f;
      sa[408] = -0.25739288f;
      sa[409] = -0.26300892f;
      sa[410] = -0.10064044f;
      sa[411] = 0.17464793f;
      sa[412] = -0.14820649f;
      sa[413] = 0.1507425f;
      sa[414] = 0.16608544f;
      sa[415] = 0.38650855f;
      sa[416] = -0.26268068f;
      sa[417] = -0.023797292f;
      sa[418] = -0.048105873f;
      sa[419] = 0.24092375f;
      sa[420] = 0.18330961f;
      sa[421] = 0.26746714f;
      sa[422] = 0.25729555f;
      sa[423] = 0.08761952f;
      sa[424] = 0.060518328f;
      sa[425] = -0.10858402f;
      sa[426] = -0.33471078f;
      sa[427] = 0.16567971f;
      sa[428] = -0.16687854f;
      sa[429] = -0.062798545f;
      sa[430] = 0.2188596f;
      sa[431] = 0.06309324f;
      sa[432] = -0.044297643f;
      sa[433] = 0.108699575f;
      sa[434] = 0.21720636f;
      sa[435] = -0.032413114f;
      sa[436] = -0.328083f;
      sa[437] = -0.30560553f;
      sa[438] = -0.047297206f;
      sa[439] = -0.06900297f;
      sa[440] = 0.3334446f;
      sa[441] = -0.33211553f;
      sa[442] = 0.09817815f;
      sa[443] = 0.06684623f;
      sa[444] = -0.28207678f;
      sa[445] = 0.028609904f;
      sa[446] = 0.1957928f;
      sa[447] = -0.013852735f;
      sa[448] = 0.16485016f;
      sa[449] = 0.27903372f;
      sa[450] = -0.08345556f;
      sa[451] = 0.1345391f;
      sa[452] = 0.13339812f;
      sa[453] = -0.11672021f;
      sa[454] = -0.2293737f;
      sa[455] = -0.17258802f;
      sa[456] = -0.08422439f;
      sa[457] = 0.11828583f;
      sa[458] = -0.22235292f;
      sa[459] = 0.33688474f;
      sa[460] = 0.1952251f;
      sa[461] = 0.25691006f;
      sa[462] = 0.024813432f;
      sa[463] = 0.16036561f;
      sa[464] = -0.37703595f;
      sa[465] = 0.2171669f;
      sa[466] = 0.010170454f;
      sa[467] = 0.13818063f;
      sa[468] = 0.061126363f;
      sa[469] = 0.35933572f;
      sa[470] = 0.28513613f;
      sa[471] = 0.014513903f;
      sa[472] = -0.0012195159f;
      sa[473] = -0.10931464f;
      sa[474] = 0.016648384f;
      sa[475] = 0.19037007f;
      sa[476] = 0.2388813f;
      sa[477] = -0.07965815f;
      sa[478] = 0.19724727f;
      sa[479] = -0.25725415f;
      sa[480] = -0.294269f;
      sa[481] = -0.2051857f;
      sa[482] = -0.23085587f;
      sa[483] = 0.26046667f;
      sa[484] = 0.29269916f;
      sa[485] = 0.21867788f;
      sa[486] = -0.010960069f;
      sa[487] = -0.143305f;
      sa[488] = -0.2070049f;
      sa[489] = 0.07449758f;
      sa[490] = 0.022838615f;
      sa[491] = -0.25335595f;
      sa[492] = 0.23168759f;
      sa[493] = 0.3242364f;
      sa[494] = -0.2589193f;
      sa[495] = 0.26082593f;
      sa[496] = -0.010794771f;
      sa[497] = 0.047989707f;
      sa[498] = 0.17935827f;
      sa[499] = 0.17674945f;
      sa[500] = -0.07769072f;
      sa[501] = -0.049948517f;
      sa[502] = 0.2963471f;
      sa[503] = 0.11059605f;
      sa[504] = -0.25667775f;
      sa[505] = -0.26564613f;
      sa[506] = 0.14407843f;
      sa[507] = -0.017517157f;
      sa[508] = 0.11318651f;
      sa[509] = 0.25558305f;
      sa[510] = 0.1880896f;
      sa[511] = -0.06600884f;
      sa[512] = 0.013304324f;
      sa[513] = -0.13965921f;
      sa[514] = 0.2261157f;
      sa[515] = -0.19742037f;
      sa[516] = 0.017361607f;
      sa[517] = 0.10413225f;
      sa[518] = 0.1385545f;
      sa[519] = -0.10767344f;
      sa[520] = 0.239853f;
      sa[521] = 0.14594477f;
      sa[522] = 0.09525931f;
      sa[523] = 0.17853643f;
      sa[524] = 0.18483502f;
      sa[525] = 0.16905923f;
      sa[526] = -0.0221677f;
      sa[527] = -0.08796279f;
      sa[528] = 2.3299958E-4f;
      sa[529] = 0.09582625f;
      sa[530] = -0.1859476f;
      sa[531] = -0.0041950103f;
      sa[532] = 0.15073518f;
      sa[533] = 0.1327654f;
      sa[534] = 0.14707345f;
      sa[535] = -0.09228006f;
      sa[536] = 0.1651658f;
      sa[537] = -0.15947527f;
      sa[538] = 0.20125f;
      sa[539] = 0.28873384f;
      sa[540] = -0.29397917f;
      sa[541] = -0.17768893f;
      sa[542] = -0.012902183f;
      sa[543] = -0.37927845f;
      sa[544] = 0.2239162f;
      sa[545] = 0.15640765f;
      sa[546] = 0.13615398f;
      sa[547] = 0.25265723f;
      sa[548] = 0.095426574f;
      sa[549] = 0.21968286f;
      sa[550] = 0.026819367f;
      sa[551] = -0.23142868f;
      sa[552] = 0.09001216f;
      sa[553] = -0.03345893f;
      sa[554] = -0.12414112f;
      sa[555] = -0.14550026f;
      sa[556] = -0.21519001f;
      sa[557] = -0.2573919f;
      sa[558] = -0.22879186f;
      sa[559] = 0.19044244f;
      sa[560] = -0.26131123f;
      sa[561] = -0.021984383f;
      sa[562] = 0.28380418f;
      sa[563] = -0.035394553f;
      sa[564] = 0.3267656f;
      sa[565] = 0.050355375f;
      sa[566] = 0.28126413f;
      sa[567] = 0.06724746f;
      sa[568] = -0.034106594f;
      sa[569] = 0.08054224f;
      sa[570] = 0.013381432f;
      sa[571] = -0.03743395f;
      sa[572] = -0.24947312f;
      sa[573] = -0.04801943f;
      sa[574] = 0.30329108f;
      sa[575] = -0.1647876f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_01_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_01_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_01_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.4380439f;
      sa[1] = 0.029330118f;
      sa[2] = -0.11713174f;
      sa[3] = -0.21938263f;
      sa[4] = 0.11244371f;
      sa[5] = 0.11041766f;
      sa[6] = 0.28060853f;
      sa[7] = -0.08978406f;
      sa[8] = -0.26412174f;
      sa[9] = 0.114646144f;
      sa[10] = -0.08355389f;
      sa[11] = 0.1648582f;
      sa[12] = 0.12826774f;
      sa[13] = 0.16842231f;
      sa[14] = -0.23570849f;
      sa[15] = 0.41554567f;
      sa[16] = 0.28414962f;
      sa[17] = -0.14874186f;
      sa[18] = -0.0042222315f;
      sa[19] = -0.12027727f;
      sa[20] = 0.25148207f;
      sa[21] = -0.043114893f;
      sa[22] = -0.30913386f;
      sa[23] = 0.41798714f;
      sa[24] = -0.39598528f;
      sa[25] = 0.13538608f;
      sa[26] = -0.074068986f;
      sa[27] = 0.41866767f;
      sa[28] = -0.40686396f;
      sa[29] = -0.21084799f;
      sa[30] = 0.0782696f;
      sa[31] = -0.1909841f;
      sa[32] = -0.44349304f;
      sa[33] = -0.41323963f;
      sa[34] = -0.0028235465f;
      sa[35] = 0.34309632f;
      sa[36] = -0.18968546f;
      sa[37] = -0.07887651f;
      sa[38] = 0.01987284f;
      sa[39] = 0.30229738f;
      sa[40] = -0.23084162f;
      sa[41] = -0.3422059f;
      sa[42] = -0.2775289f;
      sa[43] = -0.36840773f;
      sa[44] = -0.0065051117f;
      sa[45] = -0.5049523f;
      sa[46] = 0.27085876f;
      sa[47] = 0.37033314f;
      sa[48] = -0.44489625f;
      sa[49] = -0.2783733f;
      sa[50] = 0.06560096f;
      sa[51] = -0.09978543f;
      sa[52] = 0.17171936f;
      sa[53] = 0.1810565f;
      sa[54] = -0.076924026f;
      sa[55] = 0.34155506f;
      sa[56] = -0.2716607f;
      sa[57] = -0.30005026f;
      sa[58] = 0.031808257f;
      sa[59] = -0.051063992f;
      sa[60] = 0.3688006f;
      sa[61] = -0.19977409f;
      sa[62] = -0.1312807f;
      sa[63] = 0.22903988f;
      sa[64] = 0.39665756f;
      sa[65] = -0.16866663f;
      sa[66] = 0.15902375f;
      sa[67] = 0.40687156f;
      sa[68] = 0.20921764f;
      sa[69] = -0.27432245f;
      sa[70] = -0.43837744f;
      sa[71] = -0.13584152f;
      sa[72] = -0.3469728f;
      sa[73] = 0.3452221f;
      sa[74] = 0.33398727f;
      sa[75] = -0.030320238f;
      sa[76] = 0.2222628f;
      sa[77] = 0.12561764f;
      sa[78] = -0.33054516f;
      sa[79] = 0.29363868f;
      sa[80] = -0.21501246f;
      sa[81] = 0.07317234f;
      sa[82] = 0.21658814f;
      sa[83] = -0.1887606f;
      sa[84] = -0.43056127f;
      sa[85] = -0.35561755f;
      sa[86] = 0.045273338f;
      sa[87] = 0.3042009f;
      sa[88] = -0.4321713f;
      sa[89] = -0.17558388f;
      sa[90] = -0.31708091f;
      sa[91] = 0.41163933f;
      sa[92] = -0.07199248f;
      sa[93] = 0.08890877f;
      sa[94] = -0.41091707f;
      sa[95] = -0.054525834f;
      sa[96] = -0.36615875f;
      sa[97] = 0.015292305f;
      sa[98] = -0.031030077f;
      sa[99] = 0.0408386f;
      sa[100] = -0.43478486f;
      sa[101] = -0.16635069f;
      sa[102] = 0.2810219f;
      sa[103] = 0.08829683f;
      sa[104] = -0.12919585f;
      sa[105] = -0.18977726f;
      sa[106] = 0.33730915f;
      sa[107] = 0.3422888f;
      sa[108] = 0.21986692f;
      sa[109] = -0.016171936f;
      sa[110] = 0.17636886f;
      sa[111] = -0.13459313f;
      sa[112] = -0.36712328f;
      sa[113] = 0.024623824f;
      sa[114] = 0.016859869f;
      sa[115] = -0.1378445f;
      sa[116] = 0.29998723f;
      sa[117] = -0.00973053f;
      sa[118] = -0.37802458f;
      sa[119] = -0.24559836f;
      sa[120] = -0.11631949f;
      sa[121] = 0.2458224f;
      sa[122] = -0.057706274f;
      sa[123] = 0.07801589f;
      sa[124] = -0.17388691f;
      sa[125] = 0.20657854f;
      sa[126] = -0.26483375f;
      sa[127] = 0.16669418f;
      sa[128] = -0.39995664f;
      sa[129] = 0.14231262f;
      sa[130] = -0.13274473f;
      sa[131] = 0.16933683f;
      sa[132] = -0.005708323f;
      sa[133] = 0.071212284f;
      sa[134] = 0.1873336f;
      sa[135] = -0.41590443f;
      sa[136] = 0.11667813f;
      sa[137] = -0.11902442f;
      sa[138] = -0.029736893f;
      sa[139] = 0.17988497f;
      sa[140] = -0.2071899f;
      sa[141] = -0.14969961f;
      sa[142] = -0.06277302f;
      sa[143] = -0.30377558f;
      sa[144] = 0.28575093f;
      sa[145] = -0.19650201f;
      sa[146] = 0.029941998f;
      sa[147] = -0.03277502f;
      sa[148] = -0.22841017f;
      sa[149] = 0.3123566f;
      sa[150] = -0.21934508f;
      sa[151] = -0.4640504f;
      sa[152] = 0.46277115f;
      sa[153] = -0.10770973f;
      sa[154] = 0.4154541f;
      sa[155] = -0.42214686f;
      sa[156] = -0.3776756f;
      sa[157] = -0.28686318f;
      sa[158] = -0.120675825f;
      sa[159] = -0.310176f;
      sa[160] = 0.065702595f;
      sa[161] = -0.37729487f;
      sa[162] = 0.3231628f;
      sa[163] = -0.29575992f;
      sa[164] = 0.09483476f;
      sa[165] = -0.27267528f;
      sa[166] = 0.3513421f;
      sa[167] = -0.47815037f;
      sa[168] = 0.22495572f;
      sa[169] = -0.40450725f;
      sa[170] = 0.28836316f;
      sa[171] = 0.1991051f;
      sa[172] = 0.34612757f;
      sa[173] = 0.2627802f;
      sa[174] = -0.16281964f;
      sa[175] = -0.07919869f;
      sa[176] = -0.20797946f;
      sa[177] = 0.064199276f;
      sa[178] = -0.28628874f;
      sa[179] = -0.07774569f;
      sa[180] = -0.33208877f;
      sa[181] = -0.23041566f;
      sa[182] = 0.2384382f;
      sa[183] = -0.3605468f;
      sa[184] = 0.4551803f;
      sa[185] = 0.34439304f;
      sa[186] = -0.089840256f;
      sa[187] = -0.28119928f;
      sa[188] = -0.1098861f;
      sa[189] = -0.1600997f;
      sa[190] = -0.44561908f;
      sa[191] = -0.36574438f;
      sa[192] = -0.026976092f;
      sa[193] = 0.12083134f;
      sa[194] = -0.28691226f;
      sa[195] = -0.21727298f;
      sa[196] = 0.18015197f;
      sa[197] = -0.18932441f;
      sa[198] = 0.054153632f;
      sa[199] = 0.35769594f;
      sa[200] = 0.021886155f;
      sa[201] = 0.2929579f;
      sa[202] = 0.20718668f;
      sa[203] = -0.41600507f;
      sa[204] = 0.10522148f;
      sa[205] = 0.35195613f;
      sa[206] = -0.14468843f;
      sa[207] = 0.11834274f;
      sa[208] = -0.2424897f;
      sa[209] = 0.15891746f;
      sa[210] = -0.12033362f;
      sa[211] = -0.30705982f;
      sa[212] = -0.3678808f;
      sa[213] = 0.017783133f;
      sa[214] = -0.37157476f;
      sa[215] = -0.08965214f;
      sa[216] = 0.09905489f;
      sa[217] = 0.2827839f;
      sa[218] = -0.010728765f;
      sa[219] = 0.095890805f;
      sa[220] = 0.15015747f;
      sa[221] = -0.047506813f;
      sa[222] = -0.29947883f;
      sa[223] = -0.34137723f;
      sa[224] = 0.35255572f;
      sa[225] = 0.10955253f;
      sa[226] = 0.0014466358f;
      sa[227] = 0.10612761f;
      sa[228] = -0.062499378f;
      sa[229] = -0.15392579f;
      sa[230] = -0.21592094f;
      sa[231] = -0.065269284f;
      sa[232] = 0.46086416f;
      sa[233] = -0.21439563f;
      sa[234] = -0.12206141f;
      sa[235] = 0.07539307f;
      sa[236] = -0.31964657f;
      sa[237] = 0.5097395f;
      sa[238] = 0.21519937f;
      sa[239] = -0.068488814f;
      sa[240] = -0.13173859f;
      sa[241] = -0.40351298f;
      sa[242] = -0.25428006f;
      sa[243] = 0.38816303f;
      sa[244] = 0.17478459f;
      sa[245] = 0.2994605f;
      sa[246] = 0.21566631f;
      sa[247] = -0.3421373f;
      sa[248] = -0.18815672f;
      sa[249] = 0.06222388f;
      sa[250] = 0.27673802f;
      sa[251] = 0.42503074f;
      sa[252] = 0.16372404f;
      sa[253] = -0.3835406f;
      sa[254] = 0.3578655f;
      sa[255] = 0.10894478f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_01_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_ReLU_01_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_01_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.08287959f;
      sa[1] = -1.6462766f;
      sa[2] = -1.6509789f;
      sa[3] = 1.3004718f;
      sa[4] = 0.3641521f;
      sa[5] = -0.2601445f;
      sa[6] = -1.6817908f;
      sa[7] = 1.4935412f;
      sa[8] = 1.7840492f;
      sa[9] = 0.20300773f;
      sa[10] = 1.6159213f;
      sa[11] = 1.5413946f;
      sa[12] = 1.8476546f;
      sa[13] = -0.529589f;
      sa[14] = -2.0327942f;
      sa[15] = -0.74884135f;
      sa[16] = 0.7493621f;
      sa[17] = -0.7697634f;
      sa[18] = -1.5793457f;
      sa[19] = -0.9096316f;
      sa[20] = -1.9669828f;
      sa[21] = 0.31437135f;
      sa[22] = -1.9832958f;
      sa[23] = -0.6320761f;
      sa[24] = -0.5503002f;
      sa[25] = 1.8865201f;
      sa[26] = -0.33165166f;
      sa[27] = 1.201973f;
      sa[28] = 1.2004298f;
      sa[29] = -0.7324978f;
      sa[30] = 0.15563038f;
      sa[31] = 0.12771778f;
      sa[32] = 0.39820108f;
      sa[33] = 0.25121835f;
      sa[34] = -0.61681587f;
      sa[35] = 1.0369536f;
      sa[36] = 0.5399608f;
      sa[37] = -1.3104589f;
      sa[38] = 0.56935126f;
      sa[39] = -0.20601046f;
      sa[40] = 0.20955342f;
      sa[41] = -0.76744473f;
      sa[42] = 0.47210208f;
      sa[43] = -0.07230544f;
      sa[44] = 0.96856f;
      sa[45] = -2.0041513f;
      sa[46] = -2.1875727f;
      sa[47] = -0.0059745074f;
      sa[48] = 1.6536591f;
      sa[49] = -0.24905665f;
      sa[50] = -0.46867526f;
      sa[51] = 1.8243922f;
      sa[52] = -1.6984371f;
      sa[53] = 0.94346786f;
      sa[54] = 1.8071128f;
      sa[55] = 1.1037055f;
      sa[56] = -0.556333f;
      sa[57] = -0.14243473f;
      sa[58] = 1.0545461f;
      sa[59] = 0.7832368f;
      sa[60] = -1.3871977f;
      sa[61] = 0.89138603f;
      sa[62] = -0.38507545f;
      sa[63] = -0.82132465f;
      sa[64] = 0.97257334f;
      sa[65] = -0.94347185f;
      sa[66] = -1.7593534f;
      sa[67] = -0.13675381f;
      sa[68] = 0.9283491f;
      sa[69] = -1.5521996f;
      sa[70] = -1.6697903f;
      sa[71] = -0.0071059656f;
      sa[72] = -0.99653953f;
      sa[73] = -1.173406f;
      sa[74] = -1.0595156f;
      sa[75] = 0.11858773f;
      sa[76] = 1.9333247f;
      sa[77] = -0.67637944f;
      sa[78] = -1.3432837f;
      sa[79] = -0.34289607f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_01 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_01_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_01_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_01_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_ReLU_01_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_01_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


