/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:52:54.497+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_12

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_12 > h2o_nn_16x16x6_Tanh_12.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_12.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_12", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_12 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_12_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_12_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_12_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_12_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_12_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_12_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_12_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_12_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_12_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_12_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_12_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_12_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_12.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_12_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.2864864864864865,0.13513513513513514,0.14594594594594595,0.2864864864864865,0.14594594594594595};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_12() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-299967869836684672L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_12_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_12_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_12_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_12_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_12_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_12_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_12_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_12_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_12_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_12_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_12_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.014393370057490147;
      sa[1] = -0.01772982933055791;
      sa[2] = 0.09752365697498425;
      sa[3] = 0.0063571267585354006;
      sa[4] = 0.06337616699043006;
      sa[5] = -0.005787774797249052;
      sa[6] = 0.164772576366387;
      sa[7] = 0.01019248932136769;
      sa[8] = -0.07209557323930606;
      sa[9] = 0.016881959802073743;
      sa[10] = 0.04493934348694533;
      sa[11] = -0.02621373793311253;
      sa[12] = 0.058554942844667134;
      sa[13] = 0.026624965359051393;
      sa[14] = -0.054406487051292904;
      sa[15] = 0.08469669357498984;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_12_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_12_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.07261527052698222;
      sa[1] = -0.06507743736556139;
      sa[2] = -0.07119693594793226;
      sa[3] = 0.074816216800981;
      sa[4] = 0.0876130781500381;
      sa[5] = -0.048654478378537695;
      sa[6] = -0.02690829673165182;
      sa[7] = 0.05580951501110349;
      sa[8] = 0.050713723558063015;
      sa[9] = -0.04617728101453169;
      sa[10] = 0.03477392634580087;
      sa[11] = 0.018403157143945765;
      sa[12] = 0.03620122554766675;
      sa[13] = 0.01090002756928028;
      sa[14] = -0.05695944133917863;
      sa[15] = -0.0772836759382569;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_12_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_12_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.05611660138625129;
      sa[1] = -0.06397791267059444;
      sa[2] = -0.06278429913462237;
      sa[3] = -0.03330050180798069;
      sa[4] = 0.016854231530847707;
    }
  }
}
class h2o_nn_16x16x6_Tanh_12_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_12_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_12_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.08384824f;
      sa[1] = 0.30075634f;
      sa[2] = 0.2897142f;
      sa[3] = 0.16927123f;
      sa[4] = -0.15760808f;
      sa[5] = -0.1440781f;
      sa[6] = -4.4025274E-4f;
      sa[7] = 0.36187187f;
      sa[8] = 0.15670332f;
      sa[9] = -0.14037125f;
      sa[10] = -0.14609542f;
      sa[11] = -0.20231606f;
      sa[12] = 0.1137855f;
      sa[13] = -0.23280798f;
      sa[14] = -0.14789075f;
      sa[15] = 0.091575384f;
      sa[16] = 0.18106605f;
      sa[17] = 0.22464585f;
      sa[18] = -0.30618548f;
      sa[19] = 0.17930916f;
      sa[20] = 0.2662379f;
      sa[21] = -0.32076836f;
      sa[22] = 0.27303126f;
      sa[23] = -0.16165563f;
      sa[24] = 0.34906468f;
      sa[25] = 0.21642193f;
      sa[26] = -0.33459696f;
      sa[27] = 0.38843763f;
      sa[28] = 0.28510904f;
      sa[29] = -0.26717043f;
      sa[30] = -0.13484032f;
      sa[31] = 0.23909327f;
      sa[32] = 0.19278966f;
      sa[33] = -0.27930874f;
      sa[34] = 0.075468734f;
      sa[35] = -0.13777737f;
      sa[36] = 0.08251746f;
      sa[37] = 0.29192176f;
      sa[38] = -0.02771397f;
      sa[39] = 0.1332053f;
      sa[40] = 0.09109554f;
      sa[41] = -0.09665102f;
      sa[42] = -0.13908201f;
      sa[43] = 0.09954378f;
      sa[44] = 0.23647858f;
      sa[45] = -0.11475075f;
      sa[46] = 0.051682543f;
      sa[47] = -0.028629359f;
      sa[48] = 0.23333034f;
      sa[49] = 0.24105918f;
      sa[50] = 0.19983731f;
      sa[51] = -0.26016223f;
      sa[52] = -0.06909614f;
      sa[53] = 0.33705476f;
      sa[54] = 0.26175946f;
      sa[55] = -0.04737335f;
      sa[56] = -0.16831438f;
      sa[57] = -0.27202553f;
      sa[58] = 0.3136074f;
      sa[59] = -0.14981736f;
      sa[60] = -0.29785842f;
      sa[61] = 0.22180831f;
      sa[62] = 0.1578359f;
      sa[63] = 0.060469758f;
      sa[64] = 0.15131117f;
      sa[65] = 0.159119f;
      sa[66] = 0.0086972825f;
      sa[67] = 0.22426891f;
      sa[68] = -0.098538585f;
      sa[69] = 0.21354705f;
      sa[70] = -0.11735972f;
      sa[71] = 0.372538f;
      sa[72] = -0.11315969f;
      sa[73] = 0.18174107f;
      sa[74] = -0.33914766f;
      sa[75] = 0.110894464f;
      sa[76] = -0.25132093f;
      sa[77] = -0.09155817f;
      sa[78] = -0.09435236f;
      sa[79] = 0.009272389f;
      sa[80] = -0.17800821f;
      sa[81] = -0.20986938f;
      sa[82] = -0.052436262f;
      sa[83] = 0.1127995f;
      sa[84] = -0.0011850537f;
      sa[85] = -0.188569f;
      sa[86] = 0.17733286f;
      sa[87] = 0.15184875f;
      sa[88] = 0.15991484f;
      sa[89] = -0.013602999f;
      sa[90] = -0.07097488f;
      sa[91] = 0.17613359f;
      sa[92] = 0.12705183f;
      sa[93] = -0.23446557f;
      sa[94] = -0.1810199f;
      sa[95] = -0.30882943f;
      sa[96] = 0.10148473f;
      sa[97] = 0.019244513f;
      sa[98] = 0.25180516f;
      sa[99] = -0.21379782f;
      sa[100] = -0.059370637f;
      sa[101] = -0.2328456f;
      sa[102] = -0.30392513f;
      sa[103] = -0.16134518f;
      sa[104] = -0.0034280112f;
      sa[105] = -0.22235227f;
      sa[106] = -0.22572206f;
      sa[107] = 0.14819151f;
      sa[108] = 0.20326895f;
      sa[109] = -0.18930851f;
      sa[110] = -0.13415147f;
      sa[111] = 0.1748757f;
      sa[112] = 0.11944691f;
      sa[113] = 0.065988705f;
      sa[114] = -0.16501075f;
      sa[115] = -0.08807573f;
      sa[116] = -0.21745338f;
      sa[117] = -0.023007104f;
      sa[118] = -0.2481268f;
      sa[119] = -0.1292577f;
      sa[120] = 0.2549801f;
      sa[121] = 0.30401748f;
      sa[122] = 0.35079396f;
      sa[123] = 0.29417852f;
      sa[124] = 0.35917428f;
      sa[125] = 0.32373935f;
      sa[126] = -0.3479691f;
      sa[127] = -0.122227244f;
      sa[128] = 0.07324723f;
      sa[129] = 0.14146022f;
      sa[130] = -0.14551777f;
      sa[131] = 0.2669107f;
      sa[132] = 0.24373722f;
      sa[133] = -0.31095818f;
      sa[134] = 0.07957085f;
      sa[135] = -0.37240738f;
      sa[136] = -0.27484098f;
      sa[137] = -0.023285385f;
      sa[138] = 0.17432095f;
      sa[139] = -0.12066788f;
      sa[140] = -0.088541f;
      sa[141] = -0.19012703f;
      sa[142] = 0.15169343f;
      sa[143] = -0.4082645f;
      sa[144] = 0.3000068f;
      sa[145] = -0.15300624f;
      sa[146] = -0.25493973f;
      sa[147] = 0.17916907f;
      sa[148] = 0.17632532f;
      sa[149] = 0.2434542f;
      sa[150] = 0.3244754f;
      sa[151] = -0.2940797f;
      sa[152] = 0.06052855f;
      sa[153] = 0.26946008f;
      sa[154] = 0.28493768f;
      sa[155] = -0.20664412f;
      sa[156] = 0.1649013f;
      sa[157] = -0.15204303f;
      sa[158] = 0.120267004f;
      sa[159] = 0.09256823f;
      sa[160] = 0.09872051f;
      sa[161] = 0.22850977f;
      sa[162] = -0.21480416f;
      sa[163] = 0.015293055f;
      sa[164] = 0.2540167f;
      sa[165] = -0.057964016f;
      sa[166] = -0.08828656f;
      sa[167] = -0.11550488f;
      sa[168] = 0.2327045f;
      sa[169] = 0.3512216f;
      sa[170] = 0.038723685f;
      sa[171] = -0.07477609f;
      sa[172] = -0.051334318f;
      sa[173] = -0.15507439f;
      sa[174] = 0.011709603f;
      sa[175] = -0.28709185f;
      sa[176] = 0.0023659423f;
      sa[177] = -0.050605875f;
      sa[178] = -0.12076206f;
      sa[179] = -0.010931396f;
      sa[180] = -0.04693051f;
      sa[181] = -0.28845432f;
      sa[182] = -0.13006717f;
      sa[183] = 0.12822646f;
      sa[184] = 0.30881745f;
      sa[185] = 0.20440973f;
      sa[186] = -0.31619757f;
      sa[187] = 0.07190281f;
      sa[188] = 0.0015263625f;
      sa[189] = 0.23451197f;
      sa[190] = 0.020764899f;
      sa[191] = -0.0044375393f;
      sa[192] = -0.13421263f;
      sa[193] = 0.27370664f;
      sa[194] = 0.10614307f;
      sa[195] = 0.29446054f;
      sa[196] = 0.30869544f;
      sa[197] = -0.03867739f;
      sa[198] = 0.086695686f;
      sa[199] = -0.099514425f;
      sa[200] = 0.011395461f;
      sa[201] = -0.32421324f;
      sa[202] = 0.13555475f;
      sa[203] = -0.064857416f;
      sa[204] = -0.21062288f;
      sa[205] = 0.22226071f;
      sa[206] = 0.22239333f;
      sa[207] = 0.12878005f;
      sa[208] = -0.29309973f;
      sa[209] = -0.100052886f;
      sa[210] = -0.3033202f;
      sa[211] = -0.30215865f;
      sa[212] = 0.26556373f;
      sa[213] = -0.25940898f;
      sa[214] = -0.118446134f;
      sa[215] = 0.030880582f;
      sa[216] = 0.11518072f;
      sa[217] = 0.21519001f;
      sa[218] = -0.20803489f;
      sa[219] = 0.3127156f;
      sa[220] = -0.22941084f;
      sa[221] = 0.12622012f;
      sa[222] = 0.2775856f;
      sa[223] = 0.046841756f;
      sa[224] = 0.1430877f;
      sa[225] = 0.2178019f;
      sa[226] = -0.24760564f;
      sa[227] = 0.36264735f;
      sa[228] = 0.19494286f;
      sa[229] = 0.19368449f;
      sa[230] = 0.34004813f;
      sa[231] = -0.26929086f;
      sa[232] = -0.2722467f;
      sa[233] = 0.046258252f;
      sa[234] = 0.14685589f;
      sa[235] = -0.30570996f;
      sa[236] = -0.024851233f;
      sa[237] = -0.24934998f;
      sa[238] = -0.22360949f;
      sa[239] = 0.11862575f;
      sa[240] = 0.0019912098f;
      sa[241] = -0.2403086f;
      sa[242] = -0.10429357f;
      sa[243] = -0.3695747f;
      sa[244] = -0.19845556f;
      sa[245] = -0.13281283f;
      sa[246] = -0.2323959f;
      sa[247] = -0.073272094f;
      sa[248] = 0.23252963f;
      sa[249] = 0.2233875f;
      sa[250] = -0.24936639f;
      sa[251] = -0.13132378f;
      sa[252] = -0.23389703f;
      sa[253] = -0.28100127f;
      sa[254] = -0.39787054f;
      sa[255] = 0.16288921f;
      sa[256] = -0.20999186f;
      sa[257] = 0.2740531f;
      sa[258] = -0.29272005f;
      sa[259] = -0.14453347f;
      sa[260] = -0.16917123f;
      sa[261] = -0.09591972f;
      sa[262] = -0.14489545f;
      sa[263] = 0.26235f;
      sa[264] = -0.17157286f;
      sa[265] = 0.04954952f;
      sa[266] = -0.3171545f;
      sa[267] = -0.27554566f;
      sa[268] = 0.12963182f;
      sa[269] = -0.19058913f;
      sa[270] = -0.016091578f;
      sa[271] = 0.2261551f;
      sa[272] = -0.07740034f;
      sa[273] = -0.110555746f;
      sa[274] = 0.14809935f;
      sa[275] = 0.019281168f;
      sa[276] = 0.04596364f;
      sa[277] = -0.26663223f;
      sa[278] = -0.1703745f;
      sa[279] = 0.24939883f;
      sa[280] = -0.1814127f;
      sa[281] = 0.30915624f;
      sa[282] = -0.1190421f;
      sa[283] = -0.053496182f;
      sa[284] = -0.076336645f;
      sa[285] = -0.3066428f;
      sa[286] = 0.4215547f;
      sa[287] = 0.26584312f;
      sa[288] = -0.26029456f;
      sa[289] = -0.19965023f;
      sa[290] = -0.06319919f;
      sa[291] = 0.06372274f;
      sa[292] = 0.15069513f;
      sa[293] = -0.110829554f;
      sa[294] = 0.09980785f;
      sa[295] = 0.15869781f;
      sa[296] = 0.19345675f;
      sa[297] = 0.22344159f;
      sa[298] = -0.042367913f;
      sa[299] = -0.019927347f;
      sa[300] = -0.026238758f;
      sa[301] = -0.09767714f;
      sa[302] = 0.17751472f;
      sa[303] = 0.04807552f;
      sa[304] = -0.22024141f;
      sa[305] = -0.02517355f;
      sa[306] = 0.23622815f;
      sa[307] = -0.23813805f;
      sa[308] = 0.071738176f;
      sa[309] = 0.15334348f;
      sa[310] = 0.30287793f;
      sa[311] = 0.3218164f;
      sa[312] = -0.21935701f;
      sa[313] = -0.16962188f;
      sa[314] = -0.15016364f;
      sa[315] = -0.031008422f;
      sa[316] = -0.054730732f;
      sa[317] = -0.11049803f;
      sa[318] = 0.07237778f;
      sa[319] = 0.3119342f;
      sa[320] = -0.0023186621f;
      sa[321] = 0.26693183f;
      sa[322] = 0.14268543f;
      sa[323] = -0.28274527f;
      sa[324] = -0.031547815f;
      sa[325] = 0.3001223f;
      sa[326] = -0.20466551f;
      sa[327] = -0.05883337f;
      sa[328] = -0.03918829f;
      sa[329] = 0.27278072f;
      sa[330] = -0.1956583f;
      sa[331] = 0.044687793f;
      sa[332] = -0.33848816f;
      sa[333] = 0.15912697f;
      sa[334] = -0.02379201f;
      sa[335] = 0.20272875f;
      sa[336] = -0.17616321f;
      sa[337] = -0.18240681f;
      sa[338] = 0.28307548f;
      sa[339] = -0.20288992f;
      sa[340] = -0.31801313f;
      sa[341] = -0.2446982f;
      sa[342] = 0.19727166f;
      sa[343] = -0.0680916f;
      sa[344] = -0.1765004f;
      sa[345] = 0.24478936f;
      sa[346] = 0.22487882f;
      sa[347] = -0.12563384f;
      sa[348] = 0.3562358f;
      sa[349] = -0.2514166f;
      sa[350] = -0.2277899f;
      sa[351] = 0.2109148f;
      sa[352] = 0.23462881f;
      sa[353] = -0.0035833942f;
      sa[354] = 0.11335299f;
      sa[355] = 0.18098588f;
      sa[356] = -0.12729138f;
      sa[357] = 0.29949337f;
      sa[358] = -0.3140517f;
      sa[359] = 0.049688824f;
      sa[360] = 0.10272984f;
      sa[361] = -0.06271672f;
      sa[362] = -0.20750244f;
      sa[363] = 0.22586186f;
      sa[364] = -0.17756307f;
      sa[365] = -0.23162794f;
      sa[366] = -0.036646135f;
      sa[367] = -0.42938688f;
      sa[368] = -0.17551534f;
      sa[369] = 0.2345593f;
      sa[370] = -0.19382471f;
      sa[371] = 0.11633608f;
      sa[372] = -0.0040050596f;
      sa[373] = 0.33857507f;
      sa[374] = -0.15249157f;
      sa[375] = -0.4112012f;
      sa[376] = -0.3718393f;
      sa[377] = -0.29897606f;
      sa[378] = 0.32857803f;
      sa[379] = 0.17728676f;
      sa[380] = -0.13194807f;
      sa[381] = -0.13310823f;
      sa[382] = -0.07414056f;
      sa[383] = -0.22009839f;
      sa[384] = -0.16159697f;
      sa[385] = 0.122760616f;
      sa[386] = -0.24626392f;
      sa[387] = -0.3017918f;
      sa[388] = 0.097121455f;
      sa[389] = -0.017058639f;
      sa[390] = 0.0016411964f;
      sa[391] = -0.16572142f;
      sa[392] = 0.33205307f;
      sa[393] = 0.19767652f;
      sa[394] = -0.12658462f;
      sa[395] = 0.20217597f;
      sa[396] = 0.3557171f;
      sa[397] = -0.276733f;
      sa[398] = 0.03563695f;
      sa[399] = 0.13262178f;
      sa[400] = 0.15601456f;
      sa[401] = 0.22729714f;
      sa[402] = -0.1807074f;
      sa[403] = -0.038024213f;
      sa[404] = 0.32110116f;
      sa[405] = -0.2796102f;
      sa[406] = -0.1070979f;
      sa[407] = 0.20567404f;
      sa[408] = -0.24557243f;
      sa[409] = -0.2982781f;
      sa[410] = -0.14596939f;
      sa[411] = 0.08657787f;
      sa[412] = -0.19848529f;
      sa[413] = 0.084746584f;
      sa[414] = 0.17229077f;
      sa[415] = 0.29961017f;
      sa[416] = -0.19191791f;
      sa[417] = 0.01647343f;
      sa[418] = -0.0014574769f;
      sa[419] = 0.25053957f;
      sa[420] = 0.13786487f;
      sa[421] = 0.23422782f;
      sa[422] = 0.213679f;
      sa[423] = -0.13693681f;
      sa[424] = 0.08900852f;
      sa[425] = -0.11854337f;
      sa[426] = -0.36049995f;
      sa[427] = 0.12134671f;
      sa[428] = -0.08396643f;
      sa[429] = -0.21294877f;
      sa[430] = 0.24515055f;
      sa[431] = 0.053075116f;
      sa[432] = -0.039658982f;
      sa[433] = 0.14942065f;
      sa[434] = 0.26311213f;
      sa[435] = 0.01660958f;
      sa[436] = -0.29716253f;
      sa[437] = -0.27060467f;
      sa[438] = -0.009811187f;
      sa[439] = -0.03830836f;
      sa[440] = 0.35273546f;
      sa[441] = -0.34425268f;
      sa[442] = 0.12749983f;
      sa[443] = 0.020160392f;
      sa[444] = -0.23198475f;
      sa[445] = 0.079786696f;
      sa[446] = 0.24383093f;
      sa[447] = 0.055091843f;
      sa[448] = 0.19027404f;
      sa[449] = 0.25242177f;
      sa[450] = -0.09528303f;
      sa[451] = 0.1469993f;
      sa[452] = 0.20509425f;
      sa[453] = -0.05480373f;
      sa[454] = -0.17653242f;
      sa[455] = -0.05983461f;
      sa[456] = -0.04135423f;
      sa[457] = 0.11412886f;
      sa[458] = -0.22069098f;
      sa[459] = 0.29231974f;
      sa[460] = 0.25546068f;
      sa[461] = 0.31593838f;
      sa[462] = 0.0685536f;
      sa[463] = 0.2331126f;
      sa[464] = -0.29594254f;
      sa[465] = 0.20415328f;
      sa[466] = -0.010857916f;
      sa[467] = 0.15049897f;
      sa[468] = 0.05456001f;
      sa[469] = 0.2917829f;
      sa[470] = 0.23497836f;
      sa[471] = 0.02567602f;
      sa[472] = 0.020493494f;
      sa[473] = -0.12022262f;
      sa[474] = -0.017984902f;
      sa[475] = 0.13651052f;
      sa[476] = 0.23380126f;
      sa[477] = -0.20531881f;
      sa[478] = 0.14251825f;
      sa[479] = -0.22822481f;
      sa[480] = -0.33212775f;
      sa[481] = -0.24351726f;
      sa[482] = -0.29146764f;
      sa[483] = 0.22721533f;
      sa[484] = 0.22403994f;
      sa[485] = 0.13831979f;
      sa[486] = 0.020286666f;
      sa[487] = -0.16682325f;
      sa[488] = -0.217788f;
      sa[489] = 0.08998047f;
      sa[490] = -0.01346088f;
      sa[491] = -0.20508417f;
      sa[492] = 0.25028616f;
      sa[493] = 0.29821554f;
      sa[494] = -0.15402427f;
      sa[495] = 0.25563985f;
      sa[496] = -0.0021655974f;
      sa[497] = 0.07923348f;
      sa[498] = 0.18521595f;
      sa[499] = 0.2001254f;
      sa[500] = 0.021003328f;
      sa[501] = 0.18389238f;
      sa[502] = 0.19627881f;
      sa[503] = 0.0075773527f;
      sa[504] = -0.15345387f;
      sa[505] = -0.1907152f;
      sa[506] = 0.20739459f;
      sa[507] = -0.034031242f;
      sa[508] = 0.079562366f;
      sa[509] = 0.24223045f;
      sa[510] = 0.18142177f;
      sa[511] = -0.017004283f;
      sa[512] = 0.10822791f;
      sa[513] = -0.07369325f;
      sa[514] = 0.27629516f;
      sa[515] = -0.18299185f;
      sa[516] = 0.01825462f;
      sa[517] = 0.11715655f;
      sa[518] = 0.15753247f;
      sa[519] = -0.100271836f;
      sa[520] = 0.29201394f;
      sa[521] = 0.20111194f;
      sa[522] = 0.030869719f;
      sa[523] = 0.24246311f;
      sa[524] = 0.19463159f;
      sa[525] = 0.16105221f;
      sa[526] = -0.014657795f;
      sa[527] = -0.16347212f;
      sa[528] = -0.023464857f;
      sa[529] = 0.1303084f;
      sa[530] = -0.28018486f;
      sa[531] = 0.020002324f;
      sa[532] = 0.14166602f;
      sa[533] = 0.10925834f;
      sa[534] = 0.13960594f;
      sa[535] = -0.1337459f;
      sa[536] = -0.01026766f;
      sa[537] = -0.25641143f;
      sa[538] = 0.29406494f;
      sa[539] = 0.36719903f;
      sa[540] = -0.2516939f;
      sa[541] = -0.16290817f;
      sa[542] = -0.063622005f;
      sa[543] = -0.38991573f;
      sa[544] = 0.14136177f;
      sa[545] = 0.12909627f;
      sa[546] = 0.068529576f;
      sa[547] = 0.19055398f;
      sa[548] = 0.10865205f;
      sa[549] = 0.16325946f;
      sa[550] = 0.049975518f;
      sa[551] = -0.1905001f;
      sa[552] = 0.05817171f;
      sa[553] = -0.027360905f;
      sa[554] = -0.1672544f;
      sa[555] = -0.17001042f;
      sa[556] = -0.18171673f;
      sa[557] = -0.25800976f;
      sa[558] = -0.256452f;
      sa[559] = 0.25660232f;
      sa[560] = -0.32625875f;
      sa[561] = -0.11551499f;
      sa[562] = 0.1998566f;
      sa[563] = -0.06844531f;
      sa[564] = 0.3480578f;
      sa[565] = 0.07236368f;
      sa[566] = 0.290901f;
      sa[567] = 0.096176304f;
      sa[568] = -0.061906617f;
      sa[569] = 0.037957933f;
      sa[570] = 0.005796206f;
      sa[571] = -0.068503454f;
      sa[572] = -0.16122156f;
      sa[573] = 0.03553765f;
      sa[574] = 0.30378583f;
      sa[575] = -0.23756914f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_12_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_12_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.3552555f;
      sa[1] = 0.005657978f;
      sa[2] = -0.19003223f;
      sa[3] = -0.2577839f;
      sa[4] = 0.05300923f;
      sa[5] = 0.06389198f;
      sa[6] = 0.11828411f;
      sa[7] = 0.040189996f;
      sa[8] = -0.22598359f;
      sa[9] = 0.13723391f;
      sa[10] = -0.1481386f;
      sa[11] = 0.12233026f;
      sa[12] = 0.090802185f;
      sa[13] = 0.057503145f;
      sa[14] = -0.12193351f;
      sa[15] = 0.34221706f;
      sa[16] = 0.47833708f;
      sa[17] = -0.06451014f;
      sa[18] = 0.036961082f;
      sa[19] = -0.05635225f;
      sa[20] = 0.34745094f;
      sa[21] = -0.06444588f;
      sa[22] = -0.3298248f;
      sa[23] = 0.34526345f;
      sa[24] = -0.40083435f;
      sa[25] = 0.06737529f;
      sa[26] = -0.1379868f;
      sa[27] = 0.4285258f;
      sa[28] = -0.32067624f;
      sa[29] = -0.10616187f;
      sa[30] = 0.18510151f;
      sa[31] = -0.214766f;
      sa[32] = -0.32391682f;
      sa[33] = -0.36122054f;
      sa[34] = 0.0482043f;
      sa[35] = 0.41934213f;
      sa[36] = -0.09682005f;
      sa[37] = -0.08676413f;
      sa[38] = 0.023383314f;
      sa[39] = 0.44016582f;
      sa[40] = -0.21443704f;
      sa[41] = -0.38747516f;
      sa[42] = -0.263373f;
      sa[43] = -0.33066776f;
      sa[44] = -0.02092205f;
      sa[45] = -0.3987501f;
      sa[46] = 0.3491225f;
      sa[47] = 0.32920378f;
      sa[48] = -0.40694964f;
      sa[49] = -0.2610295f;
      sa[50] = 0.12470262f;
      sa[51] = -0.10429538f;
      sa[52] = 0.15775809f;
      sa[53] = 0.23735458f;
      sa[54] = -0.08759262f;
      sa[55] = 0.41778803f;
      sa[56] = -0.26095635f;
      sa[57] = -0.29748273f;
      sa[58] = 0.1347399f;
      sa[59] = 0.044228043f;
      sa[60] = 0.27982286f;
      sa[61] = -0.22037078f;
      sa[62] = -0.08811035f;
      sa[63] = 0.22372335f;
      sa[64] = 0.43398368f;
      sa[65] = -0.17807257f;
      sa[66] = 0.17555407f;
      sa[67] = 0.39094484f;
      sa[68] = 0.19059573f;
      sa[69] = -0.27089453f;
      sa[70] = -0.46281543f;
      sa[71] = -0.118735015f;
      sa[72] = -0.38553327f;
      sa[73] = 0.26583162f;
      sa[74] = 0.33345437f;
      sa[75] = 0.0503818f;
      sa[76] = 0.2683563f;
      sa[77] = 0.13397302f;
      sa[78] = -0.25946772f;
      sa[79] = 0.35142124f;
      sa[80] = -0.3019508f;
      sa[81] = 0.08432551f;
      sa[82] = 0.20877822f;
      sa[83] = -0.16250631f;
      sa[84] = -0.47697565f;
      sa[85] = -0.33652207f;
      sa[86] = 0.12513939f;
      sa[87] = 0.40407857f;
      sa[88] = -0.32351336f;
      sa[89] = -0.07418051f;
      sa[90] = -0.21145199f;
      sa[91] = 0.38435718f;
      sa[92] = -0.22485386f;
      sa[93] = 0.019381322f;
      sa[94] = -0.5114423f;
      sa[95] = -0.10725763f;
      sa[96] = -0.30507803f;
      sa[97] = 0.08930232f;
      sa[98] = -0.0013912824f;
      sa[99] = 0.09488715f;
      sa[100] = -0.34893712f;
      sa[101] = -0.13657483f;
      sa[102] = 0.2869684f;
      sa[103] = 0.20662582f;
      sa[104] = -0.048464693f;
      sa[105] = -0.1889697f;
      sa[106] = 0.39436942f;
      sa[107] = 0.3859017f;
      sa[108] = 0.17095098f;
      sa[109] = 0.009017295f;
      sa[110] = 0.2754382f;
      sa[111] = -0.18115324f;
      sa[112] = -0.36952493f;
      sa[113] = 0.026380163f;
      sa[114] = 0.0626832f;
      sa[115] = -0.1381858f;
      sa[116] = 0.24965127f;
      sa[117] = 0.0346941f;
      sa[118] = -0.36882997f;
      sa[119] = -0.12918152f;
      sa[120] = -0.07033192f;
      sa[121] = 0.3170709f;
      sa[122] = 0.078553766f;
      sa[123] = 0.15879853f;
      sa[124] = -0.28571016f;
      sa[125] = 0.15491414f;
      sa[126] = -0.2738932f;
      sa[127] = 0.19224934f;
      sa[128] = -0.27744123f;
      sa[129] = 0.1690245f;
      sa[130] = -0.069598265f;
      sa[131] = 0.23638315f;
      sa[132] = 0.065491796f;
      sa[133] = 0.15674837f;
      sa[134] = 0.29579386f;
      sa[135] = -0.35171968f;
      sa[136] = 0.15029006f;
      sa[137] = -0.11150224f;
      sa[138] = 0.09987244f;
      sa[139] = 0.3259368f;
      sa[140] = -0.1836964f;
      sa[141] = -0.059660207f;
      sa[142] = -0.06341151f;
      sa[143] = -0.23892477f;
      sa[144] = 0.22234882f;
      sa[145] = -0.20688485f;
      sa[146] = 0.024977881f;
      sa[147] = -0.047749378f;
      sa[148] = -0.2260492f;
      sa[149] = 0.30028653f;
      sa[150] = -0.2092233f;
      sa[151] = -0.5053825f;
      sa[152] = 0.46076655f;
      sa[153] = -0.1031939f;
      sa[154] = 0.3948829f;
      sa[155] = -0.48177567f;
      sa[156] = -0.40201977f;
      sa[157] = -0.30950764f;
      sa[158] = -0.17695786f;
      sa[159] = -0.28321752f;
      sa[160] = 0.26761648f;
      sa[161] = -0.3083064f;
      sa[162] = 0.46154746f;
      sa[163] = -0.22112335f;
      sa[164] = 0.12428942f;
      sa[165] = -0.16382109f;
      sa[166] = 0.43757424f;
      sa[167] = -0.32780585f;
      sa[168] = 0.28703222f;
      sa[169] = -0.34565815f;
      sa[170] = 0.44706476f;
      sa[171] = 0.2852164f;
      sa[172] = 0.27606156f;
      sa[173] = 0.2943388f;
      sa[174] = -0.11488988f;
      sa[175] = -0.012248495f;
      sa[176] = -0.26661393f;
      sa[177] = 0.012440568f;
      sa[178] = -0.30617934f;
      sa[179] = -0.10659662f;
      sa[180] = -0.40643543f;
      sa[181] = -0.20598225f;
      sa[182] = 0.11577598f;
      sa[183] = -0.29995814f;
      sa[184] = 0.44907385f;
      sa[185] = 0.36226025f;
      sa[186] = -0.10088708f;
      sa[187] = -0.28212363f;
      sa[188] = -0.19489983f;
      sa[189] = -0.21380216f;
      sa[190] = -0.42992708f;
      sa[191] = -0.24452214f;
      sa[192] = -0.026709033f;
      sa[193] = 0.07034161f;
      sa[194] = -0.28824854f;
      sa[195] = -0.24563421f;
      sa[196] = 0.16867566f;
      sa[197] = -0.19984218f;
      sa[198] = 0.06834354f;
      sa[199] = 0.256094f;
      sa[200] = -0.050327085f;
      sa[201] = 0.25611296f;
      sa[202] = 0.13594806f;
      sa[203] = -0.42692178f;
      sa[204] = 0.1572012f;
      sa[205] = 0.37818757f;
      sa[206] = -0.21551508f;
      sa[207] = 0.1564316f;
      sa[208] = -0.26702318f;
      sa[209] = 0.1933067f;
      sa[210] = -0.14132465f;
      sa[211] = -0.31798455f;
      sa[212] = -0.39510217f;
      sa[213] = 0.06912972f;
      sa[214] = -0.3941289f;
      sa[215] = 0.12962441f;
      sa[216] = 0.20623757f;
      sa[217] = 0.36223057f;
      sa[218] = 0.073889546f;
      sa[219] = 0.12031546f;
      sa[220] = 0.046280313f;
      sa[221] = -0.054106675f;
      sa[222] = -0.22161326f;
      sa[223] = -0.22478008f;
      sa[224] = 0.2557024f;
      sa[225] = 0.08182429f;
      sa[226] = -0.07294821f;
      sa[227] = 0.09212333f;
      sa[228] = -0.10094057f;
      sa[229] = -0.216441f;
      sa[230] = -0.2077067f;
      sa[231] = -0.12619947f;
      sa[232] = 0.46547547f;
      sa[233] = -0.15219559f;
      sa[234] = -0.1605299f;
      sa[235] = -0.02634718f;
      sa[236] = -0.35625362f;
      sa[237] = 0.44686407f;
      sa[238] = 0.12094921f;
      sa[239] = -0.1360828f;
      sa[240] = -0.04054487f;
      sa[241] = -0.3884281f;
      sa[242] = -0.23757462f;
      sa[243] = 0.42145446f;
      sa[244] = 0.2514936f;
      sa[245] = 0.28150693f;
      sa[246] = 0.24393652f;
      sa[247] = -0.48262012f;
      sa[248] = -0.24388772f;
      sa[249] = -0.008700913f;
      sa[250] = 0.18145531f;
      sa[251] = 0.31640902f;
      sa[252] = 0.28644922f;
      sa[253] = -0.28252348f;
      sa[254] = 0.26874503f;
      sa[255] = 0.05462571f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_12_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_Tanh_12_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.17943971f;
      sa[1] = -1.5576533f;
      sa[2] = -1.5950121f;
      sa[3] = 1.3671721f;
      sa[4] = 0.42112797f;
      sa[5] = -0.1550157f;
      sa[6] = -1.5821159f;
      sa[7] = 1.5869397f;
      sa[8] = 1.8407013f;
      sa[9] = 0.2546589f;
      sa[10] = 1.6545339f;
      sa[11] = 1.521082f;
      sa[12] = 1.8865637f;
      sa[13] = -0.49792656f;
      sa[14] = -2.0686119f;
      sa[15] = -0.655529f;
      sa[16] = 0.7592974f;
      sa[17] = -0.8131716f;
      sa[18] = -1.5760901f;
      sa[19] = -0.9298456f;
      sa[20] = -1.945387f;
      sa[21] = 0.26187852f;
      sa[22] = -2.0128338f;
      sa[23] = -0.63849926f;
      sa[24] = -0.5342576f;
      sa[25] = 1.8727791f;
      sa[26] = -0.31000966f;
      sa[27] = 1.2220492f;
      sa[28] = 1.2660854f;
      sa[29] = -0.7648377f;
      sa[30] = 0.14675333f;
      sa[31] = 0.13605146f;
      sa[32] = 0.50123966f;
      sa[33] = 0.3369937f;
      sa[34] = -0.60887f;
      sa[35] = 1.034865f;
      sa[36] = 0.6892685f;
      sa[37] = -1.3180022f;
      sa[38] = 0.5837923f;
      sa[39] = -0.3088177f;
      sa[40] = 0.22260936f;
      sa[41] = -0.7919338f;
      sa[42] = 0.6089635f;
      sa[43] = -0.11742091f;
      sa[44] = 1.0005037f;
      sa[45] = -2.1019268f;
      sa[46] = -2.126425f;
      sa[47] = 0.06600319f;
      sa[48] = 1.5978966f;
      sa[49] = -0.19515829f;
      sa[50] = -0.45596075f;
      sa[51] = 1.843588f;
      sa[52] = -1.7665434f;
      sa[53] = 1.0122664f;
      sa[54] = 1.8625848f;
      sa[55] = 1.115374f;
      sa[56] = -0.55983317f;
      sa[57] = -0.07007335f;
      sa[58] = 1.0177245f;
      sa[59] = 0.8718245f;
      sa[60] = -1.3677876f;
      sa[61] = 0.97914964f;
      sa[62] = -0.35455406f;
      sa[63] = -0.8729039f;
      sa[64] = 0.9454954f;
      sa[65] = -0.9247236f;
      sa[66] = -1.7574326f;
      sa[67] = -0.11373251f;
      sa[68] = 0.92606556f;
      sa[69] = -1.4187036f;
      sa[70] = -1.7304783f;
      sa[71] = -0.036999583f;
      sa[72] = -1.1479032f;
      sa[73] = -1.274643f;
      sa[74] = -1.1166959f;
      sa[75] = 1.214408f;
      sa[76] = 1.8905685f;
      sa[77] = -0.6413827f;
      sa[78] = -1.3826661f;
      sa[79] = -0.4071611f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_12 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_12_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_12_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_12_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_Tanh_12_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_12_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


