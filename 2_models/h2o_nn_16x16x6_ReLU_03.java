/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:50:29.257+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_03

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_03 > h2o_nn_16x16x6_ReLU_03.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_03.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_03", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_03 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_03_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_03_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_03_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_03_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_03_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_03_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_03.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_03_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.27956989247311825,0.13978494623655913,0.15053763440860216,0.27956989247311825,0.15053763440860216};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_03() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-2141367083059722240L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_03_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_03_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_03_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_03_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_03_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_03_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_03_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_03_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.6767564003628214;
      sa[1] = 0.634840130714336;
      sa[2] = 0.4655759642191584;
      sa[3] = 0.5436163821703781;
      sa[4] = 0.44998485856850745;
      sa[5] = 0.5450696203496199;
      sa[6] = 0.3708724786802835;
      sa[7] = 0.7056013306288786;
      sa[8] = 0.48744685818508776;
      sa[9] = 0.623416330350047;
      sa[10] = 0.4185324829783469;
      sa[11] = 0.3847750184562729;
      sa[12] = 0.38580598193406634;
      sa[13] = 0.38421912489003524;
      sa[14] = 0.5271219711937428;
      sa[15] = 0.6327923908109885;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_03_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.0328903758033716;
      sa[1] = 0.996402692097796;
      sa[2] = 0.9730307404778266;
      sa[3] = 0.9648221333973067;
      sa[4] = 1.0087202516624152;
      sa[5] = 0.9927880221859728;
      sa[6] = 0.9493023800805906;
      sa[7] = 0.914128818862263;
      sa[8] = 0.9270343929199172;
      sa[9] = 1.03024272998037;
      sa[10] = 0.8912242209092882;
      sa[11] = 1.0824731619198358;
      sa[12] = 1.0272284092540467;
      sa[13] = 0.962165143813962;
      sa[14] = 1.0371250893137698;
      sa[15] = 1.0652014011622057;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_03_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_03_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.04142178449368312;
      sa[1] = 0.009384367714844953;
      sa[2] = -0.05195484020652383;
      sa[3] = -0.01586635809002599;
      sa[4] = 0.031573002429885984;
    }
  }
}
class h2o_nn_16x16x6_ReLU_03_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_03_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.09607509f;
      sa[1] = 0.2921882f;
      sa[2] = 0.21959978f;
      sa[3] = 0.14397795f;
      sa[4] = -0.10618858f;
      sa[5] = -0.06522359f;
      sa[6] = 0.049144078f;
      sa[7] = 0.4056318f;
      sa[8] = 0.1733156f;
      sa[9] = -0.17224374f;
      sa[10] = -0.13639398f;
      sa[11] = -0.25261265f;
      sa[12] = 0.1487061f;
      sa[13] = -0.16855568f;
      sa[14] = -0.10710357f;
      sa[15] = 0.10867931f;
      sa[16] = 0.18743034f;
      sa[17] = 0.26710418f;
      sa[18] = -0.30774283f;
      sa[19] = 0.127718f;
      sa[20] = 0.29589948f;
      sa[21] = -0.28166264f;
      sa[22] = 0.3143912f;
      sa[23] = -0.10714035f;
      sa[24] = 0.2932499f;
      sa[25] = 0.24491239f;
      sa[26] = -0.30197975f;
      sa[27] = 0.4488588f;
      sa[28] = 0.31204924f;
      sa[29] = -0.24354741f;
      sa[30] = -0.10247385f;
      sa[31] = 0.26134273f;
      sa[32] = 0.18722832f;
      sa[33] = -0.2314479f;
      sa[34] = 0.048027385f;
      sa[35] = -0.15032214f;
      sa[36] = 0.12153472f;
      sa[37] = 0.20069908f;
      sa[38] = -0.08573173f;
      sa[39] = 0.098291464f;
      sa[40] = 0.13285354f;
      sa[41] = -0.028248588f;
      sa[42] = -0.079809286f;
      sa[43] = 0.15973823f;
      sa[44] = 0.24341097f;
      sa[45] = -0.24756965f;
      sa[46] = 0.13948147f;
      sa[47] = -0.07767944f;
      sa[48] = 0.24206641f;
      sa[49] = 0.27185464f;
      sa[50] = 0.21223687f;
      sa[51] = -0.22224095f;
      sa[52] = -0.13846233f;
      sa[53] = 0.30004886f;
      sa[54] = 0.21236807f;
      sa[55] = -0.06183826f;
      sa[56] = -0.16440581f;
      sa[57] = -0.24868584f;
      sa[58] = 0.347177f;
      sa[59] = -0.11488301f;
      sa[60] = -0.36671478f;
      sa[61] = 0.2537685f;
      sa[62] = 0.14858133f;
      sa[63] = 0.07945109f;
      sa[64] = 0.16365175f;
      sa[65] = 0.17285377f;
      sa[66] = 0.048451744f;
      sa[67] = 0.22261384f;
      sa[68] = -0.14729765f;
      sa[69] = 0.20302866f;
      sa[70] = -0.11848581f;
      sa[71] = 0.37118933f;
      sa[72] = -0.14209668f;
      sa[73] = 0.22913508f;
      sa[74] = -0.206624f;
      sa[75] = 0.097190514f;
      sa[76] = -0.23311494f;
      sa[77] = -0.1031567f;
      sa[78] = -0.08974151f;
      sa[79] = 0.10937721f;
      sa[80] = -0.22790383f;
      sa[81] = -0.11630383f;
      sa[82] = -0.007503243f;
      sa[83] = 0.12171626f;
      sa[84] = -0.017243182f;
      sa[85] = -0.21147685f;
      sa[86] = 0.16485658f;
      sa[87] = 0.23850766f;
      sa[88] = 0.24597992f;
      sa[89] = 0.056979716f;
      sa[90] = -0.09495207f;
      sa[91] = 0.1885129f;
      sa[92] = 0.1294497f;
      sa[93] = -0.22253956f;
      sa[94] = -0.18667759f;
      sa[95] = -0.2603611f;
      sa[96] = 0.15160799f;
      sa[97] = 0.05197775f;
      sa[98] = 0.23499037f;
      sa[99] = -0.13635994f;
      sa[100] = -0.057484157f;
      sa[101] = -0.20769952f;
      sa[102] = -0.3030702f;
      sa[103] = -0.1161655f;
      sa[104] = 0.019343408f;
      sa[105] = -0.18379878f;
      sa[106] = -0.23777762f;
      sa[107] = 0.14858347f;
      sa[108] = 0.17413568f;
      sa[109] = -0.19979906f;
      sa[110] = -0.13745435f;
      sa[111] = 0.13696799f;
      sa[112] = 0.117364466f;
      sa[113] = 0.07420115f;
      sa[114] = -0.15685114f;
      sa[115] = -0.07182711f;
      sa[116] = -0.23488067f;
      sa[117] = -0.03595717f;
      sa[118] = -0.25107926f;
      sa[119] = -0.14767794f;
      sa[120] = 0.27432552f;
      sa[121] = 0.30924988f;
      sa[122] = 0.37304917f;
      sa[123] = 0.3238829f;
      sa[124] = 0.34837893f;
      sa[125] = 0.34337884f;
      sa[126] = -0.3535123f;
      sa[127] = -0.06959795f;
      sa[128] = 0.0791301f;
      sa[129] = 0.13200188f;
      sa[130] = -0.1489531f;
      sa[131] = 0.29866913f;
      sa[132] = 0.28964722f;
      sa[133] = -0.27347422f;
      sa[134] = 0.086006895f;
      sa[135] = -0.28848344f;
      sa[136] = -0.26469964f;
      sa[137] = -0.01641878f;
      sa[138] = 0.17719965f;
      sa[139] = -0.09734884f;
      sa[140] = -0.06256529f;
      sa[141] = -0.15006496f;
      sa[142] = 0.12566438f;
      sa[143] = -0.37827873f;
      sa[144] = 0.25227436f;
      sa[145] = -0.15219514f;
      sa[146] = -0.22377692f;
      sa[147] = 0.21174788f;
      sa[148] = 0.1643412f;
      sa[149] = 0.20790225f;
      sa[150] = 0.31019896f;
      sa[151] = -0.28684428f;
      sa[152] = 0.033654433f;
      sa[153] = 0.28578988f;
      sa[154] = 0.3046039f;
      sa[155] = -0.18895093f;
      sa[156] = 0.14294423f;
      sa[157] = -0.1908233f;
      sa[158] = 0.104826294f;
      sa[159] = 0.098869786f;
      sa[160] = 0.10807409f;
      sa[161] = 0.25508633f;
      sa[162] = -0.20690998f;
      sa[163] = -0.021496765f;
      sa[164] = 0.2314154f;
      sa[165] = -0.07099386f;
      sa[166] = -0.10283936f;
      sa[167] = -0.10980898f;
      sa[168] = 0.25646242f;
      sa[169] = 0.3848807f;
      sa[170] = 0.0238359f;
      sa[171] = -0.07502679f;
      sa[172] = -0.074907504f;
      sa[173] = -0.17768018f;
      sa[174] = -0.021338202f;
      sa[175] = -0.28632736f;
      sa[176] = -0.012687709f;
      sa[177] = -0.010605074f;
      sa[178] = -0.091750085f;
      sa[179] = 0.054781977f;
      sa[180] = -0.033570606f;
      sa[181] = -0.19899444f;
      sa[182] = -0.20883608f;
      sa[183] = 0.13184121f;
      sa[184] = 0.357949f;
      sa[185] = 0.2765401f;
      sa[186] = -0.28758997f;
      sa[187] = 0.14719263f;
      sa[188] = -0.004878223f;
      sa[189] = 0.27322745f;
      sa[190] = -0.01302556f;
      sa[191] = 0.03305795f;
      sa[192] = -0.106473126f;
      sa[193] = 0.31396613f;
      sa[194] = 0.11935593f;
      sa[195] = 0.39179122f;
      sa[196] = 0.41306245f;
      sa[197] = 0.025673911f;
      sa[198] = 0.0781774f;
      sa[199] = -0.25334018f;
      sa[200] = 0.03841483f;
      sa[201] = -0.28399953f;
      sa[202] = 0.15788841f;
      sa[203] = -0.050198987f;
      sa[204] = -0.24717481f;
      sa[205] = 0.19576351f;
      sa[206] = 0.26211494f;
      sa[207] = 0.17619479f;
      sa[208] = -0.26141238f;
      sa[209] = -0.0455517f;
      sa[210] = -0.24473622f;
      sa[211] = -0.22004393f;
      sa[212] = 0.2788941f;
      sa[213] = -0.18745258f;
      sa[214] = -0.14973693f;
      sa[215] = -0.022770997f;
      sa[216] = 0.09223285f;
      sa[217] = 0.23385629f;
      sa[218] = -0.18154311f;
      sa[219] = 0.21378113f;
      sa[220] = -0.29691148f;
      sa[221] = -0.005229977f;
      sa[222] = 0.18234152f;
      sa[223] = -1.4735144E-4f;
      sa[224] = 0.09836449f;
      sa[225] = 0.37890014f;
      sa[226] = -0.16275573f;
      sa[227] = 0.36667863f;
      sa[228] = 0.08904972f;
      sa[229] = 0.057186432f;
      sa[230] = 0.22790754f;
      sa[231] = -0.3335154f;
      sa[232] = -0.23958793f;
      sa[233] = 0.12956777f;
      sa[234] = 0.14921969f;
      sa[235] = -0.247145f;
      sa[236] = -0.07729029f;
      sa[237] = -0.28787526f;
      sa[238] = -0.29720998f;
      sa[239] = 0.10376835f;
      sa[240] = 0.018329566f;
      sa[241] = -0.1888384f;
      sa[242] = -0.10082356f;
      sa[243] = -0.24942242f;
      sa[244] = -0.2588449f;
      sa[245] = -0.17377077f;
      sa[246] = -0.3224341f;
      sa[247] = -0.10325012f;
      sa[248] = 0.2469571f;
      sa[249] = 0.2433336f;
      sa[250] = -0.18007135f;
      sa[251] = -0.056356214f;
      sa[252] = -0.27198762f;
      sa[253] = -0.23764601f;
      sa[254] = -0.30477968f;
      sa[255] = 0.1009073f;
      sa[256] = -0.13264303f;
      sa[257] = 0.35342878f;
      sa[258] = -0.21222354f;
      sa[259] = -0.07668362f;
      sa[260] = -0.20655395f;
      sa[261] = -0.018901395f;
      sa[262] = -0.13037592f;
      sa[263] = 0.22242291f;
      sa[264] = -0.11668183f;
      sa[265] = 0.11840818f;
      sa[266] = -0.24689135f;
      sa[267] = -0.20523837f;
      sa[268] = 0.14335029f;
      sa[269] = -0.11068852f;
      sa[270] = 0.019919014f;
      sa[271] = 0.2169765f;
      sa[272] = -0.042178668f;
      sa[273] = -0.071549065f;
      sa[274] = 0.19574608f;
      sa[275] = 0.05352571f;
      sa[276] = 0.06644204f;
      sa[277] = -0.23945524f;
      sa[278] = -0.15265901f;
      sa[279] = 0.28027377f;
      sa[280] = -0.15136562f;
      sa[281] = 0.35297346f;
      sa[282] = -0.059773475f;
      sa[283] = -0.004326494f;
      sa[284] = -0.09954543f;
      sa[285] = -0.27952197f;
      sa[286] = 0.4175327f;
      sa[287] = 0.21708027f;
      sa[288] = -0.22220421f;
      sa[289] = -0.2352668f;
      sa[290] = -0.14168477f;
      sa[291] = 0.0788709f;
      sa[292] = 0.17759186f;
      sa[293] = -0.07405132f;
      sa[294] = 0.11743837f;
      sa[295] = 0.20856538f;
      sa[296] = 0.22499135f;
      sa[297] = 0.190957f;
      sa[298] = -0.06624745f;
      sa[299] = -0.022460014f;
      sa[300] = -0.01686372f;
      sa[301] = -0.077056736f;
      sa[302] = 0.16808192f;
      sa[303] = 0.08847976f;
      sa[304] = -0.22929373f;
      sa[305] = -0.049735706f;
      sa[306] = 0.22266658f;
      sa[307] = -0.3304619f;
      sa[308] = 0.07938512f;
      sa[309] = 0.1673972f;
      sa[310] = 0.31279916f;
      sa[311] = 0.32098845f;
      sa[312] = -0.2748235f;
      sa[313] = -0.20199285f;
      sa[314] = -0.12817666f;
      sa[315] = -0.007773435f;
      sa[316] = -0.030429391f;
      sa[317] = -0.08246653f;
      sa[318] = 0.11102541f;
      sa[319] = 0.34089872f;
      sa[320] = -0.009744456f;
      sa[321] = 0.29660887f;
      sa[322] = 0.13442452f;
      sa[323] = -0.29173535f;
      sa[324] = 0.010390989f;
      sa[325] = 0.26911378f;
      sa[326] = -0.24544339f;
      sa[327] = -0.031616062f;
      sa[328] = -0.008086481f;
      sa[329] = 0.32015514f;
      sa[330] = -0.13849437f;
      sa[331] = 0.07978054f;
      sa[332] = -0.2829044f;
      sa[333] = 0.12550758f;
      sa[334] = -0.032047473f;
      sa[335] = 0.17720065f;
      sa[336] = -0.14523003f;
      sa[337] = -0.13655075f;
      sa[338] = 0.3339635f;
      sa[339] = -0.16175646f;
      sa[340] = -0.36023533f;
      sa[341] = -0.24911822f;
      sa[342] = 0.17069465f;
      sa[343] = -0.08025191f;
      sa[344] = -0.15981378f;
      sa[345] = 0.2589584f;
      sa[346] = 0.26375f;
      sa[347] = -0.118085586f;
      sa[348] = 0.34935686f;
      sa[349] = -0.24646525f;
      sa[350] = -0.25504285f;
      sa[351] = 0.20917553f;
      sa[352] = 0.24220061f;
      sa[353] = -8.838587E-4f;
      sa[354] = 0.13500263f;
      sa[355] = 0.18734635f;
      sa[356] = -0.1665281f;
      sa[357] = 0.25554737f;
      sa[358] = -0.32535818f;
      sa[359] = 0.03843665f;
      sa[360] = 0.03804339f;
      sa[361] = -0.053558037f;
      sa[362] = -0.11485456f;
      sa[363] = 0.23319338f;
      sa[364] = -0.16043827f;
      sa[365] = -0.26356503f;
      sa[366] = -0.030076362f;
      sa[367] = -0.3569118f;
      sa[368] = -0.23724736f;
      sa[369] = 0.27728745f;
      sa[370] = -0.18956533f;
      sa[371] = 0.13572077f;
      sa[372] = -0.025042191f;
      sa[373] = 0.2936643f;
      sa[374] = -0.17112648f;
      sa[375] = -0.34771234f;
      sa[376] = -0.33421186f;
      sa[377] = -0.22702375f;
      sa[378] = 0.30530107f;
      sa[379] = 0.15808228f;
      sa[380] = -0.15096846f;
      sa[381] = -0.14017151f;
      sa[382] = -0.078820854f;
      sa[383] = -0.15203305f;
      sa[384] = -0.11478078f;
      sa[385] = 0.14498502f;
      sa[386] = -0.2749481f;
      sa[387] = -0.267379f;
      sa[388] = 0.08226778f;
      sa[389] = -0.026742272f;
      sa[390] = -0.021481428f;
      sa[391] = -0.14481369f;
      sa[392] = 0.3185102f;
      sa[393] = 0.2662106f;
      sa[394] = -0.09961209f;
      sa[395] = 0.26250988f;
      sa[396] = 0.32703808f;
      sa[397] = -0.24081768f;
      sa[398] = 0.08853315f;
      sa[399] = 0.117226586f;
      sa[400] = 0.12972444f;
      sa[401] = 0.19025156f;
      sa[402] = -0.21277986f;
      sa[403] = -0.030137802f;
      sa[404] = 0.27742139f;
      sa[405] = -0.22366337f;
      sa[406] = -0.097540215f;
      sa[407] = 0.24008222f;
      sa[408] = -0.26859453f;
      sa[409] = -0.3250625f;
      sa[410] = -0.16779056f;
      sa[411] = 0.097805545f;
      sa[412] = -0.13564345f;
      sa[413] = 0.0988506f;
      sa[414] = 0.17439568f;
      sa[415] = 0.3411427f;
      sa[416] = -0.20749408f;
      sa[417] = 0.004971845f;
      sa[418] = -0.032277573f;
      sa[419] = 0.23503174f;
      sa[420] = 0.18266751f;
      sa[421] = 0.2235239f;
      sa[422] = 0.23674016f;
      sa[423] = -0.11473403f;
      sa[424] = 0.08676019f;
      sa[425] = -0.10770642f;
      sa[426] = -0.36443672f;
      sa[427] = 0.15237951f;
      sa[428] = -0.05715616f;
      sa[429] = -0.18188252f;
      sa[430] = 0.23229253f;
      sa[431] = 0.019165976f;
      sa[432] = -0.09243767f;
      sa[433] = 0.18260334f;
      sa[434] = 0.32451445f;
      sa[435] = 0.052513376f;
      sa[436] = -0.32235017f;
      sa[437] = -0.31734535f;
      sa[438] = -0.03298096f;
      sa[439] = -0.06975327f;
      sa[440] = 0.31390354f;
      sa[441] = -0.29484788f;
      sa[442] = 0.1227406f;
      sa[443] = 0.08744163f;
      sa[444] = -0.2787523f;
      sa[445] = 0.026489677f;
      sa[446] = 0.21206312f;
      sa[447] = 0.030399537f;
      sa[448] = 0.24391076f;
      sa[449] = 0.312518f;
      sa[450] = -0.109936565f;
      sa[451] = 0.14795376f;
      sa[452] = 0.15409906f;
      sa[453] = -0.0926893f;
      sa[454] = -0.21519919f;
      sa[455] = -0.10711354f;
      sa[456] = -0.0032640651f;
      sa[457] = 0.121185355f;
      sa[458] = -0.2525908f;
      sa[459] = 0.238338f;
      sa[460] = 0.20475754f;
      sa[461] = 0.27050862f;
      sa[462] = 0.01643265f;
      sa[463] = 0.20340964f;
      sa[464] = -0.28712937f;
      sa[465] = 0.24763404f;
      sa[466] = -0.017899938f;
      sa[467] = 0.14056557f;
      sa[468] = 0.09057115f;
      sa[469] = 0.3222096f;
      sa[470] = 0.24899305f;
      sa[471] = 0.0578237f;
      sa[472] = -9.333921E-4f;
      sa[473] = -0.15126508f;
      sa[474] = -0.03741306f;
      sa[475] = 0.13126446f;
      sa[476] = 0.25493026f;
      sa[477] = -0.15664946f;
      sa[478] = 0.19766031f;
      sa[479] = -0.1810195f;
      sa[480] = -0.3727286f;
      sa[481] = -0.2806302f;
      sa[482] = -0.32347417f;
      sa[483] = 0.20352033f;
      sa[484] = 0.25075385f;
      sa[485] = 0.19651364f;
      sa[486] = -0.038952287f;
      sa[487] = -0.1897261f;
      sa[488] = -0.2525682f;
      sa[489] = 0.06777331f;
      sa[490] = -0.036415476f;
      sa[491] = -0.22940888f;
      sa[492] = 0.2446367f;
      sa[493] = 0.3632004f;
      sa[494] = -0.25986347f;
      sa[495] = 0.25594845f;
      sa[496] = -0.045919266f;
      sa[497] = 0.03936061f;
      sa[498] = 0.14252481f;
      sa[499] = 0.15816881f;
      sa[500] = -0.058489062f;
      sa[501] = 0.13307156f;
      sa[502] = 0.25452697f;
      sa[503] = 0.049847163f;
      sa[504] = -0.12738197f;
      sa[505] = -0.17392477f;
      sa[506] = 0.1452398f;
      sa[507] = -0.07859646f;
      sa[508] = 0.09165454f;
      sa[509] = 0.27063265f;
      sa[510] = 0.18040466f;
      sa[511] = -0.021039732f;
      sa[512] = 0.10769979f;
      sa[513] = -0.06558291f;
      sa[514] = 0.25850797f;
      sa[515] = -0.18894796f;
      sa[516] = 0.038811192f;
      sa[517] = 0.13391338f;
      sa[518] = 0.16598654f;
      sa[519] = -0.088185206f;
      sa[520] = 0.29371685f;
      sa[521] = 0.19961223f;
      sa[522] = 0.070450395f;
      sa[523] = 0.21112794f;
      sa[524] = 0.2115723f;
      sa[525] = 0.17541103f;
      sa[526] = -0.012988547f;
      sa[527] = -0.18465385f;
      sa[528] = -0.045240413f;
      sa[529] = 0.065027714f;
      sa[530] = -0.20206505f;
      sa[531] = 0.04464411f;
      sa[532] = 0.16938391f;
      sa[533] = 0.1487147f;
      sa[534] = 0.17574395f;
      sa[535] = -0.09760803f;
      sa[536] = 0.085720785f;
      sa[537] = -0.2101738f;
      sa[538] = 0.21703334f;
      sa[539] = 0.28377715f;
      sa[540] = -0.26979375f;
      sa[541] = -0.1692697f;
      sa[542] = -0.0083864285f;
      sa[543] = -0.3666608f;
      sa[544] = 0.19950843f;
      sa[545] = 0.20144677f;
      sa[546] = 0.1417244f;
      sa[547] = 0.29515576f;
      sa[548] = 0.0882574f;
      sa[549] = 0.15744135f;
      sa[550] = 0.06864819f;
      sa[551] = -0.2281379f;
      sa[552] = 0.09523366f;
      sa[553] = 0.008320679f;
      sa[554] = -0.110436365f;
      sa[555] = -0.076671034f;
      sa[556] = -0.17118655f;
      sa[557] = -0.2112109f;
      sa[558] = -0.259992f;
      sa[559] = 0.24400058f;
      sa[560] = -0.30601022f;
      sa[561] = -0.07966707f;
      sa[562] = 0.24169475f;
      sa[563] = 0.0011247955f;
      sa[564] = 0.37813398f;
      sa[565] = 0.13685873f;
      sa[566] = 0.2830307f;
      sa[567] = 0.12949839f;
      sa[568] = -0.044400837f;
      sa[569] = 0.06004896f;
      sa[570] = 0.032027956f;
      sa[571] = -0.020623762f;
      sa[572] = -0.15445091f;
      sa[573] = 0.09697917f;
      sa[574] = 0.26340884f;
      sa[575] = -0.25660422f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_03_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.41015375f;
      sa[1] = 0.011984168f;
      sa[2] = -0.18053728f;
      sa[3] = -0.24108961f;
      sa[4] = 0.10610107f;
      sa[5] = 0.08780463f;
      sa[6] = 0.30047533f;
      sa[7] = -0.100723006f;
      sa[8] = -0.22564971f;
      sa[9] = 0.18248598f;
      sa[10] = -0.06554897f;
      sa[11] = 0.1422725f;
      sa[12] = 0.09197329f;
      sa[13] = 0.10110786f;
      sa[14] = -0.19003284f;
      sa[15] = 0.3524753f;
      sa[16] = 0.43601564f;
      sa[17] = -0.10669655f;
      sa[18] = 0.022370832f;
      sa[19] = -0.1022375f;
      sa[20] = 0.32420835f;
      sa[21] = -0.02284726f;
      sa[22] = -0.29536897f;
      sa[23] = 0.23700987f;
      sa[24] = -0.36970696f;
      sa[25] = 0.109671295f;
      sa[26] = -0.08526411f;
      sa[27] = 0.41068873f;
      sa[28] = -0.36053544f;
      sa[29] = -0.14076214f;
      sa[30] = 0.12421397f;
      sa[31] = -0.21949148f;
      sa[32] = -0.35218388f;
      sa[33] = -0.40488452f;
      sa[34] = 0.018041227f;
      sa[35] = 0.37520555f;
      sa[36] = -0.13032158f;
      sa[37] = -0.05754906f;
      sa[38] = 0.021756569f;
      sa[39] = 0.27115825f;
      sa[40] = -0.21787548f;
      sa[41] = -0.37562835f;
      sa[42] = -0.27968535f;
      sa[43] = -0.3740065f;
      sa[44] = -0.038218964f;
      sa[45] = -0.43415758f;
      sa[46] = 0.30364925f;
      sa[47] = 0.30416045f;
      sa[48] = -0.40630114f;
      sa[49] = -0.2961469f;
      sa[50] = 0.11016478f;
      sa[51] = -0.0990241f;
      sa[52] = 0.14081231f;
      sa[53] = 0.21360013f;
      sa[54] = -0.08014051f;
      sa[55] = 0.3851041f;
      sa[56] = -0.2841001f;
      sa[57] = -0.31304803f;
      sa[58] = 0.060593255f;
      sa[59] = -0.050242644f;
      sa[60] = 0.31727874f;
      sa[61] = -0.22485821f;
      sa[62] = -0.12248496f;
      sa[63] = 0.13523898f;
      sa[64] = 0.477245f;
      sa[65] = -0.17515111f;
      sa[66] = 0.19515428f;
      sa[67] = 0.41517538f;
      sa[68] = 0.22194359f;
      sa[69] = -0.2756254f;
      sa[70] = -0.41729116f;
      sa[71] = -0.1278561f;
      sa[72] = -0.36847883f;
      sa[73] = 0.3062664f;
      sa[74] = 0.36278453f;
      sa[75] = -0.0068761655f;
      sa[76] = 0.2850782f;
      sa[77] = 0.1913666f;
      sa[78] = -0.25325835f;
      sa[79] = 0.32025152f;
      sa[80] = -0.24146141f;
      sa[81] = 0.07922652f;
      sa[82] = 0.17772517f;
      sa[83] = -0.18163621f;
      sa[84] = -0.438797f;
      sa[85] = -0.34648526f;
      sa[86] = 0.05350665f;
      sa[87] = 0.3749399f;
      sa[88] = -0.39852765f;
      sa[89] = -0.13954896f;
      sa[90] = -0.27899233f;
      sa[91] = 0.41911063f;
      sa[92] = -0.118294306f;
      sa[93] = 0.04464686f;
      sa[94] = -0.4042261f;
      sa[95] = -0.06086572f;
      sa[96] = -0.3662281f;
      sa[97] = 0.017611267f;
      sa[98] = -0.021841368f;
      sa[99] = 0.05906129f;
      sa[100] = -0.3813488f;
      sa[101] = -0.1687684f;
      sa[102] = 0.31033486f;
      sa[103] = 0.06862403f;
      sa[104] = -0.08376895f;
      sa[105] = -0.1961419f;
      sa[106] = 0.3642537f;
      sa[107] = 0.3234979f;
      sa[108] = 0.13773258f;
      sa[109] = -0.052881107f;
      sa[110] = 0.20709044f;
      sa[111] = -0.2437591f;
      sa[112] = -0.38111898f;
      sa[113] = -0.023745956f;
      sa[114] = 0.03985068f;
      sa[115] = -0.15823114f;
      sa[116] = 0.19972569f;
      sa[117] = -0.08103006f;
      sa[118] = -0.37611192f;
      sa[119] = -0.1679194f;
      sa[120] = -0.13545276f;
      sa[121] = 0.25598526f;
      sa[122] = -0.014781517f;
      sa[123] = 0.0851037f;
      sa[124] = -0.253733f;
      sa[125] = 0.15419707f;
      sa[126] = -0.28864726f;
      sa[127] = 0.09482175f;
      sa[128] = -0.31163624f;
      sa[129] = 0.13133158f;
      sa[130] = -0.086389884f;
      sa[131] = 0.19845687f;
      sa[132] = 0.0042793574f;
      sa[133] = 0.086936f;
      sa[134] = 0.18177241f;
      sa[135] = -0.38641235f;
      sa[136] = 0.093014084f;
      sa[137] = -0.1831205f;
      sa[138] = -0.011959204f;
      sa[139] = 0.2841606f;
      sa[140] = -0.17487589f;
      sa[141] = -0.07841086f;
      sa[142] = -0.031113444f;
      sa[143] = -0.28541866f;
      sa[144] = 0.23502967f;
      sa[145] = -0.17605218f;
      sa[146] = 0.0033390096f;
      sa[147] = -0.030351702f;
      sa[148] = -0.2357398f;
      sa[149] = 0.36099893f;
      sa[150] = -0.23800816f;
      sa[151] = -0.5127068f;
      sa[152] = 0.47365478f;
      sa[153] = -0.1074941f;
      sa[154] = 0.38535848f;
      sa[155] = -0.4479407f;
      sa[156] = -0.38773736f;
      sa[157] = -0.32181266f;
      sa[158] = -0.14602067f;
      sa[159] = -0.2129014f;
      sa[160] = 0.27277732f;
      sa[161] = -0.38622817f;
      sa[162] = 0.4134401f;
      sa[163] = -0.26047653f;
      sa[164] = 0.090116486f;
      sa[165] = -0.27529228f;
      sa[166] = 0.34307548f;
      sa[167] = -0.45021072f;
      sa[168] = 0.20324425f;
      sa[169] = -0.45997617f;
      sa[170] = 0.31741738f;
      sa[171] = 0.20492594f;
      sa[172] = 0.3411019f;
      sa[173] = 0.3219834f;
      sa[174] = -0.12162422f;
      sa[175] = -0.09093296f;
      sa[176] = -0.17135896f;
      sa[177] = 0.06618202f;
      sa[178] = -0.290615f;
      sa[179] = -0.03794556f;
      sa[180] = -0.39414474f;
      sa[181] = -0.19751407f;
      sa[182] = 0.12850754f;
      sa[183] = -0.25321266f;
      sa[184] = 0.46401566f;
      sa[185] = 0.3724154f;
      sa[186] = -0.09768149f;
      sa[187] = -0.23129386f;
      sa[188] = -0.13151376f;
      sa[189] = -0.1831726f;
      sa[190] = -0.38581845f;
      sa[191] = -0.21417128f;
      sa[192] = 0.020286143f;
      sa[193] = 0.12180366f;
      sa[194] = -0.26821113f;
      sa[195] = -0.22210497f;
      sa[196] = 0.17308284f;
      sa[197] = -0.1872309f;
      sa[198] = 0.03847769f;
      sa[199] = 0.36758485f;
      sa[200] = -0.01965881f;
      sa[201] = 0.26766554f;
      sa[202] = 0.18543461f;
      sa[203] = -0.40601882f;
      sa[204] = 0.19684745f;
      sa[205] = 0.45080617f;
      sa[206] = -0.1575944f;
      sa[207] = 0.1760043f;
      sa[208] = -0.26992673f;
      sa[209] = 0.15831201f;
      sa[210] = -0.16097292f;
      sa[211] = -0.31239605f;
      sa[212] = -0.39317098f;
      sa[213] = -0.0020735695f;
      sa[214] = -0.36678305f;
      sa[215] = 0.009116875f;
      sa[216] = 0.14530976f;
      sa[217] = 0.3227154f;
      sa[218] = 0.031057466f;
      sa[219] = 0.104199275f;
      sa[220] = 0.09257591f;
      sa[221] = -0.08431776f;
      sa[222] = -0.2703298f;
      sa[223] = -0.33260697f;
      sa[224] = 0.29462898f;
      sa[225] = 0.1040407f;
      sa[226] = -0.072661676f;
      sa[227] = 0.082304016f;
      sa[228] = -0.03729134f;
      sa[229] = -0.17758629f;
      sa[230] = -0.23023216f;
      sa[231] = -0.08325161f;
      sa[232] = 0.47597116f;
      sa[233] = -0.1567659f;
      sa[234] = -0.15090287f;
      sa[235] = 0.050265614f;
      sa[236] = -0.3597399f;
      sa[237] = 0.4482663f;
      sa[238] = 0.20840757f;
      sa[239] = -0.07074234f;
      sa[240] = -0.04377658f;
      sa[241] = -0.33977127f;
      sa[242] = -0.23080985f;
      sa[243] = 0.43469474f;
      sa[244] = 0.2626755f;
      sa[245] = 0.3677768f;
      sa[246] = 0.21571465f;
      sa[247] = -0.45047364f;
      sa[248] = -0.15781806f;
      sa[249] = 0.043340933f;
      sa[250] = 0.2380119f;
      sa[251] = 0.4014035f;
      sa[252] = 0.2652066f;
      sa[253] = -0.29595074f;
      sa[254] = 0.33800256f;
      sa[255] = 0.13684572f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_03_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_ReLU_03_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.1389215f;
      sa[1] = -1.577653f;
      sa[2] = -1.6089598f;
      sa[3] = 1.3326939f;
      sa[4] = 0.40512124f;
      sa[5] = -0.2272897f;
      sa[6] = -1.661051f;
      sa[7] = 1.5041904f;
      sa[8] = 1.7797335f;
      sa[9] = 0.2098219f;
      sa[10] = 1.6314932f;
      sa[11] = 1.4759533f;
      sa[12] = 1.8577017f;
      sa[13] = -0.5651774f;
      sa[14] = -2.0077324f;
      sa[15] = -0.71106696f;
      sa[16] = 0.7691686f;
      sa[17] = -0.80959827f;
      sa[18] = -1.5293498f;
      sa[19] = -0.8821285f;
      sa[20] = -1.9519547f;
      sa[21] = 0.30235377f;
      sa[22] = -1.9871368f;
      sa[23] = -0.5921585f;
      sa[24] = -0.5502739f;
      sa[25] = 1.8868307f;
      sa[26] = -0.33436093f;
      sa[27] = 1.2196239f;
      sa[28] = 1.2200778f;
      sa[29] = -0.7187283f;
      sa[30] = 0.16184597f;
      sa[31] = 0.1379079f;
      sa[32] = 0.40887344f;
      sa[33] = 0.24326709f;
      sa[34] = -0.62718695f;
      sa[35] = 1.0296253f;
      sa[36] = 0.5646466f;
      sa[37] = -1.3238349f;
      sa[38] = 0.54002285f;
      sa[39] = -0.23811486f;
      sa[40] = 0.19358917f;
      sa[41] = -0.82691014f;
      sa[42] = 0.49930727f;
      sa[43] = -0.44797307f;
      sa[44] = 0.9380792f;
      sa[45] = -2.094434f;
      sa[46] = -2.197459f;
      sa[47] = -0.016840002f;
      sa[48] = 1.5986695f;
      sa[49] = -0.24494682f;
      sa[50] = -0.47657776f;
      sa[51] = 1.7928648f;
      sa[52] = -1.7452896f;
      sa[53] = 0.9600863f;
      sa[54] = 1.801563f;
      sa[55] = 1.08815f;
      sa[56] = -0.55420816f;
      sa[57] = -0.11003538f;
      sa[58] = 1.018719f;
      sa[59] = 0.8394526f;
      sa[60] = -1.4142766f;
      sa[61] = 0.9284007f;
      sa[62] = -0.40169972f;
      sa[63] = -0.849679f;
      sa[64] = 0.9468885f;
      sa[65] = -0.9592732f;
      sa[66] = -1.7706983f;
      sa[67] = -0.1512678f;
      sa[68] = 0.9037625f;
      sa[69] = -1.3798455f;
      sa[70] = -1.6603956f;
      sa[71] = -0.030515617f;
      sa[72] = -0.98408633f;
      sa[73] = -1.1839217f;
      sa[74] = -1.0714834f;
      sa[75] = 1.2691625f;
      sa[76] = 1.9075414f;
      sa[77] = -0.6241814f;
      sa[78] = -1.3754581f;
      sa[79] = -0.35592744f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_03 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_03_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_03_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_03_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_ReLU_03_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


