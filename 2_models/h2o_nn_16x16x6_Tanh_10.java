/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:52:22.279+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_10

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_10 > h2o_nn_16x16x6_Tanh_10.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_10.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_10", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_10 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_10_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_10_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_10_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_10_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_10_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_10_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_10.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_10_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.24761904761904763,0.18571428571428572,0.06190476190476191,0.12857142857142856,0.24761904761904763,0.12857142857142856};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_10() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-3413722410115168100L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_10_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_10_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_10_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_10_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_10_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_10_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_10_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_10_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_10_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_10_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_10_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.07555293586286921;
      sa[1] = -0.022667027783014288;
      sa[2] = 0.10785036045838285;
      sa[3] = -0.1757245240182611;
      sa[4] = 0.07799979692782277;
      sa[5] = -0.03292503182401291;
      sa[6] = -0.09975868818084567;
      sa[7] = 0.005403548258544104;
      sa[8] = -0.19453997552728117;
      sa[9] = 0.017999612531695484;
      sa[10] = -0.14496611676037688;
      sa[11] = -0.19217052632300005;
      sa[12] = 0.0594767062130128;
      sa[13] = -0.03321026716874839;
      sa[14] = 0.02467091523562902;
      sa[15] = -1.9376676656509547E-4;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_10_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_10_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.21595016847368248;
      sa[1] = -0.08549403901717623;
      sa[2] = -0.03834642841870352;
      sa[3] = 0.11066421361540629;
      sa[4] = 0.003845675135991642;
      sa[5] = -0.05066286720204067;
      sa[6] = -0.061814957079057486;
      sa[7] = 0.01852736742385388;
      sa[8] = -0.0012809642038870146;
      sa[9] = -0.11591631658262762;
      sa[10] = 0.1687548150970988;
      sa[11] = 0.3137752445136945;
      sa[12] = 0.014872182941001618;
      sa[13] = 0.05971331886022928;
      sa[14] = -0.06814783086554325;
      sa[15] = -0.3077961949964065;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_10_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_10_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.012684006867207907;
      sa[1] = -0.037023614783900025;
      sa[2] = -0.23186113808022007;
      sa[3] = 0.022714370281623836;
      sa[4] = 0.05300333221669051;
      sa[5] = -0.24914073761438507;
    }
  }
}
class h2o_nn_16x16x6_Tanh_10_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_10_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_10_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.14430729f;
      sa[1] = 0.10450041f;
      sa[2] = 0.06341179f;
      sa[3] = 0.5382535f;
      sa[4] = 0.06284459f;
      sa[5] = -0.16813192f;
      sa[6] = 0.0020554464f;
      sa[7] = 0.51423025f;
      sa[8] = 0.03843703f;
      sa[9] = -0.023434663f;
      sa[10] = -0.111033924f;
      sa[11] = -0.27159157f;
      sa[12] = 0.046693295f;
      sa[13] = -0.41580635f;
      sa[14] = -0.2262875f;
      sa[15] = 0.2680825f;
      sa[16] = 0.0970974f;
      sa[17] = 0.37938005f;
      sa[18] = -0.19854446f;
      sa[19] = 0.06582204f;
      sa[20] = 0.23766501f;
      sa[21] = -0.2957896f;
      sa[22] = 0.24300869f;
      sa[23] = 0.07080058f;
      sa[24] = 0.2107976f;
      sa[25] = 0.22402129f;
      sa[26] = -0.21170345f;
      sa[27] = 0.65797675f;
      sa[28] = 0.26555884f;
      sa[29] = -0.20296025f;
      sa[30] = -0.17194742f;
      sa[31] = 0.27863076f;
      sa[32] = 0.26330373f;
      sa[33] = -0.13345404f;
      sa[34] = 0.2129104f;
      sa[35] = -0.067147076f;
      sa[36] = 0.11593627f;
      sa[37] = 0.2991969f;
      sa[38] = -0.20819484f;
      sa[39] = 0.1872037f;
      sa[40] = 0.029156595f;
      sa[41] = -0.1640807f;
      sa[42] = -0.11553397f;
      sa[43] = 0.028233446f;
      sa[44] = 0.23822853f;
      sa[45] = -0.26908988f;
      sa[46] = 0.15449706f;
      sa[47] = -0.18749098f;
      sa[48] = 0.34496954f;
      sa[49] = 0.27297035f;
      sa[50] = 0.37192327f;
      sa[51] = -0.11168145f;
      sa[52] = -0.010153265f;
      sa[53] = 0.27047473f;
      sa[54] = 0.2182899f;
      sa[55] = 0.3148362f;
      sa[56] = -0.11951292f;
      sa[57] = -0.30336922f;
      sa[58] = 0.3734401f;
      sa[59] = -0.023944942f;
      sa[60] = -0.42843574f;
      sa[61] = 0.21059132f;
      sa[62] = 0.11471259f;
      sa[63] = 0.37053126f;
      sa[64] = 0.1624302f;
      sa[65] = 0.1543287f;
      sa[66] = -0.08141911f;
      sa[67] = 0.18590838f;
      sa[68] = -0.046612054f;
      sa[69] = -0.2318622f;
      sa[70] = 0.4010804f;
      sa[71] = 0.4376817f;
      sa[72] = -0.41175053f;
      sa[73] = 0.12836927f;
      sa[74] = -0.042916674f;
      sa[75] = 0.1438534f;
      sa[76] = -0.2867715f;
      sa[77] = -0.043500446f;
      sa[78] = -0.09997657f;
      sa[79] = -0.028382417f;
      sa[80] = -0.17142703f;
      sa[81] = -0.14668056f;
      sa[82] = -0.089681506f;
      sa[83] = -0.04953695f;
      sa[84] = -0.016133612f;
      sa[85] = -0.11344033f;
      sa[86] = 0.080615476f;
      sa[87] = -0.15987754f;
      sa[88] = 0.09346275f;
      sa[89] = 0.024999052f;
      sa[90] = -0.18989566f;
      sa[91] = 0.1723743f;
      sa[92] = 0.20634931f;
      sa[93] = -0.09286337f;
      sa[94] = -0.13572131f;
      sa[95] = -0.5311552f;
      sa[96] = 0.27252334f;
      sa[97] = 0.078266926f;
      sa[98] = 0.11432016f;
      sa[99] = -0.675967f;
      sa[100] = 0.042700905f;
      sa[101] = -0.21954803f;
      sa[102] = -0.11893151f;
      sa[103] = -0.21688476f;
      sa[104] = -0.010242874f;
      sa[105] = -0.29018807f;
      sa[106] = -0.5566278f;
      sa[107] = 0.02427515f;
      sa[108] = 0.41351625f;
      sa[109] = -0.2828366f;
      sa[110] = -0.19271605f;
      sa[111] = 0.043999698f;
      sa[112] = 0.141889f;
      sa[113] = 0.021536563f;
      sa[114] = -0.20285515f;
      sa[115] = 0.051263295f;
      sa[116] = -0.2772112f;
      sa[117] = 0.14733538f;
      sa[118] = -0.15520953f;
      sa[119] = 0.3172225f;
      sa[120] = 0.12689266f;
      sa[121] = 0.18391566f;
      sa[122] = 0.27285755f;
      sa[123] = 0.40889516f;
      sa[124] = 0.31331232f;
      sa[125] = 0.3895535f;
      sa[126] = -0.12607759f;
      sa[127] = -0.30684263f;
      sa[128] = -0.07530955f;
      sa[129] = 0.024161814f;
      sa[130] = -0.23935863f;
      sa[131] = 0.34526214f;
      sa[132] = 0.14440522f;
      sa[133] = -0.28902248f;
      sa[134] = 0.23908444f;
      sa[135] = 0.071544975f;
      sa[136] = -0.41369462f;
      sa[137] = -0.07677496f;
      sa[138] = 0.06244056f;
      sa[139] = -0.06953952f;
      sa[140] = 0.0382497f;
      sa[141] = 0.095827214f;
      sa[142] = 0.039379574f;
      sa[143] = -0.30973285f;
      sa[144] = 0.42803305f;
      sa[145] = -0.22879162f;
      sa[146] = -0.27735484f;
      sa[147] = 5.9108465E-4f;
      sa[148] = 0.13446926f;
      sa[149] = 0.0258654f;
      sa[150] = 0.27105668f;
      sa[151] = -0.1795695f;
      sa[152] = 0.15141456f;
      sa[153] = 0.25066426f;
      sa[154] = 0.2900407f;
      sa[155] = -0.10265179f;
      sa[156] = 0.15789834f;
      sa[157] = -0.31592152f;
      sa[158] = 0.12930231f;
      sa[159] = 0.18596125f;
      sa[160] = 0.103934795f;
      sa[161] = 0.10809406f;
      sa[162] = 0.13290842f;
      sa[163] = -0.1620836f;
      sa[164] = 0.28378925f;
      sa[165] = -0.036842678f;
      sa[166] = -0.044698685f;
      sa[167] = -0.081763625f;
      sa[168] = 0.091142856f;
      sa[169] = 0.24697617f;
      sa[170] = 0.24562103f;
      sa[171] = 0.007425463f;
      sa[172] = -0.12881123f;
      sa[173] = -0.24167366f;
      sa[174] = -0.24825151f;
      sa[175] = -0.35816088f;
      sa[176] = 0.04482638f;
      sa[177] = 0.08845895f;
      sa[178] = -0.111431256f;
      sa[179] = 0.13509056f;
      sa[180] = 0.024556587f;
      sa[181] = -0.33510414f;
      sa[182] = -0.12638289f;
      sa[183] = 0.150093f;
      sa[184] = 0.29280773f;
      sa[185] = 0.14099257f;
      sa[186] = -0.3769994f;
      sa[187] = 0.16465244f;
      sa[188] = 0.044291563f;
      sa[189] = 0.13015874f;
      sa[190] = -0.01341697f;
      sa[191] = 0.08415197f;
      sa[192] = -0.15700215f;
      sa[193] = 0.18596019f;
      sa[194] = 0.08211586f;
      sa[195] = 0.53904146f;
      sa[196] = 0.3823285f;
      sa[197] = -0.15180105f;
      sa[198] = 0.020511972f;
      sa[199] = -0.29908147f;
      sa[200] = 0.009590433f;
      sa[201] = -0.36330596f;
      sa[202] = 0.0996367f;
      sa[203] = 0.092218935f;
      sa[204] = -0.13114199f;
      sa[205] = 0.18978082f;
      sa[206] = 0.3085195f;
      sa[207] = 0.18975623f;
      sa[208] = -0.30786154f;
      sa[209] = -0.09061187f;
      sa[210] = -0.35312843f;
      sa[211] = -0.11447622f;
      sa[212] = 0.30062923f;
      sa[213] = -0.105979234f;
      sa[214] = -0.2056351f;
      sa[215] = -0.07205369f;
      sa[216] = 0.17787528f;
      sa[217] = 0.17941454f;
      sa[218] = -0.103231765f;
      sa[219] = 0.37197173f;
      sa[220] = -0.26418713f;
      sa[221] = 0.10342283f;
      sa[222] = 0.20293629f;
      sa[223] = 0.13591962f;
      sa[224] = 0.19182959f;
      sa[225] = 0.26881602f;
      sa[226] = -0.20664151f;
      sa[227] = 0.5218366f;
      sa[228] = 0.076813824f;
      sa[229] = 0.1268695f;
      sa[230] = 0.21814157f;
      sa[231] = -0.17967494f;
      sa[232] = -0.21723598f;
      sa[233] = -0.014658109f;
      sa[234] = -0.0058620027f;
      sa[235] = -0.61055005f;
      sa[236] = -0.11618842f;
      sa[237] = -0.33020592f;
      sa[238] = -0.34859627f;
      sa[239] = 0.10270728f;
      sa[240] = 0.15094756f;
      sa[241] = -0.1791845f;
      sa[242] = -0.12293691f;
      sa[243] = -0.5324947f;
      sa[244] = -0.22942887f;
      sa[245] = -0.13648705f;
      sa[246] = -0.20780706f;
      sa[247] = 0.1257876f;
      sa[248] = 0.28535292f;
      sa[249] = 0.40255302f;
      sa[250] = -0.6397354f;
      sa[251] = -0.29511783f;
      sa[252] = -0.12643689f;
      sa[253] = -0.19962838f;
      sa[254] = -0.34766275f;
      sa[255] = -0.12807591f;
      sa[256] = -0.20176794f;
      sa[257] = 0.31716678f;
      sa[258] = -0.2386556f;
      sa[259] = -0.14042044f;
      sa[260] = -0.16696592f;
      sa[261] = 0.038924333f;
      sa[262] = -0.13519584f;
      sa[263] = 0.55099773f;
      sa[264] = -0.11380865f;
      sa[265] = 0.16592859f;
      sa[266] = -0.20064461f;
      sa[267] = -0.1381084f;
      sa[268] = 0.19699147f;
      sa[269] = -0.15091392f;
      sa[270] = 0.13758765f;
      sa[271] = 0.31245962f;
      sa[272] = -0.12135511f;
      sa[273] = -0.17642468f;
      sa[274] = 0.13156359f;
      sa[275] = 0.04011613f;
      sa[276] = 0.019744297f;
      sa[277] = -0.2534735f;
      sa[278] = -0.08010844f;
      sa[279] = 0.36592263f;
      sa[280] = -0.20191869f;
      sa[281] = 0.29684737f;
      sa[282] = -0.111876905f;
      sa[283] = -0.0139535265f;
      sa[284] = -0.014171145f;
      sa[285] = -0.20732327f;
      sa[286] = 0.38657525f;
      sa[287] = 0.2430395f;
      sa[288] = -0.30271336f;
      sa[289] = -0.24356227f;
      sa[290] = -0.1081506f;
      sa[291] = 0.4894465f;
      sa[292] = 0.009282906f;
      sa[293] = -0.26287183f;
      sa[294] = -0.039635632f;
      sa[295] = 0.10370361f;
      sa[296] = 0.25769353f;
      sa[297] = 0.08170223f;
      sa[298] = 0.008526632f;
      sa[299] = -0.25418296f;
      sa[300] = -0.033008512f;
      sa[301] = -0.20069239f;
      sa[302] = 0.14428793f;
      sa[303] = 0.17081907f;
      sa[304] = -0.14005657f;
      sa[305] = -0.09381979f;
      sa[306] = 0.09504423f;
      sa[307] = -0.33335832f;
      sa[308] = 0.08327314f;
      sa[309] = 0.045142043f;
      sa[310] = 0.24791494f;
      sa[311] = 0.36845994f;
      sa[312] = -0.21735121f;
      sa[313] = -0.29858798f;
      sa[314] = -0.09989428f;
      sa[315] = 0.036197953f;
      sa[316] = -0.059909962f;
      sa[317] = -0.14538695f;
      sa[318] = -0.00479566f;
      sa[319] = 0.33314842f;
      sa[320] = 0.16856939f;
      sa[321] = 0.25087792f;
      sa[322] = 0.26559368f;
      sa[323] = -0.3097598f;
      sa[324] = 0.080890425f;
      sa[325] = 0.3930758f;
      sa[326] = -0.34396103f;
      sa[327] = -0.19756232f;
      sa[328] = -0.08297207f;
      sa[329] = 0.19715407f;
      sa[330] = -0.19373888f;
      sa[331] = 0.053778056f;
      sa[332] = -0.2966721f;
      sa[333] = 0.16593121f;
      sa[334] = 0.024269018f;
      sa[335] = 0.24861194f;
      sa[336] = -0.1335858f;
      sa[337] = -0.19974747f;
      sa[338] = 0.38022444f;
      sa[339] = -0.06818123f;
      sa[340] = -0.2726635f;
      sa[341] = -0.35079354f;
      sa[342] = 0.39820343f;
      sa[343] = 0.0058459886f;
      sa[344] = -0.17832422f;
      sa[345] = 0.20016788f;
      sa[346] = 0.2537372f;
      sa[347] = -0.104184f;
      sa[348] = 0.20707709f;
      sa[349] = -0.3496687f;
      sa[350] = -0.16152847f;
      sa[351] = 0.347629f;
      sa[352] = 0.18233685f;
      sa[353] = -0.070377916f;
      sa[354] = -0.012683473f;
      sa[355] = 0.13012774f;
      sa[356] = -0.1497874f;
      sa[357] = 0.21781085f;
      sa[358] = -0.06653533f;
      sa[359] = 0.20315066f;
      sa[360] = 0.25050306f;
      sa[361] = -0.24265672f;
      sa[362] = -0.16753155f;
      sa[363] = 0.10017182f;
      sa[364] = -0.32433555f;
      sa[365] = -0.53170186f;
      sa[366] = -0.19069785f;
      sa[367] = -0.2047806f;
      sa[368] = 0.048710212f;
      sa[369] = -2.896151E-4f;
      sa[370] = -0.20623507f;
      sa[371] = 0.5586357f;
      sa[372] = -0.15396647f;
      sa[373] = -0.020066896f;
      sa[374] = -0.28243047f;
      sa[375] = -0.41663563f;
      sa[376] = -0.39492652f;
      sa[377] = -0.49318492f;
      sa[378] = 0.6926082f;
      sa[379] = -0.056419704f;
      sa[380] = -0.20783909f;
      sa[381] = -0.19664267f;
      sa[382] = -0.114800856f;
      sa[383] = -0.2942506f;
      sa[384] = -0.212624f;
      sa[385] = 0.06406244f;
      sa[386] = -0.006537058f;
      sa[387] = -0.49741024f;
      sa[388] = -0.05174708f;
      sa[389] = -0.23712264f;
      sa[390] = -0.33871847f;
      sa[391] = -0.22218624f;
      sa[392] = 0.32833233f;
      sa[393] = 0.34076902f;
      sa[394] = -0.2597948f;
      sa[395] = 0.2580934f;
      sa[396] = 0.30685702f;
      sa[397] = -0.14354722f;
      sa[398] = 0.19372506f;
      sa[399] = 0.075887606f;
      sa[400] = 0.19629194f;
      sa[401] = 0.32780582f;
      sa[402] = -0.15821654f;
      sa[403] = -0.058400303f;
      sa[404] = 0.268239f;
      sa[405] = -0.15839712f;
      sa[406] = -0.082864255f;
      sa[407] = 0.25857145f;
      sa[408] = -0.28917682f;
      sa[409] = -0.19962549f;
      sa[410] = -0.20493783f;
      sa[411] = -0.15752737f;
      sa[412] = -0.16517498f;
      sa[413] = 0.2147821f;
      sa[414] = -0.08732804f;
      sa[415] = 0.45623034f;
      sa[416] = -0.25500226f;
      sa[417] = 0.0069895578f;
      sa[418] = -0.051274527f;
      sa[419] = 0.14523086f;
      sa[420] = 0.3035138f;
      sa[421] = 0.42163435f;
      sa[422] = 0.103012174f;
      sa[423] = -0.2517636f;
      sa[424] = 0.10659185f;
      sa[425] = -0.09159269f;
      sa[426] = -0.23295425f;
      sa[427] = 0.12361773f;
      sa[428] = -0.14341807f;
      sa[429] = -0.17858359f;
      sa[430] = -0.016543627f;
      sa[431] = -0.0881385f;
      sa[432] = 0.029604223f;
      sa[433] = 0.15791965f;
      sa[434] = 0.26969838f;
      sa[435] = -0.3636501f;
      sa[436] = -0.30039743f;
      sa[437] = -0.2898656f;
      sa[438] = 0.016969161f;
      sa[439] = 0.012704457f;
      sa[440] = 0.41691935f;
      sa[441] = -0.31131557f;
      sa[442] = 0.08664496f;
      sa[443] = 0.21481773f;
      sa[444] = -0.22690803f;
      sa[445] = 0.10055013f;
      sa[446] = 0.30513072f;
      sa[447] = 0.020926267f;
      sa[448] = 0.19755812f;
      sa[449] = 0.18843547f;
      sa[450] = 0.10844877f;
      sa[451] = 0.19556852f;
      sa[452] = 0.18990089f;
      sa[453] = -0.049810246f;
      sa[454] = -0.15389036f;
      sa[455] = -0.13573758f;
      sa[456] = -0.077768564f;
      sa[457] = 0.07628767f;
      sa[458] = -0.20957313f;
      sa[459] = 0.26431376f;
      sa[460] = 0.21559922f;
      sa[461] = 0.2806489f;
      sa[462] = 0.031156948f;
      sa[463] = 0.18250771f;
      sa[464] = -0.3883954f;
      sa[465] = 0.17979446f;
      sa[466] = -0.02738145f;
      sa[467] = 0.2644702f;
      sa[468] = 0.10715479f;
      sa[469] = 0.24988644f;
      sa[470] = 0.2318698f;
      sa[471] = 0.19398864f;
      sa[472] = -0.0037001192f;
      sa[473] = -0.24511626f;
      sa[474] = -0.042043403f;
      sa[475] = 0.13712744f;
      sa[476] = 0.18436976f;
      sa[477] = -0.076253526f;
      sa[478] = 0.23857723f;
      sa[479] = -0.23340154f;
      sa[480] = -0.34497085f;
      sa[481] = -0.38990167f;
      sa[482] = -0.32220542f;
      sa[483] = 0.19838445f;
      sa[484] = 0.1902037f;
      sa[485] = 0.2258486f;
      sa[486] = 0.09044707f;
      sa[487] = -0.20927146f;
      sa[488] = -0.23541537f;
      sa[489] = 0.0763384f;
      sa[490] = 0.012059418f;
      sa[491] = -0.26278418f;
      sa[492] = 0.088951826f;
      sa[493] = 0.29381183f;
      sa[494] = -0.22368497f;
      sa[495] = 0.4036764f;
      sa[496] = -0.08011399f;
      sa[497] = -0.0036454736f;
      sa[498] = 0.068222426f;
      sa[499] = 0.056383103f;
      sa[500] = 0.062116154f;
      sa[501] = 0.15844446f;
      sa[502] = 0.29516557f;
      sa[503] = 0.08812519f;
      sa[504] = -0.015867598f;
      sa[505] = -0.16958898f;
      sa[506] = 0.19039118f;
      sa[507] = -0.098952785f;
      sa[508] = 0.23701823f;
      sa[509] = 0.4336945f;
      sa[510] = 0.26726353f;
      sa[511] = 0.103391655f;
      sa[512] = -0.012917177f;
      sa[513] = 0.1799588f;
      sa[514] = 0.24371342f;
      sa[515] = 0.06597825f;
      sa[516] = -0.034308262f;
      sa[517] = 0.23186441f;
      sa[518] = 0.07301106f;
      sa[519] = -0.034667704f;
      sa[520] = 0.24958129f;
      sa[521] = 0.3668376f;
      sa[522] = 0.074239194f;
      sa[523] = 0.18821138f;
      sa[524] = 0.08819902f;
      sa[525] = 0.14400256f;
      sa[526] = -0.109640375f;
      sa[527] = -0.06119687f;
      sa[528] = -0.004074284f;
      sa[529] = 0.1327405f;
      sa[530] = -0.20145035f;
      sa[531] = 0.2736242f;
      sa[532] = 0.13042445f;
      sa[533] = 0.19233744f;
      sa[534] = 0.3116418f;
      sa[535] = -0.0028913463f;
      sa[536] = 0.052812144f;
      sa[537] = 0.11906864f;
      sa[538] = 0.13147995f;
      sa[539] = 0.2901095f;
      sa[540] = -0.102586575f;
      sa[541] = -0.1139733f;
      sa[542] = -0.124462f;
      sa[543] = -1.0793959f;
      sa[544] = 0.10768186f;
      sa[545] = -0.0034490954f;
      sa[546] = 0.05391043f;
      sa[547] = 0.24293372f;
      sa[548] = 0.15033562f;
      sa[549] = 0.27295858f;
      sa[550] = 0.09828979f;
      sa[551] = 0.08664787f;
      sa[552] = 0.056454025f;
      sa[553] = -0.12762398f;
      sa[554] = -0.11486153f;
      sa[555] = -0.14566791f;
      sa[556] = -0.101997614f;
      sa[557] = -0.31995776f;
      sa[558] = 0.1538469f;
      sa[559] = 0.20786522f;
      sa[560] = -0.3462895f;
      sa[561] = -0.13322349f;
      sa[562] = 0.23820487f;
      sa[563] = -0.093123004f;
      sa[564] = 0.20444983f;
      sa[565] = 0.05378292f;
      sa[566] = 0.36964485f;
      sa[567] = 0.1526534f;
      sa[568] = -0.17181334f;
      sa[569] = -0.08401524f;
      sa[570] = -0.16110918f;
      sa[571] = -0.2498681f;
      sa[572] = -0.0678909f;
      sa[573] = 0.1778701f;
      sa[574] = 0.3150524f;
      sa[575] = -0.060051546f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_10_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_10_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.49400634f;
      sa[1] = 0.131424f;
      sa[2] = -0.28894854f;
      sa[3] = -0.16903114f;
      sa[4] = -0.029159322f;
      sa[5] = -0.10768947f;
      sa[6] = 0.009069476f;
      sa[7] = -0.027531402f;
      sa[8] = -0.49386892f;
      sa[9] = 0.31572986f;
      sa[10] = -0.31339306f;
      sa[11] = 0.14056267f;
      sa[12] = 0.15093166f;
      sa[13] = 0.028306795f;
      sa[14] = -0.018843573f;
      sa[15] = 0.546802f;
      sa[16] = 0.25341246f;
      sa[17] = -0.23781185f;
      sa[18] = -0.013245297f;
      sa[19] = -0.074241444f;
      sa[20] = 0.21458441f;
      sa[21] = -0.20593067f;
      sa[22] = -0.18575841f;
      sa[23] = 0.118486196f;
      sa[24] = -0.6164934f;
      sa[25] = 0.37951845f;
      sa[26] = -0.08401953f;
      sa[27] = 0.5876756f;
      sa[28] = -0.27079284f;
      sa[29] = -0.21867816f;
      sa[30] = 0.077264704f;
      sa[31] = -0.10140284f;
      sa[32] = -0.19437107f;
      sa[33] = -0.5074358f;
      sa[34] = -0.005811899f;
      sa[35] = 0.29983625f;
      sa[36] = 0.10982357f;
      sa[37] = -0.019509627f;
      sa[38] = 0.014991478f;
      sa[39] = 0.15905091f;
      sa[40] = -0.46499735f;
      sa[41] = -0.12515081f;
      sa[42] = -0.38578823f;
      sa[43] = -0.45100233f;
      sa[44] = 0.111526944f;
      sa[45] = -0.13060309f;
      sa[46] = 0.50337255f;
      sa[47] = 0.5640054f;
      sa[48] = -0.5870969f;
      sa[49] = -0.35547987f;
      sa[50] = 0.2674758f;
      sa[51] = -0.10338465f;
      sa[52] = -0.031026224f;
      sa[53] = -0.0033037614f;
      sa[54] = -0.14244805f;
      sa[55] = 0.26659164f;
      sa[56] = -0.32245734f;
      sa[57] = -0.35432252f;
      sa[58] = 0.11690773f;
      sa[59] = 0.102141894f;
      sa[60] = 0.31110048f;
      sa[61] = -0.5020043f;
      sa[62] = -0.17153637f;
      sa[63] = 0.18083163f;
      sa[64] = 0.34064543f;
      sa[65] = -0.08635431f;
      sa[66] = 0.098853484f;
      sa[67] = 0.32724863f;
      sa[68] = 0.24263199f;
      sa[69] = -0.06823194f;
      sa[70] = -0.40735012f;
      sa[71] = -0.02669744f;
      sa[72] = -0.31254533f;
      sa[73] = 0.468282f;
      sa[74] = 0.532275f;
      sa[75] = -0.13896494f;
      sa[76] = 0.23214413f;
      sa[77] = 0.11642158f;
      sa[78] = -0.28532207f;
      sa[79] = 0.5329695f;
      sa[80] = 0.020833194f;
      sa[81] = -0.105575286f;
      sa[82] = 0.44222763f;
      sa[83] = -0.12733757f;
      sa[84] = -0.25498018f;
      sa[85] = -0.34103537f;
      sa[86] = -0.006469128f;
      sa[87] = 0.19661362f;
      sa[88] = -0.4170823f;
      sa[89] = -0.30405506f;
      sa[90] = -0.4777792f;
      sa[91] = 0.35161844f;
      sa[92] = -0.15553783f;
      sa[93] = 0.17117345f;
      sa[94] = -0.37118608f;
      sa[95] = -0.34434468f;
      sa[96] = -0.3881776f;
      sa[97] = -0.022047022f;
      sa[98] = 0.054426778f;
      sa[99] = 0.09556728f;
      sa[100] = -0.45856467f;
      sa[101] = -0.28501487f;
      sa[102] = 0.26614267f;
      sa[103] = -0.0029981986f;
      sa[104] = -0.46950117f;
      sa[105] = 0.017201822f;
      sa[106] = 0.33929452f;
      sa[107] = 0.40852103f;
      sa[108] = 0.2594839f;
      sa[109] = -0.05951453f;
      sa[110] = 0.23973478f;
      sa[111] = -0.027113363f;
      sa[112] = -0.26035517f;
      sa[113] = 0.0013217703f;
      sa[114] = 0.29627332f;
      sa[115] = -0.21955903f;
      sa[116] = 0.3412665f;
      sa[117] = -0.020023517f;
      sa[118] = -0.5531353f;
      sa[119] = -0.1833392f;
      sa[120] = -0.050888546f;
      sa[121] = 0.10895505f;
      sa[122] = -0.02165166f;
      sa[123] = -0.0067079347f;
      sa[124] = -0.4710593f;
      sa[125] = 0.1579825f;
      sa[126] = -0.18169527f;
      sa[127] = 0.08490126f;
      sa[128] = -0.3672836f;
      sa[129] = 0.008016483f;
      sa[130] = 0.097710304f;
      sa[131] = 0.13997945f;
      sa[132] = 0.022320293f;
      sa[133] = 0.1406169f;
      sa[134] = 0.3516417f;
      sa[135] = -0.37349674f;
      sa[136] = 0.24963413f;
      sa[137] = -0.33588004f;
      sa[138] = 0.14307658f;
      sa[139] = 0.34095326f;
      sa[140] = -0.22571787f;
      sa[141] = -0.08463299f;
      sa[142] = -0.07429374f;
      sa[143] = -0.34750432f;
      sa[144] = 0.30627492f;
      sa[145] = -0.5139746f;
      sa[146] = 0.17755722f;
      sa[147] = 0.0059482716f;
      sa[148] = -0.29920453f;
      sa[149] = 0.2359344f;
      sa[150] = -0.008825379f;
      sa[151] = -0.5297697f;
      sa[152] = 0.48569396f;
      sa[153] = -0.2471122f;
      sa[154] = 0.39504558f;
      sa[155] = -0.4057824f;
      sa[156] = -0.5076448f;
      sa[157] = -0.2576297f;
      sa[158] = -0.33858803f;
      sa[159] = -0.3951653f;
      sa[160] = 0.32740167f;
      sa[161] = -0.30175775f;
      sa[162] = 0.57894325f;
      sa[163] = -0.35364243f;
      sa[164] = 0.218412f;
      sa[165] = -0.2756868f;
      sa[166] = 0.34121192f;
      sa[167] = -0.46624708f;
      sa[168] = 0.2979868f;
      sa[169] = -0.5284091f;
      sa[170] = 0.32264954f;
      sa[171] = 0.25664163f;
      sa[172] = 0.41319567f;
      sa[173] = 0.35330528f;
      sa[174] = -0.08830114f;
      sa[175] = -0.100633435f;
      sa[176] = -0.13961239f;
      sa[177] = 0.2974287f;
      sa[178] = -0.17977731f;
      sa[179] = 0.13086417f;
      sa[180] = -0.86050814f;
      sa[181] = -0.43950567f;
      sa[182] = -0.25176495f;
      sa[183] = -0.113958366f;
      sa[184] = 0.6158298f;
      sa[185] = -0.14272521f;
      sa[186] = -0.3550523f;
      sa[187] = -0.12054119f;
      sa[188] = -0.2159686f;
      sa[189] = -0.483275f;
      sa[190] = -0.36928704f;
      sa[191] = -0.60367745f;
      sa[192] = -0.11366768f;
      sa[193] = 0.17642146f;
      sa[194] = -0.37412003f;
      sa[195] = -0.27286497f;
      sa[196] = 0.16401684f;
      sa[197] = -0.078992374f;
      sa[198] = 0.13804351f;
      sa[199] = 0.4389762f;
      sa[200] = 0.14181162f;
      sa[201] = 0.27128303f;
      sa[202] = 0.3259138f;
      sa[203] = -0.47147715f;
      sa[204] = 0.1266567f;
      sa[205] = 0.3253742f;
      sa[206] = -0.20099708f;
      sa[207] = 0.22913644f;
      sa[208] = 0.11467989f;
      sa[209] = 0.4983874f;
      sa[210] = -0.06479621f;
      sa[211] = -0.41355586f;
      sa[212] = -0.3381284f;
      sa[213] = -0.10572598f;
      sa[214] = -0.7603351f;
      sa[215] = 0.16426824f;
      sa[216] = -0.12966712f;
      sa[217] = 0.23781054f;
      sa[218] = -0.23519552f;
      sa[219] = -0.06096464f;
      sa[220] = 0.18654858f;
      sa[221] = 0.062973194f;
      sa[222] = -0.075917475f;
      sa[223] = -0.11073509f;
      sa[224] = 0.52755237f;
      sa[225] = 0.0046565444f;
      sa[226] = -0.047363166f;
      sa[227] = 0.12647232f;
      sa[228] = 0.05994932f;
      sa[229] = -0.105999224f;
      sa[230] = -0.22970153f;
      sa[231] = -0.16494401f;
      sa[232] = 0.45991468f;
      sa[233] = -0.18791449f;
      sa[234] = -0.28185976f;
      sa[235] = -0.07676492f;
      sa[236] = -0.48025665f;
      sa[237] = 0.60642713f;
      sa[238] = 0.20460421f;
      sa[239] = -0.27208102f;
      sa[240] = 0.091404594f;
      sa[241] = -0.6391195f;
      sa[242] = -0.3001594f;
      sa[243] = 0.46993944f;
      sa[244] = 0.35573265f;
      sa[245] = 0.56600195f;
      sa[246] = 0.51172906f;
      sa[247] = -0.48174125f;
      sa[248] = -0.106513545f;
      sa[249] = 0.16657695f;
      sa[250] = 0.29819262f;
      sa[251] = 0.3012569f;
      sa[252] = 0.18070292f;
      sa[253] = -0.058678307f;
      sa[254] = 0.23389697f;
      sa[255] = -0.054350913f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_10_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_Tanh_10_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.07942755f;
      sa[1] = -1.5863574f;
      sa[2] = -1.627183f;
      sa[3] = 1.3750992f;
      sa[4] = 0.28250527f;
      sa[5] = -0.16024452f;
      sa[6] = -1.5719647f;
      sa[7] = 1.4281098f;
      sa[8] = 1.9041901f;
      sa[9] = 0.4855357f;
      sa[10] = 1.8613542f;
      sa[11] = 1.4946687f;
      sa[12] = 1.6760049f;
      sa[13] = -0.6162102f;
      sa[14] = -1.91205f;
      sa[15] = -0.7673763f;
      sa[16] = 0.7206116f;
      sa[17] = -0.7839474f;
      sa[18] = -1.5595212f;
      sa[19] = -1.0217115f;
      sa[20] = -1.9556042f;
      sa[21] = 0.3573779f;
      sa[22] = -1.9742581f;
      sa[23] = -0.88668025f;
      sa[24] = -0.444751f;
      sa[25] = 1.9265395f;
      sa[26] = -0.18326415f;
      sa[27] = 1.2153606f;
      sa[28] = 1.1399336f;
      sa[29] = -0.9074231f;
      sa[30] = 0.25552863f;
      sa[31] = 0.220804f;
      sa[32] = 0.5688075f;
      sa[33] = 0.16301726f;
      sa[34] = -0.5948868f;
      sa[35] = 1.0924655f;
      sa[36] = 0.60211056f;
      sa[37] = -1.3414955f;
      sa[38] = 1.1104271f;
      sa[39] = -0.24951151f;
      sa[40] = 0.38500625f;
      sa[41] = -0.6096613f;
      sa[42] = 0.7505949f;
      sa[43] = -0.109866455f;
      sa[44] = 1.3229249f;
      sa[45] = -2.1168108f;
      sa[46] = -2.5134418f;
      sa[47] = 0.31571922f;
      sa[48] = 1.6196164f;
      sa[49] = 0.08667965f;
      sa[50] = -0.37074387f;
      sa[51] = 1.7830209f;
      sa[52] = -1.623723f;
      sa[53] = 1.2290733f;
      sa[54] = 1.6350493f;
      sa[55] = 1.2907478f;
      sa[56] = -0.8135203f;
      sa[57] = -0.2323909f;
      sa[58] = 0.8384962f;
      sa[59] = 0.7669896f;
      sa[60] = -1.6150979f;
      sa[61] = 1.057157f;
      sa[62] = -0.23807141f;
      sa[63] = -1.0348032f;
      sa[64] = 0.9338035f;
      sa[65] = -0.9008673f;
      sa[66] = -1.6878096f;
      sa[67] = 0.008441037f;
      sa[68] = 0.96715057f;
      sa[69] = -1.3445036f;
      sa[70] = -1.6330026f;
      sa[71] = 0.10644011f;
      sa[72] = -1.1075767f;
      sa[73] = -1.3959428f;
      sa[74] = -1.3305303f;
      sa[75] = 1.3077796f;
      sa[76] = 1.9538507f;
      sa[77] = -0.2879984f;
      sa[78] = -1.41335f;
      sa[79] = -0.5863061f;
      sa[80] = 0.74958587f;
      sa[81] = -1.5176634f;
      sa[82] = -0.1299498f;
      sa[83] = -1.4218109f;
      sa[84] = 1.7383544f;
      sa[85] = 0.9192347f;
      sa[86] = -2.0046809f;
      sa[87] = 1.1874716f;
      sa[88] = -1.6467685f;
      sa[89] = -0.9023091f;
      sa[90] = 0.3284634f;
      sa[91] = 0.047577925f;
      sa[92] = 1.6024146f;
      sa[93] = 1.8556179f;
      sa[94] = 1.7094228f;
      sa[95] = 0.7455148f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_10 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_10_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_10_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_10_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_Tanh_10_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


