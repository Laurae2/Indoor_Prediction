/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:50:15.626+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_02

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_02 > h2o_nn_16x16x6_ReLU_02.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_02.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_02", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_02 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_02_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_02_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_02_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_02_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_02_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_02_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_02_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_02_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_02_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_02_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_02_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_02_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_02.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_02_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25,0.25,0.125,0.25,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_02() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(6774363994408049824L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_02_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_02_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_02_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_02_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_02_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_02_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_02_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_02_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_02_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_02_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_02_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_02_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_02_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_02_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_02_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_02_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.6694696230693429;
      sa[1] = 0.5089739282510632;
      sa[2] = 0.43365005625906056;
      sa[3] = 0.5154167537584784;
      sa[4] = 0.40991309473329435;
      sa[5] = 0.6172219709678225;
      sa[6] = 0.6604237386967605;
      sa[7] = 0.7822820786087379;
      sa[8] = 0.48536805775546976;
      sa[9] = 0.3917742890240966;
      sa[10] = 0.3255481159273364;
      sa[11] = 0.5347360410706473;
      sa[12] = 0.33947725824161784;
      sa[13] = 0.45239259849824875;
      sa[14] = 0.6044742323784837;
      sa[15] = 0.7146178812489586;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_02_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_02_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_02_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.0909739243810737;
      sa[1] = 0.9953087930483248;
      sa[2] = 1.004658870921566;
      sa[3] = 1.04689761333419;
      sa[4] = 1.0127001002908709;
      sa[5] = 0.9676794362722757;
      sa[6] = 0.9573855506087939;
      sa[7] = 0.9472772301819443;
      sa[8] = 0.8938319562977209;
      sa[9] = 1.0334446969905677;
      sa[10] = 0.8764516591327289;
      sa[11] = 1.0833125025494075;
      sa[12] = 1.0158652631127472;
      sa[13] = 0.9553696098243398;
      sa[14] = 1.07532104162703;
      sa[15] = 0.9937964919280973;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_02_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_02_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_02_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.07435539170697396;
      sa[1] = -0.005574219690839717;
      sa[2] = -0.05025875873730765;
      sa[3] = 0.004593972981803432;
      sa[4] = 0.0579465661731617;
    }
  }
}
class h2o_nn_16x16x6_ReLU_02_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_02_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_02_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_02_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.054983124f;
      sa[1] = 0.30560374f;
      sa[2] = 0.39494368f;
      sa[3] = 0.5486987f;
      sa[4] = -0.15769802f;
      sa[5] = -0.13736053f;
      sa[6] = -6.885062E-4f;
      sa[7] = 0.25697193f;
      sa[8] = 0.091232374f;
      sa[9] = -0.031260442f;
      sa[10] = -0.02772257f;
      sa[11] = -0.31558216f;
      sa[12] = 0.15969783f;
      sa[13] = -0.22942278f;
      sa[14] = -0.16122515f;
      sa[15] = 0.06635063f;
      sa[16] = 0.14799888f;
      sa[17] = 0.30185634f;
      sa[18] = -0.32231772f;
      sa[19] = 0.24439828f;
      sa[20] = 0.31600675f;
      sa[21] = -0.31149325f;
      sa[22] = 0.31933057f;
      sa[23] = -0.09106053f;
      sa[24] = 0.32954037f;
      sa[25] = 0.21923326f;
      sa[26] = -0.31604502f;
      sa[27] = 0.25556788f;
      sa[28] = 0.33304387f;
      sa[29] = -0.26920107f;
      sa[30] = -0.11542685f;
      sa[31] = 0.241162f;
      sa[32] = 0.37357682f;
      sa[33] = -0.4328392f;
      sa[34] = 0.13784853f;
      sa[35] = 0.003892891f;
      sa[36] = -0.0032137525f;
      sa[37] = 0.38876513f;
      sa[38] = 0.12378922f;
      sa[39] = 0.3024389f;
      sa[40] = -0.018371543f;
      sa[41] = -0.10851994f;
      sa[42] = -0.12824649f;
      sa[43] = 0.14739388f;
      sa[44] = 0.16601641f;
      sa[45] = -0.105477065f;
      sa[46] = 0.21071179f;
      sa[47] = -0.09855399f;
      sa[48] = 0.3187347f;
      sa[49] = 0.30016816f;
      sa[50] = 0.31684253f;
      sa[51] = -0.110738605f;
      sa[52] = -0.013276293f;
      sa[53] = 0.40405846f;
      sa[54] = 0.24705087f;
      sa[55] = 0.17264809f;
      sa[56] = -0.17596635f;
      sa[57] = -0.3593041f;
      sa[58] = 0.341573f;
      sa[59] = -0.09986543f;
      sa[60] = -0.20504868f;
      sa[61] = 0.284527f;
      sa[62] = 0.12497706f;
      sa[63] = 0.14431912f;
      sa[64] = 0.13581094f;
      sa[65] = 0.07179316f;
      sa[66] = -0.040228765f;
      sa[67] = 0.1898653f;
      sa[68] = 0.121381134f;
      sa[69] = 0.09572741f;
      sa[70] = -0.008135889f;
      sa[71] = 0.4596344f;
      sa[72] = -0.07109114f;
      sa[73] = 0.22676188f;
      sa[74] = -0.36616734f;
      sa[75] = -0.11596593f;
      sa[76] = -0.2522494f;
      sa[77] = -0.11172512f;
      sa[78] = -0.08940359f;
      sa[79] = 0.1846493f;
      sa[80] = -0.17762873f;
      sa[81] = -0.22552738f;
      sa[82] = -0.07886717f;
      sa[83] = 0.05768372f;
      sa[84] = -0.046683848f;
      sa[85] = -0.2152744f;
      sa[86] = 0.2241292f;
      sa[87] = 0.31127265f;
      sa[88] = 0.20436394f;
      sa[89] = -0.082318604f;
      sa[90] = -0.11552012f;
      sa[91] = 0.25158876f;
      sa[92] = 0.09454403f;
      sa[93] = -0.2512684f;
      sa[94] = -0.21064213f;
      sa[95] = -0.21498835f;
      sa[96] = 0.13080284f;
      sa[97] = 0.040828243f;
      sa[98] = 0.20779122f;
      sa[99] = 0.040599655f;
      sa[100] = -0.10799163f;
      sa[101] = -0.23171654f;
      sa[102] = -0.33151916f;
      sa[103] = -0.08963582f;
      sa[104] = -0.16849121f;
      sa[105] = -0.07048897f;
      sa[106] = -0.19195123f;
      sa[107] = 0.12789835f;
      sa[108] = 0.17588879f;
      sa[109] = -0.2550096f;
      sa[110] = -0.063618414f;
      sa[111] = 0.21838954f;
      sa[112] = 0.1914218f;
      sa[113] = 0.07859853f;
      sa[114] = -0.160524f;
      sa[115] = -0.11357721f;
      sa[116] = -0.20518915f;
      sa[117] = -0.053166755f;
      sa[118] = -0.2884767f;
      sa[119] = -0.20145202f;
      sa[120] = 0.23232973f;
      sa[121] = 0.25698984f;
      sa[122] = 0.23821631f;
      sa[123] = 0.17625907f;
      sa[124] = 0.32794657f;
      sa[125] = 0.19957623f;
      sa[126] = -0.3265465f;
      sa[127] = -0.27221212f;
      sa[128] = 0.11803389f;
      sa[129] = 0.23638372f;
      sa[130] = -0.11341851f;
      sa[131] = 0.25492817f;
      sa[132] = 0.23143615f;
      sa[133] = -0.3409714f;
      sa[134] = 0.13136892f;
      sa[135] = -0.40652615f;
      sa[136] = -0.23888226f;
      sa[137] = 0.011939774f;
      sa[138] = 0.17958216f;
      sa[139] = -0.10727327f;
      sa[140] = -0.16212499f;
      sa[141] = -0.29499897f;
      sa[142] = 0.06410017f;
      sa[143] = -0.3004572f;
      sa[144] = 0.23515776f;
      sa[145] = -0.18880099f;
      sa[146] = -0.1328474f;
      sa[147] = 0.23498416f;
      sa[148] = 0.21501924f;
      sa[149] = 0.2081766f;
      sa[150] = 0.3001368f;
      sa[151] = -0.26045913f;
      sa[152] = 0.11009007f;
      sa[153] = 0.29880568f;
      sa[154] = 0.34650084f;
      sa[155] = -0.1893487f;
      sa[156] = 0.12932049f;
      sa[157] = -0.2309069f;
      sa[158] = 0.019901572f;
      sa[159] = 0.025577923f;
      sa[160] = 0.102017164f;
      sa[161] = 0.03679972f;
      sa[162] = -0.15469074f;
      sa[163] = -0.20149998f;
      sa[164] = 0.29781836f;
      sa[165] = 0.024520181f;
      sa[166] = -0.05615012f;
      sa[167] = -0.16706061f;
      sa[168] = 0.18173842f;
      sa[169] = 0.36841372f;
      sa[170] = 0.080163114f;
      sa[171] = -0.18856885f;
      sa[172] = -0.02259011f;
      sa[173] = -0.1251121f;
      sa[174] = 0.009018619f;
      sa[175] = -0.27797478f;
      sa[176] = -0.018929211f;
      sa[177] = -0.14195837f;
      sa[178] = -0.15933707f;
      sa[179] = -0.0033507652f;
      sa[180] = -0.105880596f;
      sa[181] = -0.2144896f;
      sa[182] = -0.1547541f;
      sa[183] = 0.38505703f;
      sa[184] = 0.2843387f;
      sa[185] = 0.20315808f;
      sa[186] = -0.36427698f;
      sa[187] = -0.07316261f;
      sa[188] = -0.10820102f;
      sa[189] = 0.20186962f;
      sa[190] = -0.007059579f;
      sa[191] = 0.03861901f;
      sa[192] = -0.14430873f;
      sa[193] = 0.26709422f;
      sa[194] = 0.057178464f;
      sa[195] = 0.31650373f;
      sa[196] = 0.40161264f;
      sa[197] = 0.044849526f;
      sa[198] = -0.04437229f;
      sa[199] = -0.09807275f;
      sa[200] = 0.013823281f;
      sa[201] = -0.36605987f;
      sa[202] = 0.06489981f;
      sa[203] = 0.061482925f;
      sa[204] = -0.1940575f;
      sa[205] = 0.11580067f;
      sa[206] = 0.15457618f;
      sa[207] = 0.09029767f;
      sa[208] = -0.22504926f;
      sa[209] = -0.08412177f;
      sa[210] = -0.2714341f;
      sa[211] = -0.22962154f;
      sa[212] = 0.49685276f;
      sa[213] = -0.08990411f;
      sa[214] = 0.006664621f;
      sa[215] = 0.016033666f;
      sa[216] = 0.14034908f;
      sa[217] = 0.14629483f;
      sa[218] = -0.34934488f;
      sa[219] = 0.08558202f;
      sa[220] = -0.17373739f;
      sa[221] = 0.14267102f;
      sa[222] = 0.29624003f;
      sa[223] = 0.024695298f;
      sa[224] = 0.119169265f;
      sa[225] = 0.3642591f;
      sa[226] = -0.2220808f;
      sa[227] = 0.34085497f;
      sa[228] = 0.13320273f;
      sa[229] = 0.14927022f;
      sa[230] = 0.30675626f;
      sa[231] = -0.32630092f;
      sa[232] = -0.23912922f;
      sa[233] = 0.09360374f;
      sa[234] = 0.09953431f;
      sa[235] = -0.2374408f;
      sa[236] = -0.06639788f;
      sa[237] = -0.25182068f;
      sa[238] = -0.23703721f;
      sa[239] = 0.05317201f;
      sa[240] = -0.074994914f;
      sa[241] = -0.200844f;
      sa[242] = -0.17650175f;
      sa[243] = -0.09949476f;
      sa[244] = -0.22428161f;
      sa[245] = -0.09450388f;
      sa[246] = -0.18832657f;
      sa[247] = -0.14967994f;
      sa[248] = 0.16757911f;
      sa[249] = 0.23249227f;
      sa[250] = -0.07594989f;
      sa[251] = -0.030655682f;
      sa[252] = -0.36076066f;
      sa[253] = -0.33704746f;
      sa[254] = -0.26890397f;
      sa[255] = 0.21096578f;
      sa[256] = -0.09772349f;
      sa[257] = 0.41286173f;
      sa[258] = -0.19472602f;
      sa[259] = -0.12444805f;
      sa[260] = -0.30305246f;
      sa[261] = -0.06756038f;
      sa[262] = -0.16415256f;
      sa[263] = 0.22396313f;
      sa[264] = -0.11630427f;
      sa[265] = 0.15396503f;
      sa[266] = -0.2505172f;
      sa[267] = -0.18090099f;
      sa[268] = 0.04650607f;
      sa[269] = -0.115176894f;
      sa[270] = -0.009474252f;
      sa[271] = 0.1915352f;
      sa[272] = -0.081012785f;
      sa[273] = -0.10883751f;
      sa[274] = 0.15757757f;
      sa[275] = 0.123975046f;
      sa[276] = 0.15388453f;
      sa[277] = -0.23097335f;
      sa[278] = -0.0865809f;
      sa[279] = 0.24706161f;
      sa[280] = -0.103289776f;
      sa[281] = 0.4112251f;
      sa[282] = 0.05601457f;
      sa[283] = 0.13642657f;
      sa[284] = 0.02037495f;
      sa[285] = -0.17554758f;
      sa[286] = 0.24119428f;
      sa[287] = 0.17710716f;
      sa[288] = -0.18119352f;
      sa[289] = -0.08805185f;
      sa[290] = -0.16039914f;
      sa[291] = 0.4442165f;
      sa[292] = 0.048801105f;
      sa[293] = -0.18286982f;
      sa[294] = 0.0067499f;
      sa[295] = 0.07078609f;
      sa[296] = 0.26708052f;
      sa[297] = 0.24056497f;
      sa[298] = -0.001570768f;
      sa[299] = 0.098454826f;
      sa[300] = 0.003638746f;
      sa[301] = -0.10122344f;
      sa[302] = 0.15044937f;
      sa[303] = 0.11657333f;
      sa[304] = -0.095333554f;
      sa[305] = 0.027154274f;
      sa[306] = 0.11814108f;
      sa[307] = -0.25319725f;
      sa[308] = 0.15192656f;
      sa[309] = 0.15651552f;
      sa[310] = 0.27718535f;
      sa[311] = 0.3993599f;
      sa[312] = -0.2859394f;
      sa[313] = -0.2011065f;
      sa[314] = -0.25314054f;
      sa[315] = -0.16202219f;
      sa[316] = 0.008507711f;
      sa[317] = -0.10010757f;
      sa[318] = 0.06807927f;
      sa[319] = 0.35305622f;
      sa[320] = 0.35599804f;
      sa[321] = 0.36652485f;
      sa[322] = 0.16154261f;
      sa[323] = -0.29190686f;
      sa[324] = 0.009941124f;
      sa[325] = 0.4515914f;
      sa[326] = -0.13750395f;
      sa[327] = 0.07260935f;
      sa[328] = -0.10434268f;
      sa[329] = 0.1998774f;
      sa[330] = -0.26055226f;
      sa[331] = 0.02995691f;
      sa[332] = -0.19750537f;
      sa[333] = 0.100855544f;
      sa[334] = -0.23448497f;
      sa[335] = 0.23642667f;
      sa[336] = -0.18616502f;
      sa[337] = -0.25329882f;
      sa[338] = 0.22704996f;
      sa[339] = -0.26141056f;
      sa[340] = -0.28492987f;
      sa[341] = -0.6452324f;
      sa[342] = 0.24489957f;
      sa[343] = -0.22741866f;
      sa[344] = -0.1308159f;
      sa[345] = 0.2719431f;
      sa[346] = 0.2291072f;
      sa[347] = -0.1565372f;
      sa[348] = 0.37424165f;
      sa[349] = -0.67838675f;
      sa[350] = -0.21063781f;
      sa[351] = -0.029703226f;
      sa[352] = 0.26792932f;
      sa[353] = -0.016229369f;
      sa[354] = 0.056518562f;
      sa[355] = 0.21229036f;
      sa[356] = -0.11742759f;
      sa[357] = 0.19140646f;
      sa[358] = -0.4883373f;
      sa[359] = -0.07572127f;
      sa[360] = 0.034376852f;
      sa[361] = -0.052765314f;
      sa[362] = -0.040072303f;
      sa[363] = 0.100490764f;
      sa[364] = -0.14135544f;
      sa[365] = -0.2785944f;
      sa[366] = -0.03876637f;
      sa[367] = -0.32372364f;
      sa[368] = -0.2504009f;
      sa[369] = 0.23946355f;
      sa[370] = -0.30476078f;
      sa[371] = -0.01214587f;
      sa[372] = -0.05490548f;
      sa[373] = 0.28106266f;
      sa[374] = -0.2706615f;
      sa[375] = -0.41120538f;
      sa[376] = -0.4746395f;
      sa[377] = -0.4605516f;
      sa[378] = 0.2893795f;
      sa[379] = 0.03234994f;
      sa[380] = -0.14206508f;
      sa[381] = -0.0824171f;
      sa[382] = -0.045485713f;
      sa[383] = -0.18038261f;
      sa[384] = -0.08369778f;
      sa[385] = 0.007775806f;
      sa[386] = -0.27093354f;
      sa[387] = -0.40796477f;
      sa[388] = 0.06857582f;
      sa[389] = -0.03543665f;
      sa[390] = -0.027262628f;
      sa[391] = -0.1500852f;
      sa[392] = 0.17603895f;
      sa[393] = 0.1289122f;
      sa[394] = -0.052112f;
      sa[395] = 0.28852725f;
      sa[396] = 0.23102629f;
      sa[397] = -0.30955026f;
      sa[398] = -0.08863066f;
      sa[399] = -0.17388393f;
      sa[400] = 0.21593814f;
      sa[401] = 0.27979222f;
      sa[402] = -0.113636985f;
      sa[403] = 0.09553089f;
      sa[404] = 0.052723985f;
      sa[405] = -0.28726548f;
      sa[406] = -0.2188974f;
      sa[407] = 0.11769878f;
      sa[408] = -0.2527639f;
      sa[409] = -0.26014388f;
      sa[410] = -0.026391737f;
      sa[411] = 0.22465567f;
      sa[412] = -0.1782798f;
      sa[413] = 0.24210688f;
      sa[414] = 0.16628654f;
      sa[415] = 0.40790674f;
      sa[416] = -0.27520132f;
      sa[417] = -0.020468418f;
      sa[418] = -0.05142971f;
      sa[419] = 0.29689503f;
      sa[420] = 0.118125886f;
      sa[421] = 0.26004985f;
      sa[422] = 0.22059533f;
      sa[423] = 0.20940034f;
      sa[424] = 0.042376157f;
      sa[425] = -0.08436951f;
      sa[426] = -0.3663103f;
      sa[427] = 0.23141387f;
      sa[428] = -0.2449552f;
      sa[429] = 0.0126781175f;
      sa[430] = 0.22658402f;
      sa[431] = 0.05468865f;
      sa[432] = 7.286987E-4f;
      sa[433] = 0.010690882f;
      sa[434] = 0.028957559f;
      sa[435] = -0.15321773f;
      sa[436] = -0.29148117f;
      sa[437] = -0.300842f;
      sa[438] = -0.034154143f;
      sa[439] = -0.083910756f;
      sa[440] = 0.37963805f;
      sa[441] = -0.32532358f;
      sa[442] = 0.013866105f;
      sa[443] = 0.068159625f;
      sa[444] = -0.26108283f;
      sa[445] = 0.02585781f;
      sa[446] = 0.1970451f;
      sa[447] = -0.10311923f;
      sa[448] = 0.16092725f;
      sa[449] = 0.3531231f;
      sa[450] = -0.072301045f;
      sa[451] = 0.17397793f;
      sa[452] = 0.20101367f;
      sa[453] = -0.06505435f;
      sa[454] = -0.18387851f;
      sa[455] = -0.21247537f;
      sa[456] = -0.1676448f;
      sa[457] = 0.068493046f;
      sa[458] = -0.23945685f;
      sa[459] = 0.36203402f;
      sa[460] = 0.20528534f;
      sa[461] = 0.26948127f;
      sa[462] = 0.025197325f;
      sa[463] = 0.107441776f;
      sa[464] = -0.46273747f;
      sa[465] = 0.149726f;
      sa[466] = 0.068787366f;
      sa[467] = 0.16009505f;
      sa[468] = -0.081572056f;
      sa[469] = 0.41038516f;
      sa[470] = 0.41909498f;
      sa[471] = -0.07507623f;
      sa[472] = -0.068547286f;
      sa[473] = -0.12865683f;
      sa[474] = 0.052880317f;
      sa[475] = 0.23923601f;
      sa[476] = 0.10385901f;
      sa[477] = 0.07764193f;
      sa[478] = 0.24452826f;
      sa[479] = -0.32024956f;
      sa[480] = -0.2437147f;
      sa[481] = -0.18833105f;
      sa[482] = -0.15742658f;
      sa[483] = 0.3297781f;
      sa[484] = 0.35127768f;
      sa[485] = 0.26059687f;
      sa[486] = 0.05851749f;
      sa[487] = -0.101885855f;
      sa[488] = -0.20283364f;
      sa[489] = 0.032700308f;
      sa[490] = 0.06609056f;
      sa[491] = -0.25334826f;
      sa[492] = 0.28563458f;
      sa[493] = 0.3109615f;
      sa[494] = -0.23297405f;
      sa[495] = 0.3222703f;
      sa[496] = -0.040187653f;
      sa[497] = -0.0224949f;
      sa[498] = 0.13446382f;
      sa[499] = 0.1611713f;
      sa[500] = -0.06946814f;
      sa[501] = -0.13880783f;
      sa[502] = 0.42584547f;
      sa[503] = 0.21214707f;
      sa[504] = -0.24710675f;
      sa[505] = -0.27880013f;
      sa[506] = 0.09546486f;
      sa[507] = 0.08774567f;
      sa[508] = 0.1180693f;
      sa[509] = 0.292154f;
      sa[510] = 0.17014103f;
      sa[511] = -0.1724261f;
      sa[512] = 0.0033770686f;
      sa[513] = -0.1212493f;
      sa[514] = 0.19830705f;
      sa[515] = -0.18500489f;
      sa[516] = -0.007205935f;
      sa[517] = 0.1232209f;
      sa[518] = 0.090905786f;
      sa[519] = -0.118194714f;
      sa[520] = 0.21299328f;
      sa[521] = 0.19808784f;
      sa[522] = 9.743306E-4f;
      sa[523] = 0.19835761f;
      sa[524] = 0.1311876f;
      sa[525] = 0.12945046f;
      sa[526] = -0.07710238f;
      sa[527] = -0.07166028f;
      sa[528] = 0.003421216f;
      sa[529] = 0.09486879f;
      sa[530] = -0.24856813f;
      sa[531] = -0.027605498f;
      sa[532] = 0.1481302f;
      sa[533] = 0.13872673f;
      sa[534] = 0.18802139f;
      sa[535] = -0.0840238f;
      sa[536] = 0.18994458f;
      sa[537] = -0.15236925f;
      sa[538] = 0.20197095f;
      sa[539] = 0.29426715f;
      sa[540] = -0.33211058f;
      sa[541] = -0.1305283f;
      sa[542] = 0.018480502f;
      sa[543] = -0.52224433f;
      sa[544] = 0.2500423f;
      sa[545] = 0.18871458f;
      sa[546] = 0.16203932f;
      sa[547] = 0.22178943f;
      sa[548] = 0.10881236f;
      sa[549] = 0.29487333f;
      sa[550] = 0.026329417f;
      sa[551] = -0.23798735f;
      sa[552] = 0.11198573f;
      sa[553] = -0.010075992f;
      sa[554] = -0.121888705f;
      sa[555] = -0.19365193f;
      sa[556] = -0.13791388f;
      sa[557] = -0.22628029f;
      sa[558] = -0.26277113f;
      sa[559] = 0.2372734f;
      sa[560] = -0.24466385f;
      sa[561] = -0.011482079f;
      sa[562] = 0.31503373f;
      sa[563] = -0.10414585f;
      sa[564] = 0.3145479f;
      sa[565] = 0.009883504f;
      sa[566] = 0.24481234f;
      sa[567] = 0.09470106f;
      sa[568] = -0.02250457f;
      sa[569] = 0.07362417f;
      sa[570] = 0.0426564f;
      sa[571] = -0.10191771f;
      sa[572] = -0.36157355f;
      sa[573] = -0.13937783f;
      sa[574] = 0.39699394f;
      sa[575] = -0.03070274f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_02_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_02_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_02_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.46889982f;
      sa[1] = 0.08987462f;
      sa[2] = -0.04197714f;
      sa[3] = -0.26431084f;
      sa[4] = 0.1196229f;
      sa[5] = 0.15662727f;
      sa[6] = 0.28918675f;
      sa[7] = -0.026344031f;
      sa[8] = -0.28128365f;
      sa[9] = -0.019427042f;
      sa[10] = -0.16491993f;
      sa[11] = 0.18780708f;
      sa[12] = 0.12388577f;
      sa[13] = 0.27364805f;
      sa[14] = -0.19490424f;
      sa[15] = 0.47657144f;
      sa[16] = 0.26265118f;
      sa[17] = -0.14511728f;
      sa[18] = -0.040410813f;
      sa[19] = -0.085339576f;
      sa[20] = 0.25764236f;
      sa[21] = -0.07590135f;
      sa[22] = -0.29896194f;
      sa[23] = 0.65921366f;
      sa[24] = -0.40910158f;
      sa[25] = 0.16768108f;
      sa[26] = -0.10599849f;
      sa[27] = 0.45197773f;
      sa[28] = -0.41008168f;
      sa[29] = -0.2798821f;
      sa[30] = 0.0816089f;
      sa[31] = -0.16982086f;
      sa[32] = -0.49696591f;
      sa[33] = -0.41682535f;
      sa[34] = 0.07310944f;
      sa[35] = 0.36437693f;
      sa[36] = -0.21551378f;
      sa[37] = -0.0983077f;
      sa[38] = 0.04339077f;
      sa[39] = 0.35065663f;
      sa[40] = -0.25747916f;
      sa[41] = -0.31655392f;
      sa[42] = -0.32442355f;
      sa[43] = -0.34756714f;
      sa[44] = 0.054124847f;
      sa[45] = -0.5775245f;
      sa[46] = 0.2625966f;
      sa[47] = 0.40849367f;
      sa[48] = -0.48769078f;
      sa[49] = -0.27711204f;
      sa[50] = 0.09625188f;
      sa[51] = -0.07261463f;
      sa[52] = 0.16742311f;
      sa[53] = 0.14493212f;
      sa[54] = -0.036750194f;
      sa[55] = 0.36227843f;
      sa[56] = -0.2367219f;
      sa[57] = -0.28372467f;
      sa[58] = 0.028234428f;
      sa[59] = -0.031766586f;
      sa[60] = 0.45712003f;
      sa[61] = -0.22578181f;
      sa[62] = -0.13356014f;
      sa[63] = 0.29568568f;
      sa[64] = 0.40954724f;
      sa[65] = -0.16854724f;
      sa[66] = 0.14229327f;
      sa[67] = 0.43786287f;
      sa[68] = 0.24643481f;
      sa[69] = -0.28149182f;
      sa[70] = -0.47592002f;
      sa[71] = -0.14682564f;
      sa[72] = -0.37758097f;
      sa[73] = 0.45142114f;
      sa[74] = 0.36591196f;
      sa[75] = -0.025558699f;
      sa[76] = 0.24434038f;
      sa[77] = 0.17370613f;
      sa[78] = -0.3116906f;
      sa[79] = 0.3448342f;
      sa[80] = -0.23746213f;
      sa[81] = 0.07213154f;
      sa[82] = 0.29994884f;
      sa[83] = -0.2250378f;
      sa[84] = -0.47601676f;
      sa[85] = -0.380652f;
      sa[86] = 0.04864059f;
      sa[87] = 0.25198597f;
      sa[88] = -0.42614278f;
      sa[89] = -0.2226383f;
      sa[90] = -0.36266437f;
      sa[91] = 0.41664776f;
      sa[92] = -0.053649914f;
      sa[93] = 0.1143966f;
      sa[94] = -0.4385321f;
      sa[95] = -0.051084884f;
      sa[96] = -0.40561163f;
      sa[97] = 0.003214099f;
      sa[98] = -0.010979159f;
      sa[99] = 0.027889097f;
      sa[100] = -0.48412657f;
      sa[101] = -0.21558075f;
      sa[102] = 0.28995672f;
      sa[103] = 0.13748197f;
      sa[104] = -0.17452016f;
      sa[105] = -0.25901473f;
      sa[106] = 0.25972962f;
      sa[107] = 0.41571462f;
      sa[108] = 0.28005105f;
      sa[109] = -0.063916996f;
      sa[110] = 0.16599189f;
      sa[111] = -0.082722545f;
      sa[112] = -0.418484f;
      sa[113] = 0.0026470271f;
      sa[114] = 0.079540364f;
      sa[115] = -0.15461639f;
      sa[116] = 0.29917258f;
      sa[117] = -0.002580248f;
      sa[118] = -0.36798128f;
      sa[119] = -0.35001466f;
      sa[120] = -0.097081214f;
      sa[121] = 0.24066395f;
      sa[122] = -0.08119591f;
      sa[123] = 0.07039264f;
      sa[124] = -0.1098767f;
      sa[125] = 0.23614128f;
      sa[126] = -0.2985453f;
      sa[127] = 0.18512025f;
      sa[128] = -0.45736784f;
      sa[129] = 0.104210846f;
      sa[130] = -0.13382056f;
      sa[131] = 0.19989699f;
      sa[132] = 0.001579408f;
      sa[133] = 0.055481784f;
      sa[134] = 0.19141375f;
      sa[135] = -0.49950323f;
      sa[136] = 0.16196741f;
      sa[137] = -0.007954047f;
      sa[138] = 0.012755303f;
      sa[139] = 0.1194969f;
      sa[140] = -0.14576294f;
      sa[141] = -0.17091258f;
      sa[142] = -0.09308486f;
      sa[143] = -0.28003174f;
      sa[144] = 0.4395229f;
      sa[145] = -0.15664123f;
      sa[146] = -0.006911048f;
      sa[147] = -0.013257369f;
      sa[148] = -0.20404021f;
      sa[149] = 0.3531084f;
      sa[150] = -0.18501365f;
      sa[151] = -0.4470279f;
      sa[152] = 0.51388896f;
      sa[153] = -0.09834028f;
      sa[154] = 0.4349056f;
      sa[155] = -0.4491563f;
      sa[156] = -0.41429427f;
      sa[157] = -0.2838795f;
      sa[158] = -0.09602978f;
      sa[159] = -0.4047257f;
      sa[160] = 0.0024572755f;
      sa[161] = -0.40615478f;
      sa[162] = 0.32804033f;
      sa[163] = -0.26696923f;
      sa[164] = 0.07969275f;
      sa[165] = -0.30739605f;
      sa[166] = 0.37957948f;
      sa[167] = -0.47642052f;
      sa[168] = 0.2553231f;
      sa[169] = -0.33118472f;
      sa[170] = 0.3044405f;
      sa[171] = 0.21597081f;
      sa[172] = 0.41676468f;
      sa[173] = 0.22006693f;
      sa[174] = -0.19453727f;
      sa[175] = -0.057166554f;
      sa[176] = -0.17852679f;
      sa[177] = 0.13565652f;
      sa[178] = -0.28336677f;
      sa[179] = -0.04963603f;
      sa[180] = -0.21110219f;
      sa[181] = -0.13467939f;
      sa[182] = 0.42490217f;
      sa[183] = -0.3755247f;
      sa[184] = 0.62423515f;
      sa[185] = 0.40994576f;
      sa[186] = -0.026299197f;
      sa[187] = -0.28578877f;
      sa[188] = -0.06034764f;
      sa[189] = -0.15535831f;
      sa[190] = -0.42271334f;
      sa[191] = -0.4133054f;
      sa[192] = 0.0046236203f;
      sa[193] = 0.12088999f;
      sa[194] = -0.322893f;
      sa[195] = -0.1812221f;
      sa[196] = 0.21201313f;
      sa[197] = -0.17905465f;
      sa[198] = 0.018786283f;
      sa[199] = 0.3243798f;
      sa[200] = 0.027810268f;
      sa[201] = 0.39823785f;
      sa[202] = 0.28445414f;
      sa[203] = -0.4389014f;
      sa[204] = 0.092066765f;
      sa[205] = 0.37452725f;
      sa[206] = -0.13475232f;
      sa[207] = 0.107336074f;
      sa[208] = -0.27411574f;
      sa[209] = 0.1741647f;
      sa[210] = -0.077444546f;
      sa[211] = -0.3186575f;
      sa[212] = -0.37951523f;
      sa[213] = 0.038422048f;
      sa[214] = -0.36394542f;
      sa[215] = -0.06455323f;
      sa[216] = 0.07405653f;
      sa[217] = 0.27690852f;
      sa[218] = -0.03951512f;
      sa[219] = 0.1204079f;
      sa[220] = 0.12159573f;
      sa[221] = -0.071498066f;
      sa[222] = -0.29738623f;
      sa[223] = -0.33515212f;
      sa[224] = 0.38329634f;
      sa[225] = 0.14841242f;
      sa[226] = 0.05600171f;
      sa[227] = 0.0784561f;
      sa[228] = -0.07385168f;
      sa[229] = -0.09927767f;
      sa[230] = -0.19631983f;
      sa[231] = -0.0077771735f;
      sa[232] = 0.47610044f;
      sa[233] = -0.34628478f;
      sa[234] = -0.15658723f;
      sa[235] = 0.07374036f;
      sa[236] = -0.36345005f;
      sa[237] = 0.5495115f;
      sa[238] = 0.23654352f;
      sa[239] = -0.081573755f;
      sa[240] = -0.09111104f;
      sa[241] = -0.40626335f;
      sa[242] = -0.34946766f;
      sa[243] = 0.4184699f;
      sa[244] = 0.18269749f;
      sa[245] = 0.27882376f;
      sa[246] = 0.20373863f;
      sa[247] = -0.2922221f;
      sa[248] = -0.19413993f;
      sa[249] = 0.12346174f;
      sa[250] = 0.30471107f;
      sa[251] = 0.42958313f;
      sa[252] = 0.115906544f;
      sa[253] = -0.4331191f;
      sa[254] = 0.36262548f;
      sa[255] = 0.07469319f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_02_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_ReLU_02_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_02_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.0036748096f;
      sa[1] = -1.7636503f;
      sa[2] = -1.6733235f;
      sa[3] = 1.2761986f;
      sa[4] = 0.3517405f;
      sa[5] = -0.4478845f;
      sa[6] = -1.6949242f;
      sa[7] = 1.5242864f;
      sa[8] = 1.8022563f;
      sa[9] = 0.24646303f;
      sa[10] = 1.6601881f;
      sa[11] = 1.6023835f;
      sa[12] = 1.8292139f;
      sa[13] = -0.49001852f;
      sa[14] = -2.0888324f;
      sa[15] = -0.75376683f;
      sa[16] = 0.7192189f;
      sa[17] = -0.76156294f;
      sa[18] = -1.6755538f;
      sa[19] = -1.0601294f;
      sa[20] = -2.003897f;
      sa[21] = 0.22390233f;
      sa[22] = -2.0150068f;
      sa[23] = -0.73377806f;
      sa[24] = -0.5433048f;
      sa[25] = 1.9295031f;
      sa[26] = -0.3562749f;
      sa[27] = 1.2173223f;
      sa[28] = 1.185783f;
      sa[29] = -0.7365542f;
      sa[30] = 0.16223373f;
      sa[31] = 0.11781226f;
      sa[32] = 0.3639293f;
      sa[33] = 0.27056095f;
      sa[34] = -0.5706993f;
      sa[35] = 1.0371634f;
      sa[36] = 0.55810845f;
      sa[37] = -1.348178f;
      sa[38] = 0.5798389f;
      sa[39] = -0.19586676f;
      sa[40] = 0.19390826f;
      sa[41] = -0.91175187f;
      sa[42] = 0.4052033f;
      sa[43] = -0.18068655f;
      sa[44] = 0.9592987f;
      sa[45] = -2.059637f;
      sa[46] = -2.2281268f;
      sa[47] = 0.01652077f;
      sa[48] = 1.665657f;
      sa[49] = -0.269161f;
      sa[50] = -0.44841683f;
      sa[51] = 1.868681f;
      sa[52] = -1.7259206f;
      sa[53] = 1.220047f;
      sa[54] = 1.8348848f;
      sa[55] = 1.0991026f;
      sa[56] = -0.5648752f;
      sa[57] = -0.19255419f;
      sa[58] = 1.1111928f;
      sa[59] = 0.7194167f;
      sa[60] = -1.4038934f;
      sa[61] = 0.9014264f;
      sa[62] = -0.38608038f;
      sa[63] = -0.83833414f;
      sa[64] = 1.0090185f;
      sa[65] = -0.92703044f;
      sa[66] = -1.7894535f;
      sa[67] = -0.1366794f;
      sa[68] = 0.94076926f;
      sa[69] = -1.9603037f;
      sa[70] = -1.699345f;
      sa[71] = 0.023899408f;
      sa[72] = -1.1283443f;
      sa[73] = -1.2387166f;
      sa[74] = -1.1091397f;
      sa[75] = -0.3988787f;
      sa[76] = 1.9570541f;
      sa[77] = -0.7752656f;
      sa[78] = -1.2996527f;
      sa[79] = -0.358727f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_02 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_02_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_02_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_02_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_ReLU_02_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_02_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


