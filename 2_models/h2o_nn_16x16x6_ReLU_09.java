/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:52:01.771+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_09

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_09 > h2o_nn_16x16x6_ReLU_09.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_09.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_09", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_09 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_09_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_09_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_09_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_09_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_09_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_09_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_09.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_09_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25961538461538464,0.11538461538461539,0.11538461538461539,0.125,0.25961538461538464,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_09() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-2414359204352401728L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_09_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_ReLU_09_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_09_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_09_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_09_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_09_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_09_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_09_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.7157288763966739;
      sa[1] = 0.6609590839017494;
      sa[2] = 0.44152085683201386;
      sa[3] = 0.40383486756151893;
      sa[4] = 0.5836417805020886;
      sa[5] = 0.7240833864388738;
      sa[6] = 0.5905311747002383;
      sa[7] = 0.6637453368920578;
      sa[8] = 0.5178088232489666;
      sa[9] = 0.6176779748689243;
      sa[10] = 0.5743314338227913;
      sa[11] = 0.3866131280312285;
      sa[12] = 0.3366189560555796;
      sa[13] = 0.40634314700299534;
      sa[14] = 0.5712433705044263;
      sa[15] = 0.623598474763909;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_09_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.154699758310889;
      sa[1] = 1.0877925908453996;
      sa[2] = 0.9168218792879987;
      sa[3] = 0.9579319966313696;
      sa[4] = 0.9208875526612003;
      sa[5] = 0.9665413893228103;
      sa[6] = 0.9291336589011712;
      sa[7] = 0.9125084620025881;
      sa[8] = 0.889383401479798;
      sa[9] = 1.0086665539147537;
      sa[10] = 0.921498934051455;
      sa[11] = 1.116549786138636;
      sa[12] = 1.0573482564511174;
      sa[13] = 0.8797548871273747;
      sa[14] = 0.9419538529725419;
      sa[15] = 0.9275665664864848;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_09_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_09_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.08239779566123863;
      sa[1] = 0.021378180703659943;
      sa[2] = -0.059319611063436965;
      sa[3] = -0.02197423500407072;
      sa[4] = 0.068695135955698;
      sa[5] = -0.11377097687655005;
    }
  }
}
class h2o_nn_16x16x6_ReLU_09_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_ReLU_09_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.025354816f;
      sa[1] = 0.23406012f;
      sa[2] = 0.21505545f;
      sa[3] = 0.08785668f;
      sa[4] = -0.077479534f;
      sa[5] = -0.14222854f;
      sa[6] = 0.04432842f;
      sa[7] = 0.41464797f;
      sa[8] = 0.08673977f;
      sa[9] = -0.122270636f;
      sa[10] = -0.24206166f;
      sa[11] = -0.27248603f;
      sa[12] = 0.17232646f;
      sa[13] = -0.2254041f;
      sa[14] = -0.09561084f;
      sa[15] = 0.097015455f;
      sa[16] = 0.12934937f;
      sa[17] = 0.20798077f;
      sa[18] = -0.18655701f;
      sa[19] = 0.049910303f;
      sa[20] = 0.34331748f;
      sa[21] = -0.23976459f;
      sa[22] = 0.34981725f;
      sa[23] = -0.07107834f;
      sa[24] = 0.3259122f;
      sa[25] = 0.13165994f;
      sa[26] = -0.25004068f;
      sa[27] = 0.29233545f;
      sa[28] = 0.34997463f;
      sa[29] = -0.19508643f;
      sa[30] = -0.11874193f;
      sa[31] = 0.3073099f;
      sa[32] = 0.16838443f;
      sa[33] = -0.33115968f;
      sa[34] = 0.13394259f;
      sa[35] = -0.044436444f;
      sa[36] = 0.106394745f;
      sa[37] = 0.22603337f;
      sa[38] = -0.17681074f;
      sa[39] = 0.15989748f;
      sa[40] = 0.07935863f;
      sa[41] = -0.081108145f;
      sa[42] = -0.12171618f;
      sa[43] = 0.0042924723f;
      sa[44] = 0.28602585f;
      sa[45] = -0.32108667f;
      sa[46] = -0.025764989f;
      sa[47] = -0.053508677f;
      sa[48] = 0.27326688f;
      sa[49] = 0.28566062f;
      sa[50] = 0.24745394f;
      sa[51] = -0.34438777f;
      sa[52] = -0.1475525f;
      sa[53] = 0.18757224f;
      sa[54] = 0.34719524f;
      sa[55] = 0.0030519303f;
      sa[56] = -0.16036975f;
      sa[57] = -0.28024915f;
      sa[58] = 0.30847752f;
      sa[59] = -0.21741219f;
      sa[60] = -0.4020109f;
      sa[61] = 0.13568245f;
      sa[62] = 0.2456256f;
      sa[63] = -0.011836859f;
      sa[64] = 0.17206751f;
      sa[65] = 0.15936759f;
      sa[66] = 0.013477248f;
      sa[67] = 0.115057744f;
      sa[68] = -0.17148635f;
      sa[69] = 0.07963523f;
      sa[70] = -0.028953608f;
      sa[71] = 0.41651428f;
      sa[72] = -0.11870384f;
      sa[73] = 0.2302839f;
      sa[74] = -0.18648198f;
      sa[75] = 0.08704313f;
      sa[76] = -0.23533383f;
      sa[77] = -0.072563685f;
      sa[78] = -0.094091624f;
      sa[79] = 0.13562766f;
      sa[80] = -0.20030563f;
      sa[81] = -0.14534886f;
      sa[82] = 0.013255707f;
      sa[83] = 0.12874644f;
      sa[84] = -0.026721982f;
      sa[85] = -0.18826364f;
      sa[86] = 0.14669396f;
      sa[87] = 0.26391307f;
      sa[88] = 0.25614083f;
      sa[89] = 0.04988717f;
      sa[90] = -0.15670778f;
      sa[91] = 0.20852332f;
      sa[92] = 0.11150334f;
      sa[93] = -0.2363204f;
      sa[94] = -0.19952093f;
      sa[95] = -0.27101308f;
      sa[96] = 0.1542465f;
      sa[97] = 0.06485349f;
      sa[98] = 0.2058574f;
      sa[99] = -0.08694871f;
      sa[100] = -0.054691404f;
      sa[101] = -0.20576748f;
      sa[102] = -0.2695833f;
      sa[103] = -0.09176558f;
      sa[104] = -6.2029685E-5f;
      sa[105] = -0.14560758f;
      sa[106] = -0.25149208f;
      sa[107] = 0.10859557f;
      sa[108] = 0.10310383f;
      sa[109] = -0.18706134f;
      sa[110] = -0.20547819f;
      sa[111] = 0.099450104f;
      sa[112] = 0.096628234f;
      sa[113] = -0.012731666f;
      sa[114] = -0.2180324f;
      sa[115] = -0.038362056f;
      sa[116] = -0.32606083f;
      sa[117] = 0.06746044f;
      sa[118] = -0.24375445f;
      sa[119] = -0.127655f;
      sa[120] = 0.2438817f;
      sa[121] = 0.23258612f;
      sa[122] = 0.31215915f;
      sa[123] = 0.31870413f;
      sa[124] = 0.29263642f;
      sa[125] = 0.3183032f;
      sa[126] = -0.32013074f;
      sa[127] = -0.305056f;
      sa[128] = 0.10186977f;
      sa[129] = 0.18485275f;
      sa[130] = -0.122940734f;
      sa[131] = 0.39580894f;
      sa[132] = 0.24224795f;
      sa[133] = -0.25733486f;
      sa[134] = 0.102427095f;
      sa[135] = -0.21948099f;
      sa[136] = -0.28776422f;
      sa[137] = -0.024856715f;
      sa[138] = 0.097570546f;
      sa[139] = -0.044431f;
      sa[140] = -0.02515461f;
      sa[141] = -0.055206597f;
      sa[142] = 0.1330306f;
      sa[143] = -0.31676295f;
      sa[144] = 0.27171874f;
      sa[145] = -0.20124196f;
      sa[146] = -0.3482616f;
      sa[147] = 0.17500636f;
      sa[148] = 0.18830387f;
      sa[149] = 0.20483801f;
      sa[150] = 0.31102678f;
      sa[151] = -0.2883193f;
      sa[152] = 0.034080595f;
      sa[153] = 0.24976991f;
      sa[154] = 0.26151428f;
      sa[155] = -0.19609348f;
      sa[156] = 0.15468699f;
      sa[157] = -0.20723248f;
      sa[158] = 0.09692544f;
      sa[159] = 0.0956526f;
      sa[160] = -0.0012326468f;
      sa[161] = 0.15739316f;
      sa[162] = -0.1123588f;
      sa[163] = -0.14972043f;
      sa[164] = 0.2638363f;
      sa[165] = -0.03685137f;
      sa[166] = -0.06961764f;
      sa[167] = -0.100541085f;
      sa[168] = 0.13618545f;
      sa[169] = 0.33424252f;
      sa[170] = 0.099872634f;
      sa[171] = -0.032400955f;
      sa[172] = -0.07146356f;
      sa[173] = -0.16405515f;
      sa[174] = -0.036426794f;
      sa[175] = -0.28012893f;
      sa[176] = 0.0093552545f;
      sa[177] = -0.016675966f;
      sa[178] = -0.055406198f;
      sa[179] = 0.09875428f;
      sa[180] = 0.014684031f;
      sa[181] = -0.34934768f;
      sa[182] = -0.072127804f;
      sa[183] = 0.23167248f;
      sa[184] = 0.433135f;
      sa[185] = 0.29505894f;
      sa[186] = -0.22002028f;
      sa[187] = 0.1293258f;
      sa[188] = 0.028484706f;
      sa[189] = 0.19322172f;
      sa[190] = -0.01306523f;
      sa[191] = 0.028742667f;
      sa[192] = -0.09648652f;
      sa[193] = 0.314917f;
      sa[194] = 0.16538769f;
      sa[195] = 0.30864543f;
      sa[196] = 0.21971446f;
      sa[197] = -0.07348219f;
      sa[198] = 0.1394617f;
      sa[199] = -0.13160819f;
      sa[200] = 0.053293865f;
      sa[201] = -0.23867476f;
      sa[202] = 0.19777608f;
      sa[203] = -0.03306425f;
      sa[204] = -0.15840754f;
      sa[205] = 0.17450881f;
      sa[206] = 0.24054436f;
      sa[207] = 0.02123227f;
      sa[208] = -0.26512858f;
      sa[209] = -0.038744282f;
      sa[210] = -0.255086f;
      sa[211] = -0.33631706f;
      sa[212] = 0.3144667f;
      sa[213] = -0.25722033f;
      sa[214] = -0.19497314f;
      sa[215] = -0.06442677f;
      sa[216] = 0.123300776f;
      sa[217] = 0.23669702f;
      sa[218] = -0.20213443f;
      sa[219] = 0.2581708f;
      sa[220] = -0.21420936f;
      sa[221] = 0.08299798f;
      sa[222] = 0.2634804f;
      sa[223] = 0.09792657f;
      sa[224] = 0.15109083f;
      sa[225] = 0.2747804f;
      sa[226] = -0.2309635f;
      sa[227] = 0.3728092f;
      sa[228] = 0.15790328f;
      sa[229] = 0.13378245f;
      sa[230] = 0.2981817f;
      sa[231] = -0.24343379f;
      sa[232] = -0.2936656f;
      sa[233] = 0.016941974f;
      sa[234] = 0.083849005f;
      sa[235] = -0.3422912f;
      sa[236] = -0.0061502904f;
      sa[237] = -0.21323732f;
      sa[238] = -0.21154116f;
      sa[239] = 0.17449313f;
      sa[240] = 0.01725804f;
      sa[241] = -0.2314421f;
      sa[242] = -0.16383323f;
      sa[243] = -0.29154775f;
      sa[244] = -0.18268092f;
      sa[245] = -0.0939978f;
      sa[246] = -0.23885146f;
      sa[247] = -0.02645965f;
      sa[248] = 0.19373082f;
      sa[249] = 0.29833263f;
      sa[250] = -0.26999038f;
      sa[251] = -0.14772291f;
      sa[252] = -0.2894598f;
      sa[253] = -0.3924386f;
      sa[254] = -0.3672524f;
      sa[255] = 0.17259777f;
      sa[256] = -0.17315997f;
      sa[257] = 0.32419026f;
      sa[258] = -0.23414156f;
      sa[259] = -0.074941956f;
      sa[260] = -0.20959213f;
      sa[261] = -0.19011782f;
      sa[262] = -0.18515183f;
      sa[263] = 0.34314573f;
      sa[264] = -0.11397754f;
      sa[265] = 0.12525873f;
      sa[266] = -0.23724738f;
      sa[267] = -0.18712516f;
      sa[268] = 0.057457622f;
      sa[269] = -0.2878159f;
      sa[270] = 0.02541557f;
      sa[271] = 0.04557031f;
      sa[272] = -0.06450988f;
      sa[273] = -0.09596128f;
      sa[274] = 0.18817846f;
      sa[275] = 0.031598486f;
      sa[276] = 0.02015729f;
      sa[277] = -0.29144838f;
      sa[278] = -0.09494627f;
      sa[279] = 0.04290629f;
      sa[280] = -0.16183694f;
      sa[281] = 0.3192153f;
      sa[282] = -0.0933288f;
      sa[283] = -0.02736448f;
      sa[284] = -0.04828226f;
      sa[285] = -0.20270993f;
      sa[286] = 0.35442114f;
      sa[287] = 0.18529145f;
      sa[288] = -0.27281967f;
      sa[289] = -0.17727438f;
      sa[290] = -0.024443643f;
      sa[291] = 0.060181115f;
      sa[292] = 0.20835625f;
      sa[293] = -0.08423491f;
      sa[294] = 0.13166751f;
      sa[295] = 0.11742422f;
      sa[296] = 0.16463256f;
      sa[297] = 0.30270043f;
      sa[298] = -0.06955967f;
      sa[299] = -0.12838392f;
      sa[300] = -0.028959015f;
      sa[301] = -0.094916254f;
      sa[302] = 0.18544303f;
      sa[303] = -0.0042183297f;
      sa[304] = -0.16891906f;
      sa[305] = 0.10812088f;
      sa[306] = 0.31496024f;
      sa[307] = -0.11247196f;
      sa[308] = 0.08335763f;
      sa[309] = 0.19277966f;
      sa[310] = 0.30364582f;
      sa[311] = 0.327777f;
      sa[312] = -0.1497097f;
      sa[313] = -0.21398222f;
      sa[314] = -0.07515627f;
      sa[315] = 0.019134663f;
      sa[316] = -0.030088061f;
      sa[317] = -0.06642313f;
      sa[318] = 0.09227065f;
      sa[319] = 0.28486994f;
      sa[320] = -0.004014594f;
      sa[321] = 0.1399004f;
      sa[322] = 0.17891085f;
      sa[323] = -0.1995224f;
      sa[324] = -0.057569128f;
      sa[325] = 0.23715912f;
      sa[326] = -0.33883968f;
      sa[327] = -0.06994203f;
      sa[328] = -0.03207917f;
      sa[329] = 0.25348094f;
      sa[330] = -0.17907177f;
      sa[331] = 0.0031726456f;
      sa[332] = -0.32835996f;
      sa[333] = 0.13399617f;
      sa[334] = -0.140763f;
      sa[335] = 0.19960931f;
      sa[336] = -0.13892199f;
      sa[337] = -0.17564361f;
      sa[338] = 0.32494527f;
      sa[339] = -0.2268561f;
      sa[340] = -0.38833356f;
      sa[341] = -0.3122268f;
      sa[342] = 0.3093869f;
      sa[343] = -0.21047024f;
      sa[344] = -0.15049756f;
      sa[345] = 0.2589423f;
      sa[346] = 0.24685745f;
      sa[347] = -0.14042822f;
      sa[348] = 0.2526371f;
      sa[349] = -0.33682352f;
      sa[350] = -0.1275171f;
      sa[351] = 0.19995855f;
      sa[352] = 0.23721512f;
      sa[353] = -0.009164658f;
      sa[354] = 0.07030289f;
      sa[355] = 0.16099134f;
      sa[356] = -0.15562488f;
      sa[357] = 0.22109598f;
      sa[358] = -0.23572315f;
      sa[359] = 0.12070418f;
      sa[360] = 0.14873691f;
      sa[361] = -0.112398215f;
      sa[362] = -0.20406409f;
      sa[363] = 0.19334386f;
      sa[364] = -0.14070737f;
      sa[365] = -0.22790496f;
      sa[366] = -0.013765031f;
      sa[367] = -0.3048961f;
      sa[368] = -0.13844764f;
      sa[369] = 0.19044429f;
      sa[370] = -0.19365105f;
      sa[371] = 0.20370713f;
      sa[372] = 0.01430673f;
      sa[373] = 0.34391183f;
      sa[374] = -0.14200327f;
      sa[375] = -0.28051978f;
      sa[376] = -0.3956037f;
      sa[377] = -0.37779433f;
      sa[378] = 0.30912432f;
      sa[379] = 0.045505725f;
      sa[380] = -0.113256246f;
      sa[381] = -0.106435016f;
      sa[382] = -0.03007138f;
      sa[383] = -0.122551754f;
      sa[384] = -0.16610093f;
      sa[385] = 0.12107852f;
      sa[386] = -0.24516742f;
      sa[387] = -0.23333877f;
      sa[388] = 0.11389157f;
      sa[389] = 0.007890524f;
      sa[390] = 0.020618862f;
      sa[391] = -0.094854884f;
      sa[392] = 0.34134445f;
      sa[393] = 0.3934048f;
      sa[394] = -0.17225417f;
      sa[395] = 0.24119608f;
      sa[396] = 0.38833433f;
      sa[397] = -0.20824374f;
      sa[398] = 0.121396415f;
      sa[399] = 0.12967421f;
      sa[400] = 0.1475961f;
      sa[401] = 0.26651505f;
      sa[402] = -0.17446312f;
      sa[403] = 0.07381731f;
      sa[404] = 0.3332293f;
      sa[405] = -0.26106483f;
      sa[406] = -0.041142613f;
      sa[407] = 0.26976553f;
      sa[408] = -0.24724141f;
      sa[409] = -0.25218382f;
      sa[410] = -0.1399572f;
      sa[411] = 0.2143384f;
      sa[412] = -0.09346006f;
      sa[413] = 0.11904889f;
      sa[414] = 0.045621563f;
      sa[415] = 0.370069f;
      sa[416] = -0.21144219f;
      sa[417] = -7.6146354E-4f;
      sa[418] = -0.010529132f;
      sa[419] = 0.26314875f;
      sa[420] = 0.22762169f;
      sa[421] = 0.30994895f;
      sa[422] = 0.11281459f;
      sa[423] = -0.13792607f;
      sa[424] = 0.104973845f;
      sa[425] = -0.1119988f;
      sa[426] = -0.2915243f;
      sa[427] = 0.19614856f;
      sa[428] = -0.08553159f;
      sa[429] = -0.12474237f;
      sa[430] = 0.14568236f;
      sa[431] = -0.07825466f;
      sa[432] = -0.05329063f;
      sa[433] = 0.17350861f;
      sa[434] = 0.26247627f;
      sa[435] = 0.093621634f;
      sa[436] = -0.33492768f;
      sa[437] = -0.28699774f;
      sa[438] = -0.041924972f;
      sa[439] = -0.041725434f;
      sa[440] = 0.3439922f;
      sa[441] = -0.3994901f;
      sa[442] = 0.13019395f;
      sa[443] = 0.09780945f;
      sa[444] = -0.2816881f;
      sa[445] = 0.045744248f;
      sa[446] = 0.2024816f;
      sa[447] = 0.05105846f;
      sa[448] = 0.21812466f;
      sa[449] = 0.2269568f;
      sa[450] = -0.13297161f;
      sa[451] = 0.10745277f;
      sa[452] = 0.16429374f;
      sa[453] = -0.08863662f;
      sa[454] = -0.20370257f;
      sa[455] = -0.09576565f;
      sa[456] = -0.07400824f;
      sa[457] = 0.10060075f;
      sa[458] = -0.2680994f;
      sa[459] = 0.2925555f;
      sa[460] = 0.20724191f;
      sa[461] = 0.27000737f;
      sa[462] = 0.030449416f;
      sa[463] = 0.20655923f;
      sa[464] = -0.30797574f;
      sa[465] = 0.3128192f;
      sa[466] = -0.008626595f;
      sa[467] = 0.1176653f;
      sa[468] = 0.039143093f;
      sa[469] = 0.36726952f;
      sa[470] = 0.20686725f;
      sa[471] = -0.0022539718f;
      sa[472] = -0.016791333f;
      sa[473] = -0.16558953f;
      sa[474] = -0.060009215f;
      sa[475] = 0.0976449f;
      sa[476] = 0.22809024f;
      sa[477] = -0.11157848f;
      sa[478] = 0.12542562f;
      sa[479] = -0.21894237f;
      sa[480] = -0.3415885f;
      sa[481] = -0.2599028f;
      sa[482] = -0.31234655f;
      sa[483] = 0.22553496f;
      sa[484] = 0.30454108f;
      sa[485] = 0.23423374f;
      sa[486] = 0.006988865f;
      sa[487] = -0.17664139f;
      sa[488] = -0.21324366f;
      sa[489] = 0.08415133f;
      sa[490] = -0.030279709f;
      sa[491] = -0.23006591f;
      sa[492] = 0.2647517f;
      sa[493] = 0.29128247f;
      sa[494] = -0.21332653f;
      sa[495] = 0.30695897f;
      sa[496] = 0.0021601801f;
      sa[497] = 0.075202465f;
      sa[498] = 0.17116424f;
      sa[499] = 0.23365489f;
      sa[500] = -0.040021643f;
      sa[501] = 0.11704165f;
      sa[502] = 0.27901688f;
      sa[503] = 0.0789318f;
      sa[504] = -0.18819833f;
      sa[505] = -0.18738957f;
      sa[506] = 0.31141338f;
      sa[507] = -0.028109077f;
      sa[508] = 0.16235381f;
      sa[509] = 0.3077502f;
      sa[510] = 0.27954397f;
      sa[511] = 0.097815886f;
      sa[512] = 0.04868925f;
      sa[513] = 0.031370185f;
      sa[514] = 0.25066406f;
      sa[515] = -0.14956759f;
      sa[516] = 0.07106434f;
      sa[517] = 0.15762362f;
      sa[518] = 0.23629501f;
      sa[519] = -0.02473865f;
      sa[520] = 0.28625643f;
      sa[521] = 0.21752237f;
      sa[522] = -0.05637183f;
      sa[523] = 0.16490394f;
      sa[524] = 0.271006f;
      sa[525] = 0.24848615f;
      sa[526] = 0.08761464f;
      sa[527] = -0.022284525f;
      sa[528] = 0.16525774f;
      sa[529] = 0.10913603f;
      sa[530] = -0.33503354f;
      sa[531] = -0.0670646f;
      sa[532] = 0.19726801f;
      sa[533] = 0.17552842f;
      sa[534] = 0.19304734f;
      sa[535] = -0.053984974f;
      sa[536] = 0.108348206f;
      sa[537] = -0.07052213f;
      sa[538] = 0.115383096f;
      sa[539] = 0.24161153f;
      sa[540] = -0.3096684f;
      sa[541] = -0.26029867f;
      sa[542] = -0.16983534f;
      sa[543] = -0.49513084f;
      sa[544] = 0.17354047f;
      sa[545] = 0.10278709f;
      sa[546] = 0.059251316f;
      sa[547] = 0.20778938f;
      sa[548] = 0.05409073f;
      sa[549] = 0.15833795f;
      sa[550] = 0.011432017f;
      sa[551] = -0.21259531f;
      sa[552] = 0.073329695f;
      sa[553] = -0.061310917f;
      sa[554] = -0.17249066f;
      sa[555] = -0.14597799f;
      sa[556] = -0.2710738f;
      sa[557] = -0.30389786f;
      sa[558] = -0.10794828f;
      sa[559] = 0.07554461f;
      sa[560] = -0.29568973f;
      sa[561] = -0.06993373f;
      sa[562] = 0.22628172f;
      sa[563] = -0.021370577f;
      sa[564] = 0.24895325f;
      sa[565] = 0.055049933f;
      sa[566] = 0.4248654f;
      sa[567] = 0.20560756f;
      sa[568] = -0.05507943f;
      sa[569] = 0.06120761f;
      sa[570] = -0.02923704f;
      sa[571] = -0.009770918f;
      sa[572] = -0.17453748f;
      sa[573] = 0.06552957f;
      sa[574] = 0.39382732f;
      sa[575] = -0.1277568f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_09_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.64095795f;
      sa[1] = 0.10097236f;
      sa[2] = -0.12869465f;
      sa[3] = -0.095857866f;
      sa[4] = 0.14071794f;
      sa[5] = 0.107566915f;
      sa[6] = 0.18315473f;
      sa[7] = 0.21862912f;
      sa[8] = -0.17453057f;
      sa[9] = 0.18465221f;
      sa[10] = -0.13903853f;
      sa[11] = 0.2582217f;
      sa[12] = 0.14889947f;
      sa[13] = 0.11899056f;
      sa[14] = -0.1579618f;
      sa[15] = 0.57135546f;
      sa[16] = 0.4666767f;
      sa[17] = -0.09845953f;
      sa[18] = 0.034125183f;
      sa[19] = -0.042496912f;
      sa[20] = 0.38578597f;
      sa[21] = 0.0074406215f;
      sa[22] = -0.19096857f;
      sa[23] = 0.19361375f;
      sa[24] = -0.3118604f;
      sa[25] = 0.18099657f;
      sa[26] = -0.053664166f;
      sa[27] = 0.42633462f;
      sa[28] = -0.36467862f;
      sa[29] = -0.13500899f;
      sa[30] = 0.09323524f;
      sa[31] = -0.20884258f;
      sa[32] = -0.3176222f;
      sa[33] = -0.46442986f;
      sa[34] = 0.0021679143f;
      sa[35] = 0.3256942f;
      sa[36] = -0.13226783f;
      sa[37] = -0.089911066f;
      sa[38] = 0.0269305f;
      sa[39] = 0.1535885f;
      sa[40] = -0.2539271f;
      sa[41] = -0.42081675f;
      sa[42] = -0.31793553f;
      sa[43] = -0.42549405f;
      sa[44] = 0.03123146f;
      sa[45] = -0.33236793f;
      sa[46] = 0.29441515f;
      sa[47] = 0.2939588f;
      sa[48] = -0.34663105f;
      sa[49] = -0.26726156f;
      sa[50] = 0.055811178f;
      sa[51] = -0.116978094f;
      sa[52] = 0.21206747f;
      sa[53] = 0.19242524f;
      sa[54] = -0.1173912f;
      sa[55] = 0.3145811f;
      sa[56] = -0.31588298f;
      sa[57] = -0.3636119f;
      sa[58] = 0.02340798f;
      sa[59] = -0.011434914f;
      sa[60] = 0.37887278f;
      sa[61] = -0.1633142f;
      sa[62] = -0.13837685f;
      sa[63] = 0.16316195f;
      sa[64] = 0.23985806f;
      sa[65] = -0.18611115f;
      sa[66] = 0.08893993f;
      sa[67] = 0.3380951f;
      sa[68] = 0.13785282f;
      sa[69] = -0.29550177f;
      sa[70] = -0.43236336f;
      sa[71] = -0.111179635f;
      sa[72] = -0.3617569f;
      sa[73] = 0.32013038f;
      sa[74] = 0.39113757f;
      sa[75] = -0.102007315f;
      sa[76] = 0.17760591f;
      sa[77] = 0.10008808f;
      sa[78] = -0.3906186f;
      sa[79] = 0.2901733f;
      sa[80] = -0.22767395f;
      sa[81] = 0.04746095f;
      sa[82] = 0.20738377f;
      sa[83] = -0.18153958f;
      sa[84] = -0.44837713f;
      sa[85] = -0.37113687f;
      sa[86] = 0.053661622f;
      sa[87] = 0.30817854f;
      sa[88] = -0.4336768f;
      sa[89] = -0.16491033f;
      sa[90] = -0.29608437f;
      sa[91] = 0.40023306f;
      sa[92] = -0.08454266f;
      sa[93] = 0.06447306f;
      sa[94] = -0.4275868f;
      sa[95] = -0.08585556f;
      sa[96] = -0.25835565f;
      sa[97] = -0.0054195523f;
      sa[98] = -0.055421732f;
      sa[99] = 0.0941511f;
      sa[100] = -0.3369841f;
      sa[101] = -0.2504251f;
      sa[102] = 0.31140324f;
      sa[103] = -0.036300123f;
      sa[104] = -0.110817835f;
      sa[105] = -0.22856964f;
      sa[106] = 0.30258286f;
      sa[107] = 0.3085741f;
      sa[108] = 0.2549681f;
      sa[109] = 0.059596233f;
      sa[110] = 0.14439146f;
      sa[111] = -0.2826779f;
      sa[112] = -0.24175297f;
      sa[113] = 0.006769741f;
      sa[114] = 0.018375088f;
      sa[115] = -0.14534397f;
      sa[116] = 0.27635187f;
      sa[117] = -0.03592362f;
      sa[118] = -0.44731882f;
      sa[119] = -0.2297577f;
      sa[120] = -0.14950724f;
      sa[121] = 0.2120716f;
      sa[122] = -0.058426447f;
      sa[123] = 0.08817083f;
      sa[124] = -0.16186789f;
      sa[125] = 0.25990537f;
      sa[126] = -0.2649082f;
      sa[127] = 0.110560484f;
      sa[128] = -0.45179f;
      sa[129] = 0.14168729f;
      sa[130] = -0.13150263f;
      sa[131] = 0.13298805f;
      sa[132] = 0.039249163f;
      sa[133] = 0.10733388f;
      sa[134] = 0.19462577f;
      sa[135] = -0.399161f;
      sa[136] = 0.08516762f;
      sa[137] = -0.20373668f;
      sa[138] = 0.007481424f;
      sa[139] = 0.26402384f;
      sa[140] = -0.18809113f;
      sa[141] = -0.06343856f;
      sa[142] = -0.024080018f;
      sa[143] = -0.29553092f;
      sa[144] = 0.30762407f;
      sa[145] = -0.26062864f;
      sa[146] = 0.101892084f;
      sa[147] = -0.04759461f;
      sa[148] = -0.23343284f;
      sa[149] = 0.32209316f;
      sa[150] = -0.16668461f;
      sa[151] = -0.51877266f;
      sa[152] = 0.43064412f;
      sa[153] = -0.14373574f;
      sa[154] = 0.39527163f;
      sa[155] = -0.42004701f;
      sa[156] = -0.37553677f;
      sa[157] = -0.3122862f;
      sa[158] = -0.061013468f;
      sa[159] = -0.24723038f;
      sa[160] = 0.32635558f;
      sa[161] = -0.33328217f;
      sa[162] = 0.37798303f;
      sa[163] = -0.27075747f;
      sa[164] = 0.14734118f;
      sa[165] = -0.20689423f;
      sa[166] = 0.28452137f;
      sa[167] = -0.4155562f;
      sa[168] = 0.22157052f;
      sa[169] = -0.46975797f;
      sa[170] = 0.28494594f;
      sa[171] = 0.21031666f;
      sa[172] = 0.40915275f;
      sa[173] = 0.40902647f;
      sa[174] = -0.07757124f;
      sa[175] = -0.045907807f;
      sa[176] = -0.1243305f;
      sa[177] = 0.18881299f;
      sa[178] = -0.24611187f;
      sa[179] = -0.064038835f;
      sa[180] = -0.31861627f;
      sa[181] = -0.13294859f;
      sa[182] = 0.023996076f;
      sa[183] = -0.13281696f;
      sa[184] = 0.44852495f;
      sa[185] = 0.3554317f;
      sa[186] = -0.10289478f;
      sa[187] = -0.15331806f;
      sa[188] = -0.14467305f;
      sa[189] = -0.22151354f;
      sa[190] = -0.30255786f;
      sa[191] = -0.15531833f;
      sa[192] = -0.13394879f;
      sa[193] = 0.15343776f;
      sa[194] = -0.273446f;
      sa[195] = -0.2448084f;
      sa[196] = 0.15351884f;
      sa[197] = -0.09321965f;
      sa[198] = 0.10543243f;
      sa[199] = 0.4443323f;
      sa[200] = 0.032299124f;
      sa[201] = 0.36060604f;
      sa[202] = 0.28765213f;
      sa[203] = -0.408909f;
      sa[204] = 0.062425025f;
      sa[205] = 0.31538284f;
      sa[206] = -0.13903633f;
      sa[207] = 0.2066818f;
      sa[208] = -0.25379917f;
      sa[209] = 0.09983775f;
      sa[210] = -0.14295788f;
      sa[211] = -0.31114045f;
      sa[212] = -0.43425858f;
      sa[213] = -0.068355106f;
      sa[214] = -0.40508407f;
      sa[215] = -0.10118788f;
      sa[216] = 0.078878775f;
      sa[217] = 0.2646546f;
      sa[218] = -0.028655354f;
      sa[219] = 0.057775296f;
      sa[220] = 0.14879808f;
      sa[221] = -0.042008005f;
      sa[222] = -0.3254871f;
      sa[223] = -0.39113384f;
      sa[224] = 0.34687498f;
      sa[225] = 0.010141253f;
      sa[226] = -0.03483043f;
      sa[227] = 0.046886828f;
      sa[228] = -0.14421003f;
      sa[229] = -0.28166032f;
      sa[230] = -0.31844932f;
      sa[231] = -0.17116478f;
      sa[232] = 0.3977715f;
      sa[233] = -0.25998297f;
      sa[234] = -0.22311233f;
      sa[235] = 0.018373456f;
      sa[236] = -0.3262959f;
      sa[237] = 0.47883925f;
      sa[238] = 0.1922913f;
      sa[239] = -0.11981975f;
      sa[240] = -0.20389298f;
      sa[241] = -0.5445276f;
      sa[242] = -0.24114262f;
      sa[243] = 0.3593968f;
      sa[244] = 0.10637469f;
      sa[245] = 0.26476246f;
      sa[246] = 0.37495738f;
      sa[247] = -0.5060403f;
      sa[248] = -0.20075043f;
      sa[249] = 0.0514853f;
      sa[250] = 0.2771752f;
      sa[251] = 0.27411515f;
      sa[252] = 0.16634315f;
      sa[253] = -0.35069126f;
      sa[254] = 0.35025936f;
      sa[255] = 0.05515251f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_09_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_ReLU_09_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.041657664f;
      sa[1] = -1.5927247f;
      sa[2] = -1.5810055f;
      sa[3] = 1.3033339f;
      sa[4] = 0.37736994f;
      sa[5] = -0.19517693f;
      sa[6] = -1.6548971f;
      sa[7] = 1.4557023f;
      sa[8] = 1.7014011f;
      sa[9] = 0.1459542f;
      sa[10] = 1.5690565f;
      sa[11] = 1.3503699f;
      sa[12] = 1.7879297f;
      sa[13] = -0.55606014f;
      sa[14] = -1.9791595f;
      sa[15] = -0.7332383f;
      sa[16] = 0.7581752f;
      sa[17] = -0.72480637f;
      sa[18] = -1.4688159f;
      sa[19] = -0.8656931f;
      sa[20] = -1.9032364f;
      sa[21] = 0.31306574f;
      sa[22] = -1.9180301f;
      sa[23] = -0.6091298f;
      sa[24] = -0.52596235f;
      sa[25] = 1.8624084f;
      sa[26] = -0.3087406f;
      sa[27] = 1.184704f;
      sa[28] = 1.1961582f;
      sa[29] = -0.71703666f;
      sa[30] = 0.17004612f;
      sa[31] = 0.167099f;
      sa[32] = 0.37592268f;
      sa[33] = -0.03537471f;
      sa[34] = -0.6329483f;
      sa[35] = 0.85637724f;
      sa[36] = 0.52995455f;
      sa[37] = -1.322426f;
      sa[38] = 0.5759394f;
      sa[39] = -0.25371403f;
      sa[40] = 0.2203407f;
      sa[41] = -0.66795987f;
      sa[42] = 0.5156335f;
      sa[43] = 0.0042096847f;
      sa[44] = 0.94097024f;
      sa[45] = -1.9614699f;
      sa[46] = -2.2104926f;
      sa[47] = 0.04843793f;
      sa[48] = 1.5880375f;
      sa[49] = -0.22133006f;
      sa[50] = -0.49792123f;
      sa[51] = 1.763201f;
      sa[52] = -1.6527987f;
      sa[53] = 0.9215966f;
      sa[54] = 1.7239571f;
      sa[55] = 1.0689127f;
      sa[56] = -0.5709346f;
      sa[57] = -0.18794923f;
      sa[58] = 1.016446f;
      sa[59] = 0.714552f;
      sa[60] = -1.4273614f;
      sa[61] = 0.8883708f;
      sa[62] = -0.35019228f;
      sa[63] = -0.85869336f;
      sa[64] = 1.0308161f;
      sa[65] = -0.8887283f;
      sa[66] = -1.7097723f;
      sa[67] = -0.09270201f;
      sa[68] = 0.89333576f;
      sa[69] = -1.3271587f;
      sa[70] = -1.6146854f;
      sa[71] = 0.016370289f;
      sa[72] = -0.9334491f;
      sa[73] = -1.1317812f;
      sa[74] = -1.0913872f;
      sa[75] = 1.3343184f;
      sa[76] = 1.9108741f;
      sa[77] = -0.58796257f;
      sa[78] = -1.3354455f;
      sa[79] = -0.35556203f;
      sa[80] = 0.47281966f;
      sa[81] = -1.699847f;
      sa[82] = -0.21471436f;
      sa[83] = -1.3999835f;
      sa[84] = 1.5365701f;
      sa[85] = 1.041476f;
      sa[86] = -1.934847f;
      sa[87] = 0.9818495f;
      sa[88] = -1.6178495f;
      sa[89] = -1.0296937f;
      sa[90] = 0.23496217f;
      sa[91] = 0.118247405f;
      sa[92] = 1.2841008f;
      sa[93] = 1.8703058f;
      sa[94] = 1.5335186f;
      sa[95] = 0.6216108f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_09 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_09_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_09_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_09_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_ReLU_09_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


