/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T13:50:02.698+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_01

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_01 > h2o_nn_16x16x6_Tanh_01.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_01.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_01", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_01 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 36; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[36];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {36,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_01_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_01_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_01_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_01_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_01_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_01_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_01_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_01_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_01_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_01_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_01_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_01_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_01.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X1 */ null,
    /* X2 */ null,
    /* X3 */ null,
    /* X4 */ null,
    /* X5 */ null,
    /* X6 */ null,
    /* X7 */ null,
    /* X8 */ null,
    /* X9 */ null,
    /* X10 */ null,
    /* X11 */ null,
    /* X12 */ null,
    /* X13 */ null,
    /* X14 */ null,
    /* X15 */ null,
    /* X16 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X22 */ null,
    /* X23 */ null,
    /* X24 */ null,
    /* X25 */ null,
    /* X26 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X29 */ null,
    /* X30 */ null,
    /* X31 */ null,
    /* X32 */ null,
    /* X33 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* X36 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_01_ColInfo_36.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25,0.25,0.125,0.25,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_01() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-8207229778083250200L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_01_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[36];
  static {
    h2o_nn_16x16x6_Tanh_01_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_01_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_01_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_01_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_01_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_01_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_01_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_01_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_01_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_01_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0067798714753129884;
      sa[1] = -0.0013922241753180228;
      sa[2] = 0.08349454410613963;
      sa[3] = -0.07537412737655307;
      sa[4] = -0.017017840545061003;
      sa[5] = 0.026620968714360052;
      sa[6] = 0.14659141302854065;
      sa[7] = 0.11763951124686037;
      sa[8] = -0.087145417730198;
      sa[9] = -0.09778907873770366;
      sa[10] = 0.02768650519024445;
      sa[11] = 0.071042452728855;
      sa[12] = 0.024865137140871862;
      sa[13] = 0.023038365780173372;
      sa[14] = 0.1335440124265888;
      sa[15] = 0.07636783540148082;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_01_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_01_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.04462559643856058;
      sa[1] = 0.01934928828376782;
      sa[2] = -0.022701497526691934;
      sa[3] = 0.07910351021380589;
      sa[4] = 0.016762004467732395;
      sa[5] = 0.008790836983650425;
      sa[6] = 0.0341179602181687;
      sa[7] = 0.08202218375080532;
      sa[8] = -0.061840147470435536;
      sa[9] = -0.048361080157890264;
      sa[10] = 0.019419438445812086;
      sa[11] = -0.05751142435976545;
      sa[12] = -0.03778682301612169;
      sa[13] = 0.04875586596113564;
      sa[14] = 0.008809265819420918;
      sa[15] = -0.07919965275614324;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_01_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_01_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.005457025190764475;
      sa[1] = -0.05994340434580319;
      sa[2] = -0.06143137839504455;
      sa[3] = 0.03316030434300135;
      sa[4] = 0.020691604346465976;
    }
  }
}
class h2o_nn_16x16x6_Tanh_01_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_01_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[576];
  static {
    h2o_nn_16x16x6_Tanh_01_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.017330378f;
      sa[1] = 0.31253102f;
      sa[2] = 0.24871942f;
      sa[3] = 0.3429848f;
      sa[4] = -0.20009351f;
      sa[5] = -0.20842926f;
      sa[6] = -0.063392f;
      sa[7] = 0.24388991f;
      sa[8] = 0.12906173f;
      sa[9] = -0.17326717f;
      sa[10] = -0.15344271f;
      sa[11] = -0.21382186f;
      sa[12] = 0.11675265f;
      sa[13] = -0.29285544f;
      sa[14] = -0.20518221f;
      sa[15] = 0.009979589f;
      sa[16] = 0.17780821f;
      sa[17] = 0.20120847f;
      sa[18] = -0.23472877f;
      sa[19] = 0.1418511f;
      sa[20] = 0.3027078f;
      sa[21] = -0.3124589f;
      sa[22] = 0.27450213f;
      sa[23] = -0.11100539f;
      sa[24] = 0.36275813f;
      sa[25] = 0.16280836f;
      sa[26] = -0.28422695f;
      sa[27] = 0.26471132f;
      sa[28] = 0.30971557f;
      sa[29] = -0.2883105f;
      sa[30] = -0.1742306f;
      sa[31] = 0.24124825f;
      sa[32] = 0.34271872f;
      sa[33] = -0.30993238f;
      sa[34] = 0.08512356f;
      sa[35] = -0.071717195f;
      sa[36] = 0.102829024f;
      sa[37] = 0.34494904f;
      sa[38] = -0.017076649f;
      sa[39] = 0.26299876f;
      sa[40] = -0.0023237085f;
      sa[41] = -0.10504237f;
      sa[42] = -0.16445872f;
      sa[43] = 0.09180312f;
      sa[44] = 0.27322f;
      sa[45] = -0.1743157f;
      sa[46] = 0.09707369f;
      sa[47] = -0.054678284f;
      sa[48] = 0.27632177f;
      sa[49] = 0.28516358f;
      sa[50] = 0.25530183f;
      sa[51] = -0.24250562f;
      sa[52] = -0.024430452f;
      sa[53] = 0.32876974f;
      sa[54] = 0.19212855f;
      sa[55] = 0.15186886f;
      sa[56] = -0.15284193f;
      sa[57] = -0.32589728f;
      sa[58] = 0.3066571f;
      sa[59] = -0.128244f;
      sa[60] = -0.28940526f;
      sa[61] = 0.21911664f;
      sa[62] = 0.09768848f;
      sa[63] = 0.09378152f;
      sa[64] = 0.16049725f;
      sa[65] = 0.11539067f;
      sa[66] = 0.005985662f;
      sa[67] = 0.18494406f;
      sa[68] = 0.0021936072f;
      sa[69] = 0.1402704f;
      sa[70] = -0.06466307f;
      sa[71] = 0.42458147f;
      sa[72] = -0.13992433f;
      sa[73] = 0.12267206f;
      sa[74] = -0.25344163f;
      sa[75] = -0.03298188f;
      sa[76] = -0.1636381f;
      sa[77] = -0.029466432f;
      sa[78] = -0.03176791f;
      sa[79] = 0.1745424f;
      sa[80] = -0.23202837f;
      sa[81] = -0.20973814f;
      sa[82] = -0.097179756f;
      sa[83] = 0.12219332f;
      sa[84] = -0.012141169f;
      sa[85] = -0.16647075f;
      sa[86] = 0.19499251f;
      sa[87] = 0.2750586f;
      sa[88] = 0.18577494f;
      sa[89] = -0.08052101f;
      sa[90] = -0.10706752f;
      sa[91] = 0.13766351f;
      sa[92] = 0.114753686f;
      sa[93] = -0.18947002f;
      sa[94] = -0.16442363f;
      sa[95] = -0.2665028f;
      sa[96] = 0.1043851f;
      sa[97] = 0.0176312f;
      sa[98] = 0.2479198f;
      sa[99] = -0.08022166f;
      sa[100] = -0.0564293f;
      sa[101] = -0.15489817f;
      sa[102] = -0.24834175f;
      sa[103] = -0.08769183f;
      sa[104] = -0.082850985f;
      sa[105] = -0.103703484f;
      sa[106] = -0.26573002f;
      sa[107] = 0.085340045f;
      sa[108] = 0.16852088f;
      sa[109] = -0.2558112f;
      sa[110] = -0.18368179f;
      sa[111] = 0.19507065f;
      sa[112] = 0.14038955f;
      sa[113] = 0.030688604f;
      sa[114] = -0.1854874f;
      sa[115] = -0.1075057f;
      sa[116] = -0.26294485f;
      sa[117] = -0.06771318f;
      sa[118] = -0.30097127f;
      sa[119] = -0.16822314f;
      sa[120] = 0.20579314f;
      sa[121] = 0.22783487f;
      sa[122] = 0.27114204f;
      sa[123] = 0.21603322f;
      sa[124] = 0.27753884f;
      sa[125] = 0.24064746f;
      sa[126] = -0.27628365f;
      sa[127] = -0.2600047f;
      sa[128] = 0.05500437f;
      sa[129] = 0.16438448f;
      sa[130] = -0.15313828f;
      sa[131] = 0.277701f;
      sa[132] = 0.21663561f;
      sa[133] = -0.3374799f;
      sa[134] = 0.12187917f;
      sa[135] = -0.3173464f;
      sa[136] = -0.30605805f;
      sa[137] = -0.031647738f;
      sa[138] = 0.1267761f;
      sa[139] = -0.12763694f;
      sa[140] = -0.103918456f;
      sa[141] = -0.18088995f;
      sa[142] = 0.1233562f;
      sa[143] = -0.3140564f;
      sa[144] = 0.31412855f;
      sa[145] = -0.16418126f;
      sa[146] = -0.25139004f;
      sa[147] = 0.21607865f;
      sa[148] = 0.19848691f;
      sa[149] = 0.20438766f;
      sa[150] = 0.31824043f;
      sa[151] = -0.2775536f;
      sa[152] = 0.09501347f;
      sa[153] = 0.26040655f;
      sa[154] = 0.24518545f;
      sa[155] = -0.18687138f;
      sa[156] = 0.14184296f;
      sa[157] = -0.21650782f;
      sa[158] = 0.0720354f;
      sa[159] = 0.06630043f;
      sa[160] = 0.069118515f;
      sa[161] = 0.13206334f;
      sa[162] = -0.145731f;
      sa[163] = -0.14977889f;
      sa[164] = 0.2837324f;
      sa[165] = 9.630795E-4f;
      sa[166] = -0.049634945f;
      sa[167] = -0.12041483f;
      sa[168] = 0.1868064f;
      sa[169] = 0.32125527f;
      sa[170] = 0.05238255f;
      sa[171] = -0.1342898f;
      sa[172] = -0.050399955f;
      sa[173] = -0.14751258f;
      sa[174] = -0.014299265f;
      sa[175] = -0.2801577f;
      sa[176] = -0.056979835f;
      sa[177] = -0.1037286f;
      sa[178] = -0.13670048f;
      sa[179] = 0.057169806f;
      sa[180] = -0.084532715f;
      sa[181] = -0.28296062f;
      sa[182] = -0.17382944f;
      sa[183] = 0.15900981f;
      sa[184] = 0.30399093f;
      sa[185] = 0.1811456f;
      sa[186] = -0.3473992f;
      sa[187] = 0.02324809f;
      sa[188] = -0.04317667f;
      sa[189] = 0.21255164f;
      sa[190] = 0.012638077f;
      sa[191] = -0.0085620135f;
      sa[192] = -0.14196363f;
      sa[193] = 0.24671169f;
      sa[194] = 0.074449405f;
      sa[195] = 0.28851885f;
      sa[196] = 0.33029225f;
      sa[197] = -0.05027551f;
      sa[198] = 0.11510055f;
      sa[199] = -0.12224435f;
      sa[200] = 0.029096201f;
      sa[201] = -0.31058368f;
      sa[202] = 0.12552871f;
      sa[203] = -0.016029665f;
      sa[204] = -0.190536f;
      sa[205] = 0.21228532f;
      sa[206] = 0.24436478f;
      sa[207] = 0.13452348f;
      sa[208] = -0.2682433f;
      sa[209] = -0.07753343f;
      sa[210] = -0.3050481f;
      sa[211] = -0.2620577f;
      sa[212] = 0.35434517f;
      sa[213] = -0.21462294f;
      sa[214] = -0.052609976f;
      sa[215] = 0.012600728f;
      sa[216] = 0.055608597f;
      sa[217] = 0.18406883f;
      sa[218] = -0.1962406f;
      sa[219] = 0.16852707f;
      sa[220] = -0.18666555f;
      sa[221] = 0.09054584f;
      sa[222] = 0.2901051f;
      sa[223] = 0.033817574f;
      sa[224] = 0.08400864f;
      sa[225] = 0.24899693f;
      sa[226] = -0.322218f;
      sa[227] = 0.3715983f;
      sa[228] = 0.1489439f;
      sa[229] = 0.1256686f;
      sa[230] = 0.29225472f;
      sa[231] = -0.2752655f;
      sa[232] = -0.26272094f;
      sa[233] = -0.0095547475f;
      sa[234] = 0.15575425f;
      sa[235] = -0.4314962f;
      sa[236] = -0.016969634f;
      sa[237] = -0.20062034f;
      sa[238] = -0.2013716f;
      sa[239] = 0.15404671f;
      sa[240] = 0.019713571f;
      sa[241] = -0.29451394f;
      sa[242] = -0.083508454f;
      sa[243] = -0.29810897f;
      sa[244] = -0.19708869f;
      sa[245] = -0.096344076f;
      sa[246] = -0.25279933f;
      sa[247] = -0.038202316f;
      sa[248] = 0.19390988f;
      sa[249] = 0.3114791f;
      sa[250] = -0.26255235f;
      sa[251] = -0.2007539f;
      sa[252] = -0.35415956f;
      sa[253] = -0.3404987f;
      sa[254] = -0.24682452f;
      sa[255] = 0.15674843f;
      sa[256] = -0.1531567f;
      sa[257] = 0.3456138f;
      sa[258] = -0.22115138f;
      sa[259] = -0.11808288f;
      sa[260] = -0.28298843f;
      sa[261] = -0.11558547f;
      sa[262] = -0.1523918f;
      sa[263] = 0.23045468f;
      sa[264] = -0.14429052f;
      sa[265] = 0.09484832f;
      sa[266] = -0.26561216f;
      sa[267] = -0.25710052f;
      sa[268] = 0.0963805f;
      sa[269] = -0.17491364f;
      sa[270] = 0.02827772f;
      sa[271] = 0.23741461f;
      sa[272] = -0.09775573f;
      sa[273] = -0.12350272f;
      sa[274] = 0.1649402f;
      sa[275] = 8.292071E-4f;
      sa[276] = 0.13389418f;
      sa[277] = -0.25184715f;
      sa[278] = -0.100305475f;
      sa[279] = 0.2597976f;
      sa[280] = -0.17338073f;
      sa[281] = 0.32072f;
      sa[282] = -0.07561578f;
      sa[283] = -0.042504054f;
      sa[284] = -0.06156541f;
      sa[285] = -0.2524464f;
      sa[286] = 0.29060897f;
      sa[287] = 0.21777035f;
      sa[288] = -0.18274456f;
      sa[289] = -0.13715802f;
      sa[290] = -0.11459109f;
      sa[291] = 0.16626672f;
      sa[292] = 0.087579824f;
      sa[293] = -0.14726683f;
      sa[294] = 0.035681266f;
      sa[295] = 0.09699279f;
      sa[296] = 0.27169514f;
      sa[297] = 0.23219576f;
      sa[298] = -0.020585733f;
      sa[299] = 0.020526651f;
      sa[300] = -0.026776303f;
      sa[301] = -0.09597358f;
      sa[302] = 0.13961232f;
      sa[303] = 0.05219642f;
      sa[304] = -0.15493628f;
      sa[305] = -0.016610464f;
      sa[306] = 0.1859924f;
      sa[307] = -0.21942104f;
      sa[308] = 0.08549833f;
      sa[309] = 0.13480787f;
      sa[310] = 0.26983988f;
      sa[311] = 0.3465627f;
      sa[312] = -0.22919664f;
      sa[313] = -0.17857225f;
      sa[314] = -0.20058149f;
      sa[315] = -0.107307136f;
      sa[316] = -0.03449337f;
      sa[317] = -0.12011899f;
      sa[318] = 0.06750705f;
      sa[319] = 0.3140423f;
      sa[320] = 0.13841446f;
      sa[321] = 0.23125848f;
      sa[322] = 0.18736383f;
      sa[323] = -0.25981912f;
      sa[324] = 0.028599525f;
      sa[325] = 0.3434707f;
      sa[326] = -0.22492482f;
      sa[327] = 0.049567416f;
      sa[328] = -0.0998053f;
      sa[329] = 0.22910754f;
      sa[330] = -0.22457434f;
      sa[331] = 0.022974906f;
      sa[332] = -0.2224045f;
      sa[333] = 0.19947195f;
      sa[334] = -0.013849449f;
      sa[335] = 0.21235186f;
      sa[336] = -0.17509928f;
      sa[337] = -0.1950506f;
      sa[338] = 0.27602857f;
      sa[339] = -0.23993695f;
      sa[340] = -0.33663142f;
      sa[341] = -0.29490215f;
      sa[342] = 0.19837818f;
      sa[343] = -0.09712048f;
      sa[344] = -0.17367457f;
      sa[345] = 0.21385823f;
      sa[346] = 0.22576821f;
      sa[347] = -0.19562486f;
      sa[348] = 0.3522648f;
      sa[349] = -0.23519103f;
      sa[350] = -0.25249058f;
      sa[351] = 0.11479126f;
      sa[352] = 0.21229511f;
      sa[353] = -0.06865259f;
      sa[354] = 0.0706132f;
      sa[355] = 0.11657614f;
      sa[356] = -0.121847235f;
      sa[357] = 0.10401841f;
      sa[358] = -0.35213158f;
      sa[359] = 0.06093383f;
      sa[360] = 0.12163977f;
      sa[361] = -0.054674644f;
      sa[362] = -0.1337389f;
      sa[363] = 0.14067182f;
      sa[364] = -0.08568034f;
      sa[365] = -0.21327022f;
      sa[366] = 0.021882147f;
      sa[367] = -0.29878205f;
      sa[368] = -0.12609631f;
      sa[369] = 0.20488812f;
      sa[370] = -0.27248722f;
      sa[371] = 0.15130419f;
      sa[372] = -0.0115458965f;
      sa[373] = 0.31898767f;
      sa[374] = -0.18613882f;
      sa[375] = -0.3631991f;
      sa[376] = -0.3511878f;
      sa[377] = -0.383843f;
      sa[378] = 0.35220957f;
      sa[379] = -0.010631636f;
      sa[380] = -0.089498706f;
      sa[381] = -0.03980778f;
      sa[382] = 6.348688E-4f;
      sa[383] = -0.14903584f;
      sa[384] = -0.1530356f;
      sa[385] = 0.074303165f;
      sa[386] = -0.23099503f;
      sa[387] = -0.32644567f;
      sa[388] = 0.123773895f;
      sa[389] = 0.038580008f;
      sa[390] = 0.02257352f;
      sa[391] = -0.10846224f;
      sa[392] = 0.13907239f;
      sa[393] = 0.22385758f;
      sa[394] = -0.1951302f;
      sa[395] = 0.21259782f;
      sa[396] = 0.27546787f;
      sa[397] = -0.3331844f;
      sa[398] = 0.088610046f;
      sa[399] = -0.02604902f;
      sa[400] = 0.24207257f;
      sa[401] = 0.31956655f;
      sa[402] = -0.09985381f;
      sa[403] = 0.0892437f;
      sa[404] = 0.16425614f;
      sa[405] = -0.27910817f;
      sa[406] = -0.15541767f;
      sa[407] = 0.17414716f;
      sa[408] = -0.22607528f;
      sa[409] = -0.23612182f;
      sa[410] = -0.08959205f;
      sa[411] = 0.19182295f;
      sa[412] = -0.1790317f;
      sa[413] = 0.14976388f;
      sa[414] = 0.15739903f;
      sa[415] = 0.34281206f;
      sa[416] = -0.22673891f;
      sa[417] = 0.02822102f;
      sa[418] = 0.009486747f;
      sa[419] = 0.28068817f;
      sa[420] = 0.17877553f;
      sa[421] = 0.24048723f;
      sa[422] = 0.25149146f;
      sa[423] = 0.040976886f;
      sa[424] = 0.091901995f;
      sa[425] = -0.061431497f;
      sa[426] = -0.28856722f;
      sa[427] = 0.19732901f;
      sa[428] = -0.117644295f;
      sa[429] = -0.10351516f;
      sa[430] = 0.20597799f;
      sa[431] = -0.009050581f;
      sa[432] = -0.053773455f;
      sa[433] = 0.09839572f;
      sa[434] = 0.21703191f;
      sa[435] = -0.1482989f;
      sa[436] = -0.24309404f;
      sa[437] = -0.24227042f;
      sa[438] = 0.061891854f;
      sa[439] = 0.04059713f;
      sa[440] = 0.31818148f;
      sa[441] = -0.3302189f;
      sa[442] = 0.111421525f;
      sa[443] = 0.002394618f;
      sa[444] = -0.23628482f;
      sa[445] = 0.08679858f;
      sa[446] = 0.28595495f;
      sa[447] = 0.04033944f;
      sa[448] = 0.16007453f;
      sa[449] = 0.25097036f;
      sa[450] = -0.07145494f;
      sa[451] = 0.12475748f;
      sa[452] = 0.17309792f;
      sa[453] = -0.04668299f;
      sa[454] = -0.15344459f;
      sa[455] = -0.13293965f;
      sa[456] = -0.08852528f;
      sa[457] = 0.12633507f;
      sa[458] = -0.21432184f;
      sa[459] = 0.3636834f;
      sa[460] = 0.22689326f;
      sa[461] = 0.31432298f;
      sa[462] = 0.06839529f;
      sa[463] = 0.20123516f;
      sa[464] = -0.50072664f;
      sa[465] = 0.21871428f;
      sa[466] = -0.02732301f;
      sa[467] = 0.13156918f;
      sa[468] = 0.16752471f;
      sa[469] = 0.35860074f;
      sa[470] = 0.28944215f;
      sa[471] = 0.098753475f;
      sa[472] = -0.0033714976f;
      sa[473] = -0.13214308f;
      sa[474] = 0.003052763f;
      sa[475] = 0.23419659f;
      sa[476] = 0.34570965f;
      sa[477] = -0.091010794f;
      sa[478] = 0.1981498f;
      sa[479] = -0.20778733f;
      sa[480] = -0.27636424f;
      sa[481] = -0.21294655f;
      sa[482] = -0.21646686f;
      sa[483] = 0.30477297f;
      sa[484] = 0.25131294f;
      sa[485] = 0.14689386f;
      sa[486] = -0.025865618f;
      sa[487] = -0.2009916f;
      sa[488] = -0.16021214f;
      sa[489] = 0.12053075f;
      sa[490] = 0.05378728f;
      sa[491] = -0.2167003f;
      sa[492] = 0.21816362f;
      sa[493] = 0.31985036f;
      sa[494] = -0.26931533f;
      sa[495] = 0.18209167f;
      sa[496] = 0.022622213f;
      sa[497] = 0.07701743f;
      sa[498] = 0.17885722f;
      sa[499] = 0.20854636f;
      sa[500] = -0.00829149f;
      sa[501] = 0.033745572f;
      sa[502] = 0.1969745f;
      sa[503] = 0.034014046f;
      sa[504] = -0.31240812f;
      sa[505] = -0.26619676f;
      sa[506] = 0.22703187f;
      sa[507] = -0.02965612f;
      sa[508] = 0.1350592f;
      sa[509] = 0.2716319f;
      sa[510] = 0.22443172f;
      sa[511] = -0.05965542f;
      sa[512] = -0.0118409395f;
      sa[513] = -0.12853752f;
      sa[514] = 0.2384559f;
      sa[515] = -0.27258947f;
      sa[516] = 0.04246801f;
      sa[517] = 0.12708503f;
      sa[518] = 0.17405175f;
      sa[519] = -0.09224122f;
      sa[520] = 0.23512112f;
      sa[521] = 0.15617424f;
      sa[522] = 0.09820076f;
      sa[523] = 0.23195305f;
      sa[524] = 0.1946878f;
      sa[525] = 0.16769409f;
      sa[526] = 0.001230872f;
      sa[527] = -0.07444473f;
      sa[528] = 0.03974477f;
      sa[529] = 0.09954273f;
      sa[530] = -0.18295087f;
      sa[531] = 0.064248964f;
      sa[532] = 0.16222084f;
      sa[533] = 0.14021903f;
      sa[534] = 0.16378929f;
      sa[535] = -0.07370505f;
      sa[536] = 0.111416884f;
      sa[537] = -0.22327636f;
      sa[538] = 0.26156038f;
      sa[539] = 0.35036153f;
      sa[540] = -0.27889016f;
      sa[541] = -0.19197096f;
      sa[542] = -0.032890785f;
      sa[543] = -0.3958554f;
      sa[544] = 0.20453574f;
      sa[545] = 0.14213955f;
      sa[546] = 0.1280896f;
      sa[547] = 0.22757009f;
      sa[548] = 0.08418338f;
      sa[549] = 0.16072975f;
      sa[550] = 0.0013690867f;
      sa[551] = -0.17688164f;
      sa[552] = 0.06342552f;
      sa[553] = -0.047308322f;
      sa[554] = -0.15416816f;
      sa[555] = -0.1816493f;
      sa[556] = -0.22737353f;
      sa[557] = -0.30751282f;
      sa[558] = -0.19486627f;
      sa[559] = 0.13619183f;
      sa[560] = -0.31239337f;
      sa[561] = -0.06409087f;
      sa[562] = 0.25803939f;
      sa[563] = -0.10427301f;
      sa[564] = 0.30722192f;
      sa[565] = 0.04771278f;
      sa[566] = 0.3051813f;
      sa[567] = 0.037784092f;
      sa[568] = -0.06829932f;
      sa[569] = 0.051070727f;
      sa[570] = -0.0015201975f;
      sa[571] = -0.07841885f;
      sa[572] = -0.2786444f;
      sa[573] = -0.010484105f;
      sa[574] = 0.25569126f;
      sa[575] = -0.20980786f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_01_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_01_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.39552292f;
      sa[1] = -0.018464379f;
      sa[2] = -0.15710068f;
      sa[3] = -0.27013218f;
      sa[4] = 0.1290628f;
      sa[5] = 0.15042147f;
      sa[6] = 0.24015178f;
      sa[7] = -0.13904507f;
      sa[8] = -0.330987f;
      sa[9] = 0.09234196f;
      sa[10] = -0.12698832f;
      sa[11] = 0.11254217f;
      sa[12] = 0.1978618f;
      sa[13] = 0.060597267f;
      sa[14] = -0.20312345f;
      sa[15] = 0.3854883f;
      sa[16] = 0.37029448f;
      sa[17] = -0.12786241f;
      sa[18] = 0.030618412f;
      sa[19] = -0.07328564f;
      sa[20] = 0.2367595f;
      sa[21] = -0.061624806f;
      sa[22] = -0.28814304f;
      sa[23] = 0.27870515f;
      sa[24] = -0.38698834f;
      sa[25] = 0.148422f;
      sa[26] = -0.048512034f;
      sa[27] = 0.4279158f;
      sa[28] = -0.3933086f;
      sa[29] = -0.17569715f;
      sa[30] = 0.13241184f;
      sa[31] = -0.11444181f;
      sa[32] = -0.38874322f;
      sa[33] = -0.40972906f;
      sa[34] = 0.0130704325f;
      sa[35] = 0.37362197f;
      sa[36] = -0.18430492f;
      sa[37] = -0.068892024f;
      sa[38] = 0.019867953f;
      sa[39] = 0.29444924f;
      sa[40] = -0.24746834f;
      sa[41] = -0.30828238f;
      sa[42] = -0.26757777f;
      sa[43] = -0.339026f;
      sa[44] = 0.030503696f;
      sa[45] = -0.40331355f;
      sa[46] = 0.34833813f;
      sa[47] = 0.4604527f;
      sa[48] = -0.47092065f;
      sa[49] = -0.28156275f;
      sa[50] = 0.052126702f;
      sa[51] = -0.121305615f;
      sa[52] = 0.093611486f;
      sa[53] = 0.18149915f;
      sa[54] = -0.09493383f;
      sa[55] = 0.29840264f;
      sa[56] = -0.22727685f;
      sa[57] = -0.26003736f;
      sa[58] = 0.029147545f;
      sa[59] = -0.028980711f;
      sa[60] = 0.40868688f;
      sa[61] = -0.22363135f;
      sa[62] = -0.08291153f;
      sa[63] = 0.27066782f;
      sa[64] = 0.36110026f;
      sa[65] = -0.19049376f;
      sa[66] = 0.16010761f;
      sa[67] = 0.38928318f;
      sa[68] = 0.18755452f;
      sa[69] = -0.27533147f;
      sa[70] = -0.4426153f;
      sa[71] = -0.12729365f;
      sa[72] = -0.37735105f;
      sa[73] = 0.32233498f;
      sa[74] = 0.33984396f;
      sa[75] = 0.019675633f;
      sa[76] = 0.1851974f;
      sa[77] = 0.094882704f;
      sa[78] = -0.3430158f;
      sa[79] = 0.33227202f;
      sa[80] = -0.20414035f;
      sa[81] = 0.08641606f;
      sa[82] = 0.20213023f;
      sa[83] = -0.158575f;
      sa[84] = -0.41282445f;
      sa[85] = -0.3461621f;
      sa[86] = 0.07765044f;
      sa[87] = 0.32495287f;
      sa[88] = -0.3567267f;
      sa[89] = -0.13970211f;
      sa[90] = -0.2840308f;
      sa[91] = 0.389107f;
      sa[92] = -0.014615098f;
      sa[93] = 0.105635285f;
      sa[94] = -0.40556878f;
      sa[95] = -0.077621676f;
      sa[96] = -0.375649f;
      sa[97] = 0.02442479f;
      sa[98] = -0.023754142f;
      sa[99] = 0.08060046f;
      sa[100] = -0.46137437f;
      sa[101] = -0.14277998f;
      sa[102] = 0.30091277f;
      sa[103] = 0.080480486f;
      sa[104] = -0.09106858f;
      sa[105] = -0.11712665f;
      sa[106] = 0.35593185f;
      sa[107] = 0.33223206f;
      sa[108] = 0.26988292f;
      sa[109] = -0.0076373476f;
      sa[110] = 0.24483776f;
      sa[111] = -0.08840467f;
      sa[112] = -0.3939589f;
      sa[113] = 0.033036865f;
      sa[114] = -0.0015917971f;
      sa[115] = -0.13733114f;
      sa[116] = 0.3380837f;
      sa[117] = 0.012535453f;
      sa[118] = -0.37663656f;
      sa[119] = -0.25936115f;
      sa[120] = -0.041958567f;
      sa[121] = 0.3037078f;
      sa[122] = -0.048248835f;
      sa[123] = 0.07512043f;
      sa[124] = -0.114007115f;
      sa[125] = 0.16775535f;
      sa[126] = -0.25074348f;
      sa[127] = 0.21684508f;
      sa[128] = -0.32473525f;
      sa[129] = 0.17310786f;
      sa[130] = -0.09717807f;
      sa[131] = 0.23802969f;
      sa[132] = -0.09000675f;
      sa[133] = 0.06090309f;
      sa[134] = 0.2829866f;
      sa[135] = -0.31245336f;
      sa[136] = 0.20219518f;
      sa[137] = -0.054408595f;
      sa[138] = 0.06950706f;
      sa[139] = 0.30997136f;
      sa[140] = -0.243874f;
      sa[141] = -0.053899623f;
      sa[142] = -0.112538114f;
      sa[143] = -0.28253025f;
      sa[144] = 0.3080956f;
      sa[145] = -0.1890639f;
      sa[146] = 0.029515384f;
      sa[147] = 0.0014555571f;
      sa[148] = -0.22357257f;
      sa[149] = 0.26043126f;
      sa[150] = -0.15739472f;
      sa[151] = -0.4459894f;
      sa[152] = 0.49732226f;
      sa[153] = -0.116230585f;
      sa[154] = 0.4312968f;
      sa[155] = -0.44535077f;
      sa[156] = -0.44306368f;
      sa[157] = -0.22885492f;
      sa[158] = -0.14337498f;
      sa[159] = -0.35732308f;
      sa[160] = 0.19051835f;
      sa[161] = -0.31159872f;
      sa[162] = 0.37800008f;
      sa[163] = -0.19598307f;
      sa[164] = -0.0489826f;
      sa[165] = -0.26502976f;
      sa[166] = 0.43914095f;
      sa[167] = -0.41296196f;
      sa[168] = 0.3628059f;
      sa[169] = -0.28017765f;
      sa[170] = 0.38870937f;
      sa[171] = 0.23330972f;
      sa[172] = 0.36553448f;
      sa[173] = 0.30955237f;
      sa[174] = -0.17338178f;
      sa[175] = 0.0019819292f;
      sa[176] = -0.15840046f;
      sa[177] = 0.05903991f;
      sa[178] = -0.29185483f;
      sa[179] = -0.10351229f;
      sa[180] = -0.3084228f;
      sa[181] = -0.19183347f;
      sa[182] = 0.10214401f;
      sa[183] = -0.31756726f;
      sa[184] = 0.4254905f;
      sa[185] = 0.29087096f;
      sa[186] = -0.14397481f;
      sa[187] = -0.29208252f;
      sa[188] = -0.092235714f;
      sa[189] = -0.14517115f;
      sa[190] = -0.40864944f;
      sa[191] = -0.35493952f;
      sa[192] = -0.028917229f;
      sa[193] = 0.11509472f;
      sa[194] = -0.28765517f;
      sa[195] = -0.24395663f;
      sa[196] = 0.17408241f;
      sa[197] = -0.2342858f;
      sa[198] = 0.04917895f;
      sa[199] = 0.3621696f;
      sa[200] = 0.008261618f;
      sa[201] = 0.28078327f;
      sa[202] = 0.19807257f;
      sa[203] = -0.39726776f;
      sa[204] = 0.053347874f;
      sa[205] = 0.37540117f;
      sa[206] = -0.18824057f;
      sa[207] = 0.08921548f;
      sa[208] = -0.19324012f;
      sa[209] = 0.19069482f;
      sa[210] = -0.13005307f;
      sa[211] = -0.29020682f;
      sa[212] = -0.2844672f;
      sa[213] = 0.09032657f;
      sa[214] = -0.3678353f;
      sa[215] = -0.073923886f;
      sa[216] = 0.13252461f;
      sa[217] = 0.30134717f;
      sa[218] = 0.003665479f;
      sa[219] = 0.08518863f;
      sa[220] = 0.23650168f;
      sa[221] = -0.009261953f;
      sa[222] = -0.23865141f;
      sa[223] = -0.27692124f;
      sa[224] = 0.34005702f;
      sa[225] = 0.09451837f;
      sa[226] = -0.035133023f;
      sa[227] = 0.080571584f;
      sa[228] = -0.047353864f;
      sa[229] = -0.18012503f;
      sa[230] = -0.25178483f;
      sa[231] = -0.10918044f;
      sa[232] = 0.42385897f;
      sa[233] = -0.21857545f;
      sa[234] = -0.1610882f;
      sa[235] = 0.021394787f;
      sa[236] = -0.28760377f;
      sa[237] = 0.46950656f;
      sa[238] = 0.21091206f;
      sa[239] = -0.14208524f;
      sa[240] = -0.06781074f;
      sa[241] = -0.39896113f;
      sa[242] = -0.20138392f;
      sa[243] = 0.42737427f;
      sa[244] = 0.09952323f;
      sa[245] = 0.26625094f;
      sa[246] = 0.25149027f;
      sa[247] = -0.28102794f;
      sa[248] = -0.20888706f;
      sa[249] = 0.047822323f;
      sa[250] = 0.29133153f;
      sa[251] = 0.43273354f;
      sa[252] = 0.09016737f;
      sa[253] = -0.31905192f;
      sa[254] = 0.3516802f;
      sa[255] = 0.06803472f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_01_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_Tanh_01_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.21406081f;
      sa[1] = -1.5774274f;
      sa[2] = -1.6609259f;
      sa[3] = 1.3303666f;
      sa[4] = 0.4345779f;
      sa[5] = -0.21307516f;
      sa[6] = -1.6208787f;
      sa[7] = 1.6124306f;
      sa[8] = 1.8561697f;
      sa[9] = 0.28631052f;
      sa[10] = 1.7309666f;
      sa[11] = 1.5490919f;
      sa[12] = 1.9526142f;
      sa[13] = -0.49487683f;
      sa[14] = -2.0231724f;
      sa[15] = -0.68966305f;
      sa[16] = 0.76319665f;
      sa[17] = -0.78683996f;
      sa[18] = -1.6650894f;
      sa[19] = -0.97661716f;
      sa[20] = -1.9599314f;
      sa[21] = 0.30908918f;
      sa[22] = -1.93387f;
      sa[23] = -0.8028028f;
      sa[24] = -0.50172657f;
      sa[25] = 1.9234366f;
      sa[26] = -0.22491768f;
      sa[27] = 1.236544f;
      sa[28] = 1.2295393f;
      sa[29] = -0.7789785f;
      sa[30] = 0.18504013f;
      sa[31] = 0.09597449f;
      sa[32] = 0.45637646f;
      sa[33] = 0.25227463f;
      sa[34] = -0.60072005f;
      sa[35] = 1.0502716f;
      sa[36] = 0.597816f;
      sa[37] = -1.2495986f;
      sa[38] = 0.68487227f;
      sa[39] = -0.21442938f;
      sa[40] = 0.23718153f;
      sa[41] = -0.739793f;
      sa[42] = 0.5046202f;
      sa[43] = 0.007435775f;
      sa[44] = 1.0494473f;
      sa[45] = -1.9287398f;
      sa[46] = -2.2156537f;
      sa[47] = 0.030917805f;
      sa[48] = 1.6158724f;
      sa[49] = -0.24559413f;
      sa[50] = -0.4318573f;
      sa[51] = 1.9928402f;
      sa[52] = -1.7071722f;
      sa[53] = 0.9195796f;
      sa[54] = 1.7833334f;
      sa[55] = 1.1320604f;
      sa[56] = -0.575803f;
      sa[57] = -0.11226296f;
      sa[58] = 0.995467f;
      sa[59] = 0.81206715f;
      sa[60] = -1.4030755f;
      sa[61] = 0.9190697f;
      sa[62] = -0.38868493f;
      sa[63] = -0.8102889f;
      sa[64] = 0.98230034f;
      sa[65] = -0.65329164f;
      sa[66] = -1.7455415f;
      sa[67] = 0.010789635f;
      sa[68] = 0.8844258f;
      sa[69] = -1.4185373f;
      sa[70] = -1.7944254f;
      sa[71] = 0.09444362f;
      sa[72] = -1.132362f;
      sa[73] = -1.2742547f;
      sa[74] = -1.2021477f;
      sa[75] = 0.9944969f;
      sa[76] = 1.8083217f;
      sa[77] = -0.7238177f;
      sa[78] = -1.317798f;
      sa[79] = -0.38559797f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_01 implements java.io.Serializable {
  public static final String[] VALUES = new String[36];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_01_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_01_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X1";
      sa[1] = "X2";
      sa[2] = "X3";
      sa[3] = "X4";
      sa[4] = "X5";
      sa[5] = "X6";
      sa[6] = "X7";
      sa[7] = "X8";
      sa[8] = "X9";
      sa[9] = "X10";
      sa[10] = "X11";
      sa[11] = "X12";
      sa[12] = "X13";
      sa[13] = "X14";
      sa[14] = "X15";
      sa[15] = "X16";
      sa[16] = "X17";
      sa[17] = "X18";
      sa[18] = "X19";
      sa[19] = "X20";
      sa[20] = "X21";
      sa[21] = "X22";
      sa[22] = "X23";
      sa[23] = "X24";
      sa[24] = "X25";
      sa[25] = "X26";
      sa[26] = "X27";
      sa[27] = "X28";
      sa[28] = "X29";
      sa[29] = "X30";
      sa[30] = "X31";
      sa[31] = "X32";
      sa[32] = "X33";
      sa[33] = "X34";
      sa[34] = "X35";
      sa[35] = "X36";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_01_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_Tanh_01_ColInfo_36_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


