/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:41:55.810+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_32x6_Tanh_05

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_32x6_Tanh_05 > h2o_nn_32x6_Tanh_05.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_32x6_Tanh_05.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_32x6_Tanh_05", algorithm="deeplearning")
public class h2o_nn_32x6_Tanh_05 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,32,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_32x6_Tanh_05_Activation_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_05_Activation_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_05_Activation_2.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_32x6_Tanh_05_Bias_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_05_Bias_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_05_Bias_2.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_32x6_Tanh_05_Weight_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_05_Weight_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_05_Weight_2.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_32x6_Tanh_05.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_32x6_Tanh_05_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.29347826086956524,0.13043478260869565,0.14130434782608695,0.29347826086956524,0.14130434782608695};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_32x6_Tanh_05() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(1450700429892536704L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_32x6_Tanh_05_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_32x6_Tanh_05_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_05_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_32x6_Tanh_05_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_Tanh_05_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_05_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_32x6_Tanh_05_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_32x6_Tanh_05_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_05_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_32x6_Tanh_05_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_32x6_Tanh_05_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_Tanh_05_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_05_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.057061748158488274;
      sa[1] = 0.01967412292131488;
      sa[2] = -0.09041475172195146;
      sa[3] = -0.13010035325607638;
      sa[4] = 0.0032265395616107788;
      sa[5] = 0.04197676910081081;
      sa[6] = 0.04116487822862002;
      sa[7] = -0.0469426969167935;
      sa[8] = -0.06564756760882282;
      sa[9] = 0.07848887969316237;
      sa[10] = -0.01566883697114885;
      sa[11] = 0.02622633016723249;
      sa[12] = 0.027382464673112353;
      sa[13] = 0.07322591111196337;
      sa[14] = -0.05808429048501852;
      sa[15] = 0.036687299104400446;
      sa[16] = 0.10125807519406822;
      sa[17] = -0.005538643780602999;
      sa[18] = -0.04985587275125777;
      sa[19] = -0.04407110061529831;
      sa[20] = 0.08710382776106552;
      sa[21] = -0.05478165217609848;
      sa[22] = -0.03210485359641966;
      sa[23] = 0.012969453740636093;
      sa[24] = -0.10664010815794633;
      sa[25] = 0.06219569692588544;
      sa[26] = -0.0661291566875232;
      sa[27] = 0.06718998811215716;
      sa[28] = -0.06684727610079234;
      sa[29] = 0.044353713920430006;
      sa[30] = 0.08202914506018791;
      sa[31] = -0.015965950446416185;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_32x6_Tanh_05_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_32x6_Tanh_05_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_05_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.1384356538600623;
      sa[1] = -0.10124562797279207;
      sa[2] = -0.05129425236675978;
      sa[3] = -0.018456635029828247;
      sa[4] = -0.15476509927515975;
    }
  }
}
class h2o_nn_32x6_Tanh_05_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_32x6_Tanh_05_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[416];
  static {
    h2o_nn_32x6_Tanh_05_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_05_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.069019146f;
      sa[1] = 0.29508764f;
      sa[2] = 0.19791426f;
      sa[3] = 0.14060172f;
      sa[4] = -0.2404431f;
      sa[5] = -0.22105877f;
      sa[6] = 0.03030353f;
      sa[7] = 0.2756837f;
      sa[8] = 0.14892863f;
      sa[9] = -0.18856834f;
      sa[10] = -0.2487163f;
      sa[11] = -0.20532374f;
      sa[12] = -0.005344946f;
      sa[13] = -0.31767878f;
      sa[14] = -0.25156972f;
      sa[15] = -0.044918947f;
      sa[16] = 0.11642868f;
      sa[17] = 0.05752248f;
      sa[18] = -0.21829204f;
      sa[19] = 0.21625726f;
      sa[20] = 0.2788755f;
      sa[21] = -0.37799466f;
      sa[22] = 0.33769193f;
      sa[23] = -0.0916993f;
      sa[24] = 0.27694938f;
      sa[25] = 0.31798965f;
      sa[26] = -0.34148687f;
      sa[27] = 0.39289397f;
      sa[28] = 0.29476166f;
      sa[29] = -0.2363537f;
      sa[30] = -0.11155111f;
      sa[31] = 0.057076253f;
      sa[32] = 0.31318542f;
      sa[33] = -0.36187127f;
      sa[34] = 0.12806974f;
      sa[35] = -0.15100627f;
      sa[36] = 0.043046355f;
      sa[37] = 0.29111663f;
      sa[38] = -0.10270994f;
      sa[39] = 0.2071772f;
      sa[40] = 0.04222048f;
      sa[41] = -0.08267163f;
      sa[42] = -0.057830136f;
      sa[43] = 0.1650565f;
      sa[44] = 0.19441174f;
      sa[45] = -0.19459201f;
      sa[46] = 0.026875643f;
      sa[47] = 0.03248942f;
      sa[48] = 0.20411593f;
      sa[49] = 0.3406942f;
      sa[50] = 0.18688253f;
      sa[51] = -0.29934987f;
      sa[52] = -0.07234643f;
      sa[53] = 0.23422861f;
      sa[54] = 0.24306236f;
      sa[55] = 0.063537784f;
      sa[56] = -0.14117925f;
      sa[57] = -0.4034658f;
      sa[58] = 0.43932563f;
      sa[59] = -0.22252002f;
      sa[60] = -0.34133285f;
      sa[61] = 0.16646096f;
      sa[62] = 0.2524679f;
      sa[63] = -0.018811315f;
      sa[64] = 0.116857976f;
      sa[65] = 0.16100937f;
      sa[66] = -0.015959857f;
      sa[67] = 0.14071472f;
      sa[68] = -0.120484166f;
      sa[69] = 0.2231185f;
      sa[70] = -0.069914855f;
      sa[71] = 0.3174637f;
      sa[72] = -0.13437043f;
      sa[73] = 0.23649898f;
      sa[74] = -0.15491752f;
      sa[75] = 0.18693133f;
      sa[76] = -0.17535329f;
      sa[77] = -0.07801985f;
      sa[78] = -0.07238931f;
      sa[79] = 0.15351024f;
      sa[80] = -0.26502272f;
      sa[81] = -0.20855194f;
      sa[82] = -0.10200763f;
      sa[83] = 0.22979836f;
      sa[84] = -0.1472377f;
      sa[85] = -0.2045489f;
      sa[86] = 0.17668426f;
      sa[87] = 0.37137702f;
      sa[88] = 0.31199133f;
      sa[89] = 0.09420325f;
      sa[90] = -0.10529633f;
      sa[91] = 0.16852641f;
      sa[92] = 0.20858434f;
      sa[93] = -0.18576372f;
      sa[94] = -0.22656469f;
      sa[95] = -0.1846807f;
      sa[96] = 0.16098405f;
      sa[97] = -0.019458665f;
      sa[98] = 0.26345742f;
      sa[99] = -0.08835162f;
      sa[100] = -0.08495382f;
      sa[101] = -0.30122495f;
      sa[102] = -0.24931249f;
      sa[103] = -0.10764436f;
      sa[104] = -0.0138472915f;
      sa[105] = -0.18992066f;
      sa[106] = -0.3079314f;
      sa[107] = 0.18793707f;
      sa[108] = 0.2089264f;
      sa[109] = -0.2578134f;
      sa[110] = -0.20777568f;
      sa[111] = 0.17497864f;
      sa[112] = 0.12693498f;
      sa[113] = 0.050947953f;
      sa[114] = -0.02515854f;
      sa[115] = -0.10336676f;
      sa[116] = -0.15117037f;
      sa[117] = -0.020786671f;
      sa[118] = -0.32312688f;
      sa[119] = -0.22109625f;
      sa[120] = 0.22021815f;
      sa[121] = 0.18996426f;
      sa[122] = 0.3483888f;
      sa[123] = 0.39091516f;
      sa[124] = 0.3007942f;
      sa[125] = 0.3180988f;
      sa[126] = -0.3015921f;
      sa[127] = -0.25023597f;
      sa[128] = 0.08662693f;
      sa[129] = 0.12330139f;
      sa[130] = -0.17877825f;
      sa[131] = 0.33300844f;
      sa[132] = 0.17740852f;
      sa[133] = -0.33165467f;
      sa[134] = -0.009723225f;
      sa[135] = -0.27646288f;
      sa[136] = -0.2670804f;
      sa[137] = -0.05517959f;
      sa[138] = 0.115995705f;
      sa[139] = -0.108206466f;
      sa[140] = -0.06523696f;
      sa[141] = -0.2852857f;
      sa[142] = 0.35839668f;
      sa[143] = -0.34748617f;
      sa[144] = 0.27328244f;
      sa[145] = -0.19460918f;
      sa[146] = -0.33455393f;
      sa[147] = 0.083151676f;
      sa[148] = 0.25310695f;
      sa[149] = 0.23952034f;
      sa[150] = 0.33812374f;
      sa[151] = -0.31200927f;
      sa[152] = 0.091714844f;
      sa[153] = 0.40676543f;
      sa[154] = 0.22325198f;
      sa[155] = -0.1301809f;
      sa[156] = 0.121467546f;
      sa[157] = -0.19108382f;
      sa[158] = 0.11912232f;
      sa[159] = 0.04511447f;
      sa[160] = -0.1824223f;
      sa[161] = 0.25867984f;
      sa[162] = -0.18423139f;
      sa[163] = -0.13487007f;
      sa[164] = 0.28313667f;
      sa[165] = -0.041838214f;
      sa[166] = -0.1974699f;
      sa[167] = -0.18757138f;
      sa[168] = 0.25288472f;
      sa[169] = 0.34508935f;
      sa[170] = -0.0416873f;
      sa[171] = -0.07028744f;
      sa[172] = -0.12336703f;
      sa[173] = -0.33134228f;
      sa[174] = -0.0061420705f;
      sa[175] = -0.21730307f;
      sa[176] = -0.07965902f;
      sa[177] = -0.081835136f;
      sa[178] = -0.008698948f;
      sa[179] = 0.16436799f;
      sa[180] = -0.17160353f;
      sa[181] = -0.28371635f;
      sa[182] = -0.16025208f;
      sa[183] = 0.07781736f;
      sa[184] = 0.34681088f;
      sa[185] = 0.23355924f;
      sa[186] = -0.2999195f;
      sa[187] = 0.09932912f;
      sa[188] = -0.11386908f;
      sa[189] = 0.28099334f;
      sa[190] = 0.07610766f;
      sa[191] = -0.06386406f;
      sa[192] = -0.14618982f;
      sa[193] = 0.24218497f;
      sa[194] = 0.17417547f;
      sa[195] = 0.34574243f;
      sa[196] = 0.35947478f;
      sa[197] = -0.010003019f;
      sa[198] = 0.096040964f;
      sa[199] = -0.010689902f;
      sa[200] = 0.0028596863f;
      sa[201] = -0.35356086f;
      sa[202] = 0.1615622f;
      sa[203] = -0.010631602f;
      sa[204] = -0.23706736f;
      sa[205] = 0.13785806f;
      sa[206] = 0.3368731f;
      sa[207] = 0.05239926f;
      sa[208] = -0.3076269f;
      sa[209] = -0.15743646f;
      sa[210] = -0.385925f;
      sa[211] = -0.39737123f;
      sa[212] = 0.16821334f;
      sa[213] = -0.2786358f;
      sa[214] = -0.057339426f;
      sa[215] = 0.090847015f;
      sa[216] = 0.08070479f;
      sa[217] = 0.25718114f;
      sa[218] = -0.13575587f;
      sa[219] = 0.40297732f;
      sa[220] = -0.39778173f;
      sa[221] = 0.0014884786f;
      sa[222] = 0.244929f;
      sa[223] = 0.04931422f;
      sa[224] = 0.08200421f;
      sa[225] = 0.15282777f;
      sa[226] = -0.25557858f;
      sa[227] = 0.41345498f;
      sa[228] = 0.07830486f;
      sa[229] = 0.061975535f;
      sa[230] = 0.29658863f;
      sa[231] = -0.29600567f;
      sa[232] = -0.42556348f;
      sa[233] = 0.23911719f;
      sa[234] = 0.17614637f;
      sa[235] = -0.29091156f;
      sa[236] = -0.03035904f;
      sa[237] = -0.20680606f;
      sa[238] = -0.15905273f;
      sa[239] = 0.043433856f;
      sa[240] = 0.1255989f;
      sa[241] = -0.26593292f;
      sa[242] = -0.07437716f;
      sa[243] = -0.33451578f;
      sa[244] = -0.37112248f;
      sa[245] = -0.17912221f;
      sa[246] = -0.34708816f;
      sa[247] = -0.06851878f;
      sa[248] = 0.3055019f;
      sa[249] = 0.31568867f;
      sa[250] = -0.22446568f;
      sa[251] = -0.09520589f;
      sa[252] = -0.3172411f;
      sa[253] = -0.41896555f;
      sa[254] = -0.2843712f;
      sa[255] = 0.2280534f;
      sa[256] = -0.21061157f;
      sa[257] = 0.37893033f;
      sa[258] = -0.31447074f;
      sa[259] = -0.046227016f;
      sa[260] = -0.255708f;
      sa[261] = -0.09592568f;
      sa[262] = -0.1393022f;
      sa[263] = 0.19461487f;
      sa[264] = -0.2959193f;
      sa[265] = 0.19939026f;
      sa[266] = -0.53625655f;
      sa[267] = -0.26733825f;
      sa[268] = 0.15231562f;
      sa[269] = -0.12871024f;
      sa[270] = -0.18913232f;
      sa[271] = 0.2659216f;
      sa[272] = -0.15761098f;
      sa[273] = -0.14420785f;
      sa[274] = 0.12174282f;
      sa[275] = -0.0061053676f;
      sa[276] = 0.13512024f;
      sa[277] = -0.16301738f;
      sa[278] = -0.09733123f;
      sa[279] = 0.12098012f;
      sa[280] = -0.17877881f;
      sa[281] = 0.3288428f;
      sa[282] = -0.10645807f;
      sa[283] = 0.03994568f;
      sa[284] = 0.08816403f;
      sa[285] = -0.11289289f;
      sa[286] = 0.29153162f;
      sa[287] = 0.17326011f;
      sa[288] = -0.2062008f;
      sa[289] = -0.14246225f;
      sa[290] = -0.03311517f;
      sa[291] = -0.065589584f;
      sa[292] = 0.20996335f;
      sa[293] = -0.10773849f;
      sa[294] = 0.11380383f;
      sa[295] = 0.07120529f;
      sa[296] = 0.19338804f;
      sa[297] = 0.22956902f;
      sa[298] = -0.100484006f;
      sa[299] = -0.024438083f;
      sa[300] = 0.043963894f;
      sa[301] = -0.042659618f;
      sa[302] = 0.1734326f;
      sa[303] = 0.08044633f;
      sa[304] = -0.26951373f;
      sa[305] = -0.05620925f;
      sa[306] = 0.2381083f;
      sa[307] = -0.17307037f;
      sa[308] = 0.06026338f;
      sa[309] = 0.040486157f;
      sa[310] = 0.39109978f;
      sa[311] = 0.2116314f;
      sa[312] = -0.2791284f;
      sa[313] = -0.23807697f;
      sa[314] = -0.23400219f;
      sa[315] = 0.046611216f;
      sa[316] = 0.00844461f;
      sa[317] = -0.12941486f;
      sa[318] = 0.14530502f;
      sa[319] = 0.3070954f;
      sa[320] = -0.10017229f;
      sa[321] = 0.16925667f;
      sa[322] = 0.38626796f;
      sa[323] = -0.2737493f;
      sa[324] = 0.14583398f;
      sa[325] = 0.34268898f;
      sa[326] = -0.3374446f;
      sa[327] = 0.013762154f;
      sa[328] = -0.14655763f;
      sa[329] = 0.13220276f;
      sa[330] = -0.13614641f;
      sa[331] = -0.06110064f;
      sa[332] = -0.3149565f;
      sa[333] = 0.14221899f;
      sa[334] = -0.051748976f;
      sa[335] = 0.27493593f;
      sa[336] = -0.19791946f;
      sa[337] = -0.15173359f;
      sa[338] = 0.31553823f;
      sa[339] = -0.27590257f;
      sa[340] = -0.38188747f;
      sa[341] = -0.2416623f;
      sa[342] = 0.2883988f;
      sa[343] = -0.11173138f;
      sa[344] = -0.20147145f;
      sa[345] = 0.2512838f;
      sa[346] = 0.22424145f;
      sa[347] = -0.18939373f;
      sa[348] = 0.48655564f;
      sa[349] = -0.3329811f;
      sa[350] = -0.20450214f;
      sa[351] = 0.14535229f;
      sa[352] = 0.26839662f;
      sa[353] = -0.031958744f;
      sa[354] = 0.027666824f;
      sa[355] = 0.040796105f;
      sa[356] = -0.14922996f;
      sa[357] = 0.24269761f;
      sa[358] = -0.3471421f;
      sa[359] = 0.048939887f;
      sa[360] = 0.1237783f;
      sa[361] = -0.18165238f;
      sa[362] = -0.15515244f;
      sa[363] = 0.14748795f;
      sa[364] = -0.119279854f;
      sa[365] = -0.1707952f;
      sa[366] = 0.042905897f;
      sa[367] = -0.2769571f;
      sa[368] = -0.08019443f;
      sa[369] = 0.25930265f;
      sa[370] = -0.2698261f;
      sa[371] = 0.1390414f;
      sa[372] = 0.015422819f;
      sa[373] = 0.2988889f;
      sa[374] = -0.24065039f;
      sa[375] = -0.3023936f;
      sa[376] = -0.382657f;
      sa[377] = -0.25758964f;
      sa[378] = 0.36635095f;
      sa[379] = 0.09747518f;
      sa[380] = -0.17232896f;
      sa[381] = -0.20970729f;
      sa[382] = 0.008788463f;
      sa[383] = -0.15079974f;
      sa[384] = -0.19640039f;
      sa[385] = 0.12694056f;
      sa[386] = -0.2630937f;
      sa[387] = -0.31272396f;
      sa[388] = 0.030707454f;
      sa[389] = 0.08717236f;
      sa[390] = 0.02270473f;
      sa[391] = -0.10521479f;
      sa[392] = 0.28840497f;
      sa[393] = 0.15994611f;
      sa[394] = -0.09155142f;
      sa[395] = 0.4195211f;
      sa[396] = 0.21061972f;
      sa[397] = -0.2894379f;
      sa[398] = 0.1359382f;
      sa[399] = 0.18066393f;
      sa[400] = 0.21346685f;
      sa[401] = 0.45150337f;
      sa[402] = -0.3092791f;
      sa[403] = 0.098662145f;
      sa[404] = 0.34223035f;
      sa[405] = -0.21589811f;
      sa[406] = -0.07869547f;
      sa[407] = 0.22628899f;
      sa[408] = -0.21854918f;
      sa[409] = -0.37682092f;
      sa[410] = -0.11455073f;
      sa[411] = 0.24318653f;
      sa[412] = -0.17180242f;
      sa[413] = 0.02776292f;
      sa[414] = 0.1342393f;
      sa[415] = 0.3984326f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_32x6_Tanh_05_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[160];
  static {
    h2o_nn_32x6_Tanh_05_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_05_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 1.2031441f;
      sa[1] = -0.19301403f;
      sa[2] = -0.421929f;
      sa[3] = -0.8068478f;
      sa[4] = 0.046722487f;
      sa[5] = 0.14101087f;
      sa[6] = 1.3159822f;
      sa[7] = -0.5980714f;
      sa[8] = -0.91837424f;
      sa[9] = 0.5764871f;
      sa[10] = -0.27659467f;
      sa[11] = 0.58086056f;
      sa[12] = 0.034345444f;
      sa[13] = 0.2233186f;
      sa[14] = -1.2336452f;
      sa[15] = 1.1175641f;
      sa[16] = 1.7927452f;
      sa[17] = -0.5854648f;
      sa[18] = 0.10390675f;
      sa[19] = -0.51645225f;
      sa[20] = 1.3449175f;
      sa[21] = 0.043065783f;
      sa[22] = -0.9108583f;
      sa[23] = 0.73200876f;
      sa[24] = -1.5107311f;
      sa[25] = 0.4294265f;
      sa[26] = -0.21588196f;
      sa[27] = 1.4299246f;
      sa[28] = -1.3283981f;
      sa[29] = -0.42957622f;
      sa[30] = 0.52509904f;
      sa[31] = -0.73360854f;
      sa[32] = -1.1075346f;
      sa[33] = -1.5174708f;
      sa[34] = 0.058652505f;
      sa[35] = 1.3958153f;
      sa[36] = -0.36182627f;
      sa[37] = -0.044055603f;
      sa[38] = 0.11505701f;
      sa[39] = 0.7923417f;
      sa[40] = -0.6963131f;
      sa[41] = -1.3328626f;
      sa[42] = -1.0276688f;
      sa[43] = -1.4024897f;
      sa[44] = -0.016327074f;
      sa[45] = -1.3391659f;
      sa[46] = 1.2161049f;
      sa[47] = 1.4681842f;
      sa[48] = -1.2702506f;
      sa[49] = -1.0224643f;
      sa[50] = 0.40622613f;
      sa[51] = -0.2987283f;
      sa[52] = 0.87698895f;
      sa[53] = 0.91562295f;
      sa[54] = -0.27543625f;
      sa[55] = 1.1395618f;
      sa[56] = -1.1864048f;
      sa[57] = -1.1000338f;
      sa[58] = 0.18152763f;
      sa[59] = -0.19648345f;
      sa[60] = 1.3424484f;
      sa[61] = -0.52174807f;
      sa[62] = -0.36061376f;
      sa[63] = 0.7116951f;
      sa[64] = 1.5638276f;
      sa[65] = -0.6206163f;
      sa[66] = 0.6006324f;
      sa[67] = 1.4952139f;
      sa[68] = 0.9951932f;
      sa[69] = -0.86869985f;
      sa[70] = -1.7170719f;
      sa[71] = -0.43918994f;
      sa[72] = -1.227123f;
      sa[73] = 1.2427013f;
      sa[74] = 1.3433136f;
      sa[75] = -0.12764198f;
      sa[76] = 0.8787643f;
      sa[77] = 0.4690927f;
      sa[78] = -1.3937843f;
      sa[79] = 0.9418916f;
      sa[80] = -0.80234945f;
      sa[81] = 0.34779826f;
      sa[82] = 0.8921026f;
      sa[83] = -0.5245522f;
      sa[84] = -1.6422428f;
      sa[85] = -1.2416141f;
      sa[86] = 0.23174076f;
      sa[87] = 1.2450726f;
      sa[88] = -1.4885256f;
      sa[89] = -0.42529202f;
      sa[90] = -0.9866683f;
      sa[91] = 1.6377627f;
      sa[92] = -0.36349377f;
      sa[93] = 0.26909533f;
      sa[94] = -1.5898454f;
      sa[95] = -0.20391347f;
      sa[96] = -1.0864027f;
      sa[97] = 0.1909002f;
      sa[98] = -0.09174291f;
      sa[99] = 0.163088f;
      sa[100] = -1.2318298f;
      sa[101] = -0.50096154f;
      sa[102] = 1.35867f;
      sa[103] = 0.06029374f;
      sa[104] = -0.22925709f;
      sa[105] = -0.5565763f;
      sa[106] = 1.5426581f;
      sa[107] = 1.1367297f;
      sa[108] = 0.7780841f;
      sa[109] = 0.038652774f;
      sa[110] = 0.81821465f;
      sa[111] = -0.7463156f;
      sa[112] = -1.2016169f;
      sa[113] = 0.20437469f;
      sa[114] = 0.061735447f;
      sa[115] = -0.26497117f;
      sa[116] = 1.16737f;
      sa[117] = 0.031713538f;
      sa[118] = -1.3603882f;
      sa[119] = -0.74938613f;
      sa[120] = -0.24952061f;
      sa[121] = 0.9771838f;
      sa[122] = -0.21093136f;
      sa[123] = 0.4289759f;
      sa[124] = -0.70169747f;
      sa[125] = 0.80443984f;
      sa[126] = -1.0367464f;
      sa[127] = 0.6102379f;
      sa[128] = -0.9267749f;
      sa[129] = 0.92375135f;
      sa[130] = -0.46006313f;
      sa[131] = 0.8191865f;
      sa[132] = 0.52337384f;
      sa[133] = 0.71117955f;
      sa[134] = 0.6008013f;
      sa[135] = -1.2849146f;
      sa[136] = 0.5238616f;
      sa[137] = -0.51875895f;
      sa[138] = -0.11588044f;
      sa[139] = 1.0951784f;
      sa[140] = -0.4489707f;
      sa[141] = -0.17508607f;
      sa[142] = 0.25953642f;
      sa[143] = -0.7772415f;
      sa[144] = 0.82410055f;
      sa[145] = -0.6908702f;
      sa[146] = -0.035292804f;
      sa[147] = -0.32694393f;
      sa[148] = -0.98427933f;
      sa[149] = 1.0882627f;
      sa[150] = -1.108238f;
      sa[151] = -1.4748806f;
      sa[152] = 1.7751051f;
      sa[153] = -0.5269365f;
      sa[154] = 1.3436142f;
      sa[155] = -1.4859115f;
      sa[156] = -1.5300514f;
      sa[157] = -1.24161f;
      sa[158] = -0.26181096f;
      sa[159] = -0.56669426f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_32x6_Tanh_05 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_32x6_Tanh_05_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_32x6_Tanh_05_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_32x6_Tanh_05_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_32x6_Tanh_05_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_05_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


