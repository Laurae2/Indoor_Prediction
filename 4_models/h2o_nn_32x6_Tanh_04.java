/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:41:42.282+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_32x6_Tanh_04

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_32x6_Tanh_04 > h2o_nn_32x6_Tanh_04.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_32x6_Tanh_04.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_32x6_Tanh_04", algorithm="deeplearning")
public class h2o_nn_32x6_Tanh_04 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,32,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_32x6_Tanh_04_Activation_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_04_Activation_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_04_Activation_2.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_32x6_Tanh_04_Bias_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_04_Bias_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_04_Bias_2.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_32x6_Tanh_04_Weight_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_04_Weight_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_04_Weight_2.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_32x6_Tanh_04.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_32x6_Tanh_04_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.24528301886792453,0.12264150943396226,0.12264150943396226,0.1320754716981132,0.24528301886792453,0.1320754716981132};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_32x6_Tanh_04() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-8346757656308318916L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_32x6_Tanh_04_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_32x6_Tanh_04_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_04_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_32x6_Tanh_04_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_Tanh_04_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_04_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_32x6_Tanh_04_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_32x6_Tanh_04_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_04_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_32x6_Tanh_04_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_32x6_Tanh_04_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_Tanh_04_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_04_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.008099675314106753;
      sa[1] = 0.06050586280005981;
      sa[2] = -0.013032172601831732;
      sa[3] = -0.28236902081376003;
      sa[4] = -0.0863885654875759;
      sa[5] = 0.047401931239400556;
      sa[6] = 0.09124158277008887;
      sa[7] = 0.019505415239985006;
      sa[8] = 0.037795415961044965;
      sa[9] = 0.037629003047142645;
      sa[10] = 0.12552475089139253;
      sa[11] = 0.12734224496549307;
      sa[12] = 0.0823611287677607;
      sa[13] = 0.058365063971578104;
      sa[14] = -0.012222813315876001;
      sa[15] = -0.02100151700322872;
      sa[16] = -0.008638596523079745;
      sa[17] = 0.12789730793263723;
      sa[18] = -0.01469347386420735;
      sa[19] = 0.08559541488708756;
      sa[20] = 0.11052961151263334;
      sa[21] = -0.03605604929342658;
      sa[22] = -0.02566429282443503;
      sa[23] = 0.04186262269872974;
      sa[24] = -0.05206400271300544;
      sa[25] = 0.07396212648144544;
      sa[26] = -0.008084720753638712;
      sa[27] = 0.10333420514684892;
      sa[28] = -0.04819696730517628;
      sa[29] = 0.14418583919708902;
      sa[30] = -0.08398862537676127;
      sa[31] = 0.14455077421370963;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_32x6_Tanh_04_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_32x6_Tanh_04_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_04_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.031417019426513634;
      sa[1] = -0.1552646251233502;
      sa[2] = -0.08574245893050801;
      sa[3] = 0.14290065139985278;
      sa[4] = -0.21758172663856368;
      sa[5] = -0.09580236201379524;
    }
  }
}
class h2o_nn_32x6_Tanh_04_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_32x6_Tanh_04_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[416];
  static {
    h2o_nn_32x6_Tanh_04_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_04_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.06518513f;
      sa[1] = 0.23490395f;
      sa[2] = 0.17118025f;
      sa[3] = 0.107715115f;
      sa[4] = -0.34317005f;
      sa[5] = -0.13360469f;
      sa[6] = -0.0046158335f;
      sa[7] = 0.254495f;
      sa[8] = 0.15547076f;
      sa[9] = -0.13389859f;
      sa[10] = -0.14013238f;
      sa[11] = -0.07679858f;
      sa[12] = -0.06643541f;
      sa[13] = -0.3583088f;
      sa[14] = -0.1368046f;
      sa[15] = 0.04073372f;
      sa[16] = 0.029952848f;
      sa[17] = -0.05183227f;
      sa[18] = -0.12053612f;
      sa[19] = 0.35403684f;
      sa[20] = 0.2685978f;
      sa[21] = -0.3470102f;
      sa[22] = 0.33154285f;
      sa[23] = -0.47820097f;
      sa[24] = 0.07307499f;
      sa[25] = 0.37447047f;
      sa[26] = -0.22331981f;
      sa[27] = 0.43212092f;
      sa[28] = 0.19424835f;
      sa[29] = -0.10758859f;
      sa[30] = 0.05773013f;
      sa[31] = 0.014307326f;
      sa[32] = 0.21706285f;
      sa[33] = -0.33067754f;
      sa[34] = 0.12875938f;
      sa[35] = -0.16519208f;
      sa[36] = 0.43375108f;
      sa[37] = 0.5082883f;
      sa[38] = -0.14640129f;
      sa[39] = 0.19242343f;
      sa[40] = 0.48029873f;
      sa[41] = -0.16500813f;
      sa[42] = -0.09837176f;
      sa[43] = 0.1578648f;
      sa[44] = 0.23690768f;
      sa[45] = -0.49026713f;
      sa[46] = -0.008329953f;
      sa[47] = -0.041798603f;
      sa[48] = 0.20807244f;
      sa[49] = 0.15640798f;
      sa[50] = 0.2854268f;
      sa[51] = -0.26596388f;
      sa[52] = -0.04753557f;
      sa[53] = 0.32415578f;
      sa[54] = 0.16118006f;
      sa[55] = -0.17389306f;
      sa[56] = -0.48090664f;
      sa[57] = -0.15366662f;
      sa[58] = 0.09868008f;
      sa[59] = -0.26641533f;
      sa[60] = -0.31268218f;
      sa[61] = 0.23547572f;
      sa[62] = 0.17036323f;
      sa[63] = 0.09456868f;
      sa[64] = 0.16865969f;
      sa[65] = 0.10124697f;
      sa[66] = -0.2789041f;
      sa[67] = 0.13969465f;
      sa[68] = -0.2766484f;
      sa[69] = -0.10423077f;
      sa[70] = -0.0037342818f;
      sa[71] = 0.23132785f;
      sa[72] = -0.16361575f;
      sa[73] = 0.2810945f;
      sa[74] = -0.12868187f;
      sa[75] = -0.06883514f;
      sa[76] = -0.36137626f;
      sa[77] = 0.15237674f;
      sa[78] = -0.09766628f;
      sa[79] = -0.3611488f;
      sa[80] = -0.23345025f;
      sa[81] = -0.12419739f;
      sa[82] = -0.10854483f;
      sa[83] = 0.06661309f;
      sa[84] = 0.14983895f;
      sa[85] = -0.19116268f;
      sa[86] = 0.20771365f;
      sa[87] = 0.2695838f;
      sa[88] = 0.44789386f;
      sa[89] = -0.05756228f;
      sa[90] = 0.016514186f;
      sa[91] = 0.14691971f;
      sa[92] = 0.23651011f;
      sa[93] = -0.13832371f;
      sa[94] = -0.023762036f;
      sa[95] = -0.045097094f;
      sa[96] = 0.01591251f;
      sa[97] = 0.043768086f;
      sa[98] = 0.29526204f;
      sa[99] = -0.15310566f;
      sa[100] = -0.07974598f;
      sa[101] = -0.33016494f;
      sa[102] = -0.32607156f;
      sa[103] = -0.24843487f;
      sa[104] = 0.07905395f;
      sa[105] = -0.3423457f;
      sa[106] = -0.39124554f;
      sa[107] = 0.18549116f;
      sa[108] = 0.25184995f;
      sa[109] = -0.3113196f;
      sa[110] = -0.17072749f;
      sa[111] = 0.2276445f;
      sa[112] = 0.2416773f;
      sa[113] = -0.08136262f;
      sa[114] = 0.13373847f;
      sa[115] = -0.22729287f;
      sa[116] = 0.10695336f;
      sa[117] = -0.065324806f;
      sa[118] = -0.10712426f;
      sa[119] = -0.14176448f;
      sa[120] = 0.15825768f;
      sa[121] = 0.12816834f;
      sa[122] = 0.48364407f;
      sa[123] = 0.34752932f;
      sa[124] = 0.27048957f;
      sa[125] = 0.29987526f;
      sa[126] = -0.19074878f;
      sa[127] = -0.65240175f;
      sa[128] = 0.12831707f;
      sa[129] = -0.06633541f;
      sa[130] = -0.13413666f;
      sa[131] = 0.7530574f;
      sa[132] = 0.29037032f;
      sa[133] = -0.11885203f;
      sa[134] = 0.36665392f;
      sa[135] = -0.34835342f;
      sa[136] = 0.14135677f;
      sa[137] = 0.0043410254f;
      sa[138] = 0.12759684f;
      sa[139] = -0.18209231f;
      sa[140] = 7.273218E-4f;
      sa[141] = -0.269844f;
      sa[142] = 0.16726486f;
      sa[143] = -0.35604742f;
      sa[144] = 0.26397455f;
      sa[145] = -0.12404914f;
      sa[146] = -0.2867683f;
      sa[147] = 0.053849418f;
      sa[148] = 0.27137288f;
      sa[149] = 0.47611356f;
      sa[150] = 0.3503138f;
      sa[151] = -0.26196736f;
      sa[152] = 0.038381536f;
      sa[153] = 0.228419f;
      sa[154] = 0.049855974f;
      sa[155] = -0.007635447f;
      sa[156] = 0.20514522f;
      sa[157] = -0.22890386f;
      sa[158] = 0.13299596f;
      sa[159] = 0.36237472f;
      sa[160] = 0.3671322f;
      sa[161] = -0.0093834335f;
      sa[162] = 0.35565785f;
      sa[163] = -0.06312198f;
      sa[164] = 0.2641972f;
      sa[165] = -0.20992582f;
      sa[166] = 0.17092562f;
      sa[167] = 0.03608312f;
      sa[168] = -0.08265317f;
      sa[169] = 0.39795762f;
      sa[170] = -0.047360245f;
      sa[171] = -0.07766443f;
      sa[172] = -0.022883441f;
      sa[173] = -0.23611367f;
      sa[174] = 2.0579403E-4f;
      sa[175] = -0.05792227f;
      sa[176] = -0.07414597f;
      sa[177] = -0.03093874f;
      sa[178] = -0.034921836f;
      sa[179] = 0.38599473f;
      sa[180] = 0.028990556f;
      sa[181] = -0.37694913f;
      sa[182] = -0.13310283f;
      sa[183] = 0.0527501f;
      sa[184] = 0.3351443f;
      sa[185] = 0.28381607f;
      sa[186] = -0.20569848f;
      sa[187] = -0.001444217f;
      sa[188] = -0.07969408f;
      sa[189] = 0.2970206f;
      sa[190] = 0.0626709f;
      sa[191] = -0.13327764f;
      sa[192] = 0.0012606365f;
      sa[193] = 0.14831653f;
      sa[194] = 0.2940358f;
      sa[195] = 0.3615498f;
      sa[196] = 0.24315402f;
      sa[197] = -0.061884336f;
      sa[198] = 0.013626059f;
      sa[199] = -0.05899639f;
      sa[200] = 0.011298115f;
      sa[201] = -0.66018224f;
      sa[202] = 0.13873644f;
      sa[203] = -0.04210932f;
      sa[204] = -0.12784508f;
      sa[205] = 0.32331976f;
      sa[206] = 0.56442285f;
      sa[207] = -0.14467916f;
      sa[208] = -0.38058454f;
      sa[209] = -0.27822933f;
      sa[210] = -0.38689458f;
      sa[211] = -0.5056701f;
      sa[212] = -0.015243339f;
      sa[213] = -0.13948655f;
      sa[214] = -0.16519235f;
      sa[215] = 0.041185077f;
      sa[216] = 0.11375551f;
      sa[217] = 0.32409656f;
      sa[218] = -0.55464053f;
      sa[219] = 0.23587686f;
      sa[220] = -0.27219763f;
      sa[221] = 0.040494986f;
      sa[222] = 0.4552155f;
      sa[223] = 0.24094164f;
      sa[224] = 0.32152137f;
      sa[225] = 0.5200649f;
      sa[226] = -0.36914232f;
      sa[227] = 0.8547504f;
      sa[228] = 0.16264725f;
      sa[229] = 0.04454948f;
      sa[230] = 0.19641413f;
      sa[231] = -0.16948618f;
      sa[232] = -0.27017492f;
      sa[233] = -0.09225799f;
      sa[234] = 0.13145998f;
      sa[235] = 0.041738115f;
      sa[236] = 0.07836994f;
      sa[237] = -0.33117983f;
      sa[238] = -0.28041688f;
      sa[239] = 0.27895632f;
      sa[240] = -0.081848204f;
      sa[241] = -0.25004306f;
      sa[242] = -0.12478597f;
      sa[243] = -0.18563166f;
      sa[244] = -0.6422183f;
      sa[245] = -0.20054062f;
      sa[246] = -0.5181199f;
      sa[247] = -0.013350971f;
      sa[248] = 0.09060154f;
      sa[249] = 0.3572736f;
      sa[250] = -0.12785877f;
      sa[251] = 0.06728797f;
      sa[252] = -0.47753164f;
      sa[253] = -0.26330402f;
      sa[254] = -0.21499647f;
      sa[255] = 0.29246154f;
      sa[256] = -0.32248288f;
      sa[257] = 0.61493504f;
      sa[258] = -0.4650384f;
      sa[259] = 0.2299954f;
      sa[260] = -0.34447604f;
      sa[261] = -0.4956105f;
      sa[262] = -0.055414516f;
      sa[263] = 0.30940902f;
      sa[264] = -0.15773632f;
      sa[265] = -0.024964714f;
      sa[266] = -0.11100927f;
      sa[267] = -0.25926062f;
      sa[268] = 0.09099054f;
      sa[269] = -0.20014806f;
      sa[270] = -0.116930515f;
      sa[271] = 0.10243379f;
      sa[272] = -0.20826131f;
      sa[273] = -0.18994789f;
      sa[274] = 0.03497887f;
      sa[275] = -0.010208714f;
      sa[276] = 0.0064435597f;
      sa[277] = -0.33389547f;
      sa[278] = -0.08005776f;
      sa[279] = 0.098445304f;
      sa[280] = -0.1973219f;
      sa[281] = 0.33916777f;
      sa[282] = -0.12008457f;
      sa[283] = -0.1871056f;
      sa[284] = -0.111508355f;
      sa[285] = 0.062021986f;
      sa[286] = 0.37253973f;
      sa[287] = 0.20970912f;
      sa[288] = -0.29114842f;
      sa[289] = -0.12317215f;
      sa[290] = 0.11172405f;
      sa[291] = -0.04202087f;
      sa[292] = -0.09161342f;
      sa[293] = -0.10040037f;
      sa[294] = 0.12491255f;
      sa[295] = 0.11596974f;
      sa[296] = 0.52140385f;
      sa[297] = 0.44212282f;
      sa[298] = -0.13308655f;
      sa[299] = 0.0053027016f;
      sa[300] = 0.046079334f;
      sa[301] = -0.014093839f;
      sa[302] = 0.14382213f;
      sa[303] = 0.08967427f;
      sa[304] = -0.2689936f;
      sa[305] = -0.2375363f;
      sa[306] = 0.25502893f;
      sa[307] = -0.20476122f;
      sa[308] = 0.20139772f;
      sa[309] = 0.11821425f;
      sa[310] = 0.6109133f;
      sa[311] = -0.113201f;
      sa[312] = -0.2095148f;
      sa[313] = -0.24808702f;
      sa[314] = -0.32474223f;
      sa[315] = -0.0145168435f;
      sa[316] = -0.056661025f;
      sa[317] = -0.058902092f;
      sa[318] = 0.049448f;
      sa[319] = 0.3242764f;
      sa[320] = 0.010257541f;
      sa[321] = 0.089556426f;
      sa[322] = 0.44932905f;
      sa[323] = -0.3540707f;
      sa[324] = 0.4918103f;
      sa[325] = 0.25397664f;
      sa[326] = -0.6706412f;
      sa[327] = 0.07830311f;
      sa[328] = 0.07755406f;
      sa[329] = 0.30380702f;
      sa[330] = -0.3420991f;
      sa[331] = 0.66109794f;
      sa[332] = -0.3075136f;
      sa[333] = 0.121895075f;
      sa[334] = -0.15820095f;
      sa[335] = 0.47033074f;
      sa[336] = -0.24048282f;
      sa[337] = -0.23596561f;
      sa[338] = 0.31907845f;
      sa[339] = -0.43291646f;
      sa[340] = -0.38732243f;
      sa[341] = -0.3875623f;
      sa[342] = 0.1313566f;
      sa[343] = -0.030477326f;
      sa[344] = -0.35493693f;
      sa[345] = 0.24800822f;
      sa[346] = 0.28256026f;
      sa[347] = -0.20451282f;
      sa[348] = 0.32416466f;
      sa[349] = -0.50585145f;
      sa[350] = 0.031152852f;
      sa[351] = 0.08728866f;
      sa[352] = 0.30502996f;
      sa[353] = 0.10554251f;
      sa[354] = 0.102407746f;
      sa[355] = 0.11744867f;
      sa[356] = -0.18190788f;
      sa[357] = 0.4412003f;
      sa[358] = -0.34627247f;
      sa[359] = -0.025925452f;
      sa[360] = 0.18069765f;
      sa[361] = -0.28851935f;
      sa[362] = -0.10278263f;
      sa[363] = -0.15390466f;
      sa[364] = -0.084189944f;
      sa[365] = -0.20481355f;
      sa[366] = 0.008144152f;
      sa[367] = -0.18262357f;
      sa[368] = 0.056087144f;
      sa[369] = 0.18980025f;
      sa[370] = -0.39049545f;
      sa[371] = 0.17921051f;
      sa[372] = -0.011620846f;
      sa[373] = 0.27626047f;
      sa[374] = 0.23423404f;
      sa[375] = -0.15283142f;
      sa[376] = -0.4132843f;
      sa[377] = -0.26528558f;
      sa[378] = 0.54855543f;
      sa[379] = 0.22874296f;
      sa[380] = 0.16982941f;
      sa[381] = 0.20709461f;
      sa[382] = -0.20247519f;
      sa[383] = 0.3078405f;
      sa[384] = -0.143032f;
      sa[385] = 0.07869275f;
      sa[386] = -0.31504515f;
      sa[387] = -0.3040224f;
      sa[388] = 0.026247388f;
      sa[389] = -0.22375311f;
      sa[390] = -0.0899711f;
      sa[391] = -0.43866983f;
      sa[392] = 0.2912619f;
      sa[393] = 0.06331163f;
      sa[394] = -0.31242317f;
      sa[395] = 0.49746373f;
      sa[396] = 0.26518455f;
      sa[397] = -0.39698872f;
      sa[398] = 0.121771865f;
      sa[399] = 0.24432601f;
      sa[400] = -0.131927f;
      sa[401] = 0.23113751f;
      sa[402] = -0.16955365f;
      sa[403] = 0.14855811f;
      sa[404] = 0.45534357f;
      sa[405] = -0.15862118f;
      sa[406] = 0.12374239f;
      sa[407] = 0.41448152f;
      sa[408] = -0.39267275f;
      sa[409] = -0.33094934f;
      sa[410] = -0.047855485f;
      sa[411] = 0.22485858f;
      sa[412] = -0.19469135f;
      sa[413] = 0.11144235f;
      sa[414] = 0.13889962f;
      sa[415] = 0.22003946f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_32x6_Tanh_04_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[192];
  static {
    h2o_nn_32x6_Tanh_04_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_04_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 1.1968901f;
      sa[1] = -0.09766846f;
      sa[2] = -0.5350444f;
      sa[3] = -0.89633656f;
      sa[4] = 0.08230733f;
      sa[5] = 0.23967525f;
      sa[6] = 1.3065662f;
      sa[7] = -0.5624963f;
      sa[8] = -1.0059675f;
      sa[9] = 0.7022958f;
      sa[10] = -0.42142123f;
      sa[11] = 0.42718074f;
      sa[12] = 0.10684505f;
      sa[13] = 0.17595498f;
      sa[14] = -1.2648193f;
      sa[15] = 0.93940043f;
      sa[16] = 1.7733072f;
      sa[17] = -0.5605418f;
      sa[18] = 0.19912028f;
      sa[19] = -0.6697023f;
      sa[20] = 1.294828f;
      sa[21] = 0.13814838f;
      sa[22] = -1.0435497f;
      sa[23] = 0.66151357f;
      sa[24] = -1.4942735f;
      sa[25] = 0.5562887f;
      sa[26] = -0.19615154f;
      sa[27] = 1.4125392f;
      sa[28] = -1.2893953f;
      sa[29] = -0.5902553f;
      sa[30] = 0.61946106f;
      sa[31] = -0.8805257f;
      sa[32] = -1.243312f;
      sa[33] = -1.468019f;
      sa[34] = 0.04526009f;
      sa[35] = 1.4334818f;
      sa[36] = -0.34933075f;
      sa[37] = -0.16912903f;
      sa[38] = 0.13860717f;
      sa[39] = 0.5378214f;
      sa[40] = -0.47826058f;
      sa[41] = -1.3979006f;
      sa[42] = -0.99091613f;
      sa[43] = -1.4345417f;
      sa[44] = 0.06837465f;
      sa[45] = -1.3031615f;
      sa[46] = 1.1764504f;
      sa[47] = 1.6990603f;
      sa[48] = -1.2630669f;
      sa[49] = -1.0389769f;
      sa[50] = 0.26739225f;
      sa[51] = -0.23406059f;
      sa[52] = 0.8606284f;
      sa[53] = 0.7176111f;
      sa[54] = -0.06595477f;
      sa[55] = 1.4091549f;
      sa[56] = -1.0706127f;
      sa[57] = -1.0199133f;
      sa[58] = 0.22422378f;
      sa[59] = -0.2517594f;
      sa[60] = 1.3101239f;
      sa[61] = -0.6433484f;
      sa[62] = -0.44491065f;
      sa[63] = 0.84848404f;
      sa[64] = 1.4935905f;
      sa[65] = -0.72025394f;
      sa[66] = 0.8299264f;
      sa[67] = 1.7127634f;
      sa[68] = 0.73492086f;
      sa[69] = -1.1682812f;
      sa[70] = -1.699665f;
      sa[71] = -0.32437545f;
      sa[72] = -1.3682802f;
      sa[73] = 1.1360338f;
      sa[74] = 1.3952194f;
      sa[75] = 0.0049975053f;
      sa[76] = 0.7360226f;
      sa[77] = 0.5522271f;
      sa[78] = -1.2415042f;
      sa[79] = 1.1451803f;
      sa[80] = -0.70556504f;
      sa[81] = 0.31772158f;
      sa[82] = 0.886955f;
      sa[83] = -0.8190365f;
      sa[84] = -1.5991654f;
      sa[85] = -1.2178558f;
      sa[86] = 0.38987112f;
      sa[87] = 1.3112723f;
      sa[88] = -1.6611289f;
      sa[89] = -0.71683586f;
      sa[90] = -1.4527359f;
      sa[91] = 1.6996957f;
      sa[92] = -0.31481513f;
      sa[93] = 0.6039455f;
      sa[94] = -1.4934393f;
      sa[95] = -0.116849974f;
      sa[96] = -1.0160165f;
      sa[97] = 0.23484205f;
      sa[98] = -0.14267236f;
      sa[99] = 0.10201021f;
      sa[100] = -1.1122407f;
      sa[101] = -0.24160108f;
      sa[102] = 1.1511459f;
      sa[103] = 0.1494152f;
      sa[104] = 0.08664592f;
      sa[105] = -0.48383525f;
      sa[106] = 1.7730331f;
      sa[107] = 1.1520894f;
      sa[108] = 0.84580135f;
      sa[109] = -0.13496263f;
      sa[110] = 0.5788599f;
      sa[111] = -0.9404114f;
      sa[112] = -1.2741678f;
      sa[113] = 0.4711314f;
      sa[114] = -0.006505296f;
      sa[115] = -0.028762331f;
      sa[116] = 1.0525136f;
      sa[117] = 0.1511273f;
      sa[118] = -1.4623376f;
      sa[119] = -0.9013023f;
      sa[120] = -0.18796876f;
      sa[121] = 1.343911f;
      sa[122] = -0.03026731f;
      sa[123] = 0.69831294f;
      sa[124] = -0.8495607f;
      sa[125] = 0.90374166f;
      sa[126] = -1.145772f;
      sa[127] = 0.48367417f;
      sa[128] = -0.71109766f;
      sa[129] = 0.8149511f;
      sa[130] = -0.51406574f;
      sa[131] = 0.7876351f;
      sa[132] = 0.53909016f;
      sa[133] = 0.6384935f;
      sa[134] = 0.55884624f;
      sa[135] = -0.9484082f;
      sa[136] = 0.2821377f;
      sa[137] = -0.4817122f;
      sa[138] = 0.10511594f;
      sa[139] = 1.0270323f;
      sa[140] = -0.6281363f;
      sa[141] = -0.33615524f;
      sa[142] = 0.5532444f;
      sa[143] = -0.7813301f;
      sa[144] = 0.8480693f;
      sa[145] = -0.8943971f;
      sa[146] = 0.10653494f;
      sa[147] = -0.2678108f;
      sa[148] = -0.9932744f;
      sa[149] = 1.147355f;
      sa[150] = -1.3211921f;
      sa[151] = -1.6355985f;
      sa[152] = 1.6558026f;
      sa[153] = -0.9555906f;
      sa[154] = 1.2871753f;
      sa[155] = -1.5454764f;
      sa[156] = -1.401069f;
      sa[157] = -1.1469326f;
      sa[158] = -0.37531328f;
      sa[159] = -0.56740874f;
      sa[160] = 1.138083f;
      sa[161] = -1.0782716f;
      sa[162] = 1.582309f;
      sa[163] = -0.7245241f;
      sa[164] = 0.7588712f;
      sa[165] = -0.5450938f;
      sa[166] = 1.5600054f;
      sa[167] = -1.7617934f;
      sa[168] = 1.1153654f;
      sa[169] = -1.625266f;
      sa[170] = 0.89213276f;
      sa[171] = 0.9437687f;
      sa[172] = 1.5774784f;
      sa[173] = 1.5146744f;
      sa[174] = -0.11466493f;
      sa[175] = 0.18168636f;
      sa[176] = -0.8609633f;
      sa[177] = -0.0021290188f;
      sa[178] = -1.5755908f;
      sa[179] = -0.19233812f;
      sa[180] = -1.3460605f;
      sa[181] = -1.0445229f;
      sa[182] = 0.6530603f;
      sa[183] = -0.7084657f;
      sa[184] = 1.5541519f;
      sa[185] = 1.4099399f;
      sa[186] = -0.46176404f;
      sa[187] = -1.1288576f;
      sa[188] = -0.59594256f;
      sa[189] = -0.846623f;
      sa[190] = -1.4126236f;
      sa[191] = -0.7860897f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_32x6_Tanh_04 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_32x6_Tanh_04_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_32x6_Tanh_04_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_32x6_Tanh_04_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_32x6_Tanh_04_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_04_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


