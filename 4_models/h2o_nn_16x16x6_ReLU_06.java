/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:42:11.106+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_06

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_06 > h2o_nn_16x16x6_ReLU_06.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_06.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_06", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_06 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_06_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_06_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_06_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_06_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_06_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_06_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_06_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_06_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_06_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_06_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_06_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_06_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_06.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_06_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25961538461538464,0.11538461538461539,0.11538461538461539,0.125,0.25961538461538464,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_06() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(2724820040007753596L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_06_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_16x16x6_ReLU_06_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_06_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_06_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_06_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_06_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_06_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_06_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_06_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_06_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_06_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_06_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_06_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_06_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_06_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_06_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.5335667455478926;
      sa[1] = 0.7639560103024835;
      sa[2] = 0.3808897456824125;
      sa[3] = 0.717280640547048;
      sa[4] = 0.5931942636598582;
      sa[5] = 0.852195565521316;
      sa[6] = 0.4395437326916197;
      sa[7] = 0.6108657056985574;
      sa[8] = 0.6332161271618474;
      sa[9] = 0.7353164713760173;
      sa[10] = 0.5110293395812158;
      sa[11] = 0.3116457500570518;
      sa[12] = 0.2534997153978564;
      sa[13] = 0.3780365288016804;
      sa[14] = 0.5172539829024996;
      sa[15] = 0.47775368251315864;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_06_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_06_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_06_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.1189336703011001;
      sa[1] = 1.1116366381011682;
      sa[2] = 0.8752695210173684;
      sa[3] = 0.9790940348525613;
      sa[4] = 0.900504665997312;
      sa[5] = 0.9451982743430385;
      sa[6] = 0.8997669450781526;
      sa[7] = 0.9733202096396998;
      sa[8] = 0.9276866129164703;
      sa[9] = 1.031948462765384;
      sa[10] = 0.9044922060723262;
      sa[11] = 1.1332519811807333;
      sa[12] = 1.092705221290332;
      sa[13] = 1.1023379250357705;
      sa[14] = 0.9101689003661115;
      sa[15] = 0.9275723057621098;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_06_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_06_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_06_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.07045568592427645;
      sa[1] = 0.03342497586400179;
      sa[2] = -0.03184606372066146;
      sa[3] = -0.05283222567949316;
      sa[4] = 0.06445586876238842;
      sa[5] = -0.15071749065191198;
    }
  }
}
class h2o_nn_16x16x6_ReLU_06_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_06_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[208];
  static {
    h2o_nn_16x16x6_ReLU_06_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_06_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.25203443f;
      sa[1] = 0.32576868f;
      sa[2] = 0.4654015f;
      sa[3] = 0.22315975f;
      sa[4] = -0.06971894f;
      sa[5] = -0.14811333f;
      sa[6] = -0.19082506f;
      sa[7] = 0.4913849f;
      sa[8] = 0.3362213f;
      sa[9] = -0.13185823f;
      sa[10] = -0.16723663f;
      sa[11] = -0.34831965f;
      sa[12] = 0.31288707f;
      sa[13] = -0.23243898f;
      sa[14] = -0.50741005f;
      sa[15] = 0.07505344f;
      sa[16] = 0.06861319f;
      sa[17] = 0.23569845f;
      sa[18] = -0.17881897f;
      sa[19] = 0.20743155f;
      sa[20] = 0.41661572f;
      sa[21] = -0.40757316f;
      sa[22] = 0.5480351f;
      sa[23] = -0.114076674f;
      sa[24] = 0.27789488f;
      sa[25] = 0.44766214f;
      sa[26] = -0.5336648f;
      sa[27] = 0.4526974f;
      sa[28] = 0.20520224f;
      sa[29] = -0.38916957f;
      sa[30] = -0.32704142f;
      sa[31] = 0.15880415f;
      sa[32] = 0.34245437f;
      sa[33] = -0.50259537f;
      sa[34] = 0.049334005f;
      sa[35] = -0.13822354f;
      sa[36] = 0.222928f;
      sa[37] = 0.5062677f;
      sa[38] = -0.25949892f;
      sa[39] = 0.18097937f;
      sa[40] = 0.014545358f;
      sa[41] = -0.1782464f;
      sa[42] = -0.41647345f;
      sa[43] = -0.15509382f;
      sa[44] = 0.3666698f;
      sa[45] = -0.73001605f;
      sa[46] = 0.09477529f;
      sa[47] = -0.0086867595f;
      sa[48] = 0.32960442f;
      sa[49] = 0.45710605f;
      sa[50] = 0.40940297f;
      sa[51] = -0.48284674f;
      sa[52] = -0.22217274f;
      sa[53] = 0.40748063f;
      sa[54] = 0.2489777f;
      sa[55] = -0.08477982f;
      sa[56] = -0.48466963f;
      sa[57] = -0.4055843f;
      sa[58] = 0.26107696f;
      sa[59] = -0.29403046f;
      sa[60] = -0.42049247f;
      sa[61] = 0.27350533f;
      sa[62] = 0.011166536f;
      sa[63] = 0.074336186f;
      sa[64] = -0.010479798f;
      sa[65] = 0.44583338f;
      sa[66] = 0.47243875f;
      sa[67] = 0.5118796f;
      sa[68] = -0.09870774f;
      sa[69] = 0.19987689f;
      sa[70] = -0.124693215f;
      sa[71] = 0.40433255f;
      sa[72] = -0.11179271f;
      sa[73] = 0.5048513f;
      sa[74] = -0.34602943f;
      sa[75] = -0.42902806f;
      sa[76] = -0.30979297f;
      sa[77] = -0.30366385f;
      sa[78] = -0.16029347f;
      sa[79] = 0.44294468f;
      sa[80] = -0.28906804f;
      sa[81] = -0.32245976f;
      sa[82] = -0.20486088f;
      sa[83] = 0.2963317f;
      sa[84] = -0.14367417f;
      sa[85] = -0.3554038f;
      sa[86] = 0.20725664f;
      sa[87] = 0.32112885f;
      sa[88] = 0.106650814f;
      sa[89] = 0.16891885f;
      sa[90] = -0.224154f;
      sa[91] = 0.1389228f;
      sa[92] = 0.37181154f;
      sa[93] = -0.20025446f;
      sa[94] = -0.39375475f;
      sa[95] = -0.57527095f;
      sa[96] = 0.2525266f;
      sa[97] = -0.19417664f;
      sa[98] = 0.32971823f;
      sa[99] = -0.047196113f;
      sa[100] = -0.076442935f;
      sa[101] = -0.5083094f;
      sa[102] = -0.44252574f;
      sa[103] = 0.05482667f;
      sa[104] = 0.2198365f;
      sa[105] = -0.35705692f;
      sa[106] = -0.290791f;
      sa[107] = 0.17521186f;
      sa[108] = 0.5295312f;
      sa[109] = -0.12719208f;
      sa[110] = -0.19015428f;
      sa[111] = 0.2361569f;
      sa[112] = 0.18630162f;
      sa[113] = 0.27915502f;
      sa[114] = -0.233106f;
      sa[115] = 0.1148684f;
      sa[116] = -0.45517743f;
      sa[117] = 0.06443626f;
      sa[118] = -0.6160764f;
      sa[119] = -0.22213832f;
      sa[120] = 0.2265309f;
      sa[121] = 0.31104577f;
      sa[122] = 0.5545751f;
      sa[123] = 0.2933466f;
      sa[124] = 0.46799296f;
      sa[125] = 0.43802544f;
      sa[126] = -0.23845828f;
      sa[127] = -0.10424344f;
      sa[128] = 0.021025408f;
      sa[129] = 0.38994867f;
      sa[130] = -0.27361614f;
      sa[131] = 0.6588261f;
      sa[132] = 0.23954187f;
      sa[133] = -0.40230033f;
      sa[134] = 0.0023156214f;
      sa[135] = -0.447719f;
      sa[136] = -0.41564918f;
      sa[137] = 0.012012582f;
      sa[138] = 0.21566689f;
      sa[139] = -0.30126137f;
      sa[140] = -0.24575688f;
      sa[141] = -0.11057095f;
      sa[142] = 0.06202996f;
      sa[143] = -0.55351365f;
      sa[144] = 0.5233935f;
      sa[145] = -0.27979574f;
      sa[146] = -0.3379318f;
      sa[147] = 0.2238097f;
      sa[148] = 0.15454699f;
      sa[149] = 0.30661374f;
      sa[150] = 0.3624358f;
      sa[151] = -0.4370181f;
      sa[152] = -0.010560139f;
      sa[153] = 0.4965641f;
      sa[154] = 0.38060066f;
      sa[155] = -0.26111344f;
      sa[156] = -0.027951824f;
      sa[157] = -0.24027744f;
      sa[158] = -0.0208222f;
      sa[159] = 0.117686845f;
      sa[160] = -0.2702246f;
      sa[161] = 0.2191534f;
      sa[162] = -0.18406077f;
      sa[163] = -0.22329588f;
      sa[164] = 0.21300428f;
      sa[165] = -0.12536408f;
      sa[166] = -0.009200448f;
      sa[167] = -0.2681875f;
      sa[168] = 0.36180538f;
      sa[169] = 0.2932123f;
      sa[170] = -0.29408434f;
      sa[171] = -0.34120882f;
      sa[172] = -0.1560362f;
      sa[173] = -0.13341884f;
      sa[174] = 0.017579801f;
      sa[175] = -0.2702189f;
      sa[176] = -0.13095206f;
      sa[177] = -0.25795165f;
      sa[178] = 0.15540625f;
      sa[179] = 0.54874915f;
      sa[180] = 0.032864194f;
      sa[181] = -0.37964416f;
      sa[182] = 0.07300313f;
      sa[183] = 0.5287773f;
      sa[184] = 0.75309646f;
      sa[185] = 0.3003476f;
      sa[186] = -0.21539357f;
      sa[187] = 0.08461384f;
      sa[188] = -0.24966611f;
      sa[189] = 0.4959381f;
      sa[190] = 0.27233788f;
      sa[191] = -0.20390227f;
      sa[192] = -0.4551411f;
      sa[193] = 0.533066f;
      sa[194] = -0.015744425f;
      sa[195] = 0.21869513f;
      sa[196] = 0.4079036f;
      sa[197] = -0.106060155f;
      sa[198] = 0.018894171f;
      sa[199] = -0.25243816f;
      sa[200] = 0.15110752f;
      sa[201] = -0.7427039f;
      sa[202] = 0.17332795f;
      sa[203] = -0.081072666f;
      sa[204] = -0.12972905f;
      sa[205] = 0.39586708f;
      sa[206] = 0.33978894f;
      sa[207] = 0.2897688f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_06_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_06_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_06_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.6633546f;
      sa[1] = 0.14116573f;
      sa[2] = -0.33965957f;
      sa[3] = -0.42856914f;
      sa[4] = 0.14003266f;
      sa[5] = 0.21210422f;
      sa[6] = 0.19015466f;
      sa[7] = -0.043108117f;
      sa[8] = -0.37729165f;
      sa[9] = 0.40525946f;
      sa[10] = 0.050221078f;
      sa[11] = -0.012301112f;
      sa[12] = 0.28630036f;
      sa[13] = -0.14761695f;
      sa[14] = -0.3521292f;
      sa[15] = 0.33161753f;
      sa[16] = 0.622784f;
      sa[17] = -0.19668517f;
      sa[18] = 0.04301626f;
      sa[19] = -0.13247952f;
      sa[20] = 0.49165335f;
      sa[21] = 0.2783064f;
      sa[22] = -0.26174447f;
      sa[23] = 0.4665685f;
      sa[24] = -0.29627815f;
      sa[25] = 0.051683992f;
      sa[26] = 0.10389494f;
      sa[27] = 0.3794214f;
      sa[28] = -0.32903707f;
      sa[29] = -0.1289872f;
      sa[30] = 0.2847671f;
      sa[31] = -0.049312428f;
      sa[32] = -0.358675f;
      sa[33] = -0.54643327f;
      sa[34] = -0.030576749f;
      sa[35] = 0.2980499f;
      sa[36] = -0.10555259f;
      sa[37] = -0.08025748f;
      sa[38] = -0.027785765f;
      sa[39] = 0.15027586f;
      sa[40] = -0.2962906f;
      sa[41] = -0.47611043f;
      sa[42] = -0.27710623f;
      sa[43] = -0.40647605f;
      sa[44] = -0.055918053f;
      sa[45] = -0.4334664f;
      sa[46] = 0.28422883f;
      sa[47] = 0.3241497f;
      sa[48] = -0.2892251f;
      sa[49] = -0.36224937f;
      sa[50] = 0.15138373f;
      sa[51] = -0.16628271f;
      sa[52] = 0.386194f;
      sa[53] = 0.30592492f;
      sa[54] = -0.10423297f;
      sa[55] = 0.3964327f;
      sa[56] = -0.29757413f;
      sa[57] = -0.3706645f;
      sa[58] = 0.09069374f;
      sa[59] = -0.016487574f;
      sa[60] = 0.31998992f;
      sa[61] = -0.20254914f;
      sa[62] = -0.09077687f;
      sa[63] = 0.09945603f;
      sa[64] = 0.22898576f;
      sa[65] = -0.18088971f;
      sa[66] = 0.14565676f;
      sa[67] = 0.44546482f;
      sa[68] = 0.19542708f;
      sa[69] = -0.48393267f;
      sa[70] = -0.40708858f;
      sa[71] = -0.20039447f;
      sa[72] = -0.39117277f;
      sa[73] = 0.16175117f;
      sa[74] = 0.3330374f;
      sa[75] = -0.0077502565f;
      sa[76] = 0.17746681f;
      sa[77] = 0.16654794f;
      sa[78] = -0.49845517f;
      sa[79] = 0.28033063f;
      sa[80] = -0.23679064f;
      sa[81] = 0.05929755f;
      sa[82] = 0.1897639f;
      sa[83] = -0.19759478f;
      sa[84] = -0.4677277f;
      sa[85] = -0.38746887f;
      sa[86] = 0.0128216315f;
      sa[87] = 0.27967128f;
      sa[88] = -0.43974754f;
      sa[89] = -0.1450951f;
      sa[90] = -0.32476792f;
      sa[91] = 0.39008424f;
      sa[92] = -0.102717154f;
      sa[93] = 0.058543324f;
      sa[94] = -0.4605643f;
      sa[95] = -0.07283675f;
      sa[96] = -0.19319865f;
      sa[97] = -0.07924659f;
      sa[98] = -0.09649109f;
      sa[99] = -0.1483507f;
      sa[100] = -0.21728794f;
      sa[101] = -0.04000691f;
      sa[102] = 0.14589158f;
      sa[103] = -0.014474862f;
      sa[104] = -0.110923186f;
      sa[105] = -0.23923993f;
      sa[106] = 0.45331213f;
      sa[107] = 0.24889784f;
      sa[108] = 0.1533076f;
      sa[109] = -0.12620518f;
      sa[110] = 0.16261084f;
      sa[111] = -0.30176133f;
      sa[112] = -0.36497557f;
      sa[113] = 0.107208505f;
      sa[114] = 0.05997508f;
      sa[115] = -0.13618211f;
      sa[116] = 0.4131957f;
      sa[117] = 0.07270851f;
      sa[118] = -0.39366686f;
      sa[119] = -0.2778097f;
      sa[120] = -0.055873286f;
      sa[121] = 0.2849389f;
      sa[122] = -0.11841793f;
      sa[123] = 0.09963547f;
      sa[124] = -0.2629264f;
      sa[125] = 0.22929046f;
      sa[126] = -0.38356662f;
      sa[127] = -0.018234888f;
      sa[128] = -0.45542842f;
      sa[129] = -0.009680624f;
      sa[130] = 0.029074974f;
      sa[131] = 0.33692533f;
      sa[132] = 0.081398934f;
      sa[133] = 0.07424336f;
      sa[134] = 0.24745697f;
      sa[135] = -0.31718725f;
      sa[136] = 0.20449896f;
      sa[137] = -0.28713667f;
      sa[138] = -0.08726812f;
      sa[139] = 0.39937028f;
      sa[140] = -0.2409716f;
      sa[141] = 0.05743373f;
      sa[142] = 0.104210906f;
      sa[143] = -0.28214717f;
      sa[144] = 0.23342758f;
      sa[145] = -0.24662258f;
      sa[146] = 0.10607861f;
      sa[147] = 0.0020109182f;
      sa[148] = -0.37622675f;
      sa[149] = 0.3931334f;
      sa[150] = -0.2257642f;
      sa[151] = -0.4185797f;
      sa[152] = 0.49679807f;
      sa[153] = -0.10224057f;
      sa[154] = 0.30747405f;
      sa[155] = -0.38295236f;
      sa[156] = -0.4109701f;
      sa[157] = -0.27478078f;
      sa[158] = 0.087725244f;
      sa[159] = -0.18285932f;
      sa[160] = 0.26196665f;
      sa[161] = -0.3457644f;
      sa[162] = 0.46379358f;
      sa[163] = -0.2431356f;
      sa[164] = 0.19570898f;
      sa[165] = -0.2247163f;
      sa[166] = 0.3273684f;
      sa[167] = -0.46863273f;
      sa[168] = 0.22155605f;
      sa[169] = -0.4610195f;
      sa[170] = 0.21375282f;
      sa[171] = 0.29387605f;
      sa[172] = 0.33879992f;
      sa[173] = 0.37587443f;
      sa[174] = -0.11144458f;
      sa[175] = -0.13845038f;
      sa[176] = -0.11062067f;
      sa[177] = 0.3031214f;
      sa[178] = -0.27238274f;
      sa[179] = -0.018447094f;
      sa[180] = -0.3810022f;
      sa[181] = -0.16785696f;
      sa[182] = 0.18054187f;
      sa[183] = -0.06845134f;
      sa[184] = 0.38359925f;
      sa[185] = 0.518456f;
      sa[186] = -0.14947543f;
      sa[187] = -0.26522624f;
      sa[188] = 0.066604026f;
      sa[189] = -0.17696933f;
      sa[190] = -0.37721992f;
      sa[191] = -0.21602078f;
      sa[192] = -0.124070324f;
      sa[193] = 0.16401671f;
      sa[194] = -0.17356482f;
      sa[195] = 0.031544194f;
      sa[196] = 0.090090625f;
      sa[197] = -0.2587451f;
      sa[198] = 0.24266922f;
      sa[199] = 0.47496977f;
      sa[200] = 0.06954496f;
      sa[201] = 0.24844937f;
      sa[202] = 0.19739224f;
      sa[203] = -0.32920253f;
      sa[204] = 0.15835269f;
      sa[205] = 0.5802458f;
      sa[206] = -0.033845983f;
      sa[207] = 0.4161563f;
      sa[208] = -0.13376454f;
      sa[209] = 0.34488103f;
      sa[210] = -0.1763827f;
      sa[211] = -0.34049782f;
      sa[212] = -0.13742602f;
      sa[213] = 0.18379979f;
      sa[214] = -0.4165709f;
      sa[215] = -0.10739625f;
      sa[216] = 0.17433429f;
      sa[217] = 0.55487f;
      sa[218] = -0.027616296f;
      sa[219] = 0.048043087f;
      sa[220] = 0.19030885f;
      sa[221] = -0.030725516f;
      sa[222] = -0.36068022f;
      sa[223] = -0.3872685f;
      sa[224] = 0.2342389f;
      sa[225] = 0.13708346f;
      sa[226] = -0.17786676f;
      sa[227] = -0.065763555f;
      sa[228] = -0.23894837f;
      sa[229] = -0.26137143f;
      sa[230] = -0.4315222f;
      sa[231] = -0.30250663f;
      sa[232] = 0.38742268f;
      sa[233] = -0.089264356f;
      sa[234] = -0.27165005f;
      sa[235] = -0.042244006f;
      sa[236] = -0.3776282f;
      sa[237] = 0.3387473f;
      sa[238] = 0.026443487f;
      sa[239] = -0.19778895f;
      sa[240] = -0.2183097f;
      sa[241] = -0.40062308f;
      sa[242] = -0.24431966f;
      sa[243] = 0.49044466f;
      sa[244] = 0.04421051f;
      sa[245] = 0.2539967f;
      sa[246] = 0.17579299f;
      sa[247] = -0.5429905f;
      sa[248] = 0.0110373525f;
      sa[249] = -0.06015926f;
      sa[250] = 0.2035399f;
      sa[251] = 0.4301331f;
      sa[252] = 0.104554854f;
      sa[253] = -0.2751786f;
      sa[254] = 0.44273698f;
      sa[255] = 0.28270948f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_06_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_ReLU_06_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_06_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.10771947f;
      sa[1] = -1.6993281f;
      sa[2] = -1.5717747f;
      sa[3] = 1.238323f;
      sa[4] = 0.36318418f;
      sa[5] = -0.19647889f;
      sa[6] = -1.6399419f;
      sa[7] = 1.5120476f;
      sa[8] = 1.8031056f;
      sa[9] = -0.17262846f;
      sa[10] = 1.5905222f;
      sa[11] = 1.3211069f;
      sa[12] = 1.7409637f;
      sa[13] = -0.72182035f;
      sa[14] = -1.8995732f;
      sa[15] = -0.70632416f;
      sa[16] = 0.7459072f;
      sa[17] = -0.7215759f;
      sa[18] = -1.4566902f;
      sa[19] = -0.85633594f;
      sa[20] = -1.9218171f;
      sa[21] = 0.32293034f;
      sa[22] = -1.9190888f;
      sa[23] = -0.6611358f;
      sa[24] = -0.5129185f;
      sa[25] = 1.8508918f;
      sa[26] = -0.34903646f;
      sa[27] = 1.2325354f;
      sa[28] = 1.2190446f;
      sa[29] = -0.76576376f;
      sa[30] = 0.17391115f;
      sa[31] = 0.1792719f;
      sa[32] = 0.27969357f;
      sa[33] = 0.2571019f;
      sa[34] = -0.56327444f;
      sa[35] = 1.0164468f;
      sa[36] = 0.49885282f;
      sa[37] = -1.3343943f;
      sa[38] = 0.56921464f;
      sa[39] = -0.37064648f;
      sa[40] = 0.2507753f;
      sa[41] = -0.63573605f;
      sa[42] = 0.57348907f;
      sa[43] = -0.714328f;
      sa[44] = 0.9463892f;
      sa[45] = -2.449328f;
      sa[46] = -2.0734272f;
      sa[47] = 0.07601331f;
      sa[48] = 1.666772f;
      sa[49] = -0.19825004f;
      sa[50] = -0.5448231f;
      sa[51] = 1.7691765f;
      sa[52] = -1.7191137f;
      sa[53] = 0.88825333f;
      sa[54] = 1.6741651f;
      sa[55] = 1.1106116f;
      sa[56] = -0.78574467f;
      sa[57] = 0.011846405f;
      sa[58] = 0.9130513f;
      sa[59] = 0.84393084f;
      sa[60] = -1.4206195f;
      sa[61] = 1.0701025f;
      sa[62] = -0.47375414f;
      sa[63] = -0.9742879f;
      sa[64] = 1.0060261f;
      sa[65] = -0.8891878f;
      sa[66] = -1.7498332f;
      sa[67] = -0.05483958f;
      sa[68] = 0.9669675f;
      sa[69] = -1.329279f;
      sa[70] = -1.568562f;
      sa[71] = -0.104021944f;
      sa[72] = -1.0542622f;
      sa[73] = -1.2880532f;
      sa[74] = -1.0935949f;
      sa[75] = 1.338052f;
      sa[76] = 1.9380355f;
      sa[77] = -0.5536291f;
      sa[78] = -1.4683195f;
      sa[79] = -0.35752913f;
      sa[80] = 0.48529696f;
      sa[81] = -1.8678253f;
      sa[82] = -0.23266517f;
      sa[83] = -1.6205078f;
      sa[84] = 1.5147476f;
      sa[85] = 1.0630053f;
      sa[86] = -2.0508268f;
      sa[87] = 1.153866f;
      sa[88] = -1.6136534f;
      sa[89] = -1.0111159f;
      sa[90] = 0.14619285f;
      sa[91] = 0.23468472f;
      sa[92] = 1.2335914f;
      sa[93] = 1.951542f;
      sa[94] = 1.5866057f;
      sa[95] = 0.48699057f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_06 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_06_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_06_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_06_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_ReLU_06_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_06_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


