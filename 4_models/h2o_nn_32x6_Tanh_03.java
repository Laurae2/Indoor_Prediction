/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:41:29.946+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_32x6_Tanh_03

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_32x6_Tanh_03 > h2o_nn_32x6_Tanh_03.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_32x6_Tanh_03.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_32x6_Tanh_03", algorithm="deeplearning")
public class h2o_nn_32x6_Tanh_03 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,32,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_32x6_Tanh_03_Activation_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_03_Activation_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_03_Activation_2.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_32x6_Tanh_03_Bias_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_03_Bias_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_03_Bias_2.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_32x6_Tanh_03_Weight_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_03_Weight_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_03_Weight_2.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_32x6_Tanh_03.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_32x6_Tanh_03_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.27956989247311825,0.13978494623655913,0.15053763440860216,0.27956989247311825,0.15053763440860216};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_32x6_Tanh_03() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-1179679945200482496L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_32x6_Tanh_03_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_32x6_Tanh_03_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_03_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_32x6_Tanh_03_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_Tanh_03_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_03_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_32x6_Tanh_03_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_32x6_Tanh_03_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_03_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_32x6_Tanh_03_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_32x6_Tanh_03_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_Tanh_03_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_03_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.08021939299322153;
      sa[1] = 0.04577279132538162;
      sa[2] = -0.06450085483957715;
      sa[3] = -0.07675878857230671;
      sa[4] = 0.0853449237545916;
      sa[5] = 0.009353775220941506;
      sa[6] = 0.029519973254088724;
      sa[7] = -0.059804705881648955;
      sa[8] = -0.07401560218389037;
      sa[9] = 0.07539469421837919;
      sa[10] = 2.9608931978848067E-4;
      sa[11] = 0.03531940743649245;
      sa[12] = 0.05555838712369914;
      sa[13] = 0.07938344151556406;
      sa[14] = -0.07490098733801441;
      sa[15] = 0.04576508334378958;
      sa[16] = 0.05575284654657631;
      sa[17] = 0.04581177802718947;
      sa[18] = -0.0215785762732377;
      sa[19] = -0.05809208590714823;
      sa[20] = 0.050945383402459056;
      sa[21] = -0.08431504712976798;
      sa[22] = -0.024407713795221202;
      sa[23] = 0.041701185791698084;
      sa[24] = -0.07034849864128025;
      sa[25] = 0.07030695460331807;
      sa[26] = -0.08717438342229733;
      sa[27] = 0.060497496462361376;
      sa[28] = -0.03898687336441097;
      sa[29] = 0.05873684183975751;
      sa[30] = 0.03170314570818663;
      sa[31] = -0.012063593894439494;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_32x6_Tanh_03_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_32x6_Tanh_03_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_03_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.07860699483318585;
      sa[1] = -0.08694248108778627;
      sa[2] = -0.021007826099306848;
      sa[3] = -0.07606073982401398;
      sa[4] = -0.07801706898623595;
    }
  }
}
class h2o_nn_32x6_Tanh_03_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_32x6_Tanh_03_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[416];
  static {
    h2o_nn_32x6_Tanh_03_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_03_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.05432029f;
      sa[1] = 0.24205843f;
      sa[2] = 0.25403586f;
      sa[3] = 0.16598523f;
      sa[4] = -0.23644324f;
      sa[5] = -0.2022128f;
      sa[6] = 0.027702235f;
      sa[7] = 0.30466405f;
      sa[8] = 0.15123525f;
      sa[9] = -0.17163841f;
      sa[10] = -0.2758511f;
      sa[11] = -0.20886251f;
      sa[12] = -0.032641694f;
      sa[13] = -0.28012156f;
      sa[14] = -0.29310352f;
      sa[15] = -0.019939117f;
      sa[16] = 0.034967497f;
      sa[17] = 0.10562233f;
      sa[18] = -0.20906518f;
      sa[19] = 0.24288726f;
      sa[20] = 0.29109928f;
      sa[21] = -0.31692827f;
      sa[22] = 0.28458336f;
      sa[23] = -0.14614137f;
      sa[24] = 0.2269544f;
      sa[25] = 0.42148188f;
      sa[26] = -0.3590066f;
      sa[27] = 0.4112411f;
      sa[28] = 0.2902164f;
      sa[29] = -0.19334672f;
      sa[30] = -0.08835932f;
      sa[31] = 0.064103775f;
      sa[32] = 0.27588102f;
      sa[33] = -0.35964736f;
      sa[34] = 0.07326103f;
      sa[35] = -0.15786698f;
      sa[36] = 0.13476355f;
      sa[37] = 0.28388387f;
      sa[38] = -0.12603797f;
      sa[39] = 0.20075877f;
      sa[40] = 0.06970805f;
      sa[41] = -0.11247327f;
      sa[42] = -0.07242663f;
      sa[43] = 0.13793041f;
      sa[44] = 0.19693568f;
      sa[45] = -0.25497428f;
      sa[46] = 0.0070590302f;
      sa[47] = -0.0031139955f;
      sa[48] = 0.18923782f;
      sa[49] = 0.44387284f;
      sa[50] = 0.18514913f;
      sa[51] = -0.2884595f;
      sa[52] = -0.088238545f;
      sa[53] = 0.18099685f;
      sa[54] = 0.33565953f;
      sa[55] = 0.11352515f;
      sa[56] = -0.111514375f;
      sa[57] = -0.4415144f;
      sa[58] = 0.5410086f;
      sa[59] = -0.23528288f;
      sa[60] = -0.3613472f;
      sa[61] = 0.11203391f;
      sa[62] = 0.28449854f;
      sa[63] = -0.016442465f;
      sa[64] = 0.046061955f;
      sa[65] = 0.1685382f;
      sa[66] = -0.033831347f;
      sa[67] = 0.13564521f;
      sa[68] = -0.19048241f;
      sa[69] = 0.14570963f;
      sa[70] = -0.09355905f;
      sa[71] = 0.30016288f;
      sa[72] = -0.16460073f;
      sa[73] = 0.26921192f;
      sa[74] = -0.1926799f;
      sa[75] = 0.1401843f;
      sa[76] = -0.15113218f;
      sa[77] = -0.0037269532f;
      sa[78] = -0.042038955f;
      sa[79] = 0.12740728f;
      sa[80] = -0.28722408f;
      sa[81] = -0.2500572f;
      sa[82] = -0.12959601f;
      sa[83] = 0.24155092f;
      sa[84] = -0.16928083f;
      sa[85] = -0.18421996f;
      sa[86] = 0.23403472f;
      sa[87] = 0.38351738f;
      sa[88] = 0.21087897f;
      sa[89] = 0.10448083f;
      sa[90] = -0.086714774f;
      sa[91] = 0.1534033f;
      sa[92] = 0.21574202f;
      sa[93] = -0.25222957f;
      sa[94] = -0.18777367f;
      sa[95] = -0.2340265f;
      sa[96] = 0.14516087f;
      sa[97] = -0.027539006f;
      sa[98] = 0.25301972f;
      sa[99] = -0.13141732f;
      sa[100] = -0.040646613f;
      sa[101] = -0.24755828f;
      sa[102] = -0.27054682f;
      sa[103] = -0.08747262f;
      sa[104] = 0.030378496f;
      sa[105] = -0.15133034f;
      sa[106] = -0.33274463f;
      sa[107] = 0.15361767f;
      sa[108] = 0.22497684f;
      sa[109] = -0.27197132f;
      sa[110] = -0.2233959f;
      sa[111] = 0.15966086f;
      sa[112] = 0.15696383f;
      sa[113] = 0.0021176916f;
      sa[114] = -0.08196298f;
      sa[115] = -0.10103519f;
      sa[116] = -0.13437313f;
      sa[117] = -0.03426517f;
      sa[118] = -0.3458631f;
      sa[119] = -0.1662173f;
      sa[120] = 0.23223767f;
      sa[121] = 0.22231944f;
      sa[122] = 0.36652955f;
      sa[123] = 0.4087263f;
      sa[124] = 0.3255652f;
      sa[125] = 0.32686618f;
      sa[126] = -0.2989031f;
      sa[127] = -0.33195576f;
      sa[128] = 0.0849138f;
      sa[129] = 0.09884944f;
      sa[130] = -0.18552761f;
      sa[131] = 0.3519585f;
      sa[132] = 0.20025471f;
      sa[133] = -0.31526482f;
      sa[134] = 0.06445797f;
      sa[135] = -0.2580332f;
      sa[136] = -0.13428642f;
      sa[137] = -0.019851882f;
      sa[138] = 0.13073668f;
      sa[139] = -0.15242772f;
      sa[140] = -0.1791165f;
      sa[141] = -0.39125282f;
      sa[142] = 0.39312297f;
      sa[143] = -0.32078856f;
      sa[144] = 0.24220465f;
      sa[145] = -0.1819416f;
      sa[146] = -0.38929403f;
      sa[147] = 0.13885553f;
      sa[148] = 0.26407707f;
      sa[149] = 0.28508788f;
      sa[150] = 0.35773066f;
      sa[151] = -0.25560513f;
      sa[152] = 0.056926046f;
      sa[153] = 0.3395026f;
      sa[154] = 0.19574232f;
      sa[155] = -0.07738893f;
      sa[156] = 0.13614528f;
      sa[157] = -0.21141163f;
      sa[158] = 0.14293766f;
      sa[159] = 0.09014021f;
      sa[160] = 0.034794237f;
      sa[161] = 0.29355752f;
      sa[162] = -0.13991146f;
      sa[163] = -0.07131942f;
      sa[164] = 0.2797246f;
      sa[165] = -0.01258054f;
      sa[166] = -0.14759469f;
      sa[167] = -0.14923583f;
      sa[168] = 0.18240754f;
      sa[169] = 0.3560688f;
      sa[170] = -0.037820842f;
      sa[171] = -0.009953333f;
      sa[172] = -0.091046266f;
      sa[173] = -0.22267368f;
      sa[174] = -5.825545E-4f;
      sa[175] = -0.17347267f;
      sa[176] = -0.03962041f;
      sa[177] = -0.04009403f;
      sa[178] = -0.031775203f;
      sa[179] = 0.06997818f;
      sa[180] = -0.10688011f;
      sa[181] = -0.3411281f;
      sa[182] = -0.14850272f;
      sa[183] = 0.111991264f;
      sa[184] = 0.288397f;
      sa[185] = 0.217083f;
      sa[186] = -0.32098064f;
      sa[187] = 0.08129263f;
      sa[188] = -0.11165143f;
      sa[189] = 0.2541183f;
      sa[190] = 0.056994382f;
      sa[191] = -0.07183568f;
      sa[192] = -0.071762055f;
      sa[193] = 0.24958579f;
      sa[194] = 0.19955215f;
      sa[195] = 0.2978585f;
      sa[196] = 0.33090666f;
      sa[197] = 0.015396421f;
      sa[198] = 0.1196585f;
      sa[199] = -0.060142353f;
      sa[200] = -0.0021774964f;
      sa[201] = -0.3770181f;
      sa[202] = 0.15421733f;
      sa[203] = -0.0591365f;
      sa[204] = -0.17845438f;
      sa[205] = 0.18868448f;
      sa[206] = 0.35589716f;
      sa[207] = -0.005823536f;
      sa[208] = -0.30644628f;
      sa[209] = -0.16178297f;
      sa[210] = -0.32040048f;
      sa[211] = -0.3618884f;
      sa[212] = 0.20938842f;
      sa[213] = -0.2878492f;
      sa[214] = -0.057159204f;
      sa[215] = 0.09248491f;
      sa[216] = 0.12279583f;
      sa[217] = 0.24727137f;
      sa[218] = -0.21409784f;
      sa[219] = 0.327531f;
      sa[220] = -0.33172372f;
      sa[221] = -0.008976244f;
      sa[222] = 0.2507222f;
      sa[223] = 0.097657286f;
      sa[224] = 0.10919221f;
      sa[225] = 0.29472888f;
      sa[226] = -0.23113154f;
      sa[227] = 0.52769834f;
      sa[228] = 0.15049829f;
      sa[229] = 0.09221161f;
      sa[230] = 0.28613436f;
      sa[231] = -0.3871344f;
      sa[232] = -0.38804337f;
      sa[233] = 0.14057063f;
      sa[234] = 0.14288343f;
      sa[235] = -0.27239606f;
      sa[236] = -0.010765618f;
      sa[237] = -0.15894344f;
      sa[238] = -0.16119748f;
      sa[239] = 0.014429728f;
      sa[240] = 0.11901078f;
      sa[241] = -0.26651627f;
      sa[242] = -0.14386074f;
      sa[243] = -0.33074147f;
      sa[244] = -0.24998096f;
      sa[245] = -0.18946853f;
      sa[246] = -0.39315632f;
      sa[247] = -0.032126423f;
      sa[248] = 0.354095f;
      sa[249] = 0.2420903f;
      sa[250] = -0.24115944f;
      sa[251] = -0.0960305f;
      sa[252] = -0.32421505f;
      sa[253] = -0.46131378f;
      sa[254] = -0.2942017f;
      sa[255] = 0.25085384f;
      sa[256] = -0.23108116f;
      sa[257] = 0.44795612f;
      sa[258] = -0.3161157f;
      sa[259] = 0.002551747f;
      sa[260] = -0.24882953f;
      sa[261] = -0.13246155f;
      sa[262] = -0.17585966f;
      sa[263] = 0.1880773f;
      sa[264] = -0.3096556f;
      sa[265] = 0.20157522f;
      sa[266] = -0.64166087f;
      sa[267] = -0.2524383f;
      sa[268] = 0.17493433f;
      sa[269] = -0.07835834f;
      sa[270] = -0.18895008f;
      sa[271] = 0.27303904f;
      sa[272] = -0.15085429f;
      sa[273] = -0.12148644f;
      sa[274] = 0.15117957f;
      sa[275] = -0.060083337f;
      sa[276] = 0.10107797f;
      sa[277] = -0.23926985f;
      sa[278] = -0.1267645f;
      sa[279] = 0.06558613f;
      sa[280] = -0.225264f;
      sa[281] = 0.33463386f;
      sa[282] = -0.12390971f;
      sa[283] = 0.036247514f;
      sa[284] = 0.09217879f;
      sa[285] = -0.06604445f;
      sa[286] = 0.2606947f;
      sa[287] = 0.19989508f;
      sa[288] = -0.19791919f;
      sa[289] = -0.08244586f;
      sa[290] = -0.011322934f;
      sa[291] = -0.081674434f;
      sa[292] = 0.20118569f;
      sa[293] = -0.122923136f;
      sa[294] = 0.054362327f;
      sa[295] = 0.06834862f;
      sa[296] = 0.30113855f;
      sa[297] = 0.23052292f;
      sa[298] = -0.12973872f;
      sa[299] = -0.0638136f;
      sa[300] = 0.023729581f;
      sa[301] = -0.01243559f;
      sa[302] = 0.20229733f;
      sa[303] = 0.041132934f;
      sa[304] = -0.26211664f;
      sa[305] = -0.0700707f;
      sa[306] = 0.24932295f;
      sa[307] = -0.21757096f;
      sa[308] = 0.13565971f;
      sa[309] = 0.096091695f;
      sa[310] = 0.40518746f;
      sa[311] = 0.16214955f;
      sa[312] = -0.23554756f;
      sa[313] = -0.19567057f;
      sa[314] = -0.24315266f;
      sa[315] = 0.004101764f;
      sa[316] = 0.009108362f;
      sa[317] = -0.1305994f;
      sa[318] = 0.12260512f;
      sa[319] = 0.2961199f;
      sa[320] = -0.06250192f;
      sa[321] = 0.12699084f;
      sa[322] = 0.33010244f;
      sa[323] = -0.25777796f;
      sa[324] = 0.14560893f;
      sa[325] = 0.3606384f;
      sa[326] = -0.36957842f;
      sa[327] = 0.031931646f;
      sa[328] = -0.1591111f;
      sa[329] = 0.18532075f;
      sa[330] = -0.13380054f;
      sa[331] = -0.0036248623f;
      sa[332] = -0.27128825f;
      sa[333] = 0.18801405f;
      sa[334] = -0.041854f;
      sa[335] = 0.16081847f;
      sa[336] = -0.19899857f;
      sa[337] = -0.17179632f;
      sa[338] = 0.33457503f;
      sa[339] = -0.2306734f;
      sa[340] = -0.41271806f;
      sa[341] = -0.2785701f;
      sa[342] = 0.2417635f;
      sa[343] = -0.12842111f;
      sa[344] = -0.24953772f;
      sa[345] = 0.21597803f;
      sa[346] = 0.2443151f;
      sa[347] = -0.23336117f;
      sa[348] = 0.41595155f;
      sa[349] = -0.326838f;
      sa[350] = -0.17465578f;
      sa[351] = 0.11380877f;
      sa[352] = 0.2277185f;
      sa[353] = 0.0027200289f;
      sa[354] = 0.07492422f;
      sa[355] = 0.07829693f;
      sa[356] = -0.13862498f;
      sa[357] = 0.3025782f;
      sa[358] = -0.31464827f;
      sa[359] = 0.040927004f;
      sa[360] = 0.15222389f;
      sa[361] = -0.15684631f;
      sa[362] = -0.17263184f;
      sa[363] = 0.12875335f;
      sa[364] = -0.13335228f;
      sa[365] = -0.16970304f;
      sa[366] = 0.0082517695f;
      sa[367] = -0.24466853f;
      sa[368] = -0.14298296f;
      sa[369] = 0.28057596f;
      sa[370] = -0.31851807f;
      sa[371] = 0.1375888f;
      sa[372] = -0.025593916f;
      sa[373] = 0.3257692f;
      sa[374] = -0.1451293f;
      sa[375] = -0.29926386f;
      sa[376] = -0.37218004f;
      sa[377] = -0.25407857f;
      sa[378] = 0.3743641f;
      sa[379] = 0.09626906f;
      sa[380] = -0.17886774f;
      sa[381] = -0.1683519f;
      sa[382] = 0.021384992f;
      sa[383] = -0.08685739f;
      sa[384] = -0.1580369f;
      sa[385] = 0.12450517f;
      sa[386] = -0.24574095f;
      sa[387] = -0.3091029f;
      sa[388] = 0.002281776f;
      sa[389] = 0.062146775f;
      sa[390] = 0.02587589f;
      sa[391] = -0.14822035f;
      sa[392] = 0.30490074f;
      sa[393] = 0.16748568f;
      sa[394] = -0.14672236f;
      sa[395] = 0.4072535f;
      sa[396] = 0.24647684f;
      sa[397] = -0.30520818f;
      sa[398] = 0.16620485f;
      sa[399] = 0.18251619f;
      sa[400] = 0.18403238f;
      sa[401] = 0.39904478f;
      sa[402] = -0.23978385f;
      sa[403] = 0.104527004f;
      sa[404] = 0.3621678f;
      sa[405] = -0.28696027f;
      sa[406] = -0.06787933f;
      sa[407] = 0.2228223f;
      sa[408] = -0.24182452f;
      sa[409] = -0.4044086f;
      sa[410] = -0.109472975f;
      sa[411] = 0.20893839f;
      sa[412] = -0.15273361f;
      sa[413] = 0.1190882f;
      sa[414] = 0.15453199f;
      sa[415] = 0.37802914f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_32x6_Tanh_03_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[160];
  static {
    h2o_nn_32x6_Tanh_03_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_03_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 1.2580081f;
      sa[1] = -0.17306735f;
      sa[2] = -0.4730272f;
      sa[3] = -0.8687018f;
      sa[4] = 0.04615492f;
      sa[5] = 0.1686387f;
      sa[6] = 1.2836095f;
      sa[7] = -0.59409314f;
      sa[8] = -0.931549f;
      sa[9] = 0.6268288f;
      sa[10] = -0.25701123f;
      sa[11] = 0.4758928f;
      sa[12] = 0.17893843f;
      sa[13] = 0.16312957f;
      sa[14] = -1.1993496f;
      sa[15] = 1.0947258f;
      sa[16] = 1.6900604f;
      sa[17] = -0.51030076f;
      sa[18] = 0.12639289f;
      sa[19] = -0.56545883f;
      sa[20] = 1.2883627f;
      sa[21] = 0.05915225f;
      sa[22] = -0.9891616f;
      sa[23] = 0.72854006f;
      sa[24] = -1.4674332f;
      sa[25] = 0.41928115f;
      sa[26] = -0.27936617f;
      sa[27] = 1.4611845f;
      sa[28] = -1.3573034f;
      sa[29] = -0.33816108f;
      sa[30] = 0.50873363f;
      sa[31] = -0.7592986f;
      sa[32] = -1.177925f;
      sa[33] = -1.4740611f;
      sa[34] = 0.039829656f;
      sa[35] = 1.4025193f;
      sa[36] = -0.32893413f;
      sa[37] = -0.08990876f;
      sa[38] = 0.17468852f;
      sa[39] = 0.7551435f;
      sa[40] = -0.6483366f;
      sa[41] = -1.4071567f;
      sa[42] = -1.0397804f;
      sa[43] = -1.3761393f;
      sa[44] = -0.016750032f;
      sa[45] = -1.3368806f;
      sa[46] = 1.2162143f;
      sa[47] = 1.5150692f;
      sa[48] = -1.2938509f;
      sa[49] = -1.0269454f;
      sa[50] = 0.3372317f;
      sa[51] = -0.28408885f;
      sa[52] = 0.8614946f;
      sa[53] = 0.8892796f;
      sa[54] = -0.21415174f;
      sa[55] = 1.2038084f;
      sa[56] = -1.0926377f;
      sa[57] = -1.122539f;
      sa[58] = 0.18736687f;
      sa[59] = -0.18842605f;
      sa[60] = 1.329772f;
      sa[61] = -0.56996846f;
      sa[62] = -0.3683695f;
      sa[63] = 0.7461141f;
      sa[64] = 1.5419165f;
      sa[65] = -0.63248646f;
      sa[66] = 0.56488454f;
      sa[67] = 1.4751039f;
      sa[68] = 1.172782f;
      sa[69] = -0.8740095f;
      sa[70] = -1.7279812f;
      sa[71] = -0.46610656f;
      sa[72] = -1.1228321f;
      sa[73] = 1.2261981f;
      sa[74] = 1.3075513f;
      sa[75] = -0.13784339f;
      sa[76] = 0.8336202f;
      sa[77] = 0.4928528f;
      sa[78] = -1.4097375f;
      sa[79] = 0.8740095f;
      sa[80] = -0.8052065f;
      sa[81] = 0.4968582f;
      sa[82] = 0.8645633f;
      sa[83] = -0.5837303f;
      sa[84] = -1.7274237f;
      sa[85] = -1.2225763f;
      sa[86] = 0.20874117f;
      sa[87] = 1.2125349f;
      sa[88] = -1.4744172f;
      sa[89] = -0.38911888f;
      sa[90] = -1.0127397f;
      sa[91] = 1.7328577f;
      sa[92] = -0.40028152f;
      sa[93] = 0.21805117f;
      sa[94] = -1.5641876f;
      sa[95] = -0.29790527f;
      sa[96] = -1.0306468f;
      sa[97] = 0.20388891f;
      sa[98] = -0.15354174f;
      sa[99] = 0.110630415f;
      sa[100] = -1.2920078f;
      sa[101] = -0.45473406f;
      sa[102] = 1.2996252f;
      sa[103] = 0.1560123f;
      sa[104] = -0.32709348f;
      sa[105] = -0.46577322f;
      sa[106] = 1.6386135f;
      sa[107] = 1.094346f;
      sa[108] = 0.81767386f;
      sa[109] = -0.08979607f;
      sa[110] = 0.8075868f;
      sa[111] = -0.85356426f;
      sa[112] = -1.2643478f;
      sa[113] = 0.31730893f;
      sa[114] = 0.11629569f;
      sa[115] = -0.2750067f;
      sa[116] = 1.0872884f;
      sa[117] = 0.0042328816f;
      sa[118] = -1.4653305f;
      sa[119] = -0.83472407f;
      sa[120] = -0.23406942f;
      sa[121] = 0.80232286f;
      sa[122] = -0.20914552f;
      sa[123] = 0.4946633f;
      sa[124] = -0.6903687f;
      sa[125] = 0.8734493f;
      sa[126] = -1.0765005f;
      sa[127] = 0.5912138f;
      sa[128] = -0.91458404f;
      sa[129] = 0.8703478f;
      sa[130] = -0.42917684f;
      sa[131] = 0.85657644f;
      sa[132] = 0.51962537f;
      sa[133] = 0.6737495f;
      sa[134] = 0.63088983f;
      sa[135] = -1.252707f;
      sa[136] = 0.50068974f;
      sa[137] = -0.52418286f;
      sa[138] = -0.056025196f;
      sa[139] = 1.14788f;
      sa[140] = -0.43570825f;
      sa[141] = -0.12603834f;
      sa[142] = 0.25644717f;
      sa[143] = -0.7274723f;
      sa[144] = 0.90728664f;
      sa[145] = -0.7474312f;
      sa[146] = -0.016567178f;
      sa[147] = -0.24854717f;
      sa[148] = -0.9286109f;
      sa[149] = 1.0920719f;
      sa[150] = -1.0681014f;
      sa[151] = -1.4686053f;
      sa[152] = 1.668268f;
      sa[153] = -0.5519976f;
      sa[154] = 1.3630993f;
      sa[155] = -1.50448f;
      sa[156] = -1.4921641f;
      sa[157] = -1.18088f;
      sa[158] = -0.25206175f;
      sa[159] = -0.5116826f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_32x6_Tanh_03 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_32x6_Tanh_03_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_32x6_Tanh_03_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_32x6_Tanh_03_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_32x6_Tanh_03_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_03_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


