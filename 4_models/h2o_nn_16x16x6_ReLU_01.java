/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:41:08.605+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_01

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_01 > h2o_nn_16x16x6_ReLU_01.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_01.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_01", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_01 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_01_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_01_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_01_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_01_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_01_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_01_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_01_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_01_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_01_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_01_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_01_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_01_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_01.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_01_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25,0.25,0.125,0.25,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_01() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(3611684936605280576L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_01_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_16x16x6_ReLU_01_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_01_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_01_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_01_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_01_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_01_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_01_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_01_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_01_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_01_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_01_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_01_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_01_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_01_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_01_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.6526410599629754;
      sa[1] = 0.6086229684527326;
      sa[2] = 0.598779766750516;
      sa[3] = 0.5179253304177083;
      sa[4] = 0.46599130728781385;
      sa[5] = 0.6518898101574461;
      sa[6] = 0.3521316372562997;
      sa[7] = 0.5846658740689327;
      sa[8] = 0.5993568108266976;
      sa[9] = 0.5514753722582545;
      sa[10] = 0.49483645540917476;
      sa[11] = 0.4679302715053119;
      sa[12] = 0.3166261194723921;
      sa[13] = 0.5756040051565361;
      sa[14] = 0.5543822320968931;
      sa[15] = 0.5204795914542745;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_01_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_01_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_01_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.067088538635584;
      sa[1] = 1.0160149961118128;
      sa[2] = 0.9065168289427072;
      sa[3] = 0.963420234832307;
      sa[4] = 0.9629578625048635;
      sa[5] = 0.9822423319506508;
      sa[6] = 0.9680425446191064;
      sa[7] = 0.9046734098113298;
      sa[8] = 0.8608981744640789;
      sa[9] = 1.0621337258449204;
      sa[10] = 0.8865079388039798;
      sa[11] = 0.9987293845432018;
      sa[12] = 0.9986435825153513;
      sa[13] = 1.0309147817626236;
      sa[14] = 1.1020698194304759;
      sa[15] = 1.0315819111931341;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_01_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_01_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_01_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.07302422253425699;
      sa[1] = 0.017531009339742273;
      sa[2] = -0.036552240554499675;
      sa[3] = 0.0023464482661315956;
      sa[4] = 0.046733183922765494;
    }
  }
}
class h2o_nn_16x16x6_ReLU_01_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_01_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[208];
  static {
    h2o_nn_16x16x6_ReLU_01_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_01_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.17153832f;
      sa[1] = 0.26552066f;
      sa[2] = 0.25956005f;
      sa[3] = 0.30196762f;
      sa[4] = 0.17668258f;
      sa[5] = -0.2587776f;
      sa[6] = -0.2431464f;
      sa[7] = 0.3860161f;
      sa[8] = 0.17090416f;
      sa[9] = -0.18756543f;
      sa[10] = 0.072900355f;
      sa[11] = -0.38203743f;
      sa[12] = 0.016840246f;
      sa[13] = -0.3608707f;
      sa[14] = -0.34157366f;
      sa[15] = 0.007410756f;
      sa[16] = 0.22432563f;
      sa[17] = 0.22602385f;
      sa[18] = -0.33529976f;
      sa[19] = 0.16726506f;
      sa[20] = 0.34886673f;
      sa[21] = -0.4893889f;
      sa[22] = 0.39999422f;
      sa[23] = 0.058645137f;
      sa[24] = 0.2642416f;
      sa[25] = 0.17918232f;
      sa[26] = -0.31300154f;
      sa[27] = 0.4299796f;
      sa[28] = 0.4124319f;
      sa[29] = -0.49148706f;
      sa[30] = -0.58143765f;
      sa[31] = 0.30823934f;
      sa[32] = 0.37433743f;
      sa[33] = -0.40042824f;
      sa[34] = 0.28043914f;
      sa[35] = -0.0633296f;
      sa[36] = -0.121969074f;
      sa[37] = 0.4826247f;
      sa[38] = -0.12238515f;
      sa[39] = 0.35145372f;
      sa[40] = 0.049479038f;
      sa[41] = -0.087108895f;
      sa[42] = -0.18964423f;
      sa[43] = 0.4104159f;
      sa[44] = 0.29971448f;
      sa[45] = -0.240231f;
      sa[46] = 0.044898767f;
      sa[47] = 0.056667905f;
      sa[48] = 0.31813222f;
      sa[49] = 0.5031941f;
      sa[50] = 0.20358938f;
      sa[51] = -0.3637291f;
      sa[52] = -0.06201011f;
      sa[53] = 0.45155355f;
      sa[54] = 0.31614015f;
      sa[55] = -0.035097227f;
      sa[56] = -0.11687027f;
      sa[57] = -0.4230464f;
      sa[58] = 0.41466513f;
      sa[59] = -0.2964183f;
      sa[60] = -0.40799043f;
      sa[61] = 0.26109958f;
      sa[62] = -0.0027120085f;
      sa[63] = 0.09674945f;
      sa[64] = 0.10411137f;
      sa[65] = 0.07374971f;
      sa[66] = 0.05929471f;
      sa[67] = 0.24791788f;
      sa[68] = -0.1025412f;
      sa[69] = 0.29835913f;
      sa[70] = -0.11362434f;
      sa[71] = 0.32206187f;
      sa[72] = -0.18906815f;
      sa[73] = 0.2744401f;
      sa[74] = -0.118382305f;
      sa[75] = 0.03682085f;
      sa[76] = -0.37476236f;
      sa[77] = -0.12434551f;
      sa[78] = -0.235131f;
      sa[79] = 0.20592624f;
      sa[80] = -0.42211494f;
      sa[81] = -0.19122882f;
      sa[82] = 0.0021586088f;
      sa[83] = 0.0062432187f;
      sa[84] = 0.06539148f;
      sa[85] = -0.21634202f;
      sa[86] = 0.22264446f;
      sa[87] = 0.17699242f;
      sa[88] = 0.21830986f;
      sa[89] = 0.05673406f;
      sa[90] = 0.00398886f;
      sa[91] = 0.2224068f;
      sa[92] = -0.009298923f;
      sa[93] = -0.37988415f;
      sa[94] = -0.29388165f;
      sa[95] = -0.03943674f;
      sa[96] = 0.070433855f;
      sa[97] = 0.17056446f;
      sa[98] = 0.44232732f;
      sa[99] = -0.071930185f;
      sa[100] = -0.14042018f;
      sa[101] = -0.08987831f;
      sa[102] = -0.6017434f;
      sa[103] = 0.0061270283f;
      sa[104] = 0.05565676f;
      sa[105] = -0.038393788f;
      sa[106] = -0.2803159f;
      sa[107] = 0.32722217f;
      sa[108] = 0.19591753f;
      sa[109] = -0.15215078f;
      sa[110] = -0.6306573f;
      sa[111] = 0.1157723f;
      sa[112] = 0.058545955f;
      sa[113] = 0.2223547f;
      sa[114] = 0.085418f;
      sa[115] = 0.06493834f;
      sa[116] = -0.59575033f;
      sa[117] = 0.027607845f;
      sa[118] = -0.46825236f;
      sa[119] = -0.32545498f;
      sa[120] = 0.3228542f;
      sa[121] = 0.5830743f;
      sa[122] = 0.2823834f;
      sa[123] = 0.4474717f;
      sa[124] = 0.4351813f;
      sa[125] = 0.41596803f;
      sa[126] = -0.4658521f;
      sa[127] = -0.0684814f;
      sa[128] = -0.01219204f;
      sa[129] = 0.18704717f;
      sa[130] = -0.11076239f;
      sa[131] = 0.5466647f;
      sa[132] = 0.27811098f;
      sa[133] = -0.51753914f;
      sa[134] = 0.32072937f;
      sa[135] = -0.3915802f;
      sa[136] = -0.2558799f;
      sa[137] = -0.01073357f;
      sa[138] = 0.2917223f;
      sa[139] = -0.1745151f;
      sa[140] = -0.35476846f;
      sa[141] = -0.102130264f;
      sa[142] = 0.3520039f;
      sa[143] = -0.48432368f;
      sa[144] = 0.34812507f;
      sa[145] = -0.22636169f;
      sa[146] = -0.40219766f;
      sa[147] = 0.16235542f;
      sa[148] = 0.15354465f;
      sa[149] = 0.4011601f;
      sa[150] = 0.4782087f;
      sa[151] = -0.30564398f;
      sa[152] = -0.17540662f;
      sa[153] = 0.26210177f;
      sa[154] = 0.29076293f;
      sa[155] = -0.12849067f;
      sa[156] = 0.1486179f;
      sa[157] = -0.35724366f;
      sa[158] = 0.04149278f;
      sa[159] = -0.01071858f;
      sa[160] = 0.14120911f;
      sa[161] = 0.14707413f;
      sa[162] = 0.022178387f;
      sa[163] = -0.06197043f;
      sa[164] = 0.38124686f;
      sa[165] = -0.18509728f;
      sa[166] = -0.19441573f;
      sa[167] = -0.22018197f;
      sa[168] = 0.44373122f;
      sa[169] = 0.56601954f;
      sa[170] = 0.07721012f;
      sa[171] = 0.012520574f;
      sa[172] = 0.02770691f;
      sa[173] = -0.13249111f;
      sa[174] = 0.05599502f;
      sa[175] = -0.35196745f;
      sa[176] = -0.14735326f;
      sa[177] = -0.10271461f;
      sa[178] = 0.099695265f;
      sa[179] = 0.33293688f;
      sa[180] = 0.060791377f;
      sa[181] = -0.56277645f;
      sa[182] = -0.23779063f;
      sa[183] = 0.047125466f;
      sa[184] = 0.41211006f;
      sa[185] = 0.24663453f;
      sa[186] = -0.24527809f;
      sa[187] = 0.081901416f;
      sa[188] = -0.11781638f;
      sa[189] = 0.36344647f;
      sa[190] = 0.086683966f;
      sa[191] = -0.091399916f;
      sa[192] = -0.21017547f;
      sa[193] = 0.24150302f;
      sa[194] = 0.1568119f;
      sa[195] = 0.50947905f;
      sa[196] = 0.38822326f;
      sa[197] = -0.06001459f;
      sa[198] = 0.14696087f;
      sa[199] = 0.25852177f;
      sa[200] = -0.010298768f;
      sa[201] = -0.42468953f;
      sa[202] = 0.17107643f;
      sa[203] = -0.064129606f;
      sa[204] = -0.20164065f;
      sa[205] = 0.52213275f;
      sa[206] = 0.32721758f;
      sa[207] = 0.11715306f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_01_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_01_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_01_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.39658865f;
      sa[1] = 0.031829786f;
      sa[2] = -0.256448f;
      sa[3] = -0.25177816f;
      sa[4] = 0.021712529f;
      sa[5] = 0.12560482f;
      sa[6] = 0.33429804f;
      sa[7] = -0.08274211f;
      sa[8] = -0.26497746f;
      sa[9] = 0.2767235f;
      sa[10] = -0.13660756f;
      sa[11] = 0.08648569f;
      sa[12] = 0.15404998f;
      sa[13] = 0.030220296f;
      sa[14] = -0.34784114f;
      sa[15] = 0.29608145f;
      sa[16] = 0.47009104f;
      sa[17] = -0.054104857f;
      sa[18] = -0.10023517f;
      sa[19] = -0.20564324f;
      sa[20] = 0.30484635f;
      sa[21] = 0.06778492f;
      sa[22] = -0.3417041f;
      sa[23] = 0.29278073f;
      sa[24] = -0.42132056f;
      sa[25] = 0.25956646f;
      sa[26] = -0.026959253f;
      sa[27] = 0.38726237f;
      sa[28] = -0.29696503f;
      sa[29] = -0.22370715f;
      sa[30] = 0.0911099f;
      sa[31] = -0.24403468f;
      sa[32] = -0.32580972f;
      sa[33] = -0.4133355f;
      sa[34] = -0.12626328f;
      sa[35] = 0.2565465f;
      sa[36] = -0.1418629f;
      sa[37] = -0.023355301f;
      sa[38] = -0.06394669f;
      sa[39] = 0.2383642f;
      sa[40] = -0.34439895f;
      sa[41] = -0.31608424f;
      sa[42] = -0.35735226f;
      sa[43] = -0.48252675f;
      sa[44] = 0.04589828f;
      sa[45] = -0.50377834f;
      sa[46] = 0.27668577f;
      sa[47] = 0.2721949f;
      sa[48] = -0.38450763f;
      sa[49] = -0.31113493f;
      sa[50] = 0.16471033f;
      sa[51] = -0.1564675f;
      sa[52] = 0.31633705f;
      sa[53] = 0.2197249f;
      sa[54] = -0.11074463f;
      sa[55] = 0.38688046f;
      sa[56] = -0.34679717f;
      sa[57] = -0.2757168f;
      sa[58] = 0.047595207f;
      sa[59] = -0.08430279f;
      sa[60] = 0.35693473f;
      sa[61] = -0.23033988f;
      sa[62] = -0.06484066f;
      sa[63] = 0.07584927f;
      sa[64] = 0.35703674f;
      sa[65] = -0.16095045f;
      sa[66] = 0.20281127f;
      sa[67] = 0.4071796f;
      sa[68] = 0.21926594f;
      sa[69] = -0.22681268f;
      sa[70] = -0.41018963f;
      sa[71] = -0.12696195f;
      sa[72] = -0.42333442f;
      sa[73] = 0.33295125f;
      sa[74] = 0.40279013f;
      sa[75] = 0.038876377f;
      sa[76] = 0.2180074f;
      sa[77] = 0.080351345f;
      sa[78] = -0.39805636f;
      sa[79] = 0.23901942f;
      sa[80] = -0.23205747f;
      sa[81] = 0.047864404f;
      sa[82] = 0.22160847f;
      sa[83] = -0.18517783f;
      sa[84] = -0.49568793f;
      sa[85] = -0.41348863f;
      sa[86] = 0.046619106f;
      sa[87] = 0.32952258f;
      sa[88] = -0.40203995f;
      sa[89] = -0.17449331f;
      sa[90] = -0.3299462f;
      sa[91] = 0.35562593f;
      sa[92] = -0.090125434f;
      sa[93] = 0.08641021f;
      sa[94] = -0.33945408f;
      sa[95] = -0.10834349f;
      sa[96] = -0.29008704f;
      sa[97] = 0.07773399f;
      sa[98] = -0.11226213f;
      sa[99] = -0.15313622f;
      sa[100] = -0.32109216f;
      sa[101] = -0.07518414f;
      sa[102] = 0.21546133f;
      sa[103] = 0.103871875f;
      sa[104] = -0.21730517f;
      sa[105] = -0.066328585f;
      sa[106] = 0.35890025f;
      sa[107] = 0.19073607f;
      sa[108] = 0.2690302f;
      sa[109] = -0.15949105f;
      sa[110] = 0.17529482f;
      sa[111] = -0.3664168f;
      sa[112] = -0.38200057f;
      sa[113] = -0.098313324f;
      sa[114] = 0.17561598f;
      sa[115] = -0.15251169f;
      sa[116] = 0.37470886f;
      sa[117] = -0.07881195f;
      sa[118] = -0.39812967f;
      sa[119] = -0.2423693f;
      sa[120] = -0.16456902f;
      sa[121] = 0.19852647f;
      sa[122] = -0.052715704f;
      sa[123] = 0.05098675f;
      sa[124] = -0.26478446f;
      sa[125] = 0.15360212f;
      sa[126] = -0.22199352f;
      sa[127] = 0.0060531967f;
      sa[128] = -0.29440427f;
      sa[129] = 0.105153434f;
      sa[130] = 0.12630266f;
      sa[131] = 0.15220405f;
      sa[132] = 0.1600413f;
      sa[133] = 0.06673735f;
      sa[134] = 0.11386885f;
      sa[135] = -0.41763818f;
      sa[136] = 0.06077266f;
      sa[137] = -0.28205672f;
      sa[138] = 0.05813056f;
      sa[139] = 0.29929066f;
      sa[140] = -0.25041118f;
      sa[141] = -0.10680477f;
      sa[142] = 0.12050203f;
      sa[143] = -0.29617372f;
      sa[144] = 0.3143859f;
      sa[145] = -0.2345986f;
      sa[146] = 0.0670185f;
      sa[147] = 0.0066933385f;
      sa[148] = -0.3767082f;
      sa[149] = 0.1481206f;
      sa[150] = -0.23884328f;
      sa[151] = -0.4773555f;
      sa[152] = 0.53949964f;
      sa[153] = -0.4471245f;
      sa[154] = 0.368421f;
      sa[155] = -0.43546435f;
      sa[156] = -0.40123945f;
      sa[157] = -0.18221198f;
      sa[158] = 0.009844446f;
      sa[159] = -0.07366994f;
      sa[160] = 0.29270267f;
      sa[161] = -0.41100204f;
      sa[162] = 0.57216626f;
      sa[163] = -0.29193038f;
      sa[164] = 0.19410306f;
      sa[165] = -0.22969973f;
      sa[166] = 0.2787122f;
      sa[167] = -0.40346894f;
      sa[168] = 0.17816114f;
      sa[169] = -0.49269426f;
      sa[170] = 0.3331061f;
      sa[171] = 0.17934184f;
      sa[172] = 0.32332727f;
      sa[173] = 0.33205986f;
      sa[174] = 0.04594619f;
      sa[175] = -0.13660377f;
      sa[176] = -0.19517073f;
      sa[177] = 0.03663083f;
      sa[178] = -0.30359614f;
      sa[179] = -0.03941168f;
      sa[180] = -0.36202517f;
      sa[181] = -0.22094084f;
      sa[182] = 0.12392181f;
      sa[183] = -0.27093545f;
      sa[184] = 0.35213658f;
      sa[185] = 0.34817812f;
      sa[186] = -0.16320789f;
      sa[187] = -0.23739107f;
      sa[188] = -0.13428883f;
      sa[189] = -0.1820164f;
      sa[190] = -0.45787337f;
      sa[191] = -0.24011388f;
      sa[192] = -0.065521576f;
      sa[193] = 0.09369493f;
      sa[194] = -0.22073261f;
      sa[195] = -0.11277034f;
      sa[196] = 0.14973794f;
      sa[197] = -0.22680949f;
      sa[198] = 0.07548044f;
      sa[199] = 0.34978223f;
      sa[200] = 0.042441785f;
      sa[201] = 0.19214395f;
      sa[202] = 0.22672784f;
      sa[203] = -0.32591984f;
      sa[204] = 0.07851451f;
      sa[205] = 0.4523655f;
      sa[206] = -0.14893058f;
      sa[207] = 0.24649183f;
      sa[208] = -0.19163816f;
      sa[209] = 0.19992515f;
      sa[210] = -0.11207093f;
      sa[211] = -0.26156253f;
      sa[212] = -0.34719723f;
      sa[213] = 0.049051847f;
      sa[214] = -0.30838102f;
      sa[215] = -0.018607236f;
      sa[216] = 0.12352424f;
      sa[217] = 0.3915443f;
      sa[218] = -0.037194237f;
      sa[219] = 0.06714429f;
      sa[220] = 0.18828008f;
      sa[221] = -0.009589274f;
      sa[222] = -0.26965338f;
      sa[223] = -0.35883263f;
      sa[224] = 0.3271029f;
      sa[225] = 0.10274138f;
      sa[226] = -0.11867047f;
      sa[227] = 0.14095713f;
      sa[228] = -0.1518772f;
      sa[229] = -0.21342945f;
      sa[230] = -0.18431386f;
      sa[231] = -0.094628654f;
      sa[232] = 0.5664822f;
      sa[233] = -0.15777501f;
      sa[234] = -0.19775404f;
      sa[235] = 0.011328356f;
      sa[236] = -0.31442055f;
      sa[237] = 0.51787597f;
      sa[238] = 0.18336575f;
      sa[239] = 0.010539966f;
      sa[240] = -0.062126834f;
      sa[241] = -0.34575143f;
      sa[242] = -0.33481687f;
      sa[243] = 0.40991244f;
      sa[244] = 0.12573983f;
      sa[245] = 0.31128946f;
      sa[246] = 0.19994313f;
      sa[247] = -0.33871856f;
      sa[248] = -0.13615254f;
      sa[249] = -0.011332892f;
      sa[250] = 0.2805567f;
      sa[251] = 0.45512366f;
      sa[252] = 0.21685481f;
      sa[253] = -0.2867156f;
      sa[254] = 0.37739864f;
      sa[255] = 0.28939125f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_01_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_ReLU_01_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_01_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.01078533f;
      sa[1] = -1.5979862f;
      sa[2] = -1.5721866f;
      sa[3] = 1.3394386f;
      sa[4] = 0.36538008f;
      sa[5] = -0.23835032f;
      sa[6] = -1.6956441f;
      sa[7] = 1.498435f;
      sa[8] = 1.8042632f;
      sa[9] = 0.19890091f;
      sa[10] = 1.6861448f;
      sa[11] = 1.4226823f;
      sa[12] = 1.7722855f;
      sa[13] = -0.7350048f;
      sa[14] = -1.9846936f;
      sa[15] = -0.7594389f;
      sa[16] = 0.7536325f;
      sa[17] = -0.88878715f;
      sa[18] = -1.5002328f;
      sa[19] = -1.0212826f;
      sa[20] = -1.935312f;
      sa[21] = 0.26113665f;
      sa[22] = -2.0447743f;
      sa[23] = -0.62262946f;
      sa[24] = -0.53661287f;
      sa[25] = 1.9335847f;
      sa[26] = -0.3109356f;
      sa[27] = 1.1645254f;
      sa[28] = 1.2382251f;
      sa[29] = -0.84412915f;
      sa[30] = 0.22821997f;
      sa[31] = 0.15035556f;
      sa[32] = 0.4603138f;
      sa[33] = 0.30963048f;
      sa[34] = -0.64089847f;
      sa[35] = 1.0659335f;
      sa[36] = 0.55677617f;
      sa[37] = -1.3829595f;
      sa[38] = 0.5865348f;
      sa[39] = -0.22023414f;
      sa[40] = 0.14954135f;
      sa[41] = -0.8113037f;
      sa[42] = 0.4724765f;
      sa[43] = -0.047992554f;
      sa[44] = 0.9926372f;
      sa[45] = -1.9841521f;
      sa[46] = -2.2340872f;
      sa[47] = 0.007876155f;
      sa[48] = 1.6548519f;
      sa[49] = -0.2105993f;
      sa[50] = -0.49807888f;
      sa[51] = 1.8150269f;
      sa[52] = -1.7272927f;
      sa[53] = 0.9844612f;
      sa[54] = 1.8103203f;
      sa[55] = 1.099142f;
      sa[56] = -0.5964496f;
      sa[57] = -0.09274204f;
      sa[58] = 1.0008956f;
      sa[59] = 0.89341784f;
      sa[60] = -1.3824466f;
      sa[61] = 1.0029846f;
      sa[62] = -0.45580238f;
      sa[63] = -0.85191786f;
      sa[64] = 0.98083425f;
      sa[65] = -0.9593843f;
      sa[66] = -1.7992901f;
      sa[67] = -0.15530589f;
      sa[68] = 0.93774205f;
      sa[69] = -1.3574718f;
      sa[70] = -1.6684997f;
      sa[71] = -0.023878818f;
      sa[72] = -1.0112736f;
      sa[73] = -1.3083545f;
      sa[74] = -1.1903541f;
      sa[75] = 1.3158246f;
      sa[76] = 1.929838f;
      sa[77] = -0.5693316f;
      sa[78] = -1.3838829f;
      sa[79] = -0.3348039f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_01 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_01_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_01_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_01_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_ReLU_01_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_01_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


