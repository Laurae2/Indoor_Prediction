/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:41:30.627+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_03

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_03 > h2o_nn_16x16x6_ReLU_03.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_03.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_03", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_03 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_03_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_03_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_03_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_03_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_03_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_03_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_03_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_03.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_03_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.27956989247311825,0.13978494623655913,0.15053763440860216,0.27956989247311825,0.15053763440860216};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_03() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(2004160601117195040L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_03_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_16x16x6_ReLU_03_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_03_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_03_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_03_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_03_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_03_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_03_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.6663573119929643;
      sa[1] = 0.6905934213060799;
      sa[2] = 0.49223603581066017;
      sa[3] = 0.5550197047638659;
      sa[4] = 0.570933158632801;
      sa[5] = 0.5649381133783885;
      sa[6] = 0.37327280347884917;
      sa[7] = 0.7306456380006052;
      sa[8] = 0.5730783326389057;
      sa[9] = 0.5946322827457575;
      sa[10] = 0.43652187374316365;
      sa[11] = 0.21412770103052717;
      sa[12] = 0.43345989404482343;
      sa[13] = 0.4757382303096602;
      sa[14] = 0.5016685141499758;
      sa[15] = 0.5441025706688555;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_03_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.0415900775171736;
      sa[1] = 0.9812176427630219;
      sa[2] = 0.9384245552380769;
      sa[3] = 0.9775411428363388;
      sa[4] = 0.9952363259908302;
      sa[5] = 1.0336632907515764;
      sa[6] = 0.9438059466857021;
      sa[7] = 0.860234875379395;
      sa[8] = 0.9254793350378927;
      sa[9] = 1.0148434144609488;
      sa[10] = 0.8497256776145042;
      sa[11] = 1.0685731266455858;
      sa[12] = 1.0296495238074461;
      sa[13] = 0.9940907912515181;
      sa[14] = 1.0520772627562898;
      sa[15] = 1.1489957248874139;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_03_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_03_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.05123713054047251;
      sa[1] = 0.01894271705313582;
      sa[2] = -0.045846878250800374;
      sa[3] = -0.02041661338354935;
      sa[4] = 0.043250456852864626;
    }
  }
}
class h2o_nn_16x16x6_ReLU_03_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[208];
  static {
    h2o_nn_16x16x6_ReLU_03_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.19460742f;
      sa[1] = 0.30947345f;
      sa[2] = 0.3269567f;
      sa[3] = 0.32895377f;
      sa[4] = 0.07672864f;
      sa[5] = -0.35795093f;
      sa[6] = -0.13911024f;
      sa[7] = 0.43665957f;
      sa[8] = 0.25946224f;
      sa[9] = -0.27439055f;
      sa[10] = 0.111094266f;
      sa[11] = -0.3043305f;
      sa[12] = 0.16177265f;
      sa[13] = -0.13273275f;
      sa[14] = -0.4011212f;
      sa[15] = 3.216401E-4f;
      sa[16] = -0.03363658f;
      sa[17] = 0.22509274f;
      sa[18] = -0.31708005f;
      sa[19] = -0.029486062f;
      sa[20] = 0.38801983f;
      sa[21] = -0.25883463f;
      sa[22] = 0.4001388f;
      sa[23] = 0.15042335f;
      sa[24] = 0.568656f;
      sa[25] = 0.27237523f;
      sa[26] = -0.4744579f;
      sa[27] = 0.34335792f;
      sa[28] = 0.34109637f;
      sa[29] = -0.47968504f;
      sa[30] = -0.49154902f;
      sa[31] = 0.30209044f;
      sa[32] = 0.3533552f;
      sa[33] = -0.44832322f;
      sa[34] = 0.11713332f;
      sa[35] = -0.12438613f;
      sa[36] = -0.034313165f;
      sa[37] = 0.28609574f;
      sa[38] = -0.16174214f;
      sa[39] = 0.2337685f;
      sa[40] = -0.071915425f;
      sa[41] = -0.054601f;
      sa[42] = -0.13817845f;
      sa[43] = 0.12965962f;
      sa[44] = 0.23141031f;
      sa[45] = -0.052653212f;
      sa[46] = 0.01042574f;
      sa[47] = -0.021870859f;
      sa[48] = 0.26629525f;
      sa[49] = 0.47090623f;
      sa[50] = 0.29859108f;
      sa[51] = -0.55555296f;
      sa[52] = -0.1402225f;
      sa[53] = 0.25105673f;
      sa[54] = 0.39228758f;
      sa[55] = 0.091483556f;
      sa[56] = -0.19596109f;
      sa[57] = -0.4785206f;
      sa[58] = 0.624017f;
      sa[59] = -0.25629348f;
      sa[60] = -0.44205147f;
      sa[61] = 0.23642115f;
      sa[62] = 0.11876664f;
      sa[63] = 0.008885021f;
      sa[64] = 0.04134616f;
      sa[65] = 0.015608487f;
      sa[66] = 0.14515895f;
      sa[67] = 0.39445612f;
      sa[68] = 0.4451539f;
      sa[69] = 0.7325515f;
      sa[70] = -0.5113491f;
      sa[71] = 0.76516515f;
      sa[72] = -0.17856868f;
      sa[73] = 0.123956166f;
      sa[74] = -0.2570692f;
      sa[75] = 0.02212613f;
      sa[76] = -0.50270313f;
      sa[77] = -0.19765665f;
      sa[78] = -0.19459021f;
      sa[79] = 0.32692155f;
      sa[80] = -0.3314683f;
      sa[81] = -0.11595334f;
      sa[82] = -0.044752162f;
      sa[83] = 0.1975315f;
      sa[84] = 0.06698749f;
      sa[85] = -0.29210156f;
      sa[86] = 0.15800422f;
      sa[87] = 0.34387842f;
      sa[88] = 0.17767043f;
      sa[89] = -0.041225072f;
      sa[90] = -0.06685861f;
      sa[91] = 0.30259314f;
      sa[92] = 0.060475554f;
      sa[93] = -0.2410965f;
      sa[94] = -0.14497839f;
      sa[95] = 0.02351252f;
      sa[96] = -0.040827803f;
      sa[97] = 0.15953784f;
      sa[98] = 0.4140049f;
      sa[99] = -0.06172295f;
      sa[100] = -0.17273065f;
      sa[101] = -0.01849224f;
      sa[102] = -0.5794405f;
      sa[103] = 0.21338506f;
      sa[104] = 0.15202016f;
      sa[105] = -0.14445297f;
      sa[106] = -0.32085407f;
      sa[107] = -0.005010086f;
      sa[108] = 0.23211959f;
      sa[109] = -0.19622591f;
      sa[110] = -0.59993774f;
      sa[111] = 0.2409828f;
      sa[112] = 0.2777996f;
      sa[113] = 0.22164354f;
      sa[114] = -0.1279519f;
      sa[115] = 0.19107196f;
      sa[116] = -0.521978f;
      sa[117] = 0.06567585f;
      sa[118] = -0.5102475f;
      sa[119] = -0.2523943f;
      sa[120] = 0.26794833f;
      sa[121] = 0.44421127f;
      sa[122] = 0.30606353f;
      sa[123] = 0.49302822f;
      sa[124] = 0.40128872f;
      sa[125] = 0.45878866f;
      sa[126] = -0.48666468f;
      sa[127] = -0.05469136f;
      sa[128] = 0.17669348f;
      sa[129] = 0.24020697f;
      sa[130] = -0.2464416f;
      sa[131] = 0.4829138f;
      sa[132] = 0.22789441f;
      sa[133] = -0.37293485f;
      sa[134] = 0.18195057f;
      sa[135] = -0.3363661f;
      sa[136] = -0.31782866f;
      sa[137] = -0.03415118f;
      sa[138] = 0.106794395f;
      sa[139] = -0.16094543f;
      sa[140] = -0.28544608f;
      sa[141] = -0.30973256f;
      sa[142] = 0.27371567f;
      sa[143] = -0.52663577f;
      sa[144] = 0.4841162f;
      sa[145] = -0.30800632f;
      sa[146] = -0.32737935f;
      sa[147] = 0.3157664f;
      sa[148] = 0.2037031f;
      sa[149] = 0.37973428f;
      sa[150] = 0.3226207f;
      sa[151] = -0.48388577f;
      sa[152] = -0.016492374f;
      sa[153] = 0.34768432f;
      sa[154] = 0.26881146f;
      sa[155] = -0.15345924f;
      sa[156] = 0.13432577f;
      sa[157] = -0.3414671f;
      sa[158] = 0.10189155f;
      sa[159] = 0.14362094f;
      sa[160] = 0.039215364f;
      sa[161] = 0.2940724f;
      sa[162] = -0.1164093f;
      sa[163] = -0.14819391f;
      sa[164] = 0.3074931f;
      sa[165] = -0.097837955f;
      sa[166] = -0.273442f;
      sa[167] = -0.2598764f;
      sa[168] = 0.3046774f;
      sa[169] = 0.43267697f;
      sa[170] = -0.08218273f;
      sa[171] = -0.06413775f;
      sa[172] = -0.13805439f;
      sa[173] = -0.26278684f;
      sa[174] = -0.062963404f;
      sa[175] = -0.2527089f;
      sa[176] = -0.12548147f;
      sa[177] = -0.08108347f;
      sa[178] = -0.054480784f;
      sa[179] = 0.23425579f;
      sa[180] = 0.07500843f;
      sa[181] = -0.51675653f;
      sa[182] = -0.19924638f;
      sa[183] = 0.20650461f;
      sa[184] = 0.44773874f;
      sa[185] = 0.42582735f;
      sa[186] = -0.1793267f;
      sa[187] = -0.014662958f;
      sa[188] = -0.062135f;
      sa[189] = 0.35447788f;
      sa[190] = 0.015631476f;
      sa[191] = -0.07519534f;
      sa[192] = -0.19652863f;
      sa[193] = 0.25255224f;
      sa[194] = 0.13071865f;
      sa[195] = 0.44405067f;
      sa[196] = 0.31599888f;
      sa[197] = -0.013070695f;
      sa[198] = 0.2116132f;
      sa[199] = 0.09757286f;
      sa[200] = -0.12925178f;
      sa[201] = -0.31553125f;
      sa[202] = 0.19657953f;
      sa[203] = -0.060511637f;
      sa[204] = -0.3365969f;
      sa[205] = 0.5750605f;
      sa[206] = 0.3774745f;
      sa[207] = 0.1837849f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_03_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_03_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.52017134f;
      sa[1] = -0.03507969f;
      sa[2] = -0.21175888f;
      sa[3] = -0.2808028f;
      sa[4] = 0.029857589f;
      sa[5] = 0.04474199f;
      sa[6] = 0.34063035f;
      sa[7] = -0.09449463f;
      sa[8] = -0.32490116f;
      sa[9] = 0.2437912f;
      sa[10] = 0.13471219f;
      sa[11] = 0.099456534f;
      sa[12] = 0.19106919f;
      sa[13] = -0.0058046193f;
      sa[14] = -0.3544927f;
      sa[15] = 0.45950332f;
      sa[16] = 0.52541703f;
      sa[17] = -0.18801036f;
      sa[18] = -0.1040512f;
      sa[19] = -0.2328858f;
      sa[20] = 0.37958866f;
      sa[21] = 0.14123175f;
      sa[22] = -0.32644618f;
      sa[23] = 0.2693954f;
      sa[24] = -0.4304618f;
      sa[25] = 0.15907496f;
      sa[26] = 0.035890248f;
      sa[27] = 0.36232486f;
      sa[28] = -0.32764858f;
      sa[29] = -0.2124695f;
      sa[30] = 0.07112852f;
      sa[31] = -0.22797942f;
      sa[32] = -0.23267865f;
      sa[33] = -0.5037353f;
      sa[34] = -0.06597919f;
      sa[35] = 0.24421065f;
      sa[36] = -0.07042756f;
      sa[37] = 0.01836122f;
      sa[38] = -0.01692756f;
      sa[39] = 0.2649168f;
      sa[40] = -0.3017768f;
      sa[41] = -0.39145002f;
      sa[42] = -0.15910341f;
      sa[43] = -0.440909f;
      sa[44] = 0.054104034f;
      sa[45] = -0.4716844f;
      sa[46] = 0.2924109f;
      sa[47] = 0.20192237f;
      sa[48] = -0.34101495f;
      sa[49] = -0.3362885f;
      sa[50] = 0.12084917f;
      sa[51] = -0.13723859f;
      sa[52] = 0.19163392f;
      sa[53] = 0.17834447f;
      sa[54] = -0.115344f;
      sa[55] = 0.36313623f;
      sa[56] = -0.28489432f;
      sa[57] = -0.3386443f;
      sa[58] = 0.08045913f;
      sa[59] = -0.14018969f;
      sa[60] = 0.3806432f;
      sa[61] = -0.18155333f;
      sa[62] = -0.072331995f;
      sa[63] = 0.07495164f;
      sa[64] = 0.3307711f;
      sa[65] = -0.14757158f;
      sa[66] = 0.20182078f;
      sa[67] = 0.42684975f;
      sa[68] = 0.32474744f;
      sa[69] = 0.10671322f;
      sa[70] = -0.4266458f;
      sa[71] = -0.118466735f;
      sa[72] = -0.36166644f;
      sa[73] = 0.3875854f;
      sa[74] = 0.19703504f;
      sa[75] = -0.018703528f;
      sa[76] = 0.17910203f;
      sa[77] = 0.13433048f;
      sa[78] = -0.36714998f;
      sa[79] = 0.18782154f;
      sa[80] = -0.15899597f;
      sa[81] = 0.045168173f;
      sa[82] = 0.26805535f;
      sa[83] = -0.1651475f;
      sa[84] = -0.5090979f;
      sa[85] = -0.5575324f;
      sa[86] = 0.09158606f;
      sa[87] = 0.3818142f;
      sa[88] = -0.40965495f;
      sa[89] = -0.17165716f;
      sa[90] = -0.16080323f;
      sa[91] = 0.39539146f;
      sa[92] = 0.006299116f;
      sa[93] = 0.10234133f;
      sa[94] = -0.3417873f;
      sa[95] = -7.961706E-4f;
      sa[96] = -0.20582996f;
      sa[97] = -0.07696076f;
      sa[98] = -0.095379956f;
      sa[99] = -0.05151681f;
      sa[100] = -0.3033684f;
      sa[101] = -0.051937006f;
      sa[102] = 0.3008545f;
      sa[103] = 0.07579295f;
      sa[104] = -0.1910353f;
      sa[105] = -0.14965792f;
      sa[106] = 0.5518739f;
      sa[107] = 0.24713454f;
      sa[108] = 0.2631459f;
      sa[109] = -0.07829843f;
      sa[110] = 0.1404167f;
      sa[111] = -0.33873823f;
      sa[112] = -0.42005223f;
      sa[113] = -0.041251276f;
      sa[114] = 0.11408345f;
      sa[115] = -0.11203281f;
      sa[116] = 0.27863997f;
      sa[117] = -0.08125652f;
      sa[118] = -0.38976997f;
      sa[119] = -0.28458667f;
      sa[120] = -0.1741592f;
      sa[121] = 0.18151486f;
      sa[122] = -0.103403434f;
      sa[123] = 0.057111762f;
      sa[124] = -0.31803194f;
      sa[125] = 0.16515304f;
      sa[126] = -0.28912723f;
      sa[127] = -0.0065269545f;
      sa[128] = -0.42596453f;
      sa[129] = 0.16725583f;
      sa[130] = -0.024444137f;
      sa[131] = 0.23372933f;
      sa[132] = 0.06542537f;
      sa[133] = 0.056693282f;
      sa[134] = 0.15383783f;
      sa[135] = -0.3528374f;
      sa[136] = 0.15610006f;
      sa[137] = -0.24348551f;
      sa[138] = -0.18876533f;
      sa[139] = 0.30864975f;
      sa[140] = -0.24330114f;
      sa[141] = -0.0046342206f;
      sa[142] = 0.0983484f;
      sa[143] = -0.3977424f;
      sa[144] = 0.22949512f;
      sa[145] = -0.11961786f;
      sa[146] = 0.07388663f;
      sa[147] = 0.021395687f;
      sa[148] = -0.40265146f;
      sa[149] = 0.1221398f;
      sa[150] = -0.24001274f;
      sa[151] = -0.5188613f;
      sa[152] = 0.58845955f;
      sa[153] = -0.2492284f;
      sa[154] = 0.3743975f;
      sa[155] = -0.34743014f;
      sa[156] = -0.40530932f;
      sa[157] = -0.22864075f;
      sa[158] = 0.022002902f;
      sa[159] = -0.058694646f;
      sa[160] = 0.23817182f;
      sa[161] = -0.4289207f;
      sa[162] = 0.49382868f;
      sa[163] = -0.2945982f;
      sa[164] = 0.14251977f;
      sa[165] = -0.23839873f;
      sa[166] = 0.27375838f;
      sa[167] = -0.42117247f;
      sa[168] = 0.20730998f;
      sa[169] = -0.48922122f;
      sa[170] = 0.24484403f;
      sa[171] = 0.16933642f;
      sa[172] = 0.31509203f;
      sa[173] = 0.3427349f;
      sa[174] = -0.031229747f;
      sa[175] = -0.28317294f;
      sa[176] = -0.24013083f;
      sa[177] = 0.16270018f;
      sa[178] = -0.07354406f;
      sa[179] = 0.20167612f;
      sa[180] = -0.4233467f;
      sa[181] = -0.33994666f;
      sa[182] = 0.20789364f;
      sa[183] = -0.2729809f;
      sa[184] = 0.45098782f;
      sa[185] = 0.33769566f;
      sa[186] = -0.16473232f;
      sa[187] = -0.13657591f;
      sa[188] = -0.11169789f;
      sa[189] = -0.077191606f;
      sa[190] = -0.3421439f;
      sa[191] = -0.11744941f;
      sa[192] = -0.1461525f;
      sa[193] = 0.198813f;
      sa[194] = -0.23172888f;
      sa[195] = -0.14872892f;
      sa[196] = 0.19133423f;
      sa[197] = -0.1129937f;
      sa[198] = 0.032634288f;
      sa[199] = 0.379712f;
      sa[200] = 0.06698924f;
      sa[201] = 0.25502476f;
      sa[202] = 0.007815771f;
      sa[203] = -0.35537338f;
      sa[204] = 0.061590347f;
      sa[205] = 0.4335161f;
      sa[206] = -0.11099133f;
      sa[207] = 0.19955812f;
      sa[208] = -0.20717601f;
      sa[209] = 0.13877901f;
      sa[210] = -0.095575765f;
      sa[211] = -0.30808982f;
      sa[212] = -0.4320294f;
      sa[213] = -0.1780455f;
      sa[214] = -0.31225726f;
      sa[215] = -0.018638806f;
      sa[216] = 0.009518619f;
      sa[217] = 0.3407604f;
      sa[218] = 0.105187826f;
      sa[219] = 0.06973364f;
      sa[220] = 0.2265086f;
      sa[221] = -0.05959721f;
      sa[222] = -0.30151698f;
      sa[223] = -0.2793995f;
      sa[224] = 0.41298866f;
      sa[225] = 0.110444434f;
      sa[226] = -0.06400507f;
      sa[227] = 0.09385407f;
      sa[228] = -0.24800554f;
      sa[229] = -0.47281232f;
      sa[230] = -0.1952135f;
      sa[231] = -0.10154496f;
      sa[232] = 0.46053204f;
      sa[233] = -0.17100039f;
      sa[234] = 0.057700507f;
      sa[235] = 0.0671267f;
      sa[236] = -0.25271243f;
      sa[237] = 0.45374325f;
      sa[238] = 0.17596167f;
      sa[239] = 0.056752294f;
      sa[240] = -0.014716195f;
      sa[241] = -0.24455048f;
      sa[242] = -0.35084298f;
      sa[243] = 0.43359116f;
      sa[244] = 0.27089486f;
      sa[245] = 0.55919164f;
      sa[246] = 0.24939384f;
      sa[247] = -0.36012053f;
      sa[248] = -0.032132335f;
      sa[249] = 0.06325096f;
      sa[250] = 0.2660254f;
      sa[251] = 0.53632164f;
      sa[252] = 0.17944708f;
      sa[253] = -0.24282403f;
      sa[254] = 0.43911317f;
      sa[255] = 0.42943847f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_03_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_ReLU_03_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.034526892f;
      sa[1] = -1.6230263f;
      sa[2] = -1.6018652f;
      sa[3] = 1.2460014f;
      sa[4] = 0.37124455f;
      sa[5] = -0.18981501f;
      sa[6] = -1.675062f;
      sa[7] = 1.5247921f;
      sa[8] = 1.8315305f;
      sa[9] = 0.15972976f;
      sa[10] = 1.657048f;
      sa[11] = 1.4496726f;
      sa[12] = 1.7848233f;
      sa[13] = -0.6754849f;
      sa[14] = -1.9470321f;
      sa[15] = -0.756923f;
      sa[16] = 0.76754004f;
      sa[17] = -0.8635775f;
      sa[18] = -1.529528f;
      sa[19] = -0.9655625f;
      sa[20] = -1.9330955f;
      sa[21] = 0.30412164f;
      sa[22] = -1.9806765f;
      sa[23] = -0.6170931f;
      sa[24] = -0.5288605f;
      sa[25] = 1.9267144f;
      sa[26] = -0.3221239f;
      sa[27] = 1.2844723f;
      sa[28] = 1.2281564f;
      sa[29] = -0.792321f;
      sa[30] = 0.21457666f;
      sa[31] = 0.17203265f;
      sa[32] = 0.47140455f;
      sa[33] = 0.34480003f;
      sa[34] = -0.7735937f;
      sa[35] = 1.0643462f;
      sa[36] = 0.522592f;
      sa[37] = -2.064118f;
      sa[38] = 0.46593878f;
      sa[39] = -0.22203864f;
      sa[40] = 0.12045436f;
      sa[41] = -0.6860904f;
      sa[42] = 0.44413602f;
      sa[43] = -0.21592703f;
      sa[44] = 0.9826619f;
      sa[45] = -2.0096014f;
      sa[46] = -2.2528658f;
      sa[47] = 0.0032619832f;
      sa[48] = 1.6648141f;
      sa[49] = -0.24229601f;
      sa[50] = -0.4702294f;
      sa[51] = 1.8381454f;
      sa[52] = -1.723632f;
      sa[53] = 0.99275774f;
      sa[54] = 1.8223538f;
      sa[55] = 1.0626068f;
      sa[56] = -0.6414078f;
      sa[57] = -0.19337709f;
      sa[58] = 1.0502576f;
      sa[59] = 0.55069643f;
      sa[60] = -1.39206f;
      sa[61] = 0.9974507f;
      sa[62] = -0.45228994f;
      sa[63] = -0.87401855f;
      sa[64] = 0.97332436f;
      sa[65] = -0.9621819f;
      sa[66] = -1.7500602f;
      sa[67] = -0.13435212f;
      sa[68] = 0.9321146f;
      sa[69] = -1.2906067f;
      sa[70] = -1.6569902f;
      sa[71] = -0.013615232f;
      sa[72] = -1.0044926f;
      sa[73] = -1.2363831f;
      sa[74] = -1.1238545f;
      sa[75] = 1.3129201f;
      sa[76] = 1.9185468f;
      sa[77] = -0.58567005f;
      sa[78] = -1.3952253f;
      sa[79] = -0.32584348f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_03 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_03_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_03_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_03_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_ReLU_03_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_03_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


