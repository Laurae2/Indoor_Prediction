/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:41:06.914+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_32x6_Tanh_01

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_32x6_Tanh_01 > h2o_nn_32x6_Tanh_01.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_32x6_Tanh_01.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_32x6_Tanh_01", algorithm="deeplearning")
public class h2o_nn_32x6_Tanh_01 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,32,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_32x6_Tanh_01_Activation_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_01_Activation_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_01_Activation_2.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_32x6_Tanh_01_Bias_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_01_Bias_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_01_Bias_2.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_32x6_Tanh_01_Weight_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_01_Weight_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_01_Weight_2.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_32x6_Tanh_01.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_32x6_Tanh_01_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25,0.25,0.125,0.25,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_32x6_Tanh_01() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-8918057882814740352L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_32x6_Tanh_01_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_32x6_Tanh_01_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_01_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_32x6_Tanh_01_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_Tanh_01_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_01_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_32x6_Tanh_01_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_32x6_Tanh_01_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_01_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_32x6_Tanh_01_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_32x6_Tanh_01_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_Tanh_01_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_01_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.010479984823822532;
      sa[1] = 0.03571994821467435;
      sa[2] = -0.03281370324885741;
      sa[3] = -0.18710034608729992;
      sa[4] = -0.06201675906674459;
      sa[5] = -0.02386168112059894;
      sa[6] = 0.05772329088430025;
      sa[7] = 0.0673043942291104;
      sa[8] = -0.04726914487266751;
      sa[9] = 0.03307864903602923;
      sa[10] = 0.04187326453271303;
      sa[11] = 0.07486599143842505;
      sa[12] = 0.05801523774795449;
      sa[13] = 0.04072538317660144;
      sa[14] = -0.011373315138792868;
      sa[15] = 0.056525627853705164;
      sa[16] = -0.04354863546668943;
      sa[17] = 0.012838200826938352;
      sa[18] = -0.03358445172469014;
      sa[19] = -0.016284785491840842;
      sa[20] = 0.12314549011104944;
      sa[21] = -0.026753580524017648;
      sa[22] = -0.07171601837421081;
      sa[23] = 0.030950571460880285;
      sa[24] = -0.09779088209934465;
      sa[25] = 0.15784151231880486;
      sa[26] = -0.11243215213303653;
      sa[27] = 0.08653811764616032;
      sa[28] = -0.0904888534827786;
      sa[29] = 0.12302433732941766;
      sa[30] = -0.01994721189529838;
      sa[31] = 0.04775047089745487;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_32x6_Tanh_01_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_32x6_Tanh_01_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_01_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.12869958019643138;
      sa[1] = -0.046355632055916585;
      sa[2] = -0.063523597451085;
      sa[3] = 0.10590292521427722;
      sa[4] = -0.1558508609041484;
    }
  }
}
class h2o_nn_32x6_Tanh_01_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_32x6_Tanh_01_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[416];
  static {
    h2o_nn_32x6_Tanh_01_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_01_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.106112935f;
      sa[1] = 0.3855298f;
      sa[2] = 0.26907223f;
      sa[3] = 0.095006265f;
      sa[4] = -0.21892491f;
      sa[5] = -0.13678019f;
      sa[6] = -0.07319812f;
      sa[7] = 0.2972747f;
      sa[8] = 0.21217102f;
      sa[9] = -0.14575823f;
      sa[10] = -0.2807682f;
      sa[11] = -0.120623656f;
      sa[12] = 0.08277928f;
      sa[13] = -0.26446328f;
      sa[14] = -0.29522112f;
      sa[15] = -0.023348948f;
      sa[16] = 0.07575523f;
      sa[17] = 4.347488E-4f;
      sa[18] = -0.23069488f;
      sa[19] = 0.43988815f;
      sa[20] = 0.30590734f;
      sa[21] = -0.3422714f;
      sa[22] = 0.29988587f;
      sa[23] = -0.08223063f;
      sa[24] = 0.19961289f;
      sa[25] = 0.3368852f;
      sa[26] = -0.37538496f;
      sa[27] = 0.25423244f;
      sa[28] = 0.26178402f;
      sa[29] = -0.32776985f;
      sa[30] = -0.014223327f;
      sa[31] = 0.08716078f;
      sa[32] = 0.29262188f;
      sa[33] = -0.29188335f;
      sa[34] = 0.1552489f;
      sa[35] = -0.17828742f;
      sa[36] = 0.17842196f;
      sa[37] = 0.25997713f;
      sa[38] = -0.012187081f;
      sa[39] = 0.11508076f;
      sa[40] = -0.12016903f;
      sa[41] = -0.20099604f;
      sa[42] = -0.06569228f;
      sa[43] = 0.24013278f;
      sa[44] = 0.15405653f;
      sa[45] = -0.35237718f;
      sa[46] = 0.053735018f;
      sa[47] = -0.015214048f;
      sa[48] = 0.16220045f;
      sa[49] = 0.751937f;
      sa[50] = 0.052806295f;
      sa[51] = -0.26283944f;
      sa[52] = -0.059364356f;
      sa[53] = 0.33905438f;
      sa[54] = 0.25532022f;
      sa[55] = -1.5642084E-4f;
      sa[56] = -0.09845142f;
      sa[57] = -0.3333506f;
      sa[58] = 0.23254822f;
      sa[59] = -0.24619798f;
      sa[60] = -0.32272923f;
      sa[61] = 0.20799002f;
      sa[62] = 0.19190109f;
      sa[63] = 0.008346706f;
      sa[64] = 0.13517123f;
      sa[65] = 0.18336985f;
      sa[66] = 0.11971353f;
      sa[67] = 0.154229f;
      sa[68] = -0.077187486f;
      sa[69] = 0.14442149f;
      sa[70] = -0.10632263f;
      sa[71] = 0.25996745f;
      sa[72] = -0.21891774f;
      sa[73] = 0.20240174f;
      sa[74] = -0.14798272f;
      sa[75] = 0.11936318f;
      sa[76] = -0.18049456f;
      sa[77] = -0.16291134f;
      sa[78] = -0.028809896f;
      sa[79] = 0.18615155f;
      sa[80] = -0.23290868f;
      sa[81] = -0.143276f;
      sa[82] = -0.23040338f;
      sa[83] = 0.185577f;
      sa[84] = 0.030169642f;
      sa[85] = -0.23622593f;
      sa[86] = 0.16195433f;
      sa[87] = 0.35534716f;
      sa[88] = 0.20854686f;
      sa[89] = 0.12886146f;
      sa[90] = -0.22952881f;
      sa[91] = 0.08805355f;
      sa[92] = 0.07927842f;
      sa[93] = -0.25143972f;
      sa[94] = -0.002077861f;
      sa[95] = -0.23623584f;
      sa[96] = 0.035058856f;
      sa[97] = 0.0075920643f;
      sa[98] = 0.27373573f;
      sa[99] = -0.15658595f;
      sa[100] = -0.1301089f;
      sa[101] = -0.24968594f;
      sa[102] = -0.31106728f;
      sa[103] = -0.144036f;
      sa[104] = -0.02094822f;
      sa[105] = -0.25445637f;
      sa[106] = -0.34504458f;
      sa[107] = 0.20562686f;
      sa[108] = 0.1926646f;
      sa[109] = -0.29063073f;
      sa[110] = -0.15143752f;
      sa[111] = 0.16083072f;
      sa[112] = 0.09261694f;
      sa[113] = 0.014949154f;
      sa[114] = 0.027228272f;
      sa[115] = -0.23529181f;
      sa[116] = -0.20149882f;
      sa[117] = 0.021715961f;
      sa[118] = -0.26096267f;
      sa[119] = -0.16003534f;
      sa[120] = 0.13997437f;
      sa[121] = 0.22393718f;
      sa[122] = 0.3858855f;
      sa[123] = 0.4102608f;
      sa[124] = 0.3504254f;
      sa[125] = 0.41609386f;
      sa[126] = -0.29347888f;
      sa[127] = -0.3127506f;
      sa[128] = 0.16402443f;
      sa[129] = 0.22247066f;
      sa[130] = -0.16466771f;
      sa[131] = 0.21584427f;
      sa[132] = 0.1995373f;
      sa[133] = -0.4499417f;
      sa[134] = 0.04388747f;
      sa[135] = -0.31306395f;
      sa[136] = -0.06966553f;
      sa[137] = 0.07136572f;
      sa[138] = 0.20954293f;
      sa[139] = -0.1962949f;
      sa[140] = -0.11067624f;
      sa[141] = -0.24795409f;
      sa[142] = 0.42089286f;
      sa[143] = -0.28646326f;
      sa[144] = 0.20400299f;
      sa[145] = -0.15105559f;
      sa[146] = -0.39150426f;
      sa[147] = 0.05240895f;
      sa[148] = 0.25186184f;
      sa[149] = 0.58076125f;
      sa[150] = 0.39104134f;
      sa[151] = -0.2362357f;
      sa[152] = 0.048862025f;
      sa[153] = 0.30835328f;
      sa[154] = 0.1748808f;
      sa[155] = -0.06345944f;
      sa[156] = 0.14380158f;
      sa[157] = -0.28816018f;
      sa[158] = 0.12999511f;
      sa[159] = 0.0426344f;
      sa[160] = 0.047603738f;
      sa[161] = 0.20975807f;
      sa[162] = -0.086032964f;
      sa[163] = -0.018140005f;
      sa[164] = 0.33903506f;
      sa[165] = -0.10588389f;
      sa[166] = -0.1383977f;
      sa[167] = -0.11500961f;
      sa[168] = 0.29723173f;
      sa[169] = 0.39493993f;
      sa[170] = -0.0034148942f;
      sa[171] = -6.321383E-4f;
      sa[172] = -0.23984587f;
      sa[173] = -0.2837191f;
      sa[174] = 0.012641306f;
      sa[175] = -0.080850795f;
      sa[176] = 0.007054943f;
      sa[177] = 0.04766726f;
      sa[178] = -0.023867428f;
      sa[179] = 0.045086786f;
      sa[180] = -0.05491096f;
      sa[181] = -0.20775205f;
      sa[182] = -0.2030934f;
      sa[183] = -0.033351988f;
      sa[184] = 0.27592212f;
      sa[185] = 0.3067018f;
      sa[186] = -0.32081127f;
      sa[187] = 0.027075013f;
      sa[188] = -0.03511827f;
      sa[189] = 0.24995291f;
      sa[190] = -0.03284873f;
      sa[191] = -0.09602911f;
      sa[192] = -0.081693985f;
      sa[193] = 0.17068338f;
      sa[194] = 0.07822467f;
      sa[195] = 0.3738038f;
      sa[196] = 0.49904191f;
      sa[197] = 0.045475543f;
      sa[198] = 0.09242599f;
      sa[199] = 0.017405301f;
      sa[200] = 0.05373727f;
      sa[201] = -0.65900826f;
      sa[202] = 0.12775216f;
      sa[203] = 0.0039849523f;
      sa[204] = -0.13771488f;
      sa[205] = 0.14489706f;
      sa[206] = 0.4035818f;
      sa[207] = 0.0048289793f;
      sa[208] = -0.26093188f;
      sa[209] = 0.015535066f;
      sa[210] = -0.2844907f;
      sa[211] = -0.4104717f;
      sa[212] = 0.15146077f;
      sa[213] = -0.23005766f;
      sa[214] = -0.11176082f;
      sa[215] = 0.0047202683f;
      sa[216] = 0.11200684f;
      sa[217] = 0.3027089f;
      sa[218] = -0.25266048f;
      sa[219] = 0.36749148f;
      sa[220] = -0.29423738f;
      sa[221] = -0.0075945444f;
      sa[222] = 0.14774585f;
      sa[223] = 0.068389125f;
      sa[224] = 0.00717816f;
      sa[225] = 0.24762161f;
      sa[226] = -0.2710788f;
      sa[227] = 0.5691981f;
      sa[228] = 0.20525575f;
      sa[229] = 0.16034472f;
      sa[230] = 0.2112579f;
      sa[231] = -0.3549108f;
      sa[232] = -0.3083113f;
      sa[233] = 0.23455757f;
      sa[234] = 0.13004877f;
      sa[235] = -0.4069294f;
      sa[236] = -0.06532504f;
      sa[237] = -0.27005422f;
      sa[238] = -0.11324638f;
      sa[239] = 0.080204874f;
      sa[240] = 0.07469199f;
      sa[241] = -0.2052454f;
      sa[242] = -0.06064146f;
      sa[243] = -0.34581724f;
      sa[244] = -0.20016034f;
      sa[245] = -0.22661382f;
      sa[246] = -0.2209916f;
      sa[247] = -0.05814806f;
      sa[248] = 0.29462665f;
      sa[249] = 0.271106f;
      sa[250] = -0.13012464f;
      sa[251] = -0.033667725f;
      sa[252] = -0.34483743f;
      sa[253] = -0.46989912f;
      sa[254] = -0.34339598f;
      sa[255] = 0.15691659f;
      sa[256] = -0.17605877f;
      sa[257] = 0.42365995f;
      sa[258] = -0.37514535f;
      sa[259] = -0.17702377f;
      sa[260] = -0.24488474f;
      sa[261] = -0.07044341f;
      sa[262] = -0.10869248f;
      sa[263] = 0.29397562f;
      sa[264] = -0.44204503f;
      sa[265] = 0.1670982f;
      sa[266] = -0.42267293f;
      sa[267] = -0.32158828f;
      sa[268] = 0.089790896f;
      sa[269] = -0.095348306f;
      sa[270] = -0.19288357f;
      sa[271] = 0.32916325f;
      sa[272] = -0.37169895f;
      sa[273] = -0.15003593f;
      sa[274] = 0.17116338f;
      sa[275] = -0.03621206f;
      sa[276] = 0.1724517f;
      sa[277] = -0.29315054f;
      sa[278] = -0.10700897f;
      sa[279] = 0.0705033f;
      sa[280] = -0.26677525f;
      sa[281] = 0.25382832f;
      sa[282] = -0.07246092f;
      sa[283] = 0.01104148f;
      sa[284] = 0.03838421f;
      sa[285] = -0.27563858f;
      sa[286] = 0.25770098f;
      sa[287] = 0.18762997f;
      sa[288] = -0.23510693f;
      sa[289] = -0.18213136f;
      sa[290] = 0.10112771f;
      sa[291] = -0.029414793f;
      sa[292] = -0.017109443f;
      sa[293] = -0.098517835f;
      sa[294] = 0.11717038f;
      sa[295] = 0.09384778f;
      sa[296] = 0.32433453f;
      sa[297] = 0.23400033f;
      sa[298] = -0.053458262f;
      sa[299] = -0.021990808f;
      sa[300] = 0.1820407f;
      sa[301] = -0.0023576862f;
      sa[302] = 0.17466804f;
      sa[303] = 0.11321959f;
      sa[304] = -0.2306918f;
      sa[305] = -0.28144318f;
      sa[306] = 0.24187638f;
      sa[307] = -0.142779f;
      sa[308] = 0.1188809f;
      sa[309] = 0.006013396f;
      sa[310] = 0.4975177f;
      sa[311] = 0.220452f;
      sa[312] = -0.3002588f;
      sa[313] = -0.2616762f;
      sa[314] = -0.28319827f;
      sa[315] = 0.046660487f;
      sa[316] = -0.010485985f;
      sa[317] = -0.15553875f;
      sa[318] = 0.17761661f;
      sa[319] = 0.29362154f;
      sa[320] = -0.13462281f;
      sa[321] = 0.120312996f;
      sa[322] = 0.41643974f;
      sa[323] = -0.33756736f;
      sa[324] = 0.11768811f;
      sa[325] = 0.38462982f;
      sa[326] = -0.39024916f;
      sa[327] = 0.075159915f;
      sa[328] = -0.24021462f;
      sa[329] = 0.07942822f;
      sa[330] = -0.113801986f;
      sa[331] = 0.23547816f;
      sa[332] = -0.24827509f;
      sa[333] = 0.22483721f;
      sa[334] = -0.071693026f;
      sa[335] = 0.13686115f;
      sa[336] = -0.17833936f;
      sa[337] = -0.10301752f;
      sa[338] = 0.2792223f;
      sa[339] = -0.22007254f;
      sa[340] = -0.4329528f;
      sa[341] = -0.21060361f;
      sa[342] = 0.20912044f;
      sa[343] = -0.10784306f;
      sa[344] = -0.30971748f;
      sa[345] = 0.17673258f;
      sa[346] = 0.15491885f;
      sa[347] = -0.19425836f;
      sa[348] = 0.43886134f;
      sa[349] = -0.37394166f;
      sa[350] = -0.33642352f;
      sa[351] = 0.18126744f;
      sa[352] = 0.28678718f;
      sa[353] = 0.04181605f;
      sa[354] = -0.018868886f;
      sa[355] = 0.028134238f;
      sa[356] = -0.123329856f;
      sa[357] = 0.30123362f;
      sa[358] = -0.29442614f;
      sa[359] = 0.14344823f;
      sa[360] = 0.1614415f;
      sa[361] = -0.22224633f;
      sa[362] = -0.029277032f;
      sa[363] = 0.23378415f;
      sa[364] = -0.22323768f;
      sa[365] = -0.26908997f;
      sa[366] = -0.048853528f;
      sa[367] = -0.13079982f;
      sa[368] = 0.012160282f;
      sa[369] = 0.22757937f;
      sa[370] = -0.45249218f;
      sa[371] = 0.104882374f;
      sa[372] = -0.10650124f;
      sa[373] = 0.27695602f;
      sa[374] = -0.084000506f;
      sa[375] = -0.34440055f;
      sa[376] = -0.43090904f;
      sa[377] = -0.23840898f;
      sa[378] = 0.24501166f;
      sa[379] = 0.12106073f;
      sa[380] = -0.18684863f;
      sa[381] = -0.1733323f;
      sa[382] = -0.06892736f;
      sa[383] = 0.039247815f;
      sa[384] = -0.09717632f;
      sa[385] = 0.17576754f;
      sa[386] = -0.3339325f;
      sa[387] = -0.29733163f;
      sa[388] = 0.049593173f;
      sa[389] = 0.13288143f;
      sa[390] = 0.055076595f;
      sa[391] = 0.045682993f;
      sa[392] = 0.34283793f;
      sa[393] = 0.24765177f;
      sa[394] = -0.20354204f;
      sa[395] = 0.43222713f;
      sa[396] = 0.213061f;
      sa[397] = -0.40367395f;
      sa[398] = 0.107623026f;
      sa[399] = 0.22752845f;
      sa[400] = 0.12809841f;
      sa[401] = 0.42816418f;
      sa[402] = -0.32686085f;
      sa[403] = 0.040064853f;
      sa[404] = 0.21121967f;
      sa[405] = -0.33191732f;
      sa[406] = 0.16679636f;
      sa[407] = 0.2542544f;
      sa[408] = -0.418646f;
      sa[409] = -0.28171515f;
      sa[410] = -0.087701455f;
      sa[411] = 0.15814745f;
      sa[412] = -0.28478682f;
      sa[413] = 0.14874306f;
      sa[414] = 0.116057254f;
      sa[415] = 0.3191612f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_32x6_Tanh_01_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[160];
  static {
    h2o_nn_32x6_Tanh_01_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_01_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 1.3691682f;
      sa[1] = -0.26625112f;
      sa[2] = -0.2944303f;
      sa[3] = -0.86295843f;
      sa[4] = 0.096477784f;
      sa[5] = 0.12896264f;
      sa[6] = 1.469465f;
      sa[7] = -0.5789996f;
      sa[8] = -1.2110387f;
      sa[9] = 0.50050884f;
      sa[10] = -0.07897648f;
      sa[11] = 0.508909f;
      sa[12] = 0.069784544f;
      sa[13] = 0.21048345f;
      sa[14] = -1.1426133f;
      sa[15] = 1.3022974f;
      sa[16] = 1.8546567f;
      sa[17] = -0.60095644f;
      sa[18] = 0.03850169f;
      sa[19] = -0.43523526f;
      sa[20] = 1.3483611f;
      sa[21] = 0.2674377f;
      sa[22] = -0.85576725f;
      sa[23] = 0.7330281f;
      sa[24] = -1.5942996f;
      sa[25] = 0.22219214f;
      sa[26] = -0.60830206f;
      sa[27] = 1.5098764f;
      sa[28] = -1.3084542f;
      sa[29] = -0.2832937f;
      sa[30] = 0.60006386f;
      sa[31] = -0.82907295f;
      sa[32] = -1.1525729f;
      sa[33] = -1.5814676f;
      sa[34] = -0.124442704f;
      sa[35] = 1.4901495f;
      sa[36] = -0.39455476f;
      sa[37] = -0.20316683f;
      sa[38] = 0.16461696f;
      sa[39] = 0.7303861f;
      sa[40] = -0.44916058f;
      sa[41] = -1.5820285f;
      sa[42] = -1.1068125f;
      sa[43] = -1.6252297f;
      sa[44] = -0.025749676f;
      sa[45] = -1.2924539f;
      sa[46] = 1.1809056f;
      sa[47] = 1.6354738f;
      sa[48] = -1.2702659f;
      sa[49] = -1.243582f;
      sa[50] = 0.30257708f;
      sa[51] = -0.09136104f;
      sa[52] = 1.0912031f;
      sa[53] = 0.88871557f;
      sa[54] = -0.3039004f;
      sa[55] = 1.2468653f;
      sa[56] = -1.0791695f;
      sa[57] = -1.1543754f;
      sa[58] = 0.33399862f;
      sa[59] = -0.2752191f;
      sa[60] = 1.4140263f;
      sa[61] = -0.65235597f;
      sa[62] = -0.39416918f;
      sa[63] = 0.8612079f;
      sa[64] = 1.4345081f;
      sa[65] = -0.5872552f;
      sa[66] = 0.6180217f;
      sa[67] = 1.5732564f;
      sa[68] = 0.72669697f;
      sa[69] = -0.8429081f;
      sa[70] = -1.6378587f;
      sa[71] = -0.46573308f;
      sa[72] = -1.2415086f;
      sa[73] = 1.2532401f;
      sa[74] = 1.4124085f;
      sa[75] = -0.051233545f;
      sa[76] = 0.9083398f;
      sa[77] = 0.43022835f;
      sa[78] = -1.3408711f;
      sa[79] = 0.9208612f;
      sa[80] = -0.7795386f;
      sa[81] = 0.32787076f;
      sa[82] = 0.7870956f;
      sa[83] = -0.590333f;
      sa[84] = -1.6917617f;
      sa[85] = -1.3137355f;
      sa[86] = 0.26525632f;
      sa[87] = 1.2647636f;
      sa[88] = -1.4777765f;
      sa[89] = -0.4381916f;
      sa[90] = -1.0261824f;
      sa[91] = 1.5560114f;
      sa[92] = -0.35329556f;
      sa[93] = 0.27425185f;
      sa[94] = -1.6356839f;
      sa[95] = -0.1360321f;
      sa[96] = -1.1214579f;
      sa[97] = 0.38274816f;
      sa[98] = -0.09176881f;
      sa[99] = 0.15487592f;
      sa[100] = -1.2000766f;
      sa[101] = -0.35737032f;
      sa[102] = 1.212594f;
      sa[103] = 0.11967209f;
      sa[104] = -0.23932287f;
      sa[105] = -0.4206789f;
      sa[106] = 1.3691366f;
      sa[107] = 1.1755292f;
      sa[108] = 0.7987376f;
      sa[109] = 0.02193589f;
      sa[110] = 0.71162283f;
      sa[111] = -0.95770264f;
      sa[112] = -1.1774918f;
      sa[113] = 0.25160876f;
      sa[114] = 0.37258184f;
      sa[115] = -0.5303617f;
      sa[116] = 1.1447921f;
      sa[117] = 0.07757142f;
      sa[118] = -1.5045502f;
      sa[119] = -0.9242856f;
      sa[120] = -0.25263098f;
      sa[121] = 1.1460689f;
      sa[122] = -0.10463863f;
      sa[123] = 0.4217273f;
      sa[124] = -0.7597758f;
      sa[125] = 0.7606174f;
      sa[126] = -0.9479901f;
      sa[127] = 0.31731132f;
      sa[128] = -1.1122727f;
      sa[129] = 0.75287694f;
      sa[130] = -0.39079252f;
      sa[131] = 0.9864064f;
      sa[132] = 0.4881332f;
      sa[133] = 0.62267894f;
      sa[134] = 0.70456696f;
      sa[135] = -1.1425486f;
      sa[136] = 0.6040077f;
      sa[137] = -0.62243056f;
      sa[138] = -0.13384944f;
      sa[139] = 1.1860485f;
      sa[140] = -0.48075095f;
      sa[141] = -0.04649127f;
      sa[142] = 0.2139197f;
      sa[143] = -0.7805365f;
      sa[144] = 0.8880186f;
      sa[145] = -0.78216755f;
      sa[146] = -0.02129349f;
      sa[147] = -0.21563743f;
      sa[148] = -0.8610846f;
      sa[149] = 1.1002395f;
      sa[150] = -0.9801852f;
      sa[151] = -1.5301552f;
      sa[152] = 1.6364679f;
      sa[153] = -0.5759935f;
      sa[154] = 1.3641529f;
      sa[155] = -1.5538492f;
      sa[156] = -1.4313779f;
      sa[157] = -1.1513696f;
      sa[158] = -0.23239297f;
      sa[159] = -0.5182783f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_32x6_Tanh_01 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_32x6_Tanh_01_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_32x6_Tanh_01_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_32x6_Tanh_01_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_32x6_Tanh_01_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_01_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


