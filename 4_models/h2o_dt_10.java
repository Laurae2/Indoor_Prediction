/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:42:57.826+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DRFModel named h2o_dt_10

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_dt_10 > h2o_dt_10.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_dt_10.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_dt_10", algorithm="drf")
public class h2o_dt_10 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 6; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_dt_10.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_dt_10_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.24761904761904763,0.18571428571428572,0.06190476190476191,0.12857142857142856,0.24761904761904763,0.12857142857142856};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.24761904761904763,0.18571428571428572,0.06190476190476191,0.12857142857142856,0.24761904761904763,0.12857142857142856};

  public h2o_dt_10() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(3035623909317354312L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    h2o_dt_10_Forest_0.score0(data,preds);
    double sum = 0;
    for(int i=1; i<preds.length; i++) { sum += preds[i]; }
    if (sum>0) for(int i=1; i<preds.length; i++) { preds[i] /= sum; }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_h2o_dt_10 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_dt_10_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_dt_10_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_dt_10_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_dt_10_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_dt_10_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}

class h2o_dt_10_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += h2o_dt_10_Tree_0_class_0.score0(fdata);
    preds[2] += h2o_dt_10_Tree_0_class_1.score0(fdata);
    preds[3] += h2o_dt_10_Tree_0_class_2.score0(fdata);
    preds[4] += h2o_dt_10_Tree_0_class_3.score0(fdata);
    preds[5] += h2o_dt_10_Tree_0_class_4.score0(fdata);
    preds[6] += h2o_dt_10_Tree_0_class_5.score0(fdata);
  }
}
class h2o_dt_10_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[11 /* X34 */] <-0.2411377f ? 
         (data[0 /* X5 */] <0.04694696f ? 
            1.0f : 
             (Double.isNaN(data[0]) || data[0 /* X5 */] <0.24074556f ? 
                0.0f : 
                 (data[0 /* X5 */] <0.2447896f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[10]) || data[10 /* X28 */] <0.049764123f ? 
             (data[6 /* X20 */] <-0.54404056f ? 
                 (Double.isNaN(data[11]) || data[11 /* X34 */] <0.42418835f ? 
                    0.0f : 
                     (data[1 /* X12 */] <0.036565673f ? 
                        0.0f : 
                         (Double.isNaN(data[0]) || data[0 /* X5 */] <0.26837632f ? 
                            1.0f : 
                            0.0f))) : 
                 (Double.isNaN(data[7]) || data[7 /* X21 */] <0.23708394f ? 
                     (Double.isNaN(data[1]) || data[1 /* X12 */] <0.062121328f ? 
                         (data[5 /* X19 */] <-0.048136353f ? 
                             (Double.isNaN(data[0]) || data[0 /* X5 */] <0.23433612f ? 
                                0.0f : 
                                1.0f) : 
                             (Double.isNaN(data[4]) || data[4 /* X18 */] <0.14015742f ? 
                                 (data[6 /* X20 */] <-0.39337987f ? 
                                     (data[0 /* X5 */] <0.15257867f ? 
                                        0.0f : 
                                        1.0f) : 
                                    1.0f) : 
                                0.0f)) : 
                         (data[2 /* X15 */] <0.21495827f ? 
                            0.0f : 
                             (Double.isNaN(data[5]) || data[5 /* X19 */] <0.6064974f ? 
                                 (data[0 /* X5 */] <0.109711915f ? 
                                    0.0f : 
                                    1.0f) : 
                                0.0f))) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class h2o_dt_10_Tree_0_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[6 /* X20 */] <-0.49384737f ? 
         (Double.isNaN(data[1]) || data[1 /* X12 */] <0.25399265f ? 
             (Double.isNaN(data[0]) || data[0 /* X5 */] <0.29177228f ? 
                1.0f : 
                0.0f) : 
             (Double.isNaN(data[11]) || data[11 /* X34 */] <0.367486f ? 
                 (data[2 /* X15 */] <0.23591903f ? 
                     (data[3 /* X17 */] <-0.18574007f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* X5 */] <0.269385f ? 
                    0.0f : 
                    1.0f))) : 
         (data[6 /* X20 */] <-0.3983753f ? 
             (data[8 /* X23 */] <0.17720962f ? 
                 (data[1 /* X12 */] <-0.33843994f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
             (Double.isNaN(data[5]) || data[5 /* X19 */] <0.9101853f ? 
                0.0f : 
                 (data[0 /* X5 */] <0.15198582f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class h2o_dt_10_Tree_0_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1]) || data[1 /* X12 */] <0.11590539f ? 
        0.0f : 
         (data[2 /* X15 */] <0.21449526f ? 
             (Double.isNaN(data[3]) || data[3 /* X17 */] <-0.014982652f ? 
                1.0f : 
                0.0f) : 
             (data[4 /* X18 */] <-0.05548095f ? 
                 (data[5 /* X19 */] <0.3022698f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class h2o_dt_10_Tree_0_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* X20 */] <0.0091725085f ? 
         (Double.isNaN(data[2]) || data[2 /* X15 */] <0.47024587f ? 
             (Double.isNaN(data[7]) || data[7 /* X21 */] <0.46283108f ? 
                 (Double.isNaN(data[4]) || data[4 /* X18 */] <0.34288234f ? 
                    0.0f : 
                     (data[0 /* X5 */] <0.18771982f ? 
                        1.0f : 
                        0.0f)) : 
                1.0f) : 
            1.0f) : 
         (data[1 /* X12 */] <-0.6307434f ? 
            0.0f : 
             (data[11 /* X34 */] <-0.82271653f ? 
                1.0f : 
                 (data[2 /* X15 */] <0.17468682f ? 
                     (Double.isNaN(data[10]) || data[10 /* X28 */] <0.2651912f ? 
                        1.0f : 
                         (data[0 /* X5 */] <0.101782784f ? 
                            1.0f : 
                            0.0f)) : 
                     (Double.isNaN(data[8]) || data[8 /* X23 */] <0.28388318f ? 
                         (Double.isNaN(data[12]) || data[12 /* X35 */] <0.3685025f ? 
                            0.0f : 
                             (data[7 /* X21 */] <0.1911164f ? 
                                1.0f : 
                                0.0f)) : 
                         (data[1 /* X12 */] <-0.44679335f ? 
                            0.0f : 
                            1.0f))))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class h2o_dt_10_Tree_0_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* X35 */] <-0.115298904f ? 
         (Double.isNaN(data[7]) || data[7 /* X21 */] <0.28688112f ? 
            0.0f : 
             (data[7 /* X21 */] <0.3663815f ? 
                1.0f : 
                0.0f)) : 
         (data[6 /* X20 */] <-0.03732513f ? 
             (Double.isNaN(data[10]) || data[10 /* X28 */] <0.44284976f ? 
                 (Double.isNaN(data[1]) || data[1 /* X12 */] <-0.062451746f ? 
                    1.0f : 
                     (data[0 /* X5 */] <0.14178932f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[12]) || data[12 /* X35 */] <0.45221004f ? 
                 (data[10 /* X28 */] <-0.08807109f ? 
                     (Double.isNaN(data[1]) || data[1 /* X12 */] <-0.24289145f ? 
                        1.0f : 
                         (data[0 /* X5 */] <0.17936538f ? 
                            1.0f : 
                            0.0f)) : 
                     (Double.isNaN(data[5]) || data[5 /* X19 */] <0.28110105f ? 
                         (Double.isNaN(data[1]) || data[1 /* X12 */] <0.065758675f ? 
                             (Double.isNaN(data[8]) || data[8 /* X23 */] <0.28754345f ? 
                                0.0f : 
                                 (Double.isNaN(data[5]) || data[5 /* X19 */] <0.08271882f ? 
                                    0.0f : 
                                    1.0f)) : 
                             (data[0 /* X5 */] <0.09001502f ? 
                                0.0f : 
                                1.0f)) : 
                        1.0f)) : 
                 (Double.isNaN(data[11]) || data[11 /* X34 */] <-0.2453125f ? 
                     (data[8 /* X23 */] <0.15352507f ? 
                        0.0f : 
                         (Double.isNaN(data[10]) || data[10 /* X28 */] <0.98219734f ? 
                            1.0f : 
                            0.0f)) : 
                    0.0f))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class h2o_dt_10_Tree_0_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* X28 */] <0.46965104f ? 
         (data[2 /* X15 */] <0.08203809f ? 
            1.0f : 
             (Double.isNaN(data[3]) || data[3 /* X17 */] <0.38578522f ? 
                 (Double.isNaN(data[10]) || data[10 /* X28 */] <0.28516114f ? 
                    0.0f : 
                     (data[2 /* X15 */] <0.14629315f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* X5 */] <0.16606246f ? 
                    0.0f : 
                    1.0f))) : 
         (Double.isNaN(data[6]) || data[6 /* X20 */] <0.8778329f ? 
             (Double.isNaN(data[2]) || data[2 /* X15 */] <0.38761523f ? 
                 (Double.isNaN(data[7]) || data[7 /* X21 */] <0.26923764f ? 
                    1.0f : 
                     (data[10 /* X28 */] <0.9767397f ? 
                         (Double.isNaN(data[0]) || data[0 /* X5 */] <0.22390603f ? 
                            0.0f : 
                            1.0f) : 
                        1.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}



