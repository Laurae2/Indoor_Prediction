/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:41:18.637+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_32x6_ReLU_02

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_32x6_ReLU_02 > h2o_nn_32x6_ReLU_02.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_32x6_ReLU_02.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_32x6_ReLU_02", algorithm="deeplearning")
public class h2o_nn_32x6_ReLU_02 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,32,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_32x6_ReLU_02_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_32x6_ReLU_02_Activation_1.VALUES,
      /* Softmax */ h2o_nn_32x6_ReLU_02_Activation_2.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_32x6_ReLU_02_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_32x6_ReLU_02_Bias_1.VALUES,
      /* Softmax */ h2o_nn_32x6_ReLU_02_Bias_2.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_32x6_ReLU_02_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_32x6_ReLU_02_Weight_1.VALUES,
      /* Softmax */ h2o_nn_32x6_ReLU_02_Weight_2.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_32x6_ReLU_02.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_32x6_ReLU_02_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25,0.25,0.125,0.25,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_32x6_ReLU_02() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(4737442325377368000L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_32x6_ReLU_02_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_32x6_ReLU_02_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_02_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_32x6_ReLU_02_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_ReLU_02_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_02_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_32x6_ReLU_02_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_32x6_ReLU_02_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_02_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_32x6_ReLU_02_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_32x6_ReLU_02_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_ReLU_02_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_02_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.4726439218660621;
      sa[1] = 0.4986795165985753;
      sa[2] = 0.46802828658946194;
      sa[3] = 0.5413640191401107;
      sa[4] = 0.4903897236464702;
      sa[5] = 0.4891176763204468;
      sa[6] = 0.49290346768475773;
      sa[7] = 0.5882560228754146;
      sa[8] = 0.49046269715958263;
      sa[9] = 0.4978434749588685;
      sa[10] = 0.4879308605318072;
      sa[11] = 0.5106525650537349;
      sa[12] = 0.5072169238657619;
      sa[13] = 0.4575025229170803;
      sa[14] = 0.5317056964117601;
      sa[15] = 0.574796826639655;
      sa[16] = 0.4842432615892022;
      sa[17] = 0.5200078474626614;
      sa[18] = 0.5061876288054786;
      sa[19] = 0.5070189852071366;
      sa[20] = 0.54906096205398;
      sa[21] = 0.5257374651135833;
      sa[22] = 0.5087707186673315;
      sa[23] = 0.5170956246093464;
      sa[24] = 0.5001964839465514;
      sa[25] = 0.4768059820296016;
      sa[26] = 0.4951026631278999;
      sa[27] = 0.499479832730456;
      sa[28] = 0.56863374307028;
      sa[29] = 0.5242360355420211;
      sa[30] = 0.49363633060694256;
      sa[31] = 0.4863382588380205;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_32x6_ReLU_02_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_32x6_ReLU_02_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_02_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.02657831548421789;
      sa[1] = 0.030732288821055886;
      sa[2] = -0.012849420071229124;
      sa[3] = -0.00554255059520726;
      sa[4] = -0.03235176897043472;
    }
  }
}
class h2o_nn_32x6_ReLU_02_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_32x6_ReLU_02_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[416];
  static {
    h2o_nn_32x6_ReLU_02_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_02_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.07955597f;
      sa[1] = 0.35664782f;
      sa[2] = 0.24586901f;
      sa[3] = 0.099050485f;
      sa[4] = -0.22695577f;
      sa[5] = -0.15492998f;
      sa[6] = -0.06626503f;
      sa[7] = 0.28901854f;
      sa[8] = 0.18950963f;
      sa[9] = -0.1648935f;
      sa[10] = -0.24466246f;
      sa[11] = -0.13440923f;
      sa[12] = 0.07395376f;
      sa[13] = -0.27764848f;
      sa[14] = -0.28089318f;
      sa[15] = -0.02365922f;
      sa[16] = 0.08208809f;
      sa[17] = 0.04478365f;
      sa[18] = -0.21369545f;
      sa[19] = 0.32121202f;
      sa[20] = 0.29173365f;
      sa[21] = -0.35860452f;
      sa[22] = 0.3218527f;
      sa[23] = -0.13767636f;
      sa[24] = 0.25315893f;
      sa[25] = 0.28332448f;
      sa[26] = -0.37019157f;
      sa[27] = 0.28546235f;
      sa[28] = 0.2593695f;
      sa[29] = -0.31336772f;
      sa[30] = -0.103990085f;
      sa[31] = 0.085863024f;
      sa[32] = 0.25638747f;
      sa[33] = -0.30824244f;
      sa[34] = 0.14156699f;
      sa[35] = -0.21030842f;
      sa[36] = 0.20647593f;
      sa[37] = 0.2728978f;
      sa[38] = -0.05815416f;
      sa[39] = 0.20561424f;
      sa[40] = -0.07842618f;
      sa[41] = -0.1392691f;
      sa[42] = -0.082293324f;
      sa[43] = 0.25570065f;
      sa[44] = 0.19264045f;
      sa[45] = -0.32656175f;
      sa[46] = 0.088800915f;
      sa[47] = 0.03816846f;
      sa[48] = 0.18303709f;
      sa[49] = 0.57104176f;
      sa[50] = 0.049498405f;
      sa[51] = -0.27862158f;
      sa[52] = -0.04684033f;
      sa[53] = 0.31213617f;
      sa[54] = 0.27120218f;
      sa[55] = -0.011043493f;
      sa[56] = -0.10909157f;
      sa[57] = -0.34205374f;
      sa[58] = 0.2460735f;
      sa[59] = -0.23208028f;
      sa[60] = -0.31386942f;
      sa[61] = 0.19955613f;
      sa[62] = 0.19704896f;
      sa[63] = 0.0074428488f;
      sa[64] = 0.1340631f;
      sa[65] = 0.17864135f;
      sa[66] = 0.1025187f;
      sa[67] = 0.16129452f;
      sa[68] = -0.09826532f;
      sa[69] = 0.13056126f;
      sa[70] = -0.091964535f;
      sa[71] = 0.26076007f;
      sa[72] = -0.21033184f;
      sa[73] = 0.19496576f;
      sa[74] = -0.12754565f;
      sa[75] = 0.110631615f;
      sa[76] = -0.16854307f;
      sa[77] = -0.18048516f;
      sa[78] = -0.07127346f;
      sa[79] = 0.19477983f;
      sa[80] = -0.25280136f;
      sa[81] = -0.14153227f;
      sa[82] = -0.22980918f;
      sa[83] = 0.19014136f;
      sa[84] = 0.026535382f;
      sa[85] = -0.23294696f;
      sa[86] = 0.15592453f;
      sa[87] = 0.35779795f;
      sa[88] = 0.18995097f;
      sa[89] = 0.13025376f;
      sa[90] = -0.17284662f;
      sa[91] = 0.113452666f;
      sa[92] = 0.09386685f;
      sa[93] = -0.2438763f;
      sa[94] = 0.027730811f;
      sa[95] = -0.2235252f;
      sa[96] = 0.05159876f;
      sa[97] = -0.03252865f;
      sa[98] = 0.2671044f;
      sa[99] = -0.1529065f;
      sa[100] = -0.112420216f;
      sa[101] = -0.27441993f;
      sa[102] = -0.31507048f;
      sa[103] = -0.16525377f;
      sa[104] = 0.012700544f;
      sa[105] = -0.24402332f;
      sa[106] = -0.3199354f;
      sa[107] = 0.18311739f;
      sa[108] = 0.19781972f;
      sa[109] = -0.28224322f;
      sa[110] = -0.109189786f;
      sa[111] = 0.17586882f;
      sa[112] = 0.11983947f;
      sa[113] = 0.027766975f;
      sa[114] = -0.06831584f;
      sa[115] = -0.21445571f;
      sa[116] = -0.16693407f;
      sa[117] = 0.008656264f;
      sa[118] = -0.23629773f;
      sa[119] = -0.15967812f;
      sa[120] = 0.161631f;
      sa[121] = 0.22879967f;
      sa[122] = 0.40033504f;
      sa[123] = 0.3331642f;
      sa[124] = 0.32648465f;
      sa[125] = 0.38417566f;
      sa[126] = -0.2760426f;
      sa[127] = -0.29469895f;
      sa[128] = 0.1817228f;
      sa[129] = 0.20670064f;
      sa[130] = -0.18234333f;
      sa[131] = 0.2278544f;
      sa[132] = 0.16284864f;
      sa[133] = -0.43823284f;
      sa[134] = 0.0715114f;
      sa[135] = -0.3208522f;
      sa[136] = -0.084901795f;
      sa[137] = 0.059132095f;
      sa[138] = 0.18217008f;
      sa[139] = -0.21723329f;
      sa[140] = -0.100423984f;
      sa[141] = -0.2816121f;
      sa[142] = 0.39908162f;
      sa[143] = -0.31610376f;
      sa[144] = 0.23112403f;
      sa[145] = -0.17281605f;
      sa[146] = -0.35341737f;
      sa[147] = 0.06462453f;
      sa[148] = 0.25038067f;
      sa[149] = 0.40859404f;
      sa[150] = 0.37476438f;
      sa[151] = -0.27684447f;
      sa[152] = 0.05376562f;
      sa[153] = 0.33107132f;
      sa[154] = 0.20723066f;
      sa[155] = -0.113935955f;
      sa[156] = 0.1101936f;
      sa[157] = -0.29590926f;
      sa[158] = 0.1077613f;
      sa[159] = 0.05687903f;
      sa[160] = 0.053484146f;
      sa[161] = 0.22327489f;
      sa[162] = -0.05351428f;
      sa[163] = -0.026766073f;
      sa[164] = 0.32397345f;
      sa[165] = -0.08880905f;
      sa[166] = -0.13553335f;
      sa[167] = -0.13665175f;
      sa[168] = 0.36757118f;
      sa[169] = 0.35573792f;
      sa[170] = -0.031650774f;
      sa[171] = -0.03468206f;
      sa[172] = -0.22330497f;
      sa[173] = -0.25979257f;
      sa[174] = 0.03501182f;
      sa[175] = -0.15063109f;
      sa[176] = -0.008524622f;
      sa[177] = 0.0051809098f;
      sa[178] = -0.026025172f;
      sa[179] = 0.10391297f;
      sa[180] = -0.07043794f;
      sa[181] = -0.23863053f;
      sa[182] = -0.17430274f;
      sa[183] = 9.83627E-4f;
      sa[184] = 0.29378444f;
      sa[185] = 0.29386628f;
      sa[186] = -0.31722286f;
      sa[187] = 0.03564797f;
      sa[188] = -0.039490175f;
      sa[189] = 0.26539353f;
      sa[190] = 0.0065311105f;
      sa[191] = -0.08518992f;
      sa[192] = -0.10937349f;
      sa[193] = 0.18605776f;
      sa[194] = 0.089037955f;
      sa[195] = 0.37604374f;
      sa[196] = 0.40906596f;
      sa[197] = 0.043078393f;
      sa[198] = 0.09631294f;
      sa[199] = -0.011714325f;
      sa[200] = 0.039441593f;
      sa[201] = -0.5150429f;
      sa[202] = 0.14140214f;
      sa[203] = 0.0025215112f;
      sa[204] = -0.1583121f;
      sa[205] = 0.19592552f;
      sa[206] = 0.3561051f;
      sa[207] = 0.061486803f;
      sa[208] = -0.27199557f;
      sa[209] = -0.014103436f;
      sa[210] = -0.26071504f;
      sa[211] = -0.46274537f;
      sa[212] = 0.20782275f;
      sa[213] = -0.2174339f;
      sa[214] = -0.09144093f;
      sa[215] = 0.030855443f;
      sa[216] = 0.13227446f;
      sa[217] = 0.32576552f;
      sa[218] = -0.2095957f;
      sa[219] = 0.37240195f;
      sa[220] = -0.28060696f;
      sa[221] = 0.016661394f;
      sa[222] = 0.13501441f;
      sa[223] = 0.06397165f;
      sa[224] = 0.0211251f;
      sa[225] = 0.28598097f;
      sa[226] = -0.28799716f;
      sa[227] = 0.57499814f;
      sa[228] = 0.2229588f;
      sa[229] = 0.15796508f;
      sa[230] = 0.22955972f;
      sa[231] = -0.33522445f;
      sa[232] = -0.35717595f;
      sa[233] = 0.26576212f;
      sa[234] = 0.16042055f;
      sa[235] = -0.392109f;
      sa[236] = -0.054990616f;
      sa[237] = -0.25855815f;
      sa[238] = -0.09261269f;
      sa[239] = 0.08247769f;
      sa[240] = 0.026821654f;
      sa[241] = -0.21856739f;
      sa[242] = -0.063323826f;
      sa[243] = -0.34399784f;
      sa[244] = -0.18660979f;
      sa[245] = -0.23667833f;
      sa[246] = -0.2458983f;
      sa[247] = -0.074261226f;
      sa[248] = 0.2823686f;
      sa[249] = 0.28622925f;
      sa[250] = -0.17797624f;
      sa[251] = -0.11355763f;
      sa[252] = -0.3514297f;
      sa[253] = -0.3793538f;
      sa[254] = -0.31323677f;
      sa[255] = 0.18700355f;
      sa[256] = -0.2061449f;
      sa[257] = 0.35936126f;
      sa[258] = -0.35007194f;
      sa[259] = -0.15452309f;
      sa[260] = -0.25523874f;
      sa[261] = -0.07655661f;
      sa[262] = -0.14445995f;
      sa[263] = 0.30540174f;
      sa[264] = -0.38388154f;
      sa[265] = 0.15585959f;
      sa[266] = -0.5029401f;
      sa[267] = -0.30995658f;
      sa[268] = 0.112343565f;
      sa[269] = -0.092389874f;
      sa[270] = -0.13810289f;
      sa[271] = 0.30021977f;
      sa[272] = -0.24545956f;
      sa[273] = -0.13010556f;
      sa[274] = 0.15438248f;
      sa[275] = -0.014956185f;
      sa[276] = 0.15762395f;
      sa[277] = -0.27177173f;
      sa[278] = -0.11673438f;
      sa[279] = 0.056499913f;
      sa[280] = -0.23834144f;
      sa[281] = 0.28457087f;
      sa[282] = -0.08226921f;
      sa[283] = -0.0018155081f;
      sa[284] = 0.038500216f;
      sa[285] = -0.25798038f;
      sa[286] = 0.28305578f;
      sa[287] = 0.16130646f;
      sa[288] = -0.22091095f;
      sa[289] = -0.17723817f;
      sa[290] = 0.07961776f;
      sa[291] = -0.04153541f;
      sa[292] = 0.026824892f;
      sa[293] = -0.09199033f;
      sa[294] = 0.12267587f;
      sa[295] = 0.08143345f;
      sa[296] = 0.31285104f;
      sa[297] = 0.22423632f;
      sa[298] = -0.06630584f;
      sa[299] = -0.038656354f;
      sa[300] = 0.09691635f;
      sa[301] = -0.017390333f;
      sa[302] = 0.17548217f;
      sa[303] = 0.072690666f;
      sa[304] = -0.23196052f;
      sa[305] = -0.22242571f;
      sa[306] = 0.23476046f;
      sa[307] = -0.16256422f;
      sa[308] = 0.10750716f;
      sa[309] = 0.07052881f;
      sa[310] = 0.48496643f;
      sa[311] = 0.2065996f;
      sa[312] = -0.22992322f;
      sa[313] = -0.28022695f;
      sa[314] = -0.23843484f;
      sa[315] = 0.027178228f;
      sa[316] = 0.047626227f;
      sa[317] = -0.13339436f;
      sa[318] = 0.23039445f;
      sa[319] = 0.32096097f;
      sa[320] = -0.09059685f;
      sa[321] = 0.15404066f;
      sa[322] = 0.3754186f;
      sa[323] = -0.36791363f;
      sa[324] = 0.13640682f;
      sa[325] = 0.3192886f;
      sa[326] = -0.34535053f;
      sa[327] = 0.019989831f;
      sa[328] = -0.13301426f;
      sa[329] = 0.091786504f;
      sa[330] = -0.13926893f;
      sa[331] = 0.16102493f;
      sa[332] = -0.2998973f;
      sa[333] = 0.14995977f;
      sa[334] = -0.057818707f;
      sa[335] = 0.09879607f;
      sa[336] = -0.15782571f;
      sa[337] = -0.11695031f;
      sa[338] = 0.33856174f;
      sa[339] = -0.25494215f;
      sa[340] = -0.3874626f;
      sa[341] = -0.23832664f;
      sa[342] = 0.24007453f;
      sa[343] = -0.11602988f;
      sa[344] = -0.2759153f;
      sa[345] = 0.21163963f;
      sa[346] = 0.2037651f;
      sa[347] = -0.18699837f;
      sa[348] = 0.44280985f;
      sa[349] = -0.38721287f;
      sa[350] = -0.31325537f;
      sa[351] = 0.13528149f;
      sa[352] = 0.31179407f;
      sa[353] = 0.026398653f;
      sa[354] = -0.0059312903f;
      sa[355] = -0.02775808f;
      sa[356] = -0.08968977f;
      sa[357] = 0.2933047f;
      sa[358] = -0.3177058f;
      sa[359] = 0.10185346f;
      sa[360] = 0.15825519f;
      sa[361] = -0.18757139f;
      sa[362] = -0.029039968f;
      sa[363] = 0.21390784f;
      sa[364] = -0.15239751f;
      sa[365] = -0.2693968f;
      sa[366] = -0.0048713186f;
      sa[367] = -0.13302393f;
      sa[368] = 0.03561056f;
      sa[369] = 0.21739501f;
      sa[370] = -0.3908999f;
      sa[371] = 0.15188439f;
      sa[372] = -0.041194137f;
      sa[373] = 0.27651587f;
      sa[374] = -0.13524838f;
      sa[375] = -0.35611433f;
      sa[376] = -0.41926503f;
      sa[377] = -0.2826893f;
      sa[378] = 0.04218222f;
      sa[379] = 0.055849332f;
      sa[380] = -0.21694098f;
      sa[381] = -0.18329626f;
      sa[382] = -0.07811458f;
      sa[383] = 0.11951687f;
      sa[384] = -0.08761267f;
      sa[385] = 0.14890991f;
      sa[386] = -0.34076652f;
      sa[387] = -0.25345913f;
      sa[388] = -0.019203383f;
      sa[389] = 0.15340397f;
      sa[390] = 0.041733168f;
      sa[391] = 0.0191636f;
      sa[392] = 0.34762475f;
      sa[393] = 0.23349245f;
      sa[394] = -0.16034427f;
      sa[395] = 0.43108505f;
      sa[396] = 0.22863698f;
      sa[397] = -0.37776783f;
      sa[398] = 0.119824745f;
      sa[399] = 0.22122835f;
      sa[400] = 0.14169498f;
      sa[401] = 0.43598402f;
      sa[402] = -0.33238766f;
      sa[403] = 0.035736684f;
      sa[404] = 0.25350854f;
      sa[405] = -0.33535993f;
      sa[406] = 0.06387994f;
      sa[407] = 0.23045887f;
      sa[408] = -0.34300753f;
      sa[409] = -0.28679773f;
      sa[410] = -0.12855586f;
      sa[411] = 0.15042378f;
      sa[412] = -0.2917746f;
      sa[413] = 0.11815133f;
      sa[414] = 0.13174824f;
      sa[415] = 0.3319091f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_32x6_ReLU_02_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[160];
  static {
    h2o_nn_32x6_ReLU_02_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_02_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 1.2978259f;
      sa[1] = -0.20914921f;
      sa[2] = -0.45545587f;
      sa[3] = -0.8963332f;
      sa[4] = 0.09366647f;
      sa[5] = 0.17634425f;
      sa[6] = 1.2646316f;
      sa[7] = -0.6555908f;
      sa[8] = -1.0239354f;
      sa[9] = 0.58743185f;
      sa[10] = -0.17900655f;
      sa[11] = 0.46363252f;
      sa[12] = 0.16004395f;
      sa[13] = 0.11795801f;
      sa[14] = -1.2095448f;
      sa[15] = 1.1826507f;
      sa[16] = 1.6822643f;
      sa[17] = -0.5223807f;
      sa[18] = 0.026504824f;
      sa[19] = -0.48316216f;
      sa[20] = 1.205006f;
      sa[21] = 0.026407912f;
      sa[22] = -1.0020167f;
      sa[23] = 0.7526856f;
      sa[24] = -1.4766212f;
      sa[25] = 0.34262556f;
      sa[26] = -0.32808354f;
      sa[27] = 1.497231f;
      sa[28] = -1.3803573f;
      sa[29] = -0.41858608f;
      sa[30] = 0.4771877f;
      sa[31] = -0.73526806f;
      sa[32] = -1.1113118f;
      sa[33] = -1.605913f;
      sa[34] = -0.008450787f;
      sa[35] = 1.4170934f;
      sa[36] = -0.42528278f;
      sa[37] = -0.12032798f;
      sa[38] = 0.174208f;
      sa[39] = 0.83492774f;
      sa[40] = -0.68184054f;
      sa[41] = -1.5226861f;
      sa[42] = -1.0362816f;
      sa[43] = -1.4458083f;
      sa[44] = 0.012592057f;
      sa[45] = -1.2916055f;
      sa[46] = 1.234813f;
      sa[47] = 1.4414726f;
      sa[48] = -1.3194947f;
      sa[49] = -1.1983502f;
      sa[50] = 0.39206484f;
      sa[51] = -0.24403284f;
      sa[52] = 0.9385499f;
      sa[53] = 0.9300606f;
      sa[54] = -0.2512025f;
      sa[55] = 1.2099173f;
      sa[56] = -1.0837125f;
      sa[57] = -1.1001154f;
      sa[58] = 0.23742208f;
      sa[59] = -0.317218f;
      sa[60] = 1.3974594f;
      sa[61] = -0.61131954f;
      sa[62] = -0.3589145f;
      sa[63] = 0.77706695f;
      sa[64] = 1.4445361f;
      sa[65] = -0.61821157f;
      sa[66] = 0.6068186f;
      sa[67] = 1.5784252f;
      sa[68] = 0.708344f;
      sa[69] = -0.99964267f;
      sa[70] = -1.5578911f;
      sa[71] = -0.44479263f;
      sa[72] = -1.2737728f;
      sa[73] = 1.1970757f;
      sa[74] = 1.3578627f;
      sa[75] = -0.09249372f;
      sa[76] = 0.9157182f;
      sa[77] = 0.48788705f;
      sa[78] = -1.3030207f;
      sa[79] = 0.95338964f;
      sa[80] = -0.7888734f;
      sa[81] = 0.2963951f;
      sa[82] = 0.8072788f;
      sa[83] = -0.60790867f;
      sa[84] = -1.8419429f;
      sa[85] = -1.3237528f;
      sa[86] = 0.25442943f;
      sa[87] = 1.2426769f;
      sa[88] = -1.5218507f;
      sa[89] = -0.4918101f;
      sa[90] = -1.0419647f;
      sa[91] = 1.5421956f;
      sa[92] = -0.33856243f;
      sa[93] = 0.27148455f;
      sa[94] = -1.5924791f;
      sa[95] = -0.18395011f;
      sa[96] = -1.123759f;
      sa[97] = 0.25842112f;
      sa[98] = -0.091997184f;
      sa[99] = 0.24287996f;
      sa[100] = -1.2317924f;
      sa[101] = -0.37990257f;
      sa[102] = 1.2871385f;
      sa[103] = 0.03930371f;
      sa[104] = -0.1804838f;
      sa[105] = -0.5041198f;
      sa[106] = 1.4124151f;
      sa[107] = 1.1521697f;
      sa[108] = 0.74709934f;
      sa[109] = 0.05638863f;
      sa[110] = 0.68098897f;
      sa[111] = -0.8820288f;
      sa[112] = -1.1695861f;
      sa[113] = 0.1981399f;
      sa[114] = 0.23713598f;
      sa[115] = -0.39387926f;
      sa[116] = 1.1437194f;
      sa[117] = 0.06541296f;
      sa[118] = -1.3260413f;
      sa[119] = -0.8140875f;
      sa[120] = -0.2839567f;
      sa[121] = 1.1083152f;
      sa[122] = -0.10332034f;
      sa[123] = 0.37677678f;
      sa[124] = -0.72954845f;
      sa[125] = 0.76680464f;
      sa[126] = -0.9597302f;
      sa[127] = 0.39840767f;
      sa[128] = -0.9708122f;
      sa[129] = 0.7354852f;
      sa[130] = -0.443325f;
      sa[131] = 0.90941405f;
      sa[132] = 0.44558403f;
      sa[133] = 0.60903007f;
      sa[134] = 0.6714537f;
      sa[135] = -1.1469687f;
      sa[136] = 0.53295016f;
      sa[137] = -0.61548656f;
      sa[138] = -0.12849708f;
      sa[139] = 1.1722121f;
      sa[140] = -0.46567443f;
      sa[141] = -0.053488865f;
      sa[142] = 0.19347337f;
      sa[143] = -0.8329473f;
      sa[144] = 0.875538f;
      sa[145] = -0.7845649f;
      sa[146] = 0.015258086f;
      sa[147] = -0.28880024f;
      sa[148] = -1.0185798f;
      sa[149] = 1.012775f;
      sa[150] = -1.0714124f;
      sa[151] = -1.5667735f;
      sa[152] = 1.6130288f;
      sa[153] = -0.5605773f;
      sa[154] = 1.3472273f;
      sa[155] = -1.5654624f;
      sa[156] = -1.4391466f;
      sa[157] = -1.2328868f;
      sa[158] = -0.25128546f;
      sa[159] = -0.6035901f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_32x6_ReLU_02 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_32x6_ReLU_02_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_32x6_ReLU_02_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_32x6_ReLU_02_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_32x6_ReLU_02_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_02_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


