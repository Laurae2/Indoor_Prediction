/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:41:23.468+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DRFModel named h2o_dt_03

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_dt_03 > h2o_dt_03.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_dt_03.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_dt_03", algorithm="drf")
public class h2o_dt_03 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 5; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_dt_03.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_dt_03_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.27956989247311825,0.13978494623655913,0.15053763440860216,0.27956989247311825,0.15053763440860216};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.27956989247311825,0.13978494623655913,0.15053763440860216,0.27956989247311825,0.15053763440860216};

  public h2o_dt_03() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-7189489143624302096L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    h2o_dt_03_Forest_0.score0(data,preds);
    double sum = 0;
    for(int i=1; i<preds.length; i++) { sum += preds[i]; }
    if (sum>0) for(int i=1; i<preds.length; i++) { preds[i] /= sum; }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_h2o_dt_03 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_dt_03_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_dt_03_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_dt_03_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_dt_03_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_dt_03_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}

class h2o_dt_03_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += h2o_dt_03_Tree_0_class_0.score0(fdata);
    preds[2] += h2o_dt_03_Tree_0_class_1.score0(fdata);
    preds[3] += h2o_dt_03_Tree_0_class_2.score0(fdata);
    preds[4] += h2o_dt_03_Tree_0_class_3.score0(fdata);
    preds[5] += h2o_dt_03_Tree_0_class_4.score0(fdata);
  }
}
class h2o_dt_03_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* X35 */] <-0.090485275f ? 
         (data[6 /* X20 */] <-0.39406702f ? 
             (data[0 /* X5 */] <0.059402972f ? 
                1.0f : 
                 (data[7 /* X21 */] <0.086408064f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* X15 */] <0.23338298f ? 
                1.0f : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class h2o_dt_03_Tree_0_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[6 /* X20 */] <-0.39406702f ? 
         (data[11 /* X34 */] <-0.102165334f ? 
             (Double.isNaN(data[0]) || data[0 /* X5 */] <0.16801448f ? 
                0.0f : 
                1.0f) : 
            1.0f) : 
         (Double.isNaN(data[5]) || data[5 /* X19 */] <0.90854174f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class h2o_dt_03_Tree_0_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* X20 */] <0.07027615f ? 
         (Double.isNaN(data[6]) || data[6 /* X20 */] <0.010691182f ? 
            0.0f : 
             (Double.isNaN(data[1]) || data[1 /* X12 */] <-0.25152925f ? 
                0.0f : 
                1.0f)) : 
         (Double.isNaN(data[10]) || data[10 /* X28 */] <0.269278f ? 
            1.0f : 
             (data[0 /* X5 */] <0.100725845f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class h2o_dt_03_Tree_0_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* X35 */] <0.38669977f ? 
         (data[11 /* X34 */] <-0.2554102f ? 
             (data[6 /* X20 */] <-0.053236008f ? 
                 (data[12 /* X35 */] <-0.45347774f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[10]) || data[10 /* X28 */] <0.31379157f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class h2o_dt_03_Tree_0_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* X28 */] <0.28291926f ? 
         (data[2 /* X15 */] <0.08203809f ? 
            1.0f : 
            0.0f) : 
         (data[0 /* X5 */] <0.100837536f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}



