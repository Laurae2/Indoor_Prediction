/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:43:10.853+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_10

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_10 > h2o_nn_16x16x6_Tanh_10.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_10.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_10", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_10 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_10_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_10_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_10_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_10_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_10_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_10_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_10_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_10.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_10_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.24761904761904763,0.18571428571428572,0.06190476190476191,0.12857142857142856,0.24761904761904763,0.12857142857142856};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_10() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-629362327950495076L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_10_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_16x16x6_Tanh_10_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_10_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_10_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_10_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_10_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_10_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_10_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_10_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_10_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_10_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.11509086493326526;
      sa[1] = 0.139471341192298;
      sa[2] = -0.056421180198176726;
      sa[3] = -0.13666064078896692;
      sa[4] = 0.06214794443293218;
      sa[5] = 0.10779448962251605;
      sa[6] = -0.10887097993472027;
      sa[7] = -0.19327113114184505;
      sa[8] = 0.1048091938478664;
      sa[9] = -0.006916216997320447;
      sa[10] = 0.02213056254616877;
      sa[11] = 0.05954460668136837;
      sa[12] = 0.04051184301258358;
      sa[13] = 0.0484019838689567;
      sa[14] = -0.11118452863918503;
      sa[15] = -0.10227123073541033;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_10_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_10_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.1051869709550887;
      sa[1] = -0.24786076282519465;
      sa[2] = -0.22620419823729748;
      sa[3] = 0.12081580460930448;
      sa[4] = -0.05001089123126718;
      sa[5] = 0.08487578824571533;
      sa[6] = -0.01404413100646603;
      sa[7] = 0.35828177767410735;
      sa[8] = -0.0012909277720269143;
      sa[9] = -0.025843966232350142;
      sa[10] = 0.09355315143002918;
      sa[11] = 0.26907721664211576;
      sa[12] = -0.11118078540245055;
      sa[13] = 0.08514164399758524;
      sa[14] = -0.10592615955904128;
      sa[15] = -0.1464976977829889;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_10_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_10_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.03692880766630516;
      sa[1] = -0.08191878387508447;
      sa[2] = -0.29811765448356486;
      sa[3] = 0.10864688435442725;
      sa[4] = 0.14822983174497656;
      sa[5] = -0.2068889074839288;
    }
  }
}
class h2o_nn_16x16x6_Tanh_10_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_10_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[208];
  static {
    h2o_nn_16x16x6_Tanh_10_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.067902856f;
      sa[1] = 0.21023294f;
      sa[2] = 0.1366541f;
      sa[3] = 0.2505898f;
      sa[4] = -0.14663604f;
      sa[5] = -0.27547884f;
      sa[6] = -0.15909646f;
      sa[7] = 0.36689624f;
      sa[8] = 0.08390579f;
      sa[9] = -0.24336553f;
      sa[10] = 0.019517899f;
      sa[11] = -0.36698824f;
      sa[12] = 0.20740435f;
      sa[13] = -0.32370016f;
      sa[14] = -0.3415943f;
      sa[15] = 0.21264325f;
      sa[16] = -0.064830735f;
      sa[17] = 0.069241695f;
      sa[18] = -0.23434746f;
      sa[19] = 0.19869472f;
      sa[20] = 0.43790257f;
      sa[21] = -0.2904574f;
      sa[22] = 0.4768197f;
      sa[23] = -0.34225777f;
      sa[24] = 0.32166597f;
      sa[25] = 0.46040598f;
      sa[26] = -0.4447717f;
      sa[27] = 0.55920947f;
      sa[28] = 0.41142815f;
      sa[29] = -0.22044404f;
      sa[30] = -0.35656318f;
      sa[31] = 0.2241044f;
      sa[32] = 0.46102056f;
      sa[33] = -0.5556103f;
      sa[34] = 0.12583296f;
      sa[35] = -0.090509705f;
      sa[36] = -0.14967275f;
      sa[37] = 0.47403f;
      sa[38] = -0.24435538f;
      sa[39] = 0.33086303f;
      sa[40] = -0.081115514f;
      sa[41] = -0.25189835f;
      sa[42] = -0.41971356f;
      sa[43] = -0.43485132f;
      sa[44] = 0.42424828f;
      sa[45] = -0.51206774f;
      sa[46] = -0.06300177f;
      sa[47] = -0.03540267f;
      sa[48] = 0.28012487f;
      sa[49] = 0.4588784f;
      sa[50] = 0.3666873f;
      sa[51] = -0.5010665f;
      sa[52] = -0.08776213f;
      sa[53] = 0.34433463f;
      sa[54] = 0.3329395f;
      sa[55] = -0.07725254f;
      sa[56] = -0.4058955f;
      sa[57] = -0.31110755f;
      sa[58] = 0.55422646f;
      sa[59] = -0.31587705f;
      sa[60] = -0.3464932f;
      sa[61] = 0.266524f;
      sa[62] = -0.13606182f;
      sa[63] = 0.13823123f;
      sa[64] = 0.062354263f;
      sa[65] = 0.14188471f;
      sa[66] = 0.12485226f;
      sa[67] = 0.29674694f;
      sa[68] = -0.06775521f;
      sa[69] = 0.39467466f;
      sa[70] = -0.16549145f;
      sa[71] = 0.4260447f;
      sa[72] = -0.15118979f;
      sa[73] = 0.32588378f;
      sa[74] = -0.24378021f;
      sa[75] = 0.044887863f;
      sa[76] = -0.23177046f;
      sa[77] = -0.20868672f;
      sa[78] = -0.10099529f;
      sa[79] = 0.34174716f;
      sa[80] = -0.27503017f;
      sa[81] = -0.10970207f;
      sa[82] = -0.15203322f;
      sa[83] = 0.37563783f;
      sa[84] = -0.3688639f;
      sa[85] = -0.31372628f;
      sa[86] = 0.19014536f;
      sa[87] = 0.48022914f;
      sa[88] = 0.09382603f;
      sa[89] = 0.23092729f;
      sa[90] = -0.37986124f;
      sa[91] = 0.11645917f;
      sa[92] = 0.1351518f;
      sa[93] = -0.2782355f;
      sa[94] = -0.44444087f;
      sa[95] = -0.50291413f;
      sa[96] = 0.29383275f;
      sa[97] = 0.6315715f;
      sa[98] = 0.4936025f;
      sa[99] = 0.009784869f;
      sa[100] = -0.18240309f;
      sa[101] = -0.6033858f;
      sa[102] = -0.35813585f;
      sa[103] = -0.10287001f;
      sa[104] = 0.07248865f;
      sa[105] = -0.056497376f;
      sa[106] = -0.20718098f;
      sa[107] = 0.29250404f;
      sa[108] = 0.29260442f;
      sa[109] = -0.2719374f;
      sa[110] = -0.52561235f;
      sa[111] = 0.13889931f;
      sa[112] = 0.17597155f;
      sa[113] = 0.1741036f;
      sa[114] = -0.39604738f;
      sa[115] = 0.101908185f;
      sa[116] = -0.3869365f;
      sa[117] = -0.015081608f;
      sa[118] = -0.50161177f;
      sa[119] = -0.30042168f;
      sa[120] = 0.11793283f;
      sa[121] = 0.23141767f;
      sa[122] = 0.4493428f;
      sa[123] = 0.46415412f;
      sa[124] = 0.4609639f;
      sa[125] = 0.46024635f;
      sa[126] = -0.5184807f;
      sa[127] = -0.21011591f;
      sa[128] = 0.06138257f;
      sa[129] = 0.5457319f;
      sa[130] = -0.21413858f;
      sa[131] = 0.55179137f;
      sa[132] = 0.33308244f;
      sa[133] = -0.40887088f;
      sa[134] = 0.08684529f;
      sa[135] = -0.24059136f;
      sa[136] = -0.31349334f;
      sa[137] = 0.01806062f;
      sa[138] = 0.19394591f;
      sa[139] = -0.05124544f;
      sa[140] = -0.34774464f;
      sa[141] = -0.13493028f;
      sa[142] = 0.1172702f;
      sa[143] = -0.45067054f;
      sa[144] = 0.6411485f;
      sa[145] = -0.30455977f;
      sa[146] = -0.25575247f;
      sa[147] = 0.331344f;
      sa[148] = 0.1202805f;
      sa[149] = 0.43432102f;
      sa[150] = 0.41004482f;
      sa[151] = -0.43983042f;
      sa[152] = -0.04846741f;
      sa[153] = 0.408269f;
      sa[154] = 0.25736484f;
      sa[155] = -0.29948303f;
      sa[156] = 0.18058783f;
      sa[157] = -0.27690098f;
      sa[158] = 0.17586672f;
      sa[159] = -0.030405229f;
      sa[160] = -0.033009786f;
      sa[161] = 0.32215023f;
      sa[162] = -0.04296051f;
      sa[163] = -0.053010177f;
      sa[164] = 0.48087007f;
      sa[165] = -0.09572597f;
      sa[166] = -0.2989611f;
      sa[167] = -0.06760233f;
      sa[168] = 0.21567596f;
      sa[169] = 0.6236608f;
      sa[170] = -0.07873532f;
      sa[171] = -0.07213848f;
      sa[172] = -0.124817014f;
      sa[173] = -0.36013407f;
      sa[174] = -0.08176845f;
      sa[175] = -0.2023702f;
      sa[176] = -0.15244487f;
      sa[177] = -0.057091966f;
      sa[178] = -0.012405107f;
      sa[179] = 0.25648797f;
      sa[180] = -0.0058674687f;
      sa[181] = -0.37403896f;
      sa[182] = -0.21853739f;
      sa[183] = 0.31099284f;
      sa[184] = 0.33567896f;
      sa[185] = 0.33446166f;
      sa[186] = -0.36829042f;
      sa[187] = 0.17309366f;
      sa[188] = -0.31370673f;
      sa[189] = 0.2581081f;
      sa[190] = -0.027627531f;
      sa[191] = -0.040042818f;
      sa[192] = -0.43319467f;
      sa[193] = 0.49765438f;
      sa[194] = 0.0029048417f;
      sa[195] = 0.38732663f;
      sa[196] = 0.30226272f;
      sa[197] = -0.20468599f;
      sa[198] = 0.025260607f;
      sa[199] = -0.07894774f;
      sa[200] = 0.017875582f;
      sa[201] = -0.42743182f;
      sa[202] = 0.1203069f;
      sa[203] = -0.11969604f;
      sa[204] = -0.37109634f;
      sa[205] = 0.48419562f;
      sa[206] = 0.3838371f;
      sa[207] = 0.1437149f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_10_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_10_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.49438754f;
      sa[1] = -0.006091016f;
      sa[2] = -0.46204376f;
      sa[3] = -0.43070158f;
      sa[4] = -0.022564935f;
      sa[5] = 0.3201355f;
      sa[6] = -0.15207194f;
      sa[7] = -0.10806507f;
      sa[8] = -0.49988624f;
      sa[9] = 0.5062931f;
      sa[10] = -0.032008186f;
      sa[11] = 0.0939939f;
      sa[12] = 0.16454168f;
      sa[13] = -0.099737085f;
      sa[14] = -0.6741861f;
      sa[15] = 0.22347632f;
      sa[16] = 0.5990884f;
      sa[17] = -0.08575936f;
      sa[18] = -0.07893056f;
      sa[19] = -0.28481132f;
      sa[20] = 0.3491408f;
      sa[21] = 0.050240543f;
      sa[22] = -0.46097744f;
      sa[23] = 0.3984521f;
      sa[24] = -0.29375342f;
      sa[25] = 0.2844354f;
      sa[26] = -0.021822734f;
      sa[27] = 0.41513723f;
      sa[28] = -0.4454134f;
      sa[29] = -0.27669922f;
      sa[30] = 0.044075634f;
      sa[31] = -0.24284661f;
      sa[32] = -0.31009796f;
      sa[33] = -0.5124561f;
      sa[34] = -0.053914092f;
      sa[35] = 0.28449494f;
      sa[36] = -0.019068915f;
      sa[37] = 0.1524638f;
      sa[38] = 0.02320348f;
      sa[39] = 0.023011617f;
      sa[40] = -0.15047587f;
      sa[41] = -0.39051798f;
      sa[42] = -0.38303825f;
      sa[43] = -0.08860079f;
      sa[44] = -0.26508448f;
      sa[45] = -0.38890788f;
      sa[46] = 0.21952914f;
      sa[47] = 0.5222742f;
      sa[48] = -0.22561534f;
      sa[49] = -0.20256962f;
      sa[50] = 0.31718156f;
      sa[51] = -0.18359807f;
      sa[52] = 0.32792488f;
      sa[53] = 0.2875141f;
      sa[54] = -0.10768072f;
      sa[55] = 0.6091296f;
      sa[56] = -0.19902661f;
      sa[57] = -0.26988494f;
      sa[58] = 0.21223922f;
      sa[59] = -0.10217681f;
      sa[60] = 0.3427499f;
      sa[61] = -0.26201224f;
      sa[62] = 0.05641917f;
      sa[63] = -0.006623183f;
      sa[64] = 0.21748757f;
      sa[65] = -0.17149751f;
      sa[66] = 0.27340448f;
      sa[67] = 0.4383303f;
      sa[68] = 0.24211977f;
      sa[69] = -0.18199457f;
      sa[70] = -0.40411806f;
      sa[71] = 0.013908714f;
      sa[72] = -0.54236364f;
      sa[73] = 0.3896264f;
      sa[74] = 0.00187931f;
      sa[75] = 0.08785882f;
      sa[76] = 0.19471762f;
      sa[77] = 0.16825064f;
      sa[78] = -0.42979613f;
      sa[79] = 0.17241853f;
      sa[80] = -0.104747295f;
      sa[81] = 0.07711232f;
      sa[82] = 0.014049254f;
      sa[83] = -0.39190456f;
      sa[84] = -0.30503255f;
      sa[85] = -0.12764966f;
      sa[86] = -0.18240225f;
      sa[87] = -0.07932041f;
      sa[88] = -0.45673347f;
      sa[89] = -0.091841884f;
      sa[90] = -0.35908452f;
      sa[91] = 0.41022232f;
      sa[92] = -0.09990575f;
      sa[93] = -0.010929693f;
      sa[94] = -0.5839066f;
      sa[95] = 0.0011060681f;
      sa[96] = -0.13749464f;
      sa[97] = 0.022130685f;
      sa[98] = -0.05857571f;
      sa[99] = -0.115375f;
      sa[100] = -0.23559472f;
      sa[101] = 0.004814557f;
      sa[102] = 0.20558013f;
      sa[103] = 0.15668772f;
      sa[104] = 0.018040258f;
      sa[105] = -0.05144859f;
      sa[106] = 0.47973385f;
      sa[107] = 0.35381612f;
      sa[108] = 0.11614766f;
      sa[109] = -0.10949812f;
      sa[110] = 0.15498565f;
      sa[111] = -0.25564653f;
      sa[112] = -0.19740038f;
      sa[113] = 0.17222872f;
      sa[114] = 0.15490788f;
      sa[115] = -0.2778447f;
      sa[116] = 0.46868965f;
      sa[117] = 0.38267738f;
      sa[118] = -0.5434321f;
      sa[119] = -0.13553718f;
      sa[120] = -0.24967866f;
      sa[121] = 0.39997244f;
      sa[122] = -0.06581133f;
      sa[123] = 0.016078005f;
      sa[124] = -0.17056118f;
      sa[125] = 0.13364224f;
      sa[126] = -0.2848319f;
      sa[127] = -0.18359135f;
      sa[128] = -0.28764978f;
      sa[129] = 0.27215576f;
      sa[130] = 0.18671882f;
      sa[131] = 0.32297823f;
      sa[132] = 0.18889481f;
      sa[133] = -0.024266575f;
      sa[134] = 0.43903345f;
      sa[135] = -0.21943931f;
      sa[136] = 0.26867265f;
      sa[137] = -0.39086682f;
      sa[138] = 0.020608924f;
      sa[139] = 0.30034125f;
      sa[140] = -0.17685062f;
      sa[141] = 0.022573046f;
      sa[142] = 0.33172947f;
      sa[143] = -0.27580634f;
      sa[144] = 0.28818983f;
      sa[145] = -0.18759461f;
      sa[146] = 0.026007455f;
      sa[147] = 0.011714123f;
      sa[148] = -0.3056421f;
      sa[149] = 0.13792025f;
      sa[150] = -0.19131547f;
      sa[151] = -0.89816993f;
      sa[152] = 0.56692094f;
      sa[153] = -0.31519744f;
      sa[154] = 0.50455236f;
      sa[155] = -0.47827053f;
      sa[156] = -0.35564083f;
      sa[157] = -0.26029372f;
      sa[158] = 0.06624902f;
      sa[159] = -0.008502218f;
      sa[160] = 0.38663298f;
      sa[161] = -0.2280786f;
      sa[162] = 0.58738416f;
      sa[163] = -0.30313298f;
      sa[164] = 0.35328707f;
      sa[165] = -0.039503377f;
      sa[166] = 0.37628976f;
      sa[167] = -0.37446254f;
      sa[168] = 0.40113446f;
      sa[169] = -0.5902811f;
      sa[170] = 0.2007033f;
      sa[171] = 0.23144835f;
      sa[172] = 0.3074693f;
      sa[173] = 0.3871463f;
      sa[174] = 0.084622994f;
      sa[175] = -0.19752334f;
      sa[176] = -0.14282267f;
      sa[177] = 0.110239066f;
      sa[178] = -0.32801828f;
      sa[179] = -0.08872702f;
      sa[180] = -0.4163405f;
      sa[181] = -0.25347456f;
      sa[182] = 0.024478672f;
      sa[183] = -0.13995296f;
      sa[184] = 0.32552537f;
      sa[185] = 0.38596353f;
      sa[186] = -0.054933075f;
      sa[187] = -0.53052604f;
      sa[188] = 0.17493196f;
      sa[189] = -0.2115231f;
      sa[190] = -0.36754832f;
      sa[191] = -0.43315092f;
      sa[192] = -0.2115352f;
      sa[193] = 0.14941244f;
      sa[194] = -0.1593229f;
      sa[195] = -0.080636434f;
      sa[196] = 0.113635f;
      sa[197] = -0.32109615f;
      sa[198] = 0.1718109f;
      sa[199] = 0.37058362f;
      sa[200] = -0.08984692f;
      sa[201] = 0.18143721f;
      sa[202] = 0.046984825f;
      sa[203] = -0.37233165f;
      sa[204] = 0.13632703f;
      sa[205] = 0.43088612f;
      sa[206] = -0.03858529f;
      sa[207] = 0.15492082f;
      sa[208] = -0.15849571f;
      sa[209] = 0.22780408f;
      sa[210] = -0.24621525f;
      sa[211] = -0.4741466f;
      sa[212] = -0.21891157f;
      sa[213] = 0.36571673f;
      sa[214] = -0.60808253f;
      sa[215] = -0.17071408f;
      sa[216] = -0.13310388f;
      sa[217] = 0.5674176f;
      sa[218] = -0.005562449f;
      sa[219] = 0.21957059f;
      sa[220] = 0.14006364f;
      sa[221] = -0.14191335f;
      sa[222] = -0.5644277f;
      sa[223] = -0.34785357f;
      sa[224] = 0.30725884f;
      sa[225] = -0.02218935f;
      sa[226] = -0.23490463f;
      sa[227] = 0.0018468392f;
      sa[228] = -0.1609397f;
      sa[229] = -0.12459396f;
      sa[230] = -0.30184945f;
      sa[231] = -0.49946013f;
      sa[232] = 0.39151943f;
      sa[233] = -0.18128747f;
      sa[234] = -0.21512742f;
      sa[235] = 0.09580954f;
      sa[236] = -0.39970997f;
      sa[237] = 0.4104187f;
      sa[238] = -0.015965668f;
      sa[239] = 0.11789515f;
      sa[240] = -0.22602838f;
      sa[241] = -0.5439507f;
      sa[242] = -0.33324164f;
      sa[243] = 0.47012138f;
      sa[244] = 0.1387315f;
      sa[245] = 0.29942423f;
      sa[246] = 0.42985228f;
      sa[247] = -0.69446355f;
      sa[248] = -0.08134915f;
      sa[249] = -0.25440574f;
      sa[250] = 0.13853516f;
      sa[251] = 0.6069075f;
      sa[252] = 0.10894916f;
      sa[253] = -0.23144723f;
      sa[254] = 0.33975953f;
      sa[255] = 0.6647592f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_10_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_Tanh_10_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.001329288f;
      sa[1] = -1.569351f;
      sa[2] = -1.5283056f;
      sa[3] = 1.4437307f;
      sa[4] = 0.34584698f;
      sa[5] = -0.29118523f;
      sa[6] = -1.5175494f;
      sa[7] = 1.3987268f;
      sa[8] = 1.9356061f;
      sa[9] = 0.17862175f;
      sa[10] = 1.8008312f;
      sa[11] = 1.2326733f;
      sa[12] = 1.7892514f;
      sa[13] = -0.8381916f;
      sa[14] = -1.9284962f;
      sa[15] = -0.7669429f;
      sa[16] = 0.59180015f;
      sa[17] = -0.8948244f;
      sa[18] = -1.3395572f;
      sa[19] = -1.1256353f;
      sa[20] = -1.9174278f;
      sa[21] = 0.25041524f;
      sa[22] = -1.930529f;
      sa[23] = -0.7395102f;
      sa[24] = -0.34681064f;
      sa[25] = 1.9012681f;
      sa[26] = -0.20545284f;
      sa[27] = 1.2543907f;
      sa[28] = 1.1962808f;
      sa[29] = -0.92095035f;
      sa[30] = 0.3004396f;
      sa[31] = 0.32380414f;
      sa[32] = 0.33828896f;
      sa[33] = 0.3380383f;
      sa[34] = -0.45607784f;
      sa[35] = 0.88600546f;
      sa[36] = 0.47675323f;
      sa[37] = -1.2631527f;
      sa[38] = 0.5765531f;
      sa[39] = -0.2542715f;
      sa[40] = 0.33405054f;
      sa[41] = -0.7277528f;
      sa[42] = 0.5762674f;
      sa[43] = -0.24497193f;
      sa[44] = 0.85657495f;
      sa[45] = -2.0543327f;
      sa[46] = -1.9449025f;
      sa[47] = 0.16716835f;
      sa[48] = 1.8995959f;
      sa[49] = 0.035844706f;
      sa[50] = -0.7845155f;
      sa[51] = 1.8107826f;
      sa[52] = -1.6458286f;
      sa[53] = 0.85543996f;
      sa[54] = 1.6705635f;
      sa[55] = 1.3902277f;
      sa[56] = -0.74583846f;
      sa[57] = 0.047276653f;
      sa[58] = 0.80820024f;
      sa[59] = 0.923632f;
      sa[60] = -1.2835974f;
      sa[61] = 1.4659079f;
      sa[62] = -0.4507362f;
      sa[63] = -1.0064299f;
      sa[64] = 1.2074963f;
      sa[65] = -0.87779224f;
      sa[66] = -1.8472043f;
      sa[67] = 0.113579564f;
      sa[68] = 1.0238446f;
      sa[69] = -1.250479f;
      sa[70] = -1.6025327f;
      sa[71] = 0.033591993f;
      sa[72] = -1.2248075f;
      sa[73] = -1.5650994f;
      sa[74] = -1.332216f;
      sa[75] = 1.3423785f;
      sa[76] = 1.9716765f;
      sa[77] = -0.46731162f;
      sa[78] = -1.749854f;
      sa[79] = -0.6697314f;
      sa[80] = 0.7551748f;
      sa[81] = -1.5693954f;
      sa[82] = -0.14008947f;
      sa[83] = -1.4083116f;
      sa[84] = 1.626786f;
      sa[85] = 1.2060869f;
      sa[86] = -1.9517785f;
      sa[87] = 1.216728f;
      sa[88] = -1.4601512f;
      sa[89] = -0.90686315f;
      sa[90] = 0.18292528f;
      sa[91] = 0.2137546f;
      sa[92] = 1.2264769f;
      sa[93] = 1.9874029f;
      sa[94] = 1.7026001f;
      sa[95] = 0.9183741f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_10 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_10_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_10_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_10_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_Tanh_10_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_10_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


