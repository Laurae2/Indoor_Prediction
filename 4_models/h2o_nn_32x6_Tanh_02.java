/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:41:20.354+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_32x6_Tanh_02

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_32x6_Tanh_02 > h2o_nn_32x6_Tanh_02.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_32x6_Tanh_02.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_32x6_Tanh_02", algorithm="deeplearning")
public class h2o_nn_32x6_Tanh_02 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,32,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_32x6_Tanh_02_Activation_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_02_Activation_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_02_Activation_2.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_32x6_Tanh_02_Bias_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_02_Bias_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_02_Bias_2.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_32x6_Tanh_02_Weight_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_02_Weight_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_02_Weight_2.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_32x6_Tanh_02.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_32x6_Tanh_02_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25,0.25,0.125,0.25,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_32x6_Tanh_02() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(3060653472586177408L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_32x6_Tanh_02_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_32x6_Tanh_02_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_02_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_32x6_Tanh_02_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_Tanh_02_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_02_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_32x6_Tanh_02_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_32x6_Tanh_02_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_02_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_32x6_Tanh_02_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_32x6_Tanh_02_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_Tanh_02_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_02_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.03070401734363341;
      sa[1] = 0.017123006270196108;
      sa[2] = -0.02694428215938887;
      sa[3] = -0.15290182092964646;
      sa[4] = -0.05533135163141576;
      sa[5] = -0.01890415084987053;
      sa[6] = 0.05643566809047134;
      sa[7] = 0.05482851223128446;
      sa[8] = -0.05213874308223709;
      sa[9] = 0.03606484998318131;
      sa[10] = 0.033415905272856726;
      sa[11] = 0.049411529972885046;
      sa[12] = 0.05370467256580756;
      sa[13] = 0.05003595068888022;
      sa[14] = -0.019806141505557158;
      sa[15] = 0.053739017089158056;
      sa[16] = -0.014355232610696708;
      sa[17] = 0.02384533154725792;
      sa[18] = -0.03381824763839285;
      sa[19] = -0.014722092020745708;
      sa[20] = 0.12976134928239433;
      sa[21] = -0.03303309581281473;
      sa[22] = -0.056107538179261604;
      sa[23] = 0.03622164263677417;
      sa[24] = -0.09475592822585738;
      sa[25] = 0.1607099070808068;
      sa[26] = -0.09360097802489561;
      sa[27] = 0.08967469668950495;
      sa[28] = -0.059684869006686216;
      sa[29] = 0.08940495881494077;
      sa[30] = 0.006023183222872635;
      sa[31] = 0.02463473959708418;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_32x6_Tanh_02_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_32x6_Tanh_02_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_02_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.16505354922515372;
      sa[1] = -0.06610462710737008;
      sa[2] = -0.048867650595794725;
      sa[3] = 0.08491830306948443;
      sa[4] = -0.13631657249825713;
    }
  }
}
class h2o_nn_32x6_Tanh_02_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_32x6_Tanh_02_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[416];
  static {
    h2o_nn_32x6_Tanh_02_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_02_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.09350522f;
      sa[1] = 0.35278496f;
      sa[2] = 0.24476272f;
      sa[3] = 0.12417713f;
      sa[4] = -0.23322622f;
      sa[5] = -0.1572892f;
      sa[6] = -0.07304373f;
      sa[7] = 0.29834566f;
      sa[8] = 0.18782671f;
      sa[9] = -0.16263062f;
      sa[10] = -0.25164494f;
      sa[11] = -0.13997816f;
      sa[12] = 0.07199469f;
      sa[13] = -0.278307f;
      sa[14] = -0.27107456f;
      sa[15] = -0.0108786f;
      sa[16] = 0.08396705f;
      sa[17] = 0.056573074f;
      sa[18] = -0.22186096f;
      sa[19] = 0.3476919f;
      sa[20] = 0.2938381f;
      sa[21] = -0.34441403f;
      sa[22] = 0.31715187f;
      sa[23] = -0.082789436f;
      sa[24] = 0.25133893f;
      sa[25] = 0.31896567f;
      sa[26] = -0.35984567f;
      sa[27] = 0.2684189f;
      sa[28] = 0.25940993f;
      sa[29] = -0.31824115f;
      sa[30] = -0.06112031f;
      sa[31] = 0.10020136f;
      sa[32] = 0.27382353f;
      sa[33] = -0.31884816f;
      sa[34] = 0.13295156f;
      sa[35] = -0.16441682f;
      sa[36] = 0.16981274f;
      sa[37] = 0.26189414f;
      sa[38] = -0.047072537f;
      sa[39] = 0.14359546f;
      sa[40] = -0.07051867f;
      sa[41] = -0.16826798f;
      sa[42] = -0.102076314f;
      sa[43] = 0.16701533f;
      sa[44] = 0.19010697f;
      sa[45] = -0.29920512f;
      sa[46] = 0.03352351f;
      sa[47] = -0.0051488425f;
      sa[48] = 0.18074024f;
      sa[49] = 0.56574607f;
      sa[50] = 0.091567144f;
      sa[51] = -0.27862072f;
      sa[52] = -0.09219961f;
      sa[53] = 0.30775094f;
      sa[54] = 0.2436258f;
      sa[55] = 5.442485E-4f;
      sa[56] = -0.15317784f;
      sa[57] = -0.34079316f;
      sa[58] = 0.26111686f;
      sa[59] = -0.24954878f;
      sa[60] = -0.34325922f;
      sa[61] = 0.19615763f;
      sa[62] = 0.16964944f;
      sa[63] = 0.01460977f;
      sa[64] = 0.13370879f;
      sa[65] = 0.1531432f;
      sa[66] = 0.08566026f;
      sa[67] = 0.1580814f;
      sa[68] = -0.098465875f;
      sa[69] = 0.14281315f;
      sa[70] = -0.11081386f;
      sa[71] = 0.28449243f;
      sa[72] = -0.19404523f;
      sa[73] = 0.21797015f;
      sa[74] = -0.1589328f;
      sa[75] = 0.10686977f;
      sa[76] = -0.17527086f;
      sa[77] = -0.13952284f;
      sa[78] = -0.028854687f;
      sa[79] = 0.17896174f;
      sa[80] = -0.23174922f;
      sa[81] = -0.14160596f;
      sa[82] = -0.14729956f;
      sa[83] = 0.17993042f;
      sa[84] = 0.0049304063f;
      sa[85] = -0.21349354f;
      sa[86] = 0.17898124f;
      sa[87] = 0.352422f;
      sa[88] = 0.22720945f;
      sa[89] = 0.11208654f;
      sa[90] = -0.17923404f;
      sa[91] = 0.13843943f;
      sa[92] = 0.10516361f;
      sa[93] = -0.23925199f;
      sa[94] = -0.036702584f;
      sa[95] = -0.20889026f;
      sa[96] = 0.060242828f;
      sa[97] = 0.022002624f;
      sa[98] = 0.27455518f;
      sa[99] = -0.13008109f;
      sa[100] = -0.10796588f;
      sa[101] = -0.2394824f;
      sa[102] = -0.3248652f;
      sa[103] = -0.13039872f;
      sa[104] = -0.015919145f;
      sa[105] = -0.22838849f;
      sa[106] = -0.3173936f;
      sa[107] = 0.17225023f;
      sa[108] = 0.18558198f;
      sa[109] = -0.27986187f;
      sa[110] = -0.15901627f;
      sa[111] = 0.16526473f;
      sa[112] = 0.11684438f;
      sa[113] = 0.026503325f;
      sa[114] = -0.027753638f;
      sa[115] = -0.18991467f;
      sa[116] = -0.19761835f;
      sa[117] = 0.0086607f;
      sa[118] = -0.27751538f;
      sa[119] = -0.18009166f;
      sa[120] = 0.18821485f;
      sa[121] = 0.22311607f;
      sa[122] = 0.38203478f;
      sa[123] = 0.36327603f;
      sa[124] = 0.33075258f;
      sa[125] = 0.3729328f;
      sa[126] = -0.29465175f;
      sa[127] = -0.2893593f;
      sa[128] = 0.15183553f;
      sa[129] = 0.20652527f;
      sa[130] = -0.13964759f;
      sa[131] = 0.25718427f;
      sa[132] = 0.19389401f;
      sa[133] = -0.3948004f;
      sa[134] = 0.08044444f;
      sa[135] = -0.30128366f;
      sa[136] = -0.15326329f;
      sa[137] = 0.024162168f;
      sa[138] = 0.17832842f;
      sa[139] = -0.16145413f;
      sa[140] = -0.092316754f;
      sa[141] = -0.24560016f;
      sa[142] = 0.37470224f;
      sa[143] = -0.29902816f;
      sa[144] = 0.21854436f;
      sa[145] = -0.15695798f;
      sa[146] = -0.36176202f;
      sa[147] = 0.11516189f;
      sa[148] = 0.2543963f;
      sa[149] = 0.46187764f;
      sa[150] = 0.3743584f;
      sa[151] = -0.25806233f;
      sa[152] = 0.06990494f;
      sa[153] = 0.34796575f;
      sa[154] = 0.19546731f;
      sa[155] = -0.06897193f;
      sa[156] = 0.16651261f;
      sa[157] = -0.266396f;
      sa[158] = 0.12419429f;
      sa[159] = 0.07811702f;
      sa[160] = 0.080055244f;
      sa[161] = 0.22950743f;
      sa[162] = -0.12463673f;
      sa[163] = -0.048568342f;
      sa[164] = 0.31650397f;
      sa[165] = -0.075178914f;
      sa[166] = -0.10693779f;
      sa[167] = -0.12474228f;
      sa[168] = 0.27885956f;
      sa[169] = 0.38891464f;
      sa[170] = -0.00901823f;
      sa[171] = -0.015135009f;
      sa[172] = -0.16552263f;
      sa[173] = -0.25388765f;
      sa[174] = 0.0085625965f;
      sa[175] = -0.14471674f;
      sa[176] = -0.019312993f;
      sa[177] = 0.0058922525f;
      sa[178] = -0.019702114f;
      sa[179] = 0.10089179f;
      sa[180] = -0.05598044f;
      sa[181] = -0.23348145f;
      sa[182] = -0.18452379f;
      sa[183] = 0.0060646934f;
      sa[184] = 0.29941094f;
      sa[185] = 0.26663268f;
      sa[186] = -0.31154093f;
      sa[187] = 0.043687705f;
      sa[188] = -0.027922919f;
      sa[189] = 0.25640213f;
      sa[190] = 0.012369525f;
      sa[191] = -0.08222072f;
      sa[192] = -0.10867352f;
      sa[193] = 0.18106405f;
      sa[194] = 0.09403558f;
      sa[195] = 0.34220922f;
      sa[196] = 0.46692246f;
      sa[197] = 0.013549346f;
      sa[198] = 0.10338658f;
      sa[199] = -0.027392548f;
      sa[200] = 0.04547912f;
      sa[201] = -0.5551236f;
      sa[202] = 0.13886838f;
      sa[203] = -0.014799069f;
      sa[204] = -0.1744975f;
      sa[205] = 0.15553713f;
      sa[206] = 0.38672847f;
      sa[207] = 0.018728493f;
      sa[208] = -0.2874529f;
      sa[209] = -0.028769726f;
      sa[210] = -0.30098313f;
      sa[211] = -0.38639078f;
      sa[212] = 0.16451678f;
      sa[213] = -0.2462217f;
      sa[214] = -0.11064933f;
      sa[215] = 0.046983648f;
      sa[216] = 0.10706542f;
      sa[217] = 0.28468183f;
      sa[218] = -0.22348942f;
      sa[219] = 0.3625777f;
      sa[220] = -0.30103976f;
      sa[221] = 0.03358804f;
      sa[222] = 0.17741577f;
      sa[223] = 0.06926083f;
      sa[224] = 0.06262777f;
      sa[225] = 0.30822462f;
      sa[226] = -0.27258563f;
      sa[227] = 0.5013168f;
      sa[228] = 0.1744318f;
      sa[229] = 0.13563137f;
      sa[230] = 0.24719724f;
      sa[231] = -0.31741914f;
      sa[232] = -0.32143095f;
      sa[233] = 0.21453995f;
      sa[234] = 0.14814292f;
      sa[235] = -0.38401547f;
      sa[236] = -0.06605474f;
      sa[237] = -0.26342317f;
      sa[238] = -0.1462135f;
      sa[239] = 0.092777625f;
      sa[240] = 0.050329708f;
      sa[241] = -0.23431492f;
      sa[242] = -0.07783749f;
      sa[243] = -0.33309257f;
      sa[244] = -0.20405799f;
      sa[245] = -0.2233264f;
      sa[246] = -0.25672156f;
      sa[247] = -0.074057214f;
      sa[248] = 0.29216027f;
      sa[249] = 0.29165953f;
      sa[250] = -0.1971829f;
      sa[251] = -0.09559574f;
      sa[252] = -0.3500907f;
      sa[253] = -0.39486402f;
      sa[254] = -0.314172f;
      sa[255] = 0.1931737f;
      sa[256] = -0.20351532f;
      sa[257] = 0.37108558f;
      sa[258] = -0.35419562f;
      sa[259] = -0.15583062f;
      sa[260] = -0.22302301f;
      sa[261] = -0.0944977f;
      sa[262] = -0.108303554f;
      sa[263] = 0.30183753f;
      sa[264] = -0.32441348f;
      sa[265] = 0.1466507f;
      sa[266] = -0.38200015f;
      sa[267] = -0.28937185f;
      sa[268] = 0.12930484f;
      sa[269] = -0.10629135f;
      sa[270] = -0.12942407f;
      sa[271] = 0.28310758f;
      sa[272] = -0.2695245f;
      sa[273] = -0.1637078f;
      sa[274] = 0.16642794f;
      sa[275] = -0.02302639f;
      sa[276] = 0.14004174f;
      sa[277] = -0.2795851f;
      sa[278] = -0.11746445f;
      sa[279] = 0.13050146f;
      sa[280] = -0.23626825f;
      sa[281] = 0.28666797f;
      sa[282] = -0.09019764f;
      sa[283] = -0.015729142f;
      sa[284] = 0.056766234f;
      sa[285] = -0.23789825f;
      sa[286] = 0.2518643f;
      sa[287] = 0.17474744f;
      sa[288] = -0.24011642f;
      sa[289] = -0.18177868f;
      sa[290] = 0.013560693f;
      sa[291] = -0.028820334f;
      sa[292] = 0.05004651f;
      sa[293] = -0.10754343f;
      sa[294] = 0.10249403f;
      sa[295] = 0.0889013f;
      sa[296] = 0.30935562f;
      sa[297] = 0.2371915f;
      sa[298] = -0.07078794f;
      sa[299] = -0.0289522f;
      sa[300] = 0.14693348f;
      sa[301] = -0.025917701f;
      sa[302] = 0.18335517f;
      sa[303] = 0.07942446f;
      sa[304] = -0.23561817f;
      sa[305] = -0.1952765f;
      sa[306] = 0.24368739f;
      sa[307] = -0.16267058f;
      sa[308] = 0.10578402f;
      sa[309] = 0.03349141f;
      sa[310] = 0.4628125f;
      sa[311] = 0.22937508f;
      sa[312] = -0.29809007f;
      sa[313] = -0.24313782f;
      sa[314] = -0.25209638f;
      sa[315] = 0.010488209f;
      sa[316] = -0.027223973f;
      sa[317] = -0.139875f;
      sa[318] = 0.15878408f;
      sa[319] = 0.29632056f;
      sa[320] = -0.112326115f;
      sa[321] = 0.13692991f;
      sa[322] = 0.35648295f;
      sa[323] = -0.3007026f;
      sa[324] = 0.10436064f;
      sa[325] = 0.40150788f;
      sa[326] = -0.37872696f;
      sa[327] = 0.069120556f;
      sa[328] = -0.18384784f;
      sa[329] = 0.16869369f;
      sa[330] = -0.12762186f;
      sa[331] = 0.15933624f;
      sa[332] = -0.25274268f;
      sa[333] = 0.21788545f;
      sa[334] = -0.054187294f;
      sa[335] = 0.20281099f;
      sa[336] = -0.19875722f;
      sa[337] = -0.102170184f;
      sa[338] = 0.28150177f;
      sa[339] = -0.21948619f;
      sa[340] = -0.40111616f;
      sa[341] = -0.25146356f;
      sa[342] = 0.19423713f;
      sa[343] = -0.113373116f;
      sa[344] = -0.2572042f;
      sa[345] = 0.20260547f;
      sa[346] = 0.19164018f;
      sa[347] = -0.19702691f;
      sa[348] = 0.39112657f;
      sa[349] = -0.34985408f;
      sa[350] = -0.31452578f;
      sa[351] = 0.1840882f;
      sa[352] = 0.2634878f;
      sa[353] = 0.013479059f;
      sa[354] = 0.040963635f;
      sa[355] = 0.07161143f;
      sa[356] = -0.13313961f;
      sa[357] = 0.2787685f;
      sa[358] = -0.30248687f;
      sa[359] = 0.10541944f;
      sa[360] = 0.1518437f;
      sa[361] = -0.15434739f;
      sa[362] = -0.094096705f;
      sa[363] = 0.23157878f;
      sa[364] = -0.1814883f;
      sa[365] = -0.2577023f;
      sa[366] = -0.026752306f;
      sa[367] = -0.19285652f;
      sa[368] = -0.050691336f;
      sa[369] = 0.23861429f;
      sa[370] = -0.36802208f;
      sa[371] = 0.118984036f;
      sa[372] = -0.058758628f;
      sa[373] = 0.27788326f;
      sa[374] = -0.13529561f;
      sa[375] = -0.35880736f;
      sa[376] = -0.412903f;
      sa[377] = -0.22103098f;
      sa[378] = 0.28218114f;
      sa[379] = 0.099890985f;
      sa[380] = -0.14719886f;
      sa[381] = -0.12727727f;
      sa[382] = -0.057305682f;
      sa[383] = -0.010567121f;
      sa[384] = -0.12851837f;
      sa[385] = 0.15635629f;
      sa[386] = -0.3104258f;
      sa[387] = -0.2597135f;
      sa[388] = 0.04853771f;
      sa[389] = 0.10906759f;
      sa[390] = 0.034129776f;
      sa[391] = -0.004319393f;
      sa[392] = 0.33758998f;
      sa[393] = 0.24598065f;
      sa[394] = -0.16721945f;
      sa[395] = 0.4183802f;
      sa[396] = 0.25158182f;
      sa[397] = -0.35387957f;
      sa[398] = 0.1278891f;
      sa[399] = 0.20647779f;
      sa[400] = 0.16357002f;
      sa[401] = 0.40873605f;
      sa[402] = -0.28266516f;
      sa[403] = 0.065827385f;
      sa[404] = 0.2429509f;
      sa[405] = -0.30900916f;
      sa[406] = 0.0965819f;
      sa[407] = 0.2565339f;
      sa[408] = -0.37686116f;
      sa[409] = -0.27048418f;
      sa[410] = -0.10514973f;
      sa[411] = 0.18252479f;
      sa[412] = -0.25015575f;
      sa[413] = 0.12989208f;
      sa[414] = 0.11414276f;
      sa[415] = 0.32720536f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_32x6_Tanh_02_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[160];
  static {
    h2o_nn_32x6_Tanh_02_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_02_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 1.3205718f;
      sa[1] = -0.21872853f;
      sa[2] = -0.36087707f;
      sa[3] = -0.8208614f;
      sa[4] = 0.07585231f;
      sa[5] = 0.1279692f;
      sa[6] = 1.39678f;
      sa[7] = -0.60344416f;
      sa[8] = -1.0835878f;
      sa[9] = 0.5374529f;
      sa[10] = -0.11600104f;
      sa[11] = 0.51365733f;
      sa[12] = 0.12441017f;
      sa[13] = 0.18906838f;
      sa[14] = -1.1538308f;
      sa[15] = 1.2587986f;
      sa[16] = 1.7825875f;
      sa[17] = -0.6021088f;
      sa[18] = 0.05347693f;
      sa[19] = -0.44885206f;
      sa[20] = 1.2910503f;
      sa[21] = 0.14644381f;
      sa[22] = -0.8864101f;
      sa[23] = 0.73135257f;
      sa[24] = -1.5079385f;
      sa[25] = 0.28050897f;
      sa[26] = -0.44980922f;
      sa[27] = 1.4404023f;
      sa[28] = -1.3148534f;
      sa[29] = -0.3468728f;
      sa[30] = 0.55822223f;
      sa[31] = -0.77286464f;
      sa[32] = -1.1247535f;
      sa[33] = -1.5451181f;
      sa[34] = -0.049094282f;
      sa[35] = 1.4282336f;
      sa[36] = -0.37318543f;
      sa[37] = -0.14847395f;
      sa[38] = 0.1560422f;
      sa[39] = 0.76546746f;
      sa[40] = -0.5277189f;
      sa[41] = -1.5000163f;
      sa[42] = -1.0544797f;
      sa[43] = -1.5256822f;
      sa[44] = -0.02007059f;
      sa[45] = -1.2941374f;
      sa[46] = 1.1859862f;
      sa[47] = 1.5258253f;
      sa[48] = -1.2799075f;
      sa[49] = -1.1365433f;
      sa[50] = 0.3412569f;
      sa[51] = -0.16949028f;
      sa[52] = 1.0056864f;
      sa[53] = 0.89906514f;
      sa[54] = -0.30790046f;
      sa[55] = 1.1924318f;
      sa[56] = -1.0653787f;
      sa[57] = -1.1224949f;
      sa[58] = 0.253419f;
      sa[59] = -0.22866586f;
      sa[60] = 1.3743825f;
      sa[61] = -0.59011817f;
      sa[62] = -0.4038177f;
      sa[63] = 0.7937536f;
      sa[64] = 1.438646f;
      sa[65] = -0.60017896f;
      sa[66] = 0.61180305f;
      sa[67] = 1.5687873f;
      sa[68] = 0.7304237f;
      sa[69] = -0.8644736f;
      sa[70] = -1.6060643f;
      sa[71] = -0.4460652f;
      sa[72] = -1.2551975f;
      sa[73] = 1.2342181f;
      sa[74] = 1.3780919f;
      sa[75] = -0.073076084f;
      sa[76] = 0.90507543f;
      sa[77] = 0.45101085f;
      sa[78] = -1.3290579f;
      sa[79] = 0.9329503f;
      sa[80] = -0.7813708f;
      sa[81] = 0.312705f;
      sa[82] = 0.8054917f;
      sa[83] = -0.5976249f;
      sa[84] = -1.6464899f;
      sa[85] = -1.3012952f;
      sa[86] = 0.25771382f;
      sa[87] = 1.2601557f;
      sa[88] = -1.4912328f;
      sa[89] = -0.45345598f;
      sa[90] = -1.0333681f;
      sa[91] = 1.5586653f;
      sa[92] = -0.34609434f;
      sa[93] = 0.27318245f;
      sa[94] = -1.5998838f;
      sa[95] = -0.15512206f;
      sa[96] = -1.1159708f;
      sa[97] = 0.30762926f;
      sa[98] = -0.100052156f;
      sa[99] = 0.21022893f;
      sa[100] = -1.2065809f;
      sa[101] = -0.35970476f;
      sa[102] = 1.2448922f;
      sa[103] = 0.08424635f;
      sa[104] = -0.21871595f;
      sa[105] = -0.46533543f;
      sa[106] = 1.3823488f;
      sa[107] = 1.1316363f;
      sa[108] = 0.78652936f;
      sa[109] = 0.027738417f;
      sa[110] = 0.683376f;
      sa[111] = -0.90477085f;
      sa[112] = -1.1776881f;
      sa[113] = 0.23128396f;
      sa[114] = 0.29082623f;
      sa[115] = -0.44005665f;
      sa[116] = 1.1375452f;
      sa[117] = 0.065357454f;
      sa[118] = -1.4304892f;
      sa[119] = -0.84322983f;
      sa[120] = -0.2669321f;
      sa[121] = 1.1318023f;
      sa[122] = -0.08604705f;
      sa[123] = 0.40860063f;
      sa[124] = -0.7352969f;
      sa[125] = 0.747644f;
      sa[126] = -0.953023f;
      sa[127] = 0.37372628f;
      sa[128] = -1.0387715f;
      sa[129] = 0.76333845f;
      sa[130] = -0.37936243f;
      sa[131] = 0.92412436f;
      sa[132] = 0.477137f;
      sa[133] = 0.61126876f;
      sa[134] = 0.7019102f;
      sa[135] = -1.1310508f;
      sa[136] = 0.5542804f;
      sa[137] = -0.6072617f;
      sa[138] = -0.11342096f;
      sa[139] = 1.1934112f;
      sa[140] = -0.47349268f;
      sa[141] = -0.039486162f;
      sa[142] = 0.2411845f;
      sa[143] = -0.7844864f;
      sa[144] = 0.92654973f;
      sa[145] = -0.78304607f;
      sa[146] = 0.025203248f;
      sa[147] = -0.2562727f;
      sa[148] = -0.8453582f;
      sa[149] = 1.1047156f;
      sa[150] = -1.008321f;
      sa[151] = -1.5355462f;
      sa[152] = 1.6128218f;
      sa[153] = -0.57826215f;
      sa[154] = 1.3401954f;
      sa[155] = -1.5401834f;
      sa[156] = -1.4270537f;
      sa[157] = -1.1248248f;
      sa[158] = -0.22381996f;
      sa[159] = -0.5580535f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_32x6_Tanh_02 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_32x6_Tanh_02_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_32x6_Tanh_02_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_32x6_Tanh_02_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_32x6_Tanh_02_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_02_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


