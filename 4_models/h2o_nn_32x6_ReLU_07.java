/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:42:22.335+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_32x6_ReLU_07

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_32x6_ReLU_07 > h2o_nn_32x6_ReLU_07.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_32x6_ReLU_07.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_32x6_ReLU_07", algorithm="deeplearning")
public class h2o_nn_32x6_ReLU_07 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,32,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_32x6_ReLU_07_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_32x6_ReLU_07_Activation_1.VALUES,
      /* Softmax */ h2o_nn_32x6_ReLU_07_Activation_2.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_32x6_ReLU_07_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_32x6_ReLU_07_Bias_1.VALUES,
      /* Softmax */ h2o_nn_32x6_ReLU_07_Bias_2.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_32x6_ReLU_07_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_32x6_ReLU_07_Weight_1.VALUES,
      /* Softmax */ h2o_nn_32x6_ReLU_07_Weight_2.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_32x6_ReLU_07.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_32x6_ReLU_07_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25,0.25,0.125,0.25,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_32x6_ReLU_07() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(8553193524135300304L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_32x6_ReLU_07_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_32x6_ReLU_07_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_07_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_32x6_ReLU_07_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_ReLU_07_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_07_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_32x6_ReLU_07_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_32x6_ReLU_07_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_07_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_32x6_ReLU_07_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_32x6_ReLU_07_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_ReLU_07_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_07_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.4623358336264671;
      sa[1] = 0.529121797875344;
      sa[2] = 0.4392742742935977;
      sa[3] = 0.5570358705505213;
      sa[4] = 0.48787038250586195;
      sa[5] = 0.4858213798226857;
      sa[6] = 0.4679580784902459;
      sa[7] = 0.5974754489099281;
      sa[8] = 0.4986737853271285;
      sa[9] = 0.4989432718903503;
      sa[10] = 0.4792606041251141;
      sa[11] = 0.5294253622046065;
      sa[12] = 0.5152818134052707;
      sa[13] = 0.448823047232074;
      sa[14] = 0.5402916582928123;
      sa[15] = 0.5855255813686775;
      sa[16] = 0.4919446793657766;
      sa[17] = 0.5877841681832926;
      sa[18] = 0.49248120807819157;
      sa[19] = 0.5168813720798796;
      sa[20] = 0.5937460824570737;
      sa[21] = 0.5273663960806303;
      sa[22] = 0.49858223982444655;
      sa[23] = 0.5098526258276197;
      sa[24] = 0.5134301465477654;
      sa[25] = 0.5007700358961655;
      sa[26] = 0.49581522142146434;
      sa[27] = 0.4543227833851991;
      sa[28] = 0.5760900391460053;
      sa[29] = 0.557779918691387;
      sa[30] = 0.5006225335195931;
      sa[31] = 0.48331478133929046;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_32x6_ReLU_07_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_32x6_ReLU_07_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_07_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.03847063943675311;
      sa[1] = 0.035207200504349556;
      sa[2] = -0.01600181938726328;
      sa[3] = -0.006607260906247918;
      sa[4] = -0.036626132181594794;
    }
  }
}
class h2o_nn_32x6_ReLU_07_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_32x6_ReLU_07_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[416];
  static {
    h2o_nn_32x6_ReLU_07_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_07_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.10316672f;
      sa[1] = 0.3907091f;
      sa[2] = 0.28027374f;
      sa[3] = 0.07051066f;
      sa[4] = -0.22260846f;
      sa[5] = -0.13617863f;
      sa[6] = -0.07108088f;
      sa[7] = 0.2911481f;
      sa[8] = 0.22245379f;
      sa[9] = -0.14435267f;
      sa[10] = -0.27054974f;
      sa[11] = -0.11795851f;
      sa[12] = 0.07854198f;
      sa[13] = -0.25717717f;
      sa[14] = -0.29056767f;
      sa[15] = -0.03228497f;
      sa[16] = 0.078912675f;
      sa[17] = 0.019878594f;
      sa[18] = -0.26176524f;
      sa[19] = 0.35789263f;
      sa[20] = 0.30487984f;
      sa[21] = -0.35836896f;
      sa[22] = 0.29959625f;
      sa[23] = -0.16325662f;
      sa[24] = 0.236693f;
      sa[25] = 0.27953f;
      sa[26] = -0.4003543f;
      sa[27] = 0.27287397f;
      sa[28] = 0.25870135f;
      sa[29] = -0.31638888f;
      sa[30] = -0.10491996f;
      sa[31] = 0.068467125f;
      sa[32] = 0.26018578f;
      sa[33] = -0.28088805f;
      sa[34] = 0.15780647f;
      sa[35] = -0.23622108f;
      sa[36] = 0.23294345f;
      sa[37] = 0.27930698f;
      sa[38] = -0.03976762f;
      sa[39] = 0.19879238f;
      sa[40] = -0.12041375f;
      sa[41] = -0.16404833f;
      sa[42] = -0.045711216f;
      sa[43] = 0.33718294f;
      sa[44] = 0.17778303f;
      sa[45] = -0.37993672f;
      sa[46] = 0.12669535f;
      sa[47] = 0.040110234f;
      sa[48] = 0.18037675f;
      sa[49] = 0.7013747f;
      sa[50] = 0.006694365f;
      sa[51] = -0.262832f;
      sa[52] = 4.2370774E-4f;
      sa[53] = 0.3462523f;
      sa[54] = 0.2906607f;
      sa[55] = -0.012081355f;
      sa[56] = -0.04583364f;
      sa[57] = -0.33791235f;
      sa[58] = 0.21035801f;
      sa[59] = -0.22505705f;
      sa[60] = -0.28496495f;
      sa[61] = 0.21207848f;
      sa[62] = 0.21747372f;
      sa[63] = -0.0021089877f;
      sa[64] = 0.14327379f;
      sa[65] = 0.21502817f;
      sa[66] = 0.13216767f;
      sa[67] = 0.15092136f;
      sa[68] = -0.08161893f;
      sa[69] = 0.13714683f;
      sa[70] = -0.089532726f;
      sa[71] = 0.22438149f;
      sa[72] = -0.23958407f;
      sa[73] = 0.16619068f;
      sa[74] = -0.12094531f;
      sa[75] = 0.111003146f;
      sa[76] = -0.171665f;
      sa[77] = -0.20965093f;
      sa[78] = -0.1020573f;
      sa[79] = 0.20843059f;
      sa[80] = -0.26263008f;
      sa[81] = -0.14745222f;
      sa[82] = -0.31876346f;
      sa[83] = 0.204275f;
      sa[84] = 0.019119319f;
      sa[85] = -0.26582173f;
      sa[86] = 0.13007319f;
      sa[87] = 0.35743612f;
      sa[88] = 0.16478202f;
      sa[89] = 0.1533781f;
      sa[90] = -0.2185033f;
      sa[91] = 0.052448623f;
      sa[92] = 0.04357204f;
      sa[93] = -0.26425016f;
      sa[94] = 0.07175985f;
      sa[95] = -0.259494f;
      sa[96] = 0.034683876f;
      sa[97] = -0.058779564f;
      sa[98] = 0.25921917f;
      sa[99] = -0.18971574f;
      sa[100] = -0.13176927f;
      sa[101] = -0.2721294f;
      sa[102] = -0.29989225f;
      sa[103] = -0.17824447f;
      sa[104] = 0.0044603716f;
      sa[105] = -0.26503462f;
      sa[106] = -0.34902f;
      sa[107] = 0.20647211f;
      sa[108] = 0.21453355f;
      sa[109] = -0.2903168f;
      sa[110] = -0.08025136f;
      sa[111] = 0.17573468f;
      sa[112] = 0.09768089f;
      sa[113] = 0.013892424f;
      sa[114] = -0.040982954f;
      sa[115] = -0.24133946f;
      sa[116] = -0.15951446f;
      sa[117] = 0.038183052f;
      sa[118] = -0.21035138f;
      sa[119] = -0.112578295f;
      sa[120] = 0.12120124f;
      sa[121] = 0.22870147f;
      sa[122] = 0.41499916f;
      sa[123] = 0.3546216f;
      sa[124] = 0.3489176f;
      sa[125] = 0.43643877f;
      sa[126] = -0.2528972f;
      sa[127] = -0.32050025f;
      sa[128] = 0.19852625f;
      sa[129] = 0.21778852f;
      sa[130] = -0.21681093f;
      sa[131] = 0.17426397f;
      sa[132] = 0.1565204f;
      sa[133] = -0.500205f;
      sa[134] = 0.034865253f;
      sa[135] = -0.32012457f;
      sa[136] = 0.023997707f;
      sa[137] = 0.1070038f;
      sa[138] = 0.2093693f;
      sa[139] = -0.26377624f;
      sa[140] = -0.10337178f;
      sa[141] = -0.30320778f;
      sa[142] = 0.45740893f;
      sa[143] = -0.31787658f;
      sa[144] = 0.22328864f;
      sa[145] = -0.17163938f;
      sa[146] = -0.37001178f;
      sa[147] = 0.019582426f;
      sa[148] = 0.24657667f;
      sa[149] = 0.4750658f;
      sa[150] = 0.39494115f;
      sa[151] = -0.26687688f;
      sa[152] = 0.02647516f;
      sa[153] = 0.3112049f;
      sa[154] = 0.20206994f;
      sa[155] = -0.113177784f;
      sa[156] = 0.073430814f;
      sa[157] = -0.33051646f;
      sa[158] = 0.12726015f;
      sa[159] = 0.021577688f;
      sa[160] = 0.012952744f;
      sa[161] = 0.22720458f;
      sa[162] = 0.0041354876f;
      sa[163] = 0.014678238f;
      sa[164] = 0.35369265f;
      sa[165] = -0.093983844f;
      sa[166] = -0.15641008f;
      sa[167] = -0.12978426f;
      sa[168] = 0.40996924f;
      sa[169] = 0.36050314f;
      sa[170] = -0.026890777f;
      sa[171] = -0.0097729415f;
      sa[172] = -0.30384812f;
      sa[173] = -0.28219542f;
      sa[174] = 0.05449959f;
      sa[175] = -0.10670742f;
      sa[176] = 0.028591221f;
      sa[177] = 0.05585523f;
      sa[178] = -0.023907496f;
      sa[179] = 0.06175122f;
      sa[180] = -0.074846275f;
      sa[181] = -0.22323798f;
      sa[182] = -0.19845046f;
      sa[183] = -0.029432144f;
      sa[184] = 0.26351815f;
      sa[185] = 0.3336448f;
      sa[186] = -0.32660657f;
      sa[187] = 0.019045833f;
      sa[188] = -0.046223275f;
      sa[189] = 0.25806642f;
      sa[190] = -0.045872156f;
      sa[191] = -0.10236612f;
      sa[192] = -0.081539325f;
      sa[193] = 0.17914501f;
      sa[194] = 0.078144476f;
      sa[195] = 0.42407253f;
      sa[196] = 0.42903078f;
      sa[197] = 0.08023167f;
      sa[198] = 0.080731064f;
      sa[199] = 0.012996867f;
      sa[200] = 0.033359103f;
      sa[201] = -0.6195043f;
      sa[202] = 0.1293885f;
      sa[203] = 0.02485583f;
      sa[204] = -0.13185763f;
      sa[205] = 0.19304992f;
      sa[206] = 0.36807021f;
      sa[207] = 0.052177098f;
      sa[208] = -0.23063916f;
      sa[209] = 0.023042956f;
      sa[210] = -0.2072696f;
      sa[211] = -0.5076833f;
      sa[212] = 0.2242599f;
      sa[213] = -0.2149939f;
      sa[214] = -0.08409018f;
      sa[215] = 0.011681192f;
      sa[216] = 0.1727949f;
      sa[217] = 0.3332472f;
      sa[218] = -0.22886682f;
      sa[219] = 0.37428927f;
      sa[220] = -0.25969946f;
      sa[221] = 0.022966763f;
      sa[222] = 0.080690145f;
      sa[223] = 0.08649748f;
      sa[224] = -0.0396021f;
      sa[225] = 0.22268657f;
      sa[226] = -0.2928451f;
      sa[227] = 0.66132176f;
      sa[228] = 0.28668892f;
      sa[229] = 0.21105686f;
      sa[230] = 0.20620456f;
      sa[231] = -0.36692658f;
      sa[232] = -0.3462723f;
      sa[233] = 0.29185787f;
      sa[234] = 0.14086476f;
      sa[235] = -0.41277906f;
      sa[236] = -0.0568215f;
      sa[237] = -0.25856197f;
      sa[238] = -0.056205604f;
      sa[239] = 0.07523125f;
      sa[240] = 0.03446687f;
      sa[241] = -0.19268389f;
      sa[242] = -0.04985675f;
      sa[243] = -0.34872127f;
      sa[244] = -0.17202638f;
      sa[245] = -0.24018838f;
      sa[246] = -0.209193f;
      sa[247] = -0.07369616f;
      sa[248] = 0.27381048f;
      sa[249] = 0.26230028f;
      sa[250] = -0.12243314f;
      sa[251] = -0.07661729f;
      sa[252] = -0.35078737f;
      sa[253] = -0.42614213f;
      sa[254] = -0.33956409f;
      sa[255] = 0.15464504f;
      sa[256] = -0.19482882f;
      sa[257] = 0.37705362f;
      sa[258] = -0.36901072f;
      sa[259] = -0.17043288f;
      sa[260] = -0.24557951f;
      sa[261] = -0.06214813f;
      sa[262] = -0.14129703f;
      sa[263] = 0.30559608f;
      sa[264] = -0.45582515f;
      sa[265] = 0.18437605f;
      sa[266] = -0.56875753f;
      sa[267] = -0.33275685f;
      sa[268] = 0.09818394f;
      sa[269] = -0.048180874f;
      sa[270] = -0.19757211f;
      sa[271] = 0.3215958f;
      sa[272] = -0.2929692f;
      sa[273] = -0.1264043f;
      sa[274] = 0.15375239f;
      sa[275] = -0.036745552f;
      sa[276] = 0.19041364f;
      sa[277] = -0.27467602f;
      sa[278] = -0.11926224f;
      sa[279] = -0.020622589f;
      sa[280] = -0.2754744f;
      sa[281] = 0.24698567f;
      sa[282] = -0.08259891f;
      sa[283] = 0.018515714f;
      sa[284] = 0.029339226f;
      sa[285] = -0.29238498f;
      sa[286] = 0.2891239f;
      sa[287] = 0.166339f;
      sa[288] = -0.21611403f;
      sa[289] = -0.17086157f;
      sa[290] = 0.15241072f;
      sa[291] = -0.04582595f;
      sa[292] = -0.034732696f;
      sa[293] = -0.07935071f;
      sa[294] = 0.13710962f;
      sa[295] = 0.08707352f;
      sa[296] = 0.32531422f;
      sa[297] = 0.22238143f;
      sa[298] = -0.049425337f;
      sa[299] = -0.02807028f;
      sa[300] = 0.11386478f;
      sa[301] = 0.003434115f;
      sa[302] = 0.16828415f;
      sa[303] = 0.08387859f;
      sa[304] = -0.22636847f;
      sa[305] = -0.28941125f;
      sa[306] = 0.22673252f;
      sa[307] = -0.14486495f;
      sa[308] = 0.12040297f;
      sa[309] = 0.058303546f;
      sa[310] = 0.50406563f;
      sa[311] = 0.19770367f;
      sa[312] = -0.22276494f;
      sa[313] = -0.2922462f;
      sa[314] = -0.27152425f;
      sa[315] = 0.05893749f;
      sa[316] = 0.12709479f;
      sa[317] = -0.13920127f;
      sa[318] = 0.2589042f;
      sa[319] = 0.32805723f;
      sa[320] = -0.10992794f;
      sa[321] = 0.14017412f;
      sa[322] = 0.4227558f;
      sa[323] = -0.40276772f;
      sa[324] = 0.13609868f;
      sa[325] = 0.2951817f;
      sa[326] = -0.34147963f;
      sa[327] = 0.034839574f;
      sa[328] = -0.16201742f;
      sa[329] = 0.012253837f;
      sa[330] = -0.13052087f;
      sa[331] = 0.2236838f;
      sa[332] = -0.2952064f;
      sa[333] = 0.15269864f;
      sa[334] = -0.07132951f;
      sa[335] = 5.9040537E-4f;
      sa[336] = -0.12003358f;
      sa[337] = -0.12692736f;
      sa[338] = 0.34870243f;
      sa[339] = -0.25560316f;
      sa[340] = -0.41815493f;
      sa[341] = -0.20364492f;
      sa[342] = 0.28573915f;
      sa[343] = -0.12399812f;
      sa[344] = -0.31077904f;
      sa[345] = 0.1934473f;
      sa[346] = 0.17433219f;
      sa[347] = -0.19573236f;
      sa[348] = 0.47418758f;
      sa[349] = -0.40842527f;
      sa[350] = -0.32663658f;
      sa[351] = 0.099972494f;
      sa[352] = 0.3709345f;
      sa[353] = 0.047220357f;
      sa[354] = -0.04539978f;
      sa[355] = -0.11105503f;
      sa[356] = -0.10264752f;
      sa[357] = 0.37494135f;
      sa[358] = -0.3226467f;
      sa[359] = 0.11515073f;
      sa[360] = 0.16414751f;
      sa[361] = -0.2812637f;
      sa[362] = 0.07326602f;
      sa[363] = 0.17492355f;
      sa[364] = -0.1818886f;
      sa[365] = -0.29086146f;
      sa[366] = -0.02224768f;
      sa[367] = -0.07303561f;
      sa[368] = 0.086549856f;
      sa[369] = 0.20982447f;
      sa[370] = -0.4505761f;
      sa[371] = 0.14960335f;
      sa[372] = -0.08722002f;
      sa[373] = 0.2771432f;
      sa[374] = -0.09281819f;
      sa[375] = -0.34011152f;
      sa[376] = -0.42817014f;
      sa[377] = -0.34465382f;
      sa[378] = -0.041277397f;
      sa[379] = 0.07421127f;
      sa[380] = -0.29630977f;
      sa[381] = -0.2740265f;
      sa[382] = -0.061430033f;
      sa[383] = 0.18864366f;
      sa[384] = -0.046853364f;
      sa[385] = 0.17072652f;
      sa[386] = -0.35121554f;
      sa[387] = -0.28724787f;
      sa[388] = -0.005150981f;
      sa[389] = 0.17681178f;
      sa[390] = 0.07639982f;
      sa[391] = 0.074314184f;
      sa[392] = 0.36757442f;
      sa[393] = 0.2327353f;
      sa[394] = -0.18667719f;
      sa[395] = 0.41569084f;
      sa[396] = 0.18413416f;
      sa[397] = -0.42470458f;
      sa[398] = 0.11278964f;
      sa[399] = 0.22832243f;
      sa[400] = 0.097245306f;
      sa[401] = 0.4557296f;
      sa[402] = -0.38388148f;
      sa[403] = -2.8251868E-4f;
      sa[404] = 0.22876833f;
      sa[405] = -0.37073988f;
      sa[406] = 0.11778591f;
      sa[407] = 0.21977356f;
      sa[408] = -0.35386637f;
      sa[409] = -0.28783253f;
      sa[410] = -0.13837747f;
      sa[411] = 0.102516666f;
      sa[412] = -0.31390798f;
      sa[413] = 0.13756324f;
      sa[414] = 0.14460263f;
      sa[415] = 0.34386298f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_32x6_ReLU_07_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[160];
  static {
    h2o_nn_32x6_ReLU_07_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_07_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 1.323962f;
      sa[1] = -0.26772088f;
      sa[2] = -0.43385047f;
      sa[3] = -0.91750216f;
      sa[4] = 0.09962169f;
      sa[5] = 0.17419216f;
      sa[6] = 1.2842478f;
      sa[7] = -0.6503413f;
      sa[8] = -1.0689527f;
      sa[9] = 0.5627144f;
      sa[10] = -0.17652081f;
      sa[11] = 0.4511275f;
      sa[12] = 0.13257882f;
      sa[13] = 0.12474263f;
      sa[14] = -1.2112012f;
      sa[15] = 1.1990125f;
      sa[16] = 1.7061938f;
      sa[17] = -0.53046495f;
      sa[18] = 0.013621253f;
      sa[19] = -0.48292205f;
      sa[20] = 1.2256854f;
      sa[21] = 0.039346427f;
      sa[22] = -1.0059805f;
      sa[23] = 0.7445156f;
      sa[24] = -1.5428169f;
      sa[25] = 0.31445435f;
      sa[26] = -0.38539886f;
      sa[27] = 1.5330997f;
      sa[28] = -1.3864504f;
      sa[29] = -0.4103182f;
      sa[30] = 0.49887317f;
      sa[31] = -0.77594f;
      sa[32] = -1.1255838f;
      sa[33] = -1.6709464f;
      sa[34] = -0.031882f;
      sa[35] = 1.4380587f;
      sa[36] = -0.4530773f;
      sa[37] = -0.15667267f;
      sa[38] = 0.17574298f;
      sa[39] = 0.83309686f;
      sa[40] = -0.6603203f;
      sa[41] = -1.6238414f;
      sa[42] = -1.0868413f;
      sa[43] = -1.4738473f;
      sa[44] = -0.0020416987f;
      sa[45] = -1.2884015f;
      sa[46] = 1.2375338f;
      sa[47] = 1.4768754f;
      sa[48] = -1.3194739f;
      sa[49] = -1.3801502f;
      sa[50] = 0.3835684f;
      sa[51] = -0.2196201f;
      sa[52] = 0.97891825f;
      sa[53] = 0.9426815f;
      sa[54] = -0.2401875f;
      sa[55] = 1.249644f;
      sa[56] = -1.1340994f;
      sa[57] = -1.1139171f;
      sa[58] = 0.2660818f;
      sa[59] = -0.41333562f;
      sa[60] = 1.4245927f;
      sa[61] = -0.66345626f;
      sa[62] = -0.35216415f;
      sa[63] = 0.8128875f;
      sa[64] = 1.4412f;
      sa[65] = -0.6132724f;
      sa[66] = 0.61308914f;
      sa[67] = 1.5782478f;
      sa[68] = 0.69873863f;
      sa[69] = -0.9977695f;
      sa[70] = -1.572587f;
      sa[71] = -0.45945114f;
      sa[72] = -1.2714667f;
      sa[73] = 1.2080886f;
      sa[74] = 1.3687696f;
      sa[75] = -0.086890295f;
      sa[76] = 0.92111534f;
      sa[77] = 0.48047784f;
      sa[78] = -1.3092699f;
      sa[79] = 0.94748867f;
      sa[80] = -0.790548f;
      sa[81] = 0.30818728f;
      sa[82] = 0.8003349f;
      sa[83] = -0.6040307f;
      sa[84] = -2.059054f;
      sa[85] = -1.3482434f;
      sa[86] = 0.25663236f;
      sa[87] = 1.2411858f;
      sa[88] = -1.5129061f;
      sa[89] = -0.49087682f;
      sa[90] = -1.0384821f;
      sa[91] = 1.5398793f;
      sa[92] = -0.34460798f;
      sa[93] = 0.27045277f;
      sa[94] = -1.614525f;
      sa[95] = -0.17502713f;
      sa[96] = -1.1363827f;
      sa[97] = 0.30682933f;
      sa[98] = -0.084841184f;
      sa[99] = 0.21324949f;
      sa[100] = -1.2332689f;
      sa[101] = -0.38108096f;
      sa[102] = 1.2797616f;
      sa[103] = 0.045540202f;
      sa[104] = -0.18214263f;
      sa[105] = -0.4806438f;
      sa[106] = 1.4107596f;
      sa[107] = 1.1775329f;
      sa[108] = 0.75405043f;
      sa[109] = 0.050491124f;
      sa[110] = 0.6909514f;
      sa[111] = -0.9325097f;
      sa[112] = -1.1742549f;
      sa[113] = 0.21668205f;
      sa[114] = 0.26873836f;
      sa[115] = -0.45269963f;
      sa[116] = 1.1581149f;
      sa[117] = 0.063539125f;
      sa[118] = -1.3484257f;
      sa[119] = -0.8429363f;
      sa[120] = -0.27105135f;
      sa[121] = 1.1191115f;
      sa[122] = -0.11821408f;
      sa[123] = 0.3819763f;
      sa[124] = -0.7429069f;
      sa[125] = 0.8021273f;
      sa[126] = -0.95998526f;
      sa[127] = 0.36744696f;
      sa[128] = -0.9882262f;
      sa[129] = 0.71096635f;
      sa[130] = -0.47388253f;
      sa[131] = 0.93547183f;
      sa[132] = 0.45154023f;
      sa[133] = 0.61195385f;
      sa[134] = 0.6529332f;
      sa[135] = -1.1545832f;
      sa[136] = 0.54508907f;
      sa[137] = -0.63340086f;
      sa[138] = -0.13674772f;
      sa[139] = 1.1676323f;
      sa[140] = -0.47451848f;
      sa[141] = -0.060039856f;
      sa[142] = 0.16656259f;
      sa[143] = -0.8446861f;
      sa[144] = 0.82478f;
      sa[145] = -0.7925223f;
      sa[146] = -0.0060012448f;
      sa[147] = -0.27241963f;
      sa[148] = -1.1014527f;
      sa[149] = 0.9983107f;
      sa[150] = -1.0618857f;
      sa[151] = -1.559796f;
      sa[152] = 1.6324432f;
      sa[153] = -0.5628622f;
      sa[154] = 1.3619398f;
      sa[155] = -1.584359f;
      sa[156] = -1.4424479f;
      sa[157] = -1.3028085f;
      sa[158] = -0.27783284f;
      sa[159] = -0.5846375f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_32x6_ReLU_07 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_32x6_ReLU_07_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_32x6_ReLU_07_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_32x6_ReLU_07_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_32x6_ReLU_07_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_07_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


