/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:42:54.268+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_09

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_09 > h2o_nn_16x16x6_ReLU_09.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_09.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_09", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_09 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_09_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_09_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_09_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_09_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_09_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_09_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_09_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_09.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_09_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25961538461538464,0.11538461538461539,0.11538461538461539,0.125,0.25961538461538464,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_09() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(5810445905818012744L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_09_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_16x16x6_ReLU_09_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_09_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_09_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_09_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_09_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_09_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_09_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.5271596111552193;
      sa[1] = 0.770437675865249;
      sa[2] = 0.38783321112328195;
      sa[3] = 0.7289397266432073;
      sa[4] = 0.5978526171704344;
      sa[5] = 0.8542086691301852;
      sa[6] = 0.44671806244973356;
      sa[7] = 0.5977020165437141;
      sa[8] = 0.6446512428079189;
      sa[9] = 0.7413491532843984;
      sa[10] = 0.5141733924662358;
      sa[11] = 0.3151705615195673;
      sa[12] = 0.2557557175942402;
      sa[13] = 0.3887068941707019;
      sa[14] = 0.5128057391231599;
      sa[15] = 0.46992385090441646;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_09_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.1204719754347225;
      sa[1] = 1.1121245754508602;
      sa[2] = 0.8724600994802355;
      sa[3] = 0.9843513724154639;
      sa[4] = 0.9011058310744287;
      sa[5] = 0.9484577607547188;
      sa[6] = 0.8968099550178935;
      sa[7] = 0.9771377810348784;
      sa[8] = 0.9302247105909546;
      sa[9] = 1.035275130404681;
      sa[10] = 0.9068164345140811;
      sa[11] = 1.1383561495361056;
      sa[12] = 1.0960597024995193;
      sa[13] = 1.115452625451617;
      sa[14] = 0.9121701397276053;
      sa[15] = 0.9278650101190993;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_09_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_09_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.07104206699660462;
      sa[1] = 0.03428025023951737;
      sa[2] = -0.03295910244948094;
      sa[3] = -0.05467112839932933;
      sa[4] = 0.06506757078657231;
      sa[5] = -0.15585790836728072;
    }
  }
}
class h2o_nn_16x16x6_ReLU_09_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[208];
  static {
    h2o_nn_16x16x6_ReLU_09_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.263841f;
      sa[1] = 0.3316235f;
      sa[2] = 0.4855569f;
      sa[3] = 0.22297391f;
      sa[4] = -0.06655242f;
      sa[5] = -0.13985418f;
      sa[6] = -0.19672409f;
      sa[7] = 0.50337094f;
      sa[8] = 0.35152343f;
      sa[9] = -0.11889516f;
      sa[10] = -0.18631323f;
      sa[11] = -0.35400686f;
      sa[12] = 0.32288483f;
      sa[13] = -0.22729512f;
      sa[14] = -0.5268558f;
      sa[15] = 0.073077306f;
      sa[16] = 0.068799615f;
      sa[17] = 0.24350145f;
      sa[18] = -0.17720923f;
      sa[19] = 0.20763744f;
      sa[20] = 0.41759714f;
      sa[21] = -0.41290686f;
      sa[22] = 0.54900634f;
      sa[23] = -0.11278618f;
      sa[24] = 0.2764322f;
      sa[25] = 0.4539679f;
      sa[26] = -0.5411977f;
      sa[27] = 0.45219955f;
      sa[28] = 0.19418176f;
      sa[29] = -0.39134607f;
      sa[30] = -0.3302793f;
      sa[31] = 0.15558848f;
      sa[32] = 0.34718275f;
      sa[33] = -0.5080199f;
      sa[34] = 0.041887973f;
      sa[35] = -0.13449916f;
      sa[36] = 0.23237655f;
      sa[37] = 0.510368f;
      sa[38] = -0.26489377f;
      sa[39] = 0.17010379f;
      sa[40] = 0.019662209f;
      sa[41] = -0.17964193f;
      sa[42] = -0.42041087f;
      sa[43] = -0.15863869f;
      sa[44] = 0.36537308f;
      sa[45] = -0.7600828f;
      sa[46] = 0.08750851f;
      sa[47] = -0.021454997f;
      sa[48] = 0.3272732f;
      sa[49] = 0.46827376f;
      sa[50] = 0.41701987f;
      sa[51] = -0.48701796f;
      sa[52] = -0.23317434f;
      sa[53] = 0.40640664f;
      sa[54] = 0.24226841f;
      sa[55] = -0.08959569f;
      sa[56] = -0.50067437f;
      sa[57] = -0.4075422f;
      sa[58] = 0.26093432f;
      sa[59] = -0.29779768f;
      sa[60] = -0.42218035f;
      sa[61] = 0.27352038f;
      sa[62] = 0.013184554f;
      sa[63] = 0.076217294f;
      sa[64] = -0.016598258f;
      sa[65] = 0.46274772f;
      sa[66] = 0.5067216f;
      sa[67] = 0.5371027f;
      sa[68] = -0.10005607f;
      sa[69] = 0.19837227f;
      sa[70] = -0.121725924f;
      sa[71] = 0.41213387f;
      sa[72] = -0.105179116f;
      sa[73] = 0.520475f;
      sa[74] = -0.34760132f;
      sa[75] = -0.4517796f;
      sa[76] = -0.31587204f;
      sa[77] = -0.30820328f;
      sa[78] = -0.16452658f;
      sa[79] = 0.45303816f;
      sa[80] = -0.2839367f;
      sa[81] = -0.32628626f;
      sa[82] = -0.20086432f;
      sa[83] = 0.31612983f;
      sa[84] = -0.15020289f;
      sa[85] = -0.36279184f;
      sa[86] = 0.20511423f;
      sa[87] = 0.31941885f;
      sa[88] = 0.103830606f;
      sa[89] = 0.16870058f;
      sa[90] = -0.21753116f;
      sa[91] = 0.1233168f;
      sa[92] = 0.38941863f;
      sa[93] = -0.19558576f;
      sa[94] = -0.39738938f;
      sa[95] = -0.5867912f;
      sa[96] = 0.2579571f;
      sa[97] = -0.20820425f;
      sa[98] = 0.32222718f;
      sa[99] = -0.042549603f;
      sa[100] = -0.07904055f;
      sa[101] = -0.51412565f;
      sa[102] = -0.44794363f;
      sa[103] = 0.065203205f;
      sa[104] = 0.23218551f;
      sa[105] = -0.36311367f;
      sa[106] = -0.2883837f;
      sa[107] = 0.17557372f;
      sa[108] = 0.54894364f;
      sa[109] = -0.12406057f;
      sa[110] = -0.18721329f;
      sa[111] = 0.23892084f;
      sa[112] = 0.1842291f;
      sa[113] = 0.27822298f;
      sa[114] = -0.23725678f;
      sa[115] = 0.13244905f;
      sa[116] = -0.45833382f;
      sa[117] = 0.06865435f;
      sa[118] = -0.6375366f;
      sa[119] = -0.22252572f;
      sa[120] = 0.2256837f;
      sa[121] = 0.31405824f;
      sa[122] = 0.55855876f;
      sa[123] = 0.28964102f;
      sa[124] = 0.47026128f;
      sa[125] = 0.43655807f;
      sa[126] = -0.23576602f;
      sa[127] = -0.10489187f;
      sa[128] = 0.021418173f;
      sa[129] = 0.3930551f;
      sa[130] = -0.28331932f;
      sa[131] = 0.6770072f;
      sa[132] = 0.23995672f;
      sa[133] = -0.4018815f;
      sa[134] = -0.004606828f;
      sa[135] = -0.4494106f;
      sa[136] = -0.41515157f;
      sa[137] = 0.014446162f;
      sa[138] = 0.22034515f;
      sa[139] = -0.30078542f;
      sa[140] = -0.24494693f;
      sa[141] = -0.112011835f;
      sa[142] = 0.05933083f;
      sa[143] = -0.5604404f;
      sa[144] = 0.52738374f;
      sa[145] = -0.28222537f;
      sa[146] = -0.34010193f;
      sa[147] = 0.21813385f;
      sa[148] = 0.15508124f;
      sa[149] = 0.3095484f;
      sa[150] = 0.35878605f;
      sa[151] = -0.4415206f;
      sa[152] = -0.00347834f;
      sa[153] = 0.50546604f;
      sa[154] = 0.38433167f;
      sa[155] = -0.2634967f;
      sa[156] = -0.036046322f;
      sa[157] = -0.24715504f;
      sa[158] = -0.02664597f;
      sa[159] = 0.11611624f;
      sa[160] = -0.2872766f;
      sa[161] = 0.21853991f;
      sa[162] = -0.18378252f;
      sa[163] = -0.22278212f;
      sa[164] = 0.21455884f;
      sa[165] = -0.12451184f;
      sa[166] = -0.007006584f;
      sa[167] = -0.28303713f;
      sa[168] = 0.3630578f;
      sa[169] = 0.27947113f;
      sa[170] = -0.3184871f;
      sa[171] = -0.37111723f;
      sa[172] = -0.15674949f;
      sa[173] = -0.13304226f;
      sa[174] = 0.010854512f;
      sa[175] = -0.26766258f;
      sa[176] = -0.13387822f;
      sa[177] = -0.27515283f;
      sa[178] = 0.157589f;
      sa[179] = 0.5659751f;
      sa[180] = 0.039436128f;
      sa[181] = -0.38038298f;
      sa[182] = 0.09981881f;
      sa[183] = 0.54597014f;
      sa[184] = 0.795133f;
      sa[185] = 0.298716f;
      sa[186] = -0.21560165f;
      sa[187] = 0.09145344f;
      sa[188] = -0.25767842f;
      sa[189] = 0.5109772f;
      sa[190] = 0.2896761f;
      sa[191] = -0.19875677f;
      sa[192] = -0.46625593f;
      sa[193] = 0.53211117f;
      sa[194] = -0.015829915f;
      sa[195] = 0.19826221f;
      sa[196] = 0.4100232f;
      sa[197] = -0.10394059f;
      sa[198] = 0.01268533f;
      sa[199] = -0.26909238f;
      sa[200] = 0.15611255f;
      sa[201] = -0.76699585f;
      sa[202] = 0.16616307f;
      sa[203] = -0.085699335f;
      sa[204] = -0.12457433f;
      sa[205] = 0.3960031f;
      sa[206] = 0.341227f;
      sa[207] = 0.28970042f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_09_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_09_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.67890376f;
      sa[1] = 0.1475859f;
      sa[2] = -0.3501856f;
      sa[3] = -0.4346236f;
      sa[4] = 0.1384511f;
      sa[5] = 0.2174224f;
      sa[6] = 0.18661578f;
      sa[7] = -0.034962833f;
      sa[8] = -0.3861854f;
      sa[9] = 0.41567507f;
      sa[10] = 0.05083861f;
      sa[11] = -0.0209037f;
      sa[12] = 0.30207735f;
      sa[13] = -0.15783644f;
      sa[14] = -0.35314173f;
      sa[15] = 0.33087802f;
      sa[16] = 0.63184285f;
      sa[17] = -0.20609914f;
      sa[18] = 0.04593806f;
      sa[19] = -0.13063642f;
      sa[20] = 0.499541f;
      sa[21] = 0.2917996f;
      sa[22] = -0.25542846f;
      sa[23] = 0.4870817f;
      sa[24] = -0.29913506f;
      sa[25] = 0.045866296f;
      sa[26] = 0.11098762f;
      sa[27] = 0.3798141f;
      sa[28] = -0.323973f;
      sa[29] = -0.13360281f;
      sa[30] = 0.29431105f;
      sa[31] = -0.04138191f;
      sa[32] = -0.3586249f;
      sa[33] = -0.5557175f;
      sa[34] = -0.030483522f;
      sa[35] = 0.29736888f;
      sa[36] = -0.103675134f;
      sa[37] = -0.08290394f;
      sa[38] = -0.028192364f;
      sa[39] = 0.14993478f;
      sa[40] = -0.30068853f;
      sa[41] = -0.48482767f;
      sa[42] = -0.2767558f;
      sa[43] = -0.4076593f;
      sa[44] = -0.05988246f;
      sa[45] = -0.43352297f;
      sa[46] = 0.28494307f;
      sa[47] = 0.3245502f;
      sa[48] = -0.2841735f;
      sa[49] = -0.35836384f;
      sa[50] = 0.15434554f;
      sa[51] = -0.16948971f;
      sa[52] = 0.39922643f;
      sa[53] = 0.3118836f;
      sa[54] = -0.102831505f;
      sa[55] = 0.40421718f;
      sa[56] = -0.30023476f;
      sa[57] = -0.36722374f;
      sa[58] = 0.09543181f;
      sa[59] = -0.0072742375f;
      sa[60] = 0.3270417f;
      sa[61] = -0.20353311f;
      sa[62] = -0.09627451f;
      sa[63] = 0.09855107f;
      sa[64] = 0.21950439f;
      sa[65] = -0.17586873f;
      sa[66] = 0.14476821f;
      sa[67] = 0.449539f;
      sa[68] = 0.19828711f;
      sa[69] = -0.49828586f;
      sa[70] = -0.40582725f;
      sa[71] = -0.20449233f;
      sa[72] = -0.38854665f;
      sa[73] = 0.15728043f;
      sa[74] = 0.3323128f;
      sa[75] = -0.0014970878f;
      sa[76] = 0.17773198f;
      sa[77] = 0.17633787f;
      sa[78] = -0.5095823f;
      sa[79] = 0.2838534f;
      sa[80] = -0.23448396f;
      sa[81] = 0.06608467f;
      sa[82] = 0.18978135f;
      sa[83] = -0.19612741f;
      sa[84] = -0.46789283f;
      sa[85] = -0.38703853f;
      sa[86] = 0.011327056f;
      sa[87] = 0.2792245f;
      sa[88] = -0.43467396f;
      sa[89] = -0.14215107f;
      sa[90] = -0.3261287f;
      sa[91] = 0.39016464f;
      sa[92] = -0.10119402f;
      sa[93] = 0.06299451f;
      sa[94] = -0.46150243f;
      sa[95] = -0.07173493f;
      sa[96] = -0.18896104f;
      sa[97] = -0.0839342f;
      sa[98] = -0.095692836f;
      sa[99] = -0.15603772f;
      sa[100] = -0.21076354f;
      sa[101] = -0.03738227f;
      sa[102] = 0.14273001f;
      sa[103] = -0.01165675f;
      sa[104] = -0.11574901f;
      sa[105] = -0.24338241f;
      sa[106] = 0.45495254f;
      sa[107] = 0.25290185f;
      sa[108] = 0.15557478f;
      sa[109] = -0.13371181f;
      sa[110] = 0.1585789f;
      sa[111] = -0.30785173f;
      sa[112] = -0.37199605f;
      sa[113] = 0.119208775f;
      sa[114] = 0.06297051f;
      sa[115] = -0.13881563f;
      sa[116] = 0.42506674f;
      sa[117] = 0.07048968f;
      sa[118] = -0.39742664f;
      sa[119] = -0.28008485f;
      sa[120] = -0.0503227f;
      sa[121] = 0.28863692f;
      sa[122] = -0.12536968f;
      sa[123] = 0.09803564f;
      sa[124] = -0.2652487f;
      sa[125] = 0.23937906f;
      sa[126] = -0.39526236f;
      sa[127] = -0.029245399f;
      sa[128] = -0.46332306f;
      sa[129] = -0.015746197f;
      sa[130] = 0.037120353f;
      sa[131] = 0.34013838f;
      sa[132] = 0.08851092f;
      sa[133] = 0.07526554f;
      sa[134] = 0.2502066f;
      sa[135] = -0.31825817f;
      sa[136] = 0.20839494f;
      sa[137] = -0.2893834f;
      sa[138] = -0.085627645f;
      sa[139] = 0.40718618f;
      sa[140] = -0.2458335f;
      sa[141] = 0.061855238f;
      sa[142] = 0.10298069f;
      sa[143] = -0.28121388f;
      sa[144] = 0.23810354f;
      sa[145] = -0.24981469f;
      sa[146] = 0.110780336f;
      sa[147] = 0.004962438f;
      sa[148] = -0.38091886f;
      sa[149] = 0.4073513f;
      sa[150] = -0.22291344f;
      sa[151] = -0.4161269f;
      sa[152] = 0.49969643f;
      sa[153] = -0.09891971f;
      sa[154] = 0.3072902f;
      sa[155] = -0.3874535f;
      sa[156] = -0.41546533f;
      sa[157] = -0.27799898f;
      sa[158] = 0.10389536f;
      sa[159] = -0.1834467f;
      sa[160] = 0.2588585f;
      sa[161] = -0.3405919f;
      sa[162] = 0.4695694f;
      sa[163] = -0.24419701f;
      sa[164] = 0.20114474f;
      sa[165] = -0.22402616f;
      sa[166] = 0.3273092f;
      sa[167] = -0.4711204f;
      sa[168] = 0.2254028f;
      sa[169] = -0.45881176f;
      sa[170] = 0.21048677f;
      sa[171] = 0.3021446f;
      sa[172] = 0.33800554f;
      sa[173] = 0.38105717f;
      sa[174] = -0.115430646f;
      sa[175] = -0.14265609f;
      sa[176] = -0.102872714f;
      sa[177] = 0.31231153f;
      sa[178] = -0.27576348f;
      sa[179] = -0.017446373f;
      sa[180] = -0.3887656f;
      sa[181] = -0.1607366f;
      sa[182] = 0.18223271f;
      sa[183] = -0.060996845f;
      sa[184] = 0.38392672f;
      sa[185] = 0.5310193f;
      sa[186] = -0.14752583f;
      sa[187] = -0.26879796f;
      sa[188] = 0.08292508f;
      sa[189] = -0.1776299f;
      sa[190] = -0.37687522f;
      sa[191] = -0.20977831f;
      sa[192] = -0.12700748f;
      sa[193] = 0.16489606f;
      sa[194] = -0.17042223f;
      sa[195] = 0.049933895f;
      sa[196] = 0.08821798f;
      sa[197] = -0.26198f;
      sa[198] = 0.25176454f;
      sa[199] = 0.47607365f;
      sa[200] = 0.07450895f;
      sa[201] = 0.24880798f;
      sa[202] = 0.20191829f;
      sa[203] = -0.32970056f;
      sa[204] = 0.15809071f;
      sa[205] = 0.5948924f;
      sa[206] = -0.028087646f;
      sa[207] = 0.43783748f;
      sa[208] = -0.12781249f;
      sa[209] = 0.35456467f;
      sa[210] = -0.17377976f;
      sa[211] = -0.33859622f;
      sa[212] = -0.12524994f;
      sa[213] = 0.19358447f;
      sa[214] = -0.41713348f;
      sa[215] = -0.107731365f;
      sa[216] = 0.1834695f;
      sa[217] = 0.5697752f;
      sa[218] = -0.031609368f;
      sa[219] = 0.04878547f;
      sa[220] = 0.19229296f;
      sa[221] = -0.021530595f;
      sa[222] = -0.35983583f;
      sa[223] = -0.39128014f;
      sa[224] = 0.23943469f;
      sa[225] = 0.14462362f;
      sa[226] = -0.18269508f;
      sa[227] = -0.07046901f;
      sa[228] = -0.24223436f;
      sa[229] = -0.2608167f;
      sa[230] = -0.44216824f;
      sa[231] = -0.30623323f;
      sa[232] = 0.3895661f;
      sa[233] = -0.08305275f;
      sa[234] = -0.27574545f;
      sa[235] = -0.05144735f;
      sa[236] = -0.37644324f;
      sa[237] = 0.33819982f;
      sa[238] = 0.024960319f;
      sa[239] = -0.2052883f;
      sa[240] = -0.21957523f;
      sa[241] = -0.39996508f;
      sa[242] = -0.24033988f;
      sa[243] = 0.5035243f;
      sa[244] = 0.041319717f;
      sa[245] = 0.25636426f;
      sa[246] = 0.17886889f;
      sa[247] = -0.5475135f;
      sa[248] = 0.028814405f;
      sa[249] = -0.06369052f;
      sa[250] = 0.20518324f;
      sa[251] = 0.42837524f;
      sa[252] = 0.09469786f;
      sa[253] = -0.27071363f;
      sa[254] = 0.45560157f;
      sa[255] = 0.2892123f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_09_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_ReLU_09_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.115975335f;
      sa[1] = -1.7099975f;
      sa[2] = -1.5825638f;
      sa[3] = 1.234494f;
      sa[4] = 0.3650281f;
      sa[5] = -0.1966108f;
      sa[6] = -1.6405363f;
      sa[7] = 1.5299197f;
      sa[8] = 1.8063588f;
      sa[9] = -0.17673898f;
      sa[10] = 1.5935787f;
      sa[11] = 1.3239452f;
      sa[12] = 1.738354f;
      sa[13] = -0.7216958f;
      sa[14] = -1.8942531f;
      sa[15] = -0.7077564f;
      sa[16] = 0.74348044f;
      sa[17] = -0.7177951f;
      sa[18] = -1.4526967f;
      sa[19] = -0.85695374f;
      sa[20] = -1.9317726f;
      sa[21] = 0.32290038f;
      sa[22] = -1.9188734f;
      sa[23] = -0.6796252f;
      sa[24] = -0.51177657f;
      sa[25] = 1.8565052f;
      sa[26] = -0.3564972f;
      sa[27] = 1.2309227f;
      sa[28] = 1.2197375f;
      sa[29] = -0.77254814f;
      sa[30] = 0.17100574f;
      sa[31] = 0.1824078f;
      sa[32] = 0.26562664f;
      sa[33] = 0.25893292f;
      sa[34] = -0.553904f;
      sa[35] = 1.0202694f;
      sa[36] = 0.4942641f;
      sa[37] = -1.334405f;
      sa[38] = 0.5713945f;
      sa[39] = -0.3863096f;
      sa[40] = 0.25471583f;
      sa[41] = -0.63505644f;
      sa[42] = 0.57844436f;
      sa[43] = -0.7425912f;
      sa[44] = 0.944144f;
      sa[45] = -2.4972265f;
      sa[46] = -2.0833488f;
      sa[47] = 0.080240004f;
      sa[48] = 1.6725361f;
      sa[49] = -0.19654562f;
      sa[50] = -0.55187607f;
      sa[51] = 1.772636f;
      sa[52] = -1.7254336f;
      sa[53] = 0.8881071f;
      sa[54] = 1.6736194f;
      sa[55] = 1.1150236f;
      sa[56] = -0.8027194f;
      sa[57] = 0.0077287084f;
      sa[58] = 0.9055554f;
      sa[59] = 0.84588075f;
      sa[60] = -1.4256003f;
      sa[61] = 1.0806327f;
      sa[62] = -0.47642362f;
      sa[63] = -0.98863107f;
      sa[64] = 1.0131856f;
      sa[65] = -0.8880495f;
      sa[66] = -1.7637148f;
      sa[67] = -0.048941698f;
      sa[68] = 0.97996813f;
      sa[69] = -1.3309612f;
      sa[70] = -1.567293f;
      sa[71] = -0.11891953f;
      sa[72] = -1.0637752f;
      sa[73] = -1.2994127f;
      sa[74] = -1.1032106f;
      sa[75] = 1.3409448f;
      sa[76] = 1.9423051f;
      sa[77] = -0.55422527f;
      sa[78] = -1.4857591f;
      sa[79] = -0.35955948f;
      sa[80] = 0.47870785f;
      sa[81] = -1.881923f;
      sa[82] = -0.23965836f;
      sa[83] = -1.655274f;
      sa[84] = 1.5112239f;
      sa[85] = 1.0658323f;
      sa[86] = -2.080891f;
      sa[87] = 1.1636226f;
      sa[88] = -1.614694f;
      sa[89] = -1.0144258f;
      sa[90] = 0.14228623f;
      sa[91] = 0.23534818f;
      sa[92] = 1.225626f;
      sa[93] = 1.9539498f;
      sa[94] = 1.6006413f;
      sa[95] = 0.45560053f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_09 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_09_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_09_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_09_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_ReLU_09_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_09_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


