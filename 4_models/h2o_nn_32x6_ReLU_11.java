/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:43:20.764+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_32x6_ReLU_11

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_32x6_ReLU_11 > h2o_nn_32x6_ReLU_11.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_32x6_ReLU_11.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_32x6_ReLU_11", algorithm="deeplearning")
public class h2o_nn_32x6_ReLU_11 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,32,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_32x6_ReLU_11_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_32x6_ReLU_11_Activation_1.VALUES,
      /* Softmax */ h2o_nn_32x6_ReLU_11_Activation_2.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_32x6_ReLU_11_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_32x6_ReLU_11_Bias_1.VALUES,
      /* Softmax */ h2o_nn_32x6_ReLU_11_Bias_2.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_32x6_ReLU_11_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_32x6_ReLU_11_Weight_1.VALUES,
      /* Softmax */ h2o_nn_32x6_ReLU_11_Weight_2.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_32x6_ReLU_11.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_32x6_ReLU_11_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.2548076923076923,0.18269230769230768,0.057692307692307696,0.125,0.2548076923076923,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_32x6_ReLU_11() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(722388113230404128L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_32x6_ReLU_11_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_32x6_ReLU_11_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_11_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_32x6_ReLU_11_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_ReLU_11_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_11_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_32x6_ReLU_11_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_32x6_ReLU_11_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_11_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_32x6_ReLU_11_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_32x6_ReLU_11_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_ReLU_11_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_11_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.5063404093270505;
      sa[1] = 0.6297546330558004;
      sa[2] = 0.2745894988101036;
      sa[3] = 0.4578194970625137;
      sa[4] = 0.5479161029874926;
      sa[5] = 0.5277731053329374;
      sa[6] = 0.5791310999545782;
      sa[7] = 0.46502630697781283;
      sa[8] = 0.5215462708531927;
      sa[9] = 0.4930075766141511;
      sa[10] = 0.492581999393029;
      sa[11] = 0.5146817021983303;
      sa[12] = 0.4689927843455851;
      sa[13] = 0.4931038505124577;
      sa[14] = 0.5255112350218942;
      sa[15] = 0.6793190237412042;
      sa[16] = 0.5615317845360853;
      sa[17] = 0.37198993618156306;
      sa[18] = 0.4902470562992367;
      sa[19] = 0.4304026611952014;
      sa[20] = 0.5336751391818498;
      sa[21] = 0.5289169366930132;
      sa[22] = 0.5222875756522518;
      sa[23] = 0.4579248870437026;
      sa[24] = 0.5627828034838395;
      sa[25] = 0.45989088278211;
      sa[26] = 0.4984845575669233;
      sa[27] = 0.5032372596347704;
      sa[28] = 0.5184738572139223;
      sa[29] = 0.5408377632969936;
      sa[30] = 0.532601054633591;
      sa[31] = 0.5350338866860921;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_32x6_ReLU_11_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_32x6_ReLU_11_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_11_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.037332367174807715;
      sa[1] = -0.028356674781647037;
      sa[2] = -0.05311390029505068;
      sa[3] = -0.03236487425020777;
      sa[4] = -0.006368305400896914;
      sa[5] = -0.02064055135896943;
    }
  }
}
class h2o_nn_32x6_ReLU_11_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_32x6_ReLU_11_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[416];
  static {
    h2o_nn_32x6_ReLU_11_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_11_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.04715956f;
      sa[1] = 0.33408332f;
      sa[2] = 0.011305591f;
      sa[3] = 0.1054321f;
      sa[4] = -0.3858122f;
      sa[5] = -0.1507603f;
      sa[6] = -0.051629715f;
      sa[7] = 0.2121208f;
      sa[8] = 0.04703983f;
      sa[9] = -0.05380211f;
      sa[10] = -0.0529447f;
      sa[11] = -0.031395238f;
      sa[12] = -0.116594166f;
      sa[13] = -0.33333012f;
      sa[14] = -0.09869651f;
      sa[15] = 0.10657505f;
      sa[16] = -0.021024287f;
      sa[17] = -0.14649208f;
      sa[18] = -0.28304306f;
      sa[19] = 0.35122213f;
      sa[20] = 0.3372056f;
      sa[21] = -0.19173639f;
      sa[22] = 0.25352544f;
      sa[23] = -0.33487362f;
      sa[24] = 0.15444875f;
      sa[25] = 0.48938525f;
      sa[26] = -0.41285875f;
      sa[27] = 0.28751275f;
      sa[28] = 0.12758636f;
      sa[29] = -0.29826927f;
      sa[30] = -0.13294347f;
      sa[31] = 0.059429187f;
      sa[32] = 0.22509004f;
      sa[33] = -0.37899765f;
      sa[34] = 0.04629359f;
      sa[35] = -0.1904674f;
      sa[36] = 0.17438886f;
      sa[37] = 0.40519592f;
      sa[38] = -0.27103922f;
      sa[39] = 0.20543484f;
      sa[40] = 0.057852887f;
      sa[41] = -0.00794655f;
      sa[42] = -0.12658982f;
      sa[43] = -0.09108004f;
      sa[44] = 0.25660452f;
      sa[45] = -0.6575533f;
      sa[46] = 0.097013496f;
      sa[47] = 0.1271822f;
      sa[48] = 0.05094417f;
      sa[49] = -0.09728417f;
      sa[50] = 0.22621228f;
      sa[51] = -0.39112404f;
      sa[52] = -0.11420908f;
      sa[53] = 0.15926185f;
      sa[54] = 0.17137818f;
      sa[55] = -0.046671342f;
      sa[56] = -0.52987653f;
      sa[57] = -0.21483144f;
      sa[58] = 0.18698259f;
      sa[59] = -0.25013387f;
      sa[60] = -0.37903288f;
      sa[61] = 0.28116405f;
      sa[62] = 0.18731737f;
      sa[63] = 0.10138075f;
      sa[64] = 0.03270926f;
      sa[65] = 0.17872885f;
      sa[66] = 0.09329177f;
      sa[67] = 0.31653997f;
      sa[68] = -0.18740842f;
      sa[69] = 0.10690183f;
      sa[70] = -0.015544641f;
      sa[71] = 0.33667916f;
      sa[72] = -0.17652114f;
      sa[73] = 0.30055073f;
      sa[74] = -0.2101793f;
      sa[75] = 0.008517564f;
      sa[76] = -0.25604075f;
      sa[77] = 0.1695127f;
      sa[78] = 0.008186036f;
      sa[79] = 0.2137903f;
      sa[80] = -0.21273403f;
      sa[81] = -0.11230814f;
      sa[82] = 0.073513485f;
      sa[83] = 0.1813813f;
      sa[84] = 0.11949732f;
      sa[85] = -0.20032103f;
      sa[86] = 0.17883532f;
      sa[87] = 0.4077672f;
      sa[88] = 0.53347605f;
      sa[89] = 0.023308901f;
      sa[90] = -0.028783983f;
      sa[91] = 0.21881716f;
      sa[92] = 0.24612425f;
      sa[93] = -0.06900343f;
      sa[94] = -0.12253476f;
      sa[95] = 0.0874918f;
      sa[96] = 0.052283507f;
      sa[97] = -0.06225519f;
      sa[98] = 0.27304584f;
      sa[99] = -0.056865606f;
      sa[100] = -0.15906452f;
      sa[101] = -0.3395327f;
      sa[102] = -0.3622979f;
      sa[103] = -0.16432837f;
      sa[104] = 0.06272993f;
      sa[105] = -0.3877624f;
      sa[106] = -0.36579192f;
      sa[107] = 0.29764554f;
      sa[108] = 0.38138732f;
      sa[109] = -0.20576966f;
      sa[110] = -0.097916596f;
      sa[111] = 0.25637284f;
      sa[112] = 0.13116235f;
      sa[113] = 0.05903477f;
      sa[114] = 0.07369131f;
      sa[115] = -0.21035814f;
      sa[116] = 0.06497572f;
      sa[117] = -0.17773323f;
      sa[118] = -0.060994633f;
      sa[119] = -0.19996777f;
      sa[120] = -0.025382686f;
      sa[121] = -0.1964779f;
      sa[122] = 0.35148162f;
      sa[123] = 0.4007927f;
      sa[124] = 0.25937173f;
      sa[125] = 0.37570935f;
      sa[126] = -0.32956645f;
      sa[127] = -0.5679393f;
      sa[128] = 0.24200901f;
      sa[129] = -0.034350704f;
      sa[130] = -0.26844907f;
      sa[131] = 0.27315208f;
      sa[132] = 0.100414045f;
      sa[133] = -0.3395546f;
      sa[134] = 0.08779862f;
      sa[135] = -0.49117953f;
      sa[136] = -0.14112306f;
      sa[137] = 0.075798996f;
      sa[138] = 0.21965268f;
      sa[139] = -0.16691516f;
      sa[140] = -0.009340798f;
      sa[141] = -0.38260388f;
      sa[142] = 0.27829897f;
      sa[143] = -0.43392217f;
      sa[144] = 0.27839693f;
      sa[145] = -0.19533508f;
      sa[146] = -0.39896327f;
      sa[147] = -0.08404476f;
      sa[148] = 0.21665691f;
      sa[149] = 0.46061724f;
      sa[150] = 0.392429f;
      sa[151] = -0.2649472f;
      sa[152] = 0.065865204f;
      sa[153] = 0.41943258f;
      sa[154] = 0.018376201f;
      sa[155] = 0.014207626f;
      sa[156] = 0.113350205f;
      sa[157] = -0.2890943f;
      sa[158] = -0.115653604f;
      sa[159] = 0.24783997f;
      sa[160] = 0.22129993f;
      sa[161] = 0.15079144f;
      sa[162] = -0.10690484f;
      sa[163] = -0.09010895f;
      sa[164] = 0.19961923f;
      sa[165] = -0.008150361f;
      sa[166] = 0.056816734f;
      sa[167] = -0.06958771f;
      sa[168] = 0.034013662f;
      sa[169] = 0.25244337f;
      sa[170] = -0.03614517f;
      sa[171] = -0.33448714f;
      sa[172] = -0.09678296f;
      sa[173] = -0.3748913f;
      sa[174] = -0.029785872f;
      sa[175] = -0.13132396f;
      sa[176] = -0.07610594f;
      sa[177] = -0.15203717f;
      sa[178] = 0.04620449f;
      sa[179] = 0.2653723f;
      sa[180] = 0.020803016f;
      sa[181] = -0.35513765f;
      sa[182] = -0.010383316f;
      sa[183] = -0.05979371f;
      sa[184] = 0.52924246f;
      sa[185] = 0.38962665f;
      sa[186] = -0.04973119f;
      sa[187] = 0.041522212f;
      sa[188] = -0.057208486f;
      sa[189] = 0.36314628f;
      sa[190] = 0.15936956f;
      sa[191] = -0.20565902f;
      sa[192] = 0.012772496f;
      sa[193] = 0.08629374f;
      sa[194] = 0.33621567f;
      sa[195] = 0.41983438f;
      sa[196] = 0.33819765f;
      sa[197] = -0.016189279f;
      sa[198] = 0.106817015f;
      sa[199] = 0.16966295f;
      sa[200] = 0.15254065f;
      sa[201] = -0.5944088f;
      sa[202] = 0.072494015f;
      sa[203] = -0.11422135f;
      sa[204] = -0.047161955f;
      sa[205] = 0.24969167f;
      sa[206] = 0.43818083f;
      sa[207] = -0.16979389f;
      sa[208] = -0.34995955f;
      sa[209] = 0.12690575f;
      sa[210] = -0.29663855f;
      sa[211] = -0.5466658f;
      sa[212] = -0.18443958f;
      sa[213] = -0.11135076f;
      sa[214] = -0.20432745f;
      sa[215] = -0.035149135f;
      sa[216] = 0.05609964f;
      sa[217] = 0.3131191f;
      sa[218] = -0.33541575f;
      sa[219] = 0.3483227f;
      sa[220] = -0.25754344f;
      sa[221] = -0.06274694f;
      sa[222] = 0.266924f;
      sa[223] = -0.07923426f;
      sa[224] = 0.20470706f;
      sa[225] = 0.4421423f;
      sa[226] = -0.4407986f;
      sa[227] = 0.4926968f;
      sa[228] = 0.15756483f;
      sa[229] = 0.027806913f;
      sa[230] = 0.30480552f;
      sa[231] = -0.20088272f;
      sa[232] = -0.41376615f;
      sa[233] = 0.13134211f;
      sa[234] = 0.14092332f;
      sa[235] = -0.21794225f;
      sa[236] = 0.04633662f;
      sa[237] = -0.4246478f;
      sa[238] = -0.50865674f;
      sa[239] = 0.13324796f;
      sa[240] = -0.11439754f;
      sa[241] = -0.24817592f;
      sa[242] = -0.023213109f;
      sa[243] = -0.33066997f;
      sa[244] = -0.43815956f;
      sa[245] = -0.14577518f;
      sa[246] = -0.45800805f;
      sa[247] = 4.5618552E-4f;
      sa[248] = 0.14923665f;
      sa[249] = 0.3373774f;
      sa[250] = -0.008912576f;
      sa[251] = 0.06303718f;
      sa[252] = -0.3932084f;
      sa[253] = -0.25951698f;
      sa[254] = -0.17237046f;
      sa[255] = 0.18699878f;
      sa[256] = -0.2530569f;
      sa[257] = 0.62370896f;
      sa[258] = -0.47737736f;
      sa[259] = 0.07763498f;
      sa[260] = -0.1504555f;
      sa[261] = 0.07626677f;
      sa[262] = 0.0075382916f;
      sa[263] = 0.30532813f;
      sa[264] = 0.010563974f;
      sa[265] = 0.08401678f;
      sa[266] = -0.29746568f;
      sa[267] = -0.28074628f;
      sa[268] = 0.17155595f;
      sa[269] = -0.16276257f;
      sa[270] = -0.079937324f;
      sa[271] = 0.14727253f;
      sa[272] = -0.12371627f;
      sa[273] = -0.03321564f;
      sa[274] = 0.14751339f;
      sa[275] = 0.20183031f;
      sa[276] = 0.097611405f;
      sa[277] = -0.22779419f;
      sa[278] = -0.04422333f;
      sa[279] = 0.16557877f;
      sa[280] = -0.15118186f;
      sa[281] = 0.4473843f;
      sa[282] = -0.15254311f;
      sa[283] = -0.1370969f;
      sa[284] = -0.044259463f;
      sa[285] = 0.078442104f;
      sa[286] = 0.2970672f;
      sa[287] = -0.009479406f;
      sa[288] = -0.44233257f;
      sa[289] = -0.11435539f;
      sa[290] = 0.031405263f;
      sa[291] = 0.043819036f;
      sa[292] = -0.03555162f;
      sa[293] = -0.13198781f;
      sa[294] = -0.012398464f;
      sa[295] = 0.16719137f;
      sa[296] = 0.38358784f;
      sa[297] = 0.3465727f;
      sa[298] = -0.24302879f;
      sa[299] = -0.01614311f;
      sa[300] = 0.13041322f;
      sa[301] = -0.06304954f;
      sa[302] = 0.16465892f;
      sa[303] = 0.1220092f;
      sa[304] = -0.23653664f;
      sa[305] = -0.29369396f;
      sa[306] = 0.13849278f;
      sa[307] = -0.2547508f;
      sa[308] = 0.15765606f;
      sa[309] = 0.110436276f;
      sa[310] = 0.5802471f;
      sa[311] = 0.0076140026f;
      sa[312] = -0.21590874f;
      sa[313] = -0.417868f;
      sa[314] = -0.22138773f;
      sa[315] = 0.045282744f;
      sa[316] = -0.035145346f;
      sa[317] = -0.076069154f;
      sa[318] = 0.24538594f;
      sa[319] = 0.40404397f;
      sa[320] = -0.040381167f;
      sa[321] = 0.14361107f;
      sa[322] = 0.3688498f;
      sa[323] = -0.3115891f;
      sa[324] = 0.41236702f;
      sa[325] = 0.2607194f;
      sa[326] = -0.37803766f;
      sa[327] = -0.2592212f;
      sa[328] = 0.014883456f;
      sa[329] = 0.3605476f;
      sa[330] = -0.30161792f;
      sa[331] = 0.21712455f;
      sa[332] = -0.34273073f;
      sa[333] = 0.036188312f;
      sa[334] = -0.038202584f;
      sa[335] = 0.48154652f;
      sa[336] = -0.39984742f;
      sa[337] = -0.07511947f;
      sa[338] = 0.3886881f;
      sa[339] = -0.31311765f;
      sa[340] = -0.24148542f;
      sa[341] = -0.29700473f;
      sa[342] = 0.16596131f;
      sa[343] = -0.051992714f;
      sa[344] = -0.19582304f;
      sa[345] = 0.3022681f;
      sa[346] = 0.32741943f;
      sa[347] = -0.2549557f;
      sa[348] = 0.28456366f;
      sa[349] = -0.41812816f;
      sa[350] = -0.013484238f;
      sa[351] = 0.06929429f;
      sa[352] = 0.65827966f;
      sa[353] = -0.07052857f;
      sa[354] = -0.018609224f;
      sa[355] = 0.013326114f;
      sa[356] = -0.25680533f;
      sa[357] = 0.32280833f;
      sa[358] = -0.38034588f;
      sa[359] = 0.025193429f;
      sa[360] = 0.15781297f;
      sa[361] = -0.23382147f;
      sa[362] = -0.069527075f;
      sa[363] = -0.15638849f;
      sa[364] = -0.007847714f;
      sa[365] = -0.30146506f;
      sa[366] = 0.027887711f;
      sa[367] = 0.2529287f;
      sa[368] = 0.14171505f;
      sa[369] = 0.26608083f;
      sa[370] = -0.4052277f;
      sa[371] = 0.18691534f;
      sa[372] = -0.028231613f;
      sa[373] = 0.31500447f;
      sa[374] = -0.012218798f;
      sa[375] = -0.2667293f;
      sa[376] = -0.5719523f;
      sa[377] = -0.30002514f;
      sa[378] = 0.50588095f;
      sa[379] = 0.06499276f;
      sa[380] = -0.098239206f;
      sa[381] = -0.09613045f;
      sa[382] = -0.3443993f;
      sa[383] = 0.23643148f;
      sa[384] = -0.14274794f;
      sa[385] = 0.14762543f;
      sa[386] = -0.3858883f;
      sa[387] = -0.35438895f;
      sa[388] = 0.040194213f;
      sa[389] = -0.031847157f;
      sa[390] = 0.0520096f;
      sa[391] = 0.10730817f;
      sa[392] = 0.51443183f;
      sa[393] = 0.0954528f;
      sa[394] = -0.19710265f;
      sa[395] = 0.5606545f;
      sa[396] = 0.22556217f;
      sa[397] = -0.42327026f;
      sa[398] = 0.1352581f;
      sa[399] = 0.20386842f;
      sa[400] = 0.0633434f;
      sa[401] = 0.38454187f;
      sa[402] = -0.17081758f;
      sa[403] = 0.1529574f;
      sa[404] = 0.34868377f;
      sa[405] = -0.15290949f;
      sa[406] = -0.05765193f;
      sa[407] = 0.33108473f;
      sa[408] = -0.3937312f;
      sa[409] = -0.36471394f;
      sa[410] = -0.09820088f;
      sa[411] = 0.26365563f;
      sa[412] = -0.30168992f;
      sa[413] = 0.058865607f;
      sa[414] = 0.13565661f;
      sa[415] = 0.28139818f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_32x6_ReLU_11_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[192];
  static {
    h2o_nn_32x6_ReLU_11_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_11_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 1.1921694f;
      sa[1] = -0.22170363f;
      sa[2] = -0.2839119f;
      sa[3] = -0.7988473f;
      sa[4] = 0.1556847f;
      sa[5] = 0.13632339f;
      sa[6] = 1.3224007f;
      sa[7] = -0.5896872f;
      sa[8] = -1.1233469f;
      sa[9] = 0.5506849f;
      sa[10] = -0.2670925f;
      sa[11] = 0.6187335f;
      sa[12] = 0.047953025f;
      sa[13] = 0.13061234f;
      sa[14] = -1.311107f;
      sa[15] = 1.1240522f;
      sa[16] = 1.7491355f;
      sa[17] = -0.59459335f;
      sa[18] = 0.09012647f;
      sa[19] = -0.606055f;
      sa[20] = 1.1370623f;
      sa[21] = 0.030851554f;
      sa[22] = -0.89993364f;
      sa[23] = 0.7027762f;
      sa[24] = -1.434822f;
      sa[25] = 0.3034681f;
      sa[26] = -0.40976194f;
      sa[27] = 1.5462176f;
      sa[28] = -1.3555129f;
      sa[29] = -0.3502195f;
      sa[30] = 0.5143514f;
      sa[31] = -0.7230218f;
      sa[32] = -1.1645839f;
      sa[33] = -1.6373492f;
      sa[34] = -0.105506256f;
      sa[35] = 1.4281415f;
      sa[36] = -0.6902563f;
      sa[37] = -0.24547108f;
      sa[38] = 0.099746585f;
      sa[39] = 0.7460004f;
      sa[40] = -0.68540883f;
      sa[41] = -1.3995801f;
      sa[42] = -1.0667324f;
      sa[43] = -1.5413151f;
      sa[44] = 0.124300666f;
      sa[45] = -1.3103081f;
      sa[46] = 1.1989255f;
      sa[47] = 1.4303397f;
      sa[48] = -1.3632483f;
      sa[49] = -1.0906448f;
      sa[50] = 0.29099017f;
      sa[51] = -0.30759618f;
      sa[52] = 0.85960215f;
      sa[53] = 0.7524463f;
      sa[54] = -0.26499042f;
      sa[55] = 1.1883423f;
      sa[56] = -1.2719787f;
      sa[57] = -1.1464798f;
      sa[58] = 0.19692892f;
      sa[59] = -0.37581545f;
      sa[60] = 1.3999171f;
      sa[61] = -0.64767855f;
      sa[62] = -0.3760128f;
      sa[63] = 0.69143707f;
      sa[64] = 1.4352905f;
      sa[65] = -0.7253784f;
      sa[66] = 0.6620248f;
      sa[67] = 1.5822002f;
      sa[68] = 0.6716437f;
      sa[69] = -1.0718637f;
      sa[70] = -1.5537978f;
      sa[71] = -0.4266314f;
      sa[72] = -1.2995523f;
      sa[73] = 1.1209729f;
      sa[74] = 1.2799543f;
      sa[75] = -0.11046974f;
      sa[76] = 0.7800555f;
      sa[77] = 0.5338947f;
      sa[78] = -1.336895f;
      sa[79] = 0.9238371f;
      sa[80] = -0.712408f;
      sa[81] = 0.157984f;
      sa[82] = 0.8664451f;
      sa[83] = -0.6333388f;
      sa[84] = -1.5582855f;
      sa[85] = -1.2647501f;
      sa[86] = 0.24512379f;
      sa[87] = 1.1796024f;
      sa[88] = -1.7916288f;
      sa[89] = -0.593978f;
      sa[90] = -1.0591373f;
      sa[91] = 1.4633987f;
      sa[92] = -0.3239694f;
      sa[93] = 0.3159132f;
      sa[94] = -1.5463752f;
      sa[95] = -0.2966599f;
      sa[96] = -1.0684617f;
      sa[97] = 0.24019834f;
      sa[98] = -0.121547334f;
      sa[99] = 0.10754491f;
      sa[100] = -1.198902f;
      sa[101] = -0.3193363f;
      sa[102] = 1.2404636f;
      sa[103] = 0.025900476f;
      sa[104] = -0.14545467f;
      sa[105] = -0.5690632f;
      sa[106] = 1.5020597f;
      sa[107] = 1.1171907f;
      sa[108] = 0.69477594f;
      sa[109] = -0.021144452f;
      sa[110] = 0.67934626f;
      sa[111] = -0.9353224f;
      sa[112] = -1.2512897f;
      sa[113] = 0.27351183f;
      sa[114] = 0.075283684f;
      sa[115] = -0.23953861f;
      sa[116] = 0.91033345f;
      sa[117] = 0.1048775f;
      sa[118] = -1.4012406f;
      sa[119] = -0.8386715f;
      sa[120] = -0.2664357f;
      sa[121] = 1.1051589f;
      sa[122] = -0.08157675f;
      sa[123] = 0.46768475f;
      sa[124] = -0.7985819f;
      sa[125] = 0.8350557f;
      sa[126] = -1.1029333f;
      sa[127] = 0.5268903f;
      sa[128] = -0.8657525f;
      sa[129] = 0.82183677f;
      sa[130] = -0.49712068f;
      sa[131] = 0.884826f;
      sa[132] = 0.4374896f;
      sa[133] = 0.6283655f;
      sa[134] = 0.59000206f;
      sa[135] = -1.0713469f;
      sa[136] = 0.47639573f;
      sa[137] = -0.49009648f;
      sa[138] = -0.047820587f;
      sa[139] = 1.0660423f;
      sa[140] = -0.42760798f;
      sa[141] = -0.11108673f;
      sa[142] = 0.35143185f;
      sa[143] = -0.7760623f;
      sa[144] = 0.9062377f;
      sa[145] = -0.7729179f;
      sa[146] = 0.10865798f;
      sa[147] = -0.32259384f;
      sa[148] = -0.8660441f;
      sa[149] = 1.1090189f;
      sa[150] = -1.1395676f;
      sa[151] = -1.6238093f;
      sa[152] = 1.5846994f;
      sa[153] = -0.6355724f;
      sa[154] = 1.2827352f;
      sa[155] = -1.6032428f;
      sa[156] = -1.436977f;
      sa[157] = -1.1336211f;
      sa[158] = -0.25695705f;
      sa[159] = -0.6355706f;
      sa[160] = 1.1826733f;
      sa[161] = -1.1045747f;
      sa[162] = 1.3051339f;
      sa[163] = -0.81080604f;
      sa[164] = 0.6894208f;
      sa[165] = -0.59624094f;
      sa[166] = 1.4473709f;
      sa[167] = -1.5109143f;
      sa[168] = 1.0521089f;
      sa[169] = -1.568992f;
      sa[170] = 1.0013309f;
      sa[171] = 0.9094984f;
      sa[172] = 1.514213f;
      sa[173] = 1.497158f;
      sa[174] = -0.1981909f;
      sa[175] = -0.046447486f;
      sa[176] = -0.87559044f;
      sa[177] = 0.070182405f;
      sa[178] = -1.1809386f;
      sa[179] = -0.3033039f;
      sa[180] = -1.4426297f;
      sa[181] = -1.087248f;
      sa[182] = 0.43837816f;
      sa[183] = -0.9119769f;
      sa[184] = 1.485386f;
      sa[185] = 1.2624278f;
      sa[186] = -0.49089897f;
      sa[187] = -1.1009687f;
      sa[188] = -0.43392947f;
      sa[189] = -1.1491338f;
      sa[190] = -1.4444988f;
      sa[191] = -1.0630237f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_32x6_ReLU_11 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_32x6_ReLU_11_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_32x6_ReLU_11_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_32x6_ReLU_11_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_32x6_ReLU_11_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_11_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


