/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:43:07.488+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_32x6_Tanh_10

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_32x6_Tanh_10 > h2o_nn_32x6_Tanh_10.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_32x6_Tanh_10.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_32x6_Tanh_10", algorithm="deeplearning")
public class h2o_nn_32x6_Tanh_10 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,32,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_32x6_Tanh_10_Activation_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_10_Activation_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_10_Activation_2.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_32x6_Tanh_10_Bias_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_10_Bias_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_10_Bias_2.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_32x6_Tanh_10_Weight_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_10_Weight_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_10_Weight_2.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_32x6_Tanh_10.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_32x6_Tanh_10_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.24761904761904763,0.18571428571428572,0.06190476190476191,0.12857142857142856,0.24761904761904763,0.12857142857142856};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_32x6_Tanh_10() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(542150532346563848L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_32x6_Tanh_10_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_32x6_Tanh_10_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_10_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_32x6_Tanh_10_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_Tanh_10_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_10_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_32x6_Tanh_10_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_32x6_Tanh_10_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_10_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_32x6_Tanh_10_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_32x6_Tanh_10_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_Tanh_10_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_10_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 5.92021335783554E-4;
      sa[1] = 0.09309467776437932;
      sa[2] = -0.1885809619656431;
      sa[3] = -0.2190779104933279;
      sa[4] = -0.05706904337849311;
      sa[5] = 0.07816261131364212;
      sa[6] = 0.22021833640444163;
      sa[7] = -0.018317259831574863;
      sa[8] = -0.030298882281106814;
      sa[9] = 0.1088028253825717;
      sa[10] = 0.08366767905739407;
      sa[11] = 0.14668571684817358;
      sa[12] = -0.010756074346391021;
      sa[13] = 0.03517816867705589;
      sa[14] = -0.041922768010215154;
      sa[15] = -0.04036573869500852;
      sa[16] = 0.04856577601376272;
      sa[17] = 0.13334963550295256;
      sa[18] = -0.10227208701530582;
      sa[19] = 0.003914911264297246;
      sa[20] = 0.18010947666490323;
      sa[21] = 0.009165019968594021;
      sa[22] = -0.11784152878163874;
      sa[23] = -0.0030305207051824585;
      sa[24] = -0.04090487569198909;
      sa[25] = 0.08446303962183188;
      sa[26] = 0.04834425748080583;
      sa[27] = 0.05903429252196594;
      sa[28] = -0.09606737897398519;
      sa[29] = 0.0979094100483053;
      sa[30] = 0.08276436925211073;
      sa[31] = 0.1013225629458043;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_32x6_Tanh_10_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_32x6_Tanh_10_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_10_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.06435609319699898;
      sa[1] = -0.20936045734023176;
      sa[2] = -0.24655765708610203;
      sa[3] = 0.12052053092767474;
      sa[4] = -0.04699023319274441;
      sa[5] = -0.20970229923038575;
    }
  }
}
class h2o_nn_32x6_Tanh_10_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_32x6_Tanh_10_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[416];
  static {
    h2o_nn_32x6_Tanh_10_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_10_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.06304512f;
      sa[1] = 0.2756895f;
      sa[2] = 0.14408088f;
      sa[3] = 0.08739461f;
      sa[4] = -0.315144f;
      sa[5] = -0.07136199f;
      sa[6] = -0.06029842f;
      sa[7] = 0.21686143f;
      sa[8] = 0.11738613f;
      sa[9] = -0.09116813f;
      sa[10] = -0.15083314f;
      sa[11] = -0.06572802f;
      sa[12] = -0.050843973f;
      sa[13] = -0.30254644f;
      sa[14] = -0.16452594f;
      sa[15] = 0.052807115f;
      sa[16] = -0.0021547177f;
      sa[17] = 0.025673045f;
      sa[18] = -0.17100276f;
      sa[19] = 0.383851f;
      sa[20] = 0.33004656f;
      sa[21] = -0.29511747f;
      sa[22] = 0.27804247f;
      sa[23] = -0.35545662f;
      sa[24] = 0.18081035f;
      sa[25] = 0.46602523f;
      sa[26] = -0.35411614f;
      sa[27] = 0.3221946f;
      sa[28] = 0.16041413f;
      sa[29] = -0.21616112f;
      sa[30] = -0.08079547f;
      sa[31] = 0.13315758f;
      sa[32] = 0.22714427f;
      sa[33] = -0.40263927f;
      sa[34] = 0.016908579f;
      sa[35] = -0.17038386f;
      sa[36] = 0.23934036f;
      sa[37] = 0.4402625f;
      sa[38] = -0.21745117f;
      sa[39] = 0.1425277f;
      sa[40] = 0.11410284f;
      sa[41] = -0.19172782f;
      sa[42] = -0.112447344f;
      sa[43] = 0.05959609f;
      sa[44] = 0.2719264f;
      sa[45] = -0.41823462f;
      sa[46] = 0.0010234136f;
      sa[47] = -0.05201265f;
      sa[48] = 0.19715428f;
      sa[49] = 0.2367832f;
      sa[50] = 0.24536277f;
      sa[51] = -0.3085583f;
      sa[52] = -0.067699045f;
      sa[53] = 0.20271333f;
      sa[54] = 0.18035038f;
      sa[55] = -0.1311676f;
      sa[56] = -0.4192939f;
      sa[57] = -0.06655825f;
      sa[58] = 0.19682035f;
      sa[59] = -0.28068477f;
      sa[60] = -0.3638464f;
      sa[61] = 0.23029046f;
      sa[62] = 0.17948754f;
      sa[63] = 0.0673163f;
      sa[64] = 0.12901922f;
      sa[65] = 0.16000149f;
      sa[66] = 0.011778509f;
      sa[67] = 0.25869027f;
      sa[68] = -0.15841636f;
      sa[69] = 0.085000314f;
      sa[70] = -0.097947754f;
      sa[71] = 0.24845693f;
      sa[72] = -0.13431762f;
      sa[73] = 0.3058866f;
      sa[74] = -0.16825017f;
      sa[75] = -0.02912432f;
      sa[76] = -0.37156612f;
      sa[77] = 0.25807387f;
      sa[78] = -0.018576398f;
      sa[79] = 0.044668287f;
      sa[80] = -0.08800349f;
      sa[81] = -0.14834239f;
      sa[82] = -0.0030215764f;
      sa[83] = 0.097876295f;
      sa[84] = 0.1438925f;
      sa[85] = -0.14679311f;
      sa[86] = 0.2775717f;
      sa[87] = 0.33862716f;
      sa[88] = 0.36285007f;
      sa[89] = -0.069969f;
      sa[90] = -0.025407284f;
      sa[91] = 0.1382644f;
      sa[92] = 0.23895049f;
      sa[93] = -0.18339126f;
      sa[94] = -0.03250631f;
      sa[95] = -0.10976339f;
      sa[96] = -0.007488204f;
      sa[97] = -0.060850758f;
      sa[98] = 0.27832747f;
      sa[99] = -0.122626215f;
      sa[100] = -0.052509576f;
      sa[101] = -0.2795689f;
      sa[102] = -0.3253784f;
      sa[103] = -0.19070621f;
      sa[104] = 0.041289747f;
      sa[105] = -0.29772478f;
      sa[106] = -0.3447883f;
      sa[107] = 0.19594814f;
      sa[108] = 0.26121575f;
      sa[109] = -0.32513955f;
      sa[110] = -0.045571424f;
      sa[111] = 0.21606208f;
      sa[112] = 0.16505587f;
      sa[113] = -0.09354811f;
      sa[114] = 0.016091002f;
      sa[115] = -0.23018573f;
      sa[116] = 0.024584087f;
      sa[117] = -0.035559874f;
      sa[118] = -0.1889594f;
      sa[119] = -0.16710435f;
      sa[120] = 0.1007573f;
      sa[121] = 0.09923463f;
      sa[122] = 0.5068616f;
      sa[123] = 0.38698328f;
      sa[124] = 0.31025407f;
      sa[125] = 0.3599361f;
      sa[126] = -0.21723853f;
      sa[127] = -0.54786247f;
      sa[128] = 0.18665828f;
      sa[129] = 0.024569562f;
      sa[130] = -0.18230681f;
      sa[131] = 0.3111906f;
      sa[132] = 0.11270881f;
      sa[133] = -0.32800546f;
      sa[134] = 0.24613586f;
      sa[135] = -0.3023261f;
      sa[136] = -0.034463625f;
      sa[137] = 0.07875352f;
      sa[138] = 0.10705978f;
      sa[139] = -0.16719346f;
      sa[140] = 0.034272034f;
      sa[141] = -0.2887887f;
      sa[142] = 0.22732468f;
      sa[143] = -0.31530133f;
      sa[144] = 0.26065487f;
      sa[145] = -0.13608359f;
      sa[146] = -0.42028224f;
      sa[147] = 0.12178419f;
      sa[148] = 0.26573443f;
      sa[149] = 0.4799039f;
      sa[150] = 0.4031392f;
      sa[151] = -0.23346059f;
      sa[152] = 0.02317794f;
      sa[153] = 0.26840508f;
      sa[154] = 0.09694996f;
      sa[155] = -0.008443604f;
      sa[156] = 0.15005435f;
      sa[157] = -0.24767691f;
      sa[158] = 0.024057137f;
      sa[159] = 0.1576923f;
      sa[160] = 0.2255647f;
      sa[161] = 0.16836368f;
      sa[162] = -0.060690615f;
      sa[163] = -0.11010594f;
      sa[164] = 0.22553141f;
      sa[165] = -0.07951963f;
      sa[166] = 0.03814405f;
      sa[167] = -0.029512305f;
      sa[168] = 0.011424528f;
      sa[169] = 0.37089232f;
      sa[170] = -0.06996562f;
      sa[171] = -0.16246168f;
      sa[172] = -0.16004667f;
      sa[173] = -0.23217973f;
      sa[174] = 0.06282226f;
      sa[175] = -0.13595527f;
      sa[176] = -0.08592502f;
      sa[177] = -0.10347049f;
      sa[178] = -0.047678538f;
      sa[179] = 0.24857807f;
      sa[180] = 0.014414112f;
      sa[181] = -0.3813186f;
      sa[182] = -0.15409012f;
      sa[183] = 0.040046927f;
      sa[184] = 0.34874508f;
      sa[185] = 0.31978762f;
      sa[186] = -0.20822203f;
      sa[187] = -0.04711884f;
      sa[188] = -0.066133425f;
      sa[189] = 0.3147804f;
      sa[190] = 0.06430453f;
      sa[191] = -0.14188857f;
      sa[192] = -0.034031887f;
      sa[193] = 0.12409801f;
      sa[194] = 0.2566976f;
      sa[195] = 0.3165216f;
      sa[196] = 0.35138413f;
      sa[197] = -0.048271485f;
      sa[198] = 0.105095685f;
      sa[199] = -0.058668192f;
      sa[200] = 0.05167948f;
      sa[201] = -0.7490666f;
      sa[202] = 0.075995296f;
      sa[203] = -0.08629999f;
      sa[204] = -0.05564724f;
      sa[205] = 0.2885131f;
      sa[206] = 0.4951928f;
      sa[207] = -0.096720785f;
      sa[208] = -0.30446202f;
      sa[209] = -0.086565815f;
      sa[210] = -0.29965925f;
      sa[211] = -0.47290832f;
      sa[212] = 0.023878273f;
      sa[213] = -0.20645396f;
      sa[214] = -0.07758244f;
      sa[215] = 0.06244013f;
      sa[216] = 0.14530702f;
      sa[217] = 0.26908767f;
      sa[218] = -0.39993697f;
      sa[219] = 0.32679704f;
      sa[220] = -0.2637966f;
      sa[221] = 0.020147935f;
      sa[222] = 0.19198555f;
      sa[223] = 0.021023348f;
      sa[224] = 0.11928342f;
      sa[225] = 0.46511117f;
      sa[226] = -0.38309327f;
      sa[227] = 0.8845185f;
      sa[228] = 0.19499098f;
      sa[229] = 0.09113259f;
      sa[230] = 0.18160996f;
      sa[231] = -0.1492309f;
      sa[232] = -0.30228168f;
      sa[233] = -0.02832506f;
      sa[234] = 0.107842f;
      sa[235] = -0.20003584f;
      sa[236] = -0.026502242f;
      sa[237] = -0.34303045f;
      sa[238] = -0.40881312f;
      sa[239] = 0.24958035f;
      sa[240] = -0.09050602f;
      sa[241] = -0.25083268f;
      sa[242] = -0.11534806f;
      sa[243] = -0.20637731f;
      sa[244] = -0.43321493f;
      sa[245] = -0.096195035f;
      sa[246] = -0.65672547f;
      sa[247] = -0.026580248f;
      sa[248] = 0.21232507f;
      sa[249] = 0.34675843f;
      sa[250] = -0.08594346f;
      sa[251] = 0.080555774f;
      sa[252] = -0.49809057f;
      sa[253] = -0.40257797f;
      sa[254] = -0.21039993f;
      sa[255] = 0.23775765f;
      sa[256] = -0.31670177f;
      sa[257] = 0.69699425f;
      sa[258] = -0.44812503f;
      sa[259] = 0.057857115f;
      sa[260] = -0.25635624f;
      sa[261] = -0.043370206f;
      sa[262] = 0.005173582f;
      sa[263] = 0.29827365f;
      sa[264] = -0.14861472f;
      sa[265] = -0.007999902f;
      sa[266] = -0.42383492f;
      sa[267] = -0.24938588f;
      sa[268] = 0.18699037f;
      sa[269] = -0.11223368f;
      sa[270] = -0.14889717f;
      sa[271] = 0.16319083f;
      sa[272] = -0.22137322f;
      sa[273] = -0.13937941f;
      sa[274] = 0.14602287f;
      sa[275] = 0.087051444f;
      sa[276] = 0.12631673f;
      sa[277] = -0.2945078f;
      sa[278] = -0.15879267f;
      sa[279] = 0.11714356f;
      sa[280] = -0.14619625f;
      sa[281] = 0.41131768f;
      sa[282] = -0.13235731f;
      sa[283] = -0.14686358f;
      sa[284] = -0.12221228f;
      sa[285] = 0.04263603f;
      sa[286] = 0.28422529f;
      sa[287] = 0.09998667f;
      sa[288] = -0.3411493f;
      sa[289] = -0.109652236f;
      sa[290] = -0.01746103f;
      sa[291] = 0.017216714f;
      sa[292] = -0.045728732f;
      sa[293] = -0.19460371f;
      sa[294] = -0.0045199227f;
      sa[295] = 0.112626374f;
      sa[296] = 0.42821905f;
      sa[297] = 0.32392886f;
      sa[298] = -0.23629549f;
      sa[299] = -0.044282913f;
      sa[300] = 0.07548074f;
      sa[301] = -0.06377829f;
      sa[302] = 0.1764233f;
      sa[303] = 0.05258166f;
      sa[304] = -0.2040507f;
      sa[305] = -0.33026528f;
      sa[306] = 0.1889249f;
      sa[307] = -0.2290445f;
      sa[308] = 0.21317066f;
      sa[309] = 0.13840358f;
      sa[310] = 0.6006135f;
      sa[311] = 0.008371787f;
      sa[312] = -0.23381971f;
      sa[313] = -0.30010724f;
      sa[314] = -0.24980846f;
      sa[315] = -7.717188E-4f;
      sa[316] = -0.038751848f;
      sa[317] = -0.10576825f;
      sa[318] = 0.23091726f;
      sa[319] = 0.3438496f;
      sa[320] = -0.046948526f;
      sa[321] = 0.06168227f;
      sa[322] = 0.38871175f;
      sa[323] = -0.34162804f;
      sa[324] = 0.29065084f;
      sa[325] = 0.33632863f;
      sa[326] = -0.39217097f;
      sa[327] = 0.08682405f;
      sa[328] = -0.041226797f;
      sa[329] = 0.38681492f;
      sa[330] = -0.36088678f;
      sa[331] = 0.5147711f;
      sa[332] = -0.26509386f;
      sa[333] = 0.18272473f;
      sa[334] = -0.13649404f;
      sa[335] = 0.41270608f;
      sa[336] = -0.25773525f;
      sa[337] = -0.18059987f;
      sa[338] = 0.35082436f;
      sa[339] = -0.3355359f;
      sa[340] = -0.31252646f;
      sa[341] = -0.28659722f;
      sa[342] = 0.17611523f;
      sa[343] = -0.11326046f;
      sa[344] = -0.20484611f;
      sa[345] = 0.27863032f;
      sa[346] = 0.2911773f;
      sa[347] = -0.24506988f;
      sa[348] = 0.32451355f;
      sa[349] = -0.5426098f;
      sa[350] = -0.068165705f;
      sa[351] = 0.123784475f;
      sa[352] = 0.3483664f;
      sa[353] = 0.023894764f;
      sa[354] = 0.038816467f;
      sa[355] = 0.104631916f;
      sa[356] = -0.14586335f;
      sa[357] = 0.23521225f;
      sa[358] = -0.3532454f;
      sa[359] = 0.03745286f;
      sa[360] = 0.20935534f;
      sa[361] = -0.2148236f;
      sa[362] = -0.069898665f;
      sa[363] = 0.029867139f;
      sa[364] = -0.14022045f;
      sa[365] = -0.2555488f;
      sa[366] = -0.033036266f;
      sa[367] = -0.12705053f;
      sa[368] = -0.05413493f;
      sa[369] = 0.2201056f;
      sa[370] = -0.42145592f;
      sa[371] = 0.11657811f;
      sa[372] = -0.05370332f;
      sa[373] = 0.32800657f;
      sa[374] = 0.05473246f;
      sa[375] = -0.2787232f;
      sa[376] = -0.40723813f;
      sa[377] = -0.27321503f;
      sa[378] = 0.4786007f;
      sa[379] = 0.10371119f;
      sa[380] = -0.09999516f;
      sa[381] = -0.00865474f;
      sa[382] = -0.13816634f;
      sa[383] = 0.3030534f;
      sa[384] = -0.15109561f;
      sa[385] = 0.10262211f;
      sa[386] = -0.3189514f;
      sa[387] = -0.2787527f;
      sa[388] = 0.107762456f;
      sa[389] = -0.22766219f;
      sa[390] = 0.027544169f;
      sa[391] = -0.044348877f;
      sa[392] = 0.4089667f;
      sa[393] = 0.14353932f;
      sa[394] = -0.24071045f;
      sa[395] = 0.46007472f;
      sa[396] = 0.21852575f;
      sa[397] = -0.32747912f;
      sa[398] = 0.21225037f;
      sa[399] = 0.24244162f;
      sa[400] = 0.07478577f;
      sa[401] = 0.3577772f;
      sa[402] = -0.1839852f;
      sa[403] = 0.0853557f;
      sa[404] = 0.35774913f;
      sa[405] = -0.23103088f;
      sa[406] = 0.06296311f;
      sa[407] = 0.3744407f;
      sa[408] = -0.42179808f;
      sa[409] = -0.4271734f;
      sa[410] = -0.07544727f;
      sa[411] = 0.20898007f;
      sa[412] = -0.17058156f;
      sa[413] = 0.10789763f;
      sa[414] = 0.12073144f;
      sa[415] = 0.25849888f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_32x6_Tanh_10_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[192];
  static {
    h2o_nn_32x6_Tanh_10_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_10_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 1.284556f;
      sa[1] = -0.178196f;
      sa[2] = -0.44495767f;
      sa[3] = -0.8389987f;
      sa[4] = 0.12447311f;
      sa[5] = 0.14247483f;
      sa[6] = 1.2365018f;
      sa[7] = -0.5597411f;
      sa[8] = -1.0043564f;
      sa[9] = 0.61520284f;
      sa[10] = -0.2162101f;
      sa[11] = 0.44057482f;
      sa[12] = 0.113080315f;
      sa[13] = 0.15448923f;
      sa[14] = -1.1695794f;
      sa[15] = 1.0745189f;
      sa[16] = 1.6684281f;
      sa[17] = -0.4943755f;
      sa[18] = 0.14915465f;
      sa[19] = -0.59673184f;
      sa[20] = 1.2195832f;
      sa[21] = 0.12186565f;
      sa[22] = -0.9762883f;
      sa[23] = 0.693902f;
      sa[24] = -1.4851081f;
      sa[25] = 0.2292857f;
      sa[26] = -0.31015685f;
      sa[27] = 1.4749483f;
      sa[28] = -1.325465f;
      sa[29] = -0.25204274f;
      sa[30] = 0.5399419f;
      sa[31] = -0.73569685f;
      sa[32] = -1.1825675f;
      sa[33] = -1.529218f;
      sa[34] = -0.11652088f;
      sa[35] = 1.4183315f;
      sa[36] = -0.37529567f;
      sa[37] = -0.15789106f;
      sa[38] = 0.08782751f;
      sa[39] = 0.5219612f;
      sa[40] = -0.56044793f;
      sa[41] = -1.4806548f;
      sa[42] = -0.9572452f;
      sa[43] = -1.503618f;
      sa[44] = 0.08152349f;
      sa[45] = -1.3125588f;
      sa[46] = 1.1700817f;
      sa[47] = 1.5872451f;
      sa[48] = -1.3264068f;
      sa[49] = -1.0207762f;
      sa[50] = 0.27734944f;
      sa[51] = -0.13652979f;
      sa[52] = 0.92788213f;
      sa[53] = 0.7647755f;
      sa[54] = -0.24232526f;
      sa[55] = 1.320215f;
      sa[56] = -1.0885546f;
      sa[57] = -1.0183184f;
      sa[58] = 0.23323023f;
      sa[59] = -0.19016674f;
      sa[60] = 1.3160453f;
      sa[61] = -0.6657418f;
      sa[62] = -0.4807774f;
      sa[63] = 0.8408545f;
      sa[64] = 1.373173f;
      sa[65] = -0.66491836f;
      sa[66] = 0.9753139f;
      sa[67] = 1.6892791f;
      sa[68] = 0.7162743f;
      sa[69] = -1.2543122f;
      sa[70] = -1.4533206f;
      sa[71] = -0.38447833f;
      sa[72] = -1.2804804f;
      sa[73] = 1.1244075f;
      sa[74] = 1.1046381f;
      sa[75] = 0.008287595f;
      sa[76] = 0.7521567f;
      sa[77] = 0.5903383f;
      sa[78] = -1.3068467f;
      sa[79] = 1.0756506f;
      sa[80] = -0.65533763f;
      sa[81] = 0.19560322f;
      sa[82] = 0.95262706f;
      sa[83] = -0.720957f;
      sa[84] = -1.4348664f;
      sa[85] = -1.1978167f;
      sa[86] = 0.48008847f;
      sa[87] = 1.2762492f;
      sa[88] = -1.729717f;
      sa[89] = -0.64708245f;
      sa[90] = -1.1920322f;
      sa[91] = 1.4602572f;
      sa[92] = -0.2753435f;
      sa[93] = 0.44405624f;
      sa[94] = -1.4468118f;
      sa[95] = -0.2504991f;
      sa[96] = -1.0338365f;
      sa[97] = 0.22367851f;
      sa[98] = -0.16146688f;
      sa[99] = -0.048734546f;
      sa[100] = -1.157058f;
      sa[101] = -0.08993627f;
      sa[102] = 1.1939019f;
      sa[103] = 0.06056084f;
      sa[104] = -0.016344655f;
      sa[105] = -0.44841832f;
      sa[106] = 1.6412082f;
      sa[107] = 1.1490816f;
      sa[108] = 0.7196223f;
      sa[109] = -0.17407405f;
      sa[110] = 0.6100054f;
      sa[111] = -0.96545845f;
      sa[112] = -1.190863f;
      sa[113] = 0.4028298f;
      sa[114] = -0.015616193f;
      sa[115] = -0.22754776f;
      sa[116] = 0.9347774f;
      sa[117] = 0.16824335f;
      sa[118] = -1.4358374f;
      sa[119] = -0.86042416f;
      sa[120] = -0.07675953f;
      sa[121] = 1.2656816f;
      sa[122] = -0.024337893f;
      sa[123] = 0.5270064f;
      sa[124] = -0.8674674f;
      sa[125] = 0.77512985f;
      sa[126] = -1.2067164f;
      sa[127] = 0.49162984f;
      sa[128] = -0.77051383f;
      sa[129] = 0.9124222f;
      sa[130] = -0.46232384f;
      sa[131] = 0.7040765f;
      sa[132] = 0.5246378f;
      sa[133] = 0.6640231f;
      sa[134] = 0.54326546f;
      sa[135] = -0.954149f;
      sa[136] = 0.44248778f;
      sa[137] = -0.34687808f;
      sa[138] = 0.058317013f;
      sa[139] = 1.071776f;
      sa[140] = -0.3901495f;
      sa[141] = -0.18383896f;
      sa[142] = 0.38898647f;
      sa[143] = -0.8582816f;
      sa[144] = 0.87174946f;
      sa[145] = -0.7432492f;
      sa[146] = 0.065110445f;
      sa[147] = -0.41276917f;
      sa[148] = -0.9441831f;
      sa[149] = 1.1532739f;
      sa[150] = -1.2925743f;
      sa[151] = -1.6339161f;
      sa[152] = 1.6031033f;
      sa[153] = -0.72642666f;
      sa[154] = 1.2520769f;
      sa[155] = -1.4746199f;
      sa[156] = -1.4381262f;
      sa[157] = -1.0970091f;
      sa[158] = -0.36474043f;
      sa[159] = -0.6283984f;
      sa[160] = 1.0792106f;
      sa[161] = -1.1073544f;
      sa[162] = 1.487872f;
      sa[163] = -0.650171f;
      sa[164] = 0.7187049f;
      sa[165] = -0.5114439f;
      sa[166] = 1.5022277f;
      sa[167] = -1.7201729f;
      sa[168] = 1.1091228f;
      sa[169] = -1.5898765f;
      sa[170] = 0.9160936f;
      sa[171] = 0.9639501f;
      sa[172] = 1.5427297f;
      sa[173] = 1.5650907f;
      sa[174] = -0.23140855f;
      sa[175] = 0.046448346f;
      sa[176] = -0.8611306f;
      sa[177] = 0.05669867f;
      sa[178] = -1.2208787f;
      sa[179] = -0.14979666f;
      sa[180] = -1.4319011f;
      sa[181] = -1.1478515f;
      sa[182] = 0.6502003f;
      sa[183] = -0.7942897f;
      sa[184] = 1.6619393f;
      sa[185] = 1.3992308f;
      sa[186] = -0.4252066f;
      sa[187] = -1.0939951f;
      sa[188] = -0.55340445f;
      sa[189] = -0.85785973f;
      sa[190] = -1.4261138f;
      sa[191] = -0.89007676f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_32x6_Tanh_10 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_32x6_Tanh_10_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_32x6_Tanh_10_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_32x6_Tanh_10_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_32x6_Tanh_10_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_10_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


