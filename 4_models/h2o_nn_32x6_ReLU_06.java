/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:42:07.741+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_32x6_ReLU_06

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_32x6_ReLU_06 > h2o_nn_32x6_ReLU_06.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_32x6_ReLU_06.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_32x6_ReLU_06", algorithm="deeplearning")
public class h2o_nn_32x6_ReLU_06 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,32,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_32x6_ReLU_06_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_32x6_ReLU_06_Activation_1.VALUES,
      /* Softmax */ h2o_nn_32x6_ReLU_06_Activation_2.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_32x6_ReLU_06_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_32x6_ReLU_06_Bias_1.VALUES,
      /* Softmax */ h2o_nn_32x6_ReLU_06_Bias_2.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_32x6_ReLU_06_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_32x6_ReLU_06_Weight_1.VALUES,
      /* Softmax */ h2o_nn_32x6_ReLU_06_Weight_2.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_32x6_ReLU_06.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_32x6_ReLU_06_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25961538461538464,0.11538461538461539,0.11538461538461539,0.125,0.25961538461538464,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_32x6_ReLU_06() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-264586488856747700L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_32x6_ReLU_06_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_32x6_ReLU_06_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_06_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_32x6_ReLU_06_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_ReLU_06_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_06_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_32x6_ReLU_06_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_32x6_ReLU_06_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_06_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_32x6_ReLU_06_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_32x6_ReLU_06_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_ReLU_06_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_06_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.5489625824495834;
      sa[1] = 0.5479898258974928;
      sa[2] = 0.23524668854758568;
      sa[3] = 0.4088536634933953;
      sa[4] = 0.5730669950291221;
      sa[5] = 0.5730887008274189;
      sa[6] = 0.6688160072702065;
      sa[7] = 0.40542066822323225;
      sa[8] = 0.5613478684582938;
      sa[9] = 0.5118905614047866;
      sa[10] = 0.5917064232670717;
      sa[11] = 0.5367009134986697;
      sa[12] = 0.45392141126976804;
      sa[13] = 0.5431569977043037;
      sa[14] = 0.4653614793577143;
      sa[15] = 0.7099160832687219;
      sa[16] = 0.6141850605894115;
      sa[17] = 0.41203378965870513;
      sa[18] = 0.5791559968007773;
      sa[19] = 0.46339643970041067;
      sa[20] = 0.4618310284734571;
      sa[21] = 0.5170392994564212;
      sa[22] = 0.517844607180173;
      sa[23] = 0.4992341362423778;
      sa[24] = 0.535371748157075;
      sa[25] = 0.6617099145798104;
      sa[26] = 0.5147486513149109;
      sa[27] = 0.5182232890813713;
      sa[28] = 0.40887726875911207;
      sa[29] = 0.5256217196296589;
      sa[30] = 0.6162529378534989;
      sa[31] = 0.6182302017811555;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_32x6_ReLU_06_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_32x6_ReLU_06_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_06_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.03678834864143837;
      sa[1] = -0.07107673992732827;
      sa[2] = -0.07112710639214116;
      sa[3] = -0.09388964736064039;
      sa[4] = -0.022258922685742175;
      sa[5] = -0.05226179307850567;
    }
  }
}
class h2o_nn_32x6_ReLU_06_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_32x6_ReLU_06_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[416];
  static {
    h2o_nn_32x6_ReLU_06_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_06_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.07244974f;
      sa[1] = 0.26474905f;
      sa[2] = 0.030327426f;
      sa[3] = 0.029311761f;
      sa[4] = -0.30258602f;
      sa[5] = -0.2665871f;
      sa[6] = -0.042256515f;
      sa[7] = 0.3073479f;
      sa[8] = 0.069970965f;
      sa[9] = -0.01691832f;
      sa[10] = 0.111480296f;
      sa[11] = 0.06472809f;
      sa[12] = -0.21172874f;
      sa[13] = -0.4895632f;
      sa[14] = -0.0351613f;
      sa[15] = -0.08758569f;
      sa[16] = 9.2780346E-4f;
      sa[17] = -0.18575568f;
      sa[18] = -0.19300412f;
      sa[19] = -0.009168184f;
      sa[20] = 0.10114327f;
      sa[21] = -0.40095538f;
      sa[22] = 0.27124938f;
      sa[23] = -0.23364395f;
      sa[24] = 0.10239445f;
      sa[25] = 0.42673787f;
      sa[26] = -0.40452608f;
      sa[27] = 0.5616546f;
      sa[28] = 0.33653685f;
      sa[29] = -0.2452368f;
      sa[30] = -0.22495276f;
      sa[31] = 0.04813675f;
      sa[32] = 0.15220848f;
      sa[33] = -0.30474135f;
      sa[34] = 0.16836901f;
      sa[35] = -0.21188563f;
      sa[36] = 0.123724915f;
      sa[37] = 0.4326479f;
      sa[38] = -0.24036586f;
      sa[39] = 0.43422064f;
      sa[40] = 0.42630485f;
      sa[41] = 0.4408416f;
      sa[42] = -0.10148025f;
      sa[43] = -0.08008745f;
      sa[44] = 0.32793373f;
      sa[45] = -0.6817975f;
      sa[46] = 0.19108544f;
      sa[47] = 0.36339352f;
      sa[48] = 0.037839174f;
      sa[49] = -0.33786473f;
      sa[50] = 0.11231509f;
      sa[51] = -0.26305038f;
      sa[52] = -0.21199067f;
      sa[53] = 0.299005f;
      sa[54] = 0.116728455f;
      sa[55] = -0.23127995f;
      sa[56] = -0.6371579f;
      sa[57] = -0.10710642f;
      sa[58] = -0.064923435f;
      sa[59] = -0.19774856f;
      sa[60] = -0.34716007f;
      sa[61] = 0.45031193f;
      sa[62] = 0.36803573f;
      sa[63] = 0.1815662f;
      sa[64] = 0.08419603f;
      sa[65] = 0.12133956f;
      sa[66] = -0.06770778f;
      sa[67] = 0.1044682f;
      sa[68] = -0.2006188f;
      sa[69] = 0.15066075f;
      sa[70] = 0.09616407f;
      sa[71] = 0.19459097f;
      sa[72] = -0.28696418f;
      sa[73] = 0.17310992f;
      sa[74] = -0.19976379f;
      sa[75] = -0.0037347344f;
      sa[76] = -0.25083143f;
      sa[77] = 0.12019311f;
      sa[78] = -0.049341086f;
      sa[79] = -0.17714821f;
      sa[80] = -0.38591984f;
      sa[81] = -0.12812485f;
      sa[82] = 0.12537089f;
      sa[83] = 0.17277056f;
      sa[84] = 0.15248944f;
      sa[85] = -0.26160797f;
      sa[86] = 0.08020246f;
      sa[87] = 0.41891593f;
      sa[88] = 0.4090442f;
      sa[89] = -0.05276209f;
      sa[90] = 0.0057282364f;
      sa[91] = 0.29207703f;
      sa[92] = 0.35938638f;
      sa[93] = -0.03374066f;
      sa[94] = -0.058864817f;
      sa[95] = -0.023100425f;
      sa[96] = 0.0665572f;
      sa[97] = 0.18261084f;
      sa[98] = 0.31557578f;
      sa[99] = -0.00524262f;
      sa[100] = -0.30229604f;
      sa[101] = -0.6796374f;
      sa[102] = -0.3540474f;
      sa[103] = -0.18786533f;
      sa[104] = 0.053494688f;
      sa[105] = -0.4813065f;
      sa[106] = -0.3411062f;
      sa[107] = 0.31038126f;
      sa[108] = 0.40330264f;
      sa[109] = -0.17581214f;
      sa[110] = -0.11616436f;
      sa[111] = 0.22684816f;
      sa[112] = 0.121757165f;
      sa[113] = 0.12297858f;
      sa[114] = 0.15913701f;
      sa[115] = -0.18171355f;
      sa[116] = 0.19669385f;
      sa[117] = -0.22188562f;
      sa[118] = 0.112798825f;
      sa[119] = -0.2910841f;
      sa[120] = -0.018230066f;
      sa[121] = -0.21680689f;
      sa[122] = 0.28940183f;
      sa[123] = 0.1574129f;
      sa[124] = 0.1845282f;
      sa[125] = 0.2594681f;
      sa[126] = -0.33317375f;
      sa[127] = -0.3274423f;
      sa[128] = 0.25617352f;
      sa[129] = -0.16792834f;
      sa[130] = -0.20123488f;
      sa[131] = 0.48597148f;
      sa[132] = 0.20889686f;
      sa[133] = -0.2255649f;
      sa[134] = -0.07780068f;
      sa[135] = -0.5017592f;
      sa[136] = -0.06307034f;
      sa[137] = 0.04694373f;
      sa[138] = 0.21128015f;
      sa[139] = -0.11852678f;
      sa[140] = 0.03264597f;
      sa[141] = -0.3006296f;
      sa[142] = 0.14849856f;
      sa[143] = -0.5191084f;
      sa[144] = 0.19844726f;
      sa[145] = -0.32025975f;
      sa[146] = -0.3491761f;
      sa[147] = -0.055220246f;
      sa[148] = 0.22292812f;
      sa[149] = 0.38168746f;
      sa[150] = 0.22288081f;
      sa[151] = -0.38832065f;
      sa[152] = 0.16290566f;
      sa[153] = 0.5983215f;
      sa[154] = -0.023141675f;
      sa[155] = 0.002944243f;
      sa[156] = 0.16583139f;
      sa[157] = -0.31870052f;
      sa[158] = 0.018967733f;
      sa[159] = 0.2657772f;
      sa[160] = 0.29303843f;
      sa[161] = -0.03431049f;
      sa[162] = 0.33086136f;
      sa[163] = 0.030138513f;
      sa[164] = 0.2535166f;
      sa[165] = -0.014130635f;
      sa[166] = 0.301905f;
      sa[167] = -0.063251734f;
      sa[168] = 0.054651696f;
      sa[169] = 0.13145275f;
      sa[170] = -0.09649679f;
      sa[171] = -0.2212164f;
      sa[172] = -0.07496947f;
      sa[173] = -0.40530092f;
      sa[174] = -0.12674929f;
      sa[175] = -0.12975188f;
      sa[176] = -0.041511662f;
      sa[177] = -0.14999227f;
      sa[178] = 0.08742243f;
      sa[179] = 0.6789604f;
      sa[180] = 0.057384364f;
      sa[181] = -0.3994578f;
      sa[182] = 0.04367809f;
      sa[183] = -0.08793057f;
      sa[184] = 0.5145748f;
      sa[185] = 0.4179446f;
      sa[186] = -0.050329853f;
      sa[187] = 0.13776922f;
      sa[188] = 0.0765263f;
      sa[189] = 0.36252725f;
      sa[190] = 0.2173899f;
      sa[191] = -0.23172058f;
      sa[192] = -0.295682f;
      sa[193] = -0.07235512f;
      sa[194] = 0.4584389f;
      sa[195] = 0.45630866f;
      sa[196] = 0.27062327f;
      sa[197] = 0.0216516f;
      sa[198] = -0.040295064f;
      sa[199] = 0.15248631f;
      sa[200] = 0.08975468f;
      sa[201] = -0.39504114f;
      sa[202] = 0.2867922f;
      sa[203] = -0.006048185f;
      sa[204] = -0.061635107f;
      sa[205] = 0.1298114f;
      sa[206] = 0.565316f;
      sa[207] = -0.29552087f;
      sa[208] = -0.45358062f;
      sa[209] = -0.11557361f;
      sa[210] = -0.5981077f;
      sa[211] = -0.56211436f;
      sa[212] = 0.04400344f;
      sa[213] = -0.19047482f;
      sa[214] = -0.33146152f;
      sa[215] = -0.08978942f;
      sa[216] = -0.04286767f;
      sa[217] = 0.25775948f;
      sa[218] = 0.11134303f;
      sa[219] = 0.34048417f;
      sa[220] = -0.23833369f;
      sa[221] = 0.0057614427f;
      sa[222] = 0.19308501f;
      sa[223] = 0.015964387f;
      sa[224] = 0.25092295f;
      sa[225] = 0.35876235f;
      sa[226] = -0.47864178f;
      sa[227] = 0.8789055f;
      sa[228] = 0.19892654f;
      sa[229] = 0.11013829f;
      sa[230] = 0.31614792f;
      sa[231] = -0.05260751f;
      sa[232] = -0.46044266f;
      sa[233] = 0.052713163f;
      sa[234] = 0.19001028f;
      sa[235] = 0.042618353f;
      sa[236] = 0.2800666f;
      sa[237] = -0.41661814f;
      sa[238] = -0.7026788f;
      sa[239] = 0.117621414f;
      sa[240] = -0.18926379f;
      sa[241] = -0.21817237f;
      sa[242] = 0.15040575f;
      sa[243] = -0.36775336f;
      sa[244] = -0.63687974f;
      sa[245] = -0.2830056f;
      sa[246] = -0.48456755f;
      sa[247] = -0.05094788f;
      sa[248] = 0.30330932f;
      sa[249] = 0.44616336f;
      sa[250] = -0.06917128f;
      sa[251] = -0.22850202f;
      sa[252] = -0.33983532f;
      sa[253] = -0.31733444f;
      sa[254] = -0.36409461f;
      sa[255] = 0.25702444f;
      sa[256] = -0.31827617f;
      sa[257] = 0.32436138f;
      sa[258] = -0.6695073f;
      sa[259] = 0.28073233f;
      sa[260] = -0.2501382f;
      sa[261] = -0.2567411f;
      sa[262] = -0.23198703f;
      sa[263] = 0.24466899f;
      sa[264] = 0.07212541f;
      sa[265] = 0.07092393f;
      sa[266] = -0.15454292f;
      sa[267] = -0.48680866f;
      sa[268] = -0.04911488f;
      sa[269] = -0.3071946f;
      sa[270] = -0.12995647f;
      sa[271] = 0.18133017f;
      sa[272] = -0.30942512f;
      sa[273] = -0.09822242f;
      sa[274] = 0.118444204f;
      sa[275] = 0.07780468f;
      sa[276] = 0.06636896f;
      sa[277] = -0.24156953f;
      sa[278] = 0.09933924f;
      sa[279] = 0.07770277f;
      sa[280] = -0.2911914f;
      sa[281] = 0.34049565f;
      sa[282] = -0.1654083f;
      sa[283] = -0.28206095f;
      sa[284] = -0.036934976f;
      sa[285] = 0.05587361f;
      sa[286] = 0.46684885f;
      sa[287] = 0.07630989f;
      sa[288] = -0.14251661f;
      sa[289] = -0.10688958f;
      sa[290] = -0.004518409f;
      sa[291] = -0.012495803f;
      sa[292] = 0.10413651f;
      sa[293] = 0.10456003f;
      sa[294] = 0.1965015f;
      sa[295] = 0.1904786f;
      sa[296] = 0.39179632f;
      sa[297] = 0.4591009f;
      sa[298] = -0.25209385f;
      sa[299] = 0.030887019f;
      sa[300] = 0.13202465f;
      sa[301] = -7.092693E-4f;
      sa[302] = 0.075044625f;
      sa[303] = 0.08146705f;
      sa[304] = -0.27622813f;
      sa[305] = -0.05675933f;
      sa[306] = 0.35137343f;
      sa[307] = -0.14552552f;
      sa[308] = 0.10135817f;
      sa[309] = -0.055488028f;
      sa[310] = 0.566957f;
      sa[311] = -0.047824576f;
      sa[312] = -0.26046777f;
      sa[313] = -0.45098534f;
      sa[314] = -0.21395999f;
      sa[315] = 0.060279284f;
      sa[316] = -0.103471056f;
      sa[317] = -0.012405724f;
      sa[318] = -0.08080419f;
      sa[319] = 0.31259632f;
      sa[320] = -0.060401168f;
      sa[321] = 0.24247561f;
      sa[322] = 0.5125084f;
      sa[323] = -0.28990775f;
      sa[324] = 0.436425f;
      sa[325] = 0.28267205f;
      sa[326] = -0.6054797f;
      sa[327] = -0.25953948f;
      sa[328] = 0.0580954f;
      sa[329] = 0.4006977f;
      sa[330] = -0.44381183f;
      sa[331] = 0.61688036f;
      sa[332] = -0.3186819f;
      sa[333] = -0.024874328f;
      sa[334] = -0.030462557f;
      sa[335] = 0.6610458f;
      sa[336] = -0.26747948f;
      sa[337] = -0.25079066f;
      sa[338] = 0.31587353f;
      sa[339] = -0.27918252f;
      sa[340] = -0.31206864f;
      sa[341] = -0.34022817f;
      sa[342] = 0.13702434f;
      sa[343] = 0.0889826f;
      sa[344] = -0.50225097f;
      sa[345] = 0.13827121f;
      sa[346] = 0.2478081f;
      sa[347] = -0.24013041f;
      sa[348] = 0.14512147f;
      sa[349] = -0.40074253f;
      sa[350] = -0.009356855f;
      sa[351] = 0.07582845f;
      sa[352] = 0.49374545f;
      sa[353] = -0.12708881f;
      sa[354] = -0.021229018f;
      sa[355] = 0.0783349f;
      sa[356] = -0.32611644f;
      sa[357] = 0.48186597f;
      sa[358] = -0.37079293f;
      sa[359] = 0.0010270815f;
      sa[360] = 0.10346637f;
      sa[361] = -0.13106681f;
      sa[362] = -0.13579367f;
      sa[363] = -0.13170688f;
      sa[364] = 0.12080579f;
      sa[365] = -0.28705797f;
      sa[366] = 0.16198972f;
      sa[367] = -0.15151781f;
      sa[368] = 0.17896502f;
      sa[369] = 0.27777126f;
      sa[370] = -0.18344921f;
      sa[371] = 0.29927734f;
      sa[372] = 0.10201051f;
      sa[373] = 0.28071323f;
      sa[374] = -0.32566223f;
      sa[375] = -0.20652919f;
      sa[376] = -0.43745792f;
      sa[377] = -0.26697043f;
      sa[378] = 0.6221236f;
      sa[379] = 0.16575204f;
      sa[380] = -0.03570844f;
      sa[381] = -0.18219736f;
      sa[382] = -0.33749378f;
      sa[383] = 0.46433425f;
      sa[384] = -0.13854073f;
      sa[385] = 0.1899846f;
      sa[386] = -0.4039235f;
      sa[387] = -0.3500698f;
      sa[388] = -0.039324522f;
      sa[389] = -0.10493393f;
      sa[390] = -0.023696609f;
      sa[391] = -0.1815357f;
      sa[392] = 0.1588726f;
      sa[393] = 0.0853071f;
      sa[394] = -0.102651946f;
      sa[395] = 0.5590184f;
      sa[396] = 0.21474612f;
      sa[397] = -0.47742224f;
      sa[398] = -0.0036336577f;
      sa[399] = 0.17989472f;
      sa[400] = 0.086310625f;
      sa[401] = 0.36038077f;
      sa[402] = -0.147464f;
      sa[403] = 0.3868963f;
      sa[404] = 0.50585926f;
      sa[405] = 0.09380017f;
      sa[406] = 0.07174439f;
      sa[407] = 0.27732486f;
      sa[408] = -0.32912245f;
      sa[409] = -0.16732661f;
      sa[410] = 0.06943249f;
      sa[411] = 0.5475216f;
      sa[412] = -0.4762779f;
      sa[413] = -0.72269446f;
      sa[414] = -0.03437535f;
      sa[415] = 0.23634236f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_32x6_ReLU_06_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[192];
  static {
    h2o_nn_32x6_ReLU_06_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_06_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 1.1082516f;
      sa[1] = -0.17346561f;
      sa[2] = -0.43547833f;
      sa[3] = -0.86418825f;
      sa[4] = 0.1540829f;
      sa[5] = 0.18062091f;
      sa[6] = 1.3361853f;
      sa[7] = -0.64902353f;
      sa[8] = -0.90213317f;
      sa[9] = 0.6559686f;
      sa[10] = -0.3566523f;
      sa[11] = 0.6228628f;
      sa[12] = 0.18920594f;
      sa[13] = 0.23164453f;
      sa[14] = -1.4118274f;
      sa[15] = 1.1165355f;
      sa[16] = 1.7135683f;
      sa[17] = -0.7357724f;
      sa[18] = 0.10680578f;
      sa[19] = -0.6897812f;
      sa[20] = 1.2452141f;
      sa[21] = -0.02633429f;
      sa[22] = -0.8667354f;
      sa[23] = 0.6877335f;
      sa[24] = -1.3297044f;
      sa[25] = 0.637503f;
      sa[26] = -0.16864735f;
      sa[27] = 1.3075029f;
      sa[28] = -1.3304123f;
      sa[29] = -0.4500033f;
      sa[30] = 0.5148003f;
      sa[31] = -0.95382017f;
      sa[32] = -1.2448115f;
      sa[33] = -1.6004177f;
      sa[34] = -0.080007985f;
      sa[35] = 1.3819236f;
      sa[36] = -0.7770456f;
      sa[37] = -0.07919352f;
      sa[38] = -0.011332951f;
      sa[39] = 0.7987822f;
      sa[40] = -0.7412965f;
      sa[41] = -1.2329732f;
      sa[42] = -1.1198186f;
      sa[43] = -1.6312886f;
      sa[44] = 0.10211474f;
      sa[45] = -1.4287926f;
      sa[46] = 1.246295f;
      sa[47] = 1.3493898f;
      sa[48] = -1.4020784f;
      sa[49] = -0.9621062f;
      sa[50] = 0.34364673f;
      sa[51] = -0.44240573f;
      sa[52] = 0.7795234f;
      sa[53] = 0.7905917f;
      sa[54] = -0.32463813f;
      sa[55] = 1.0676423f;
      sa[56] = -1.2908325f;
      sa[57] = -1.183742f;
      sa[58] = 0.13673048f;
      sa[59] = -0.28779233f;
      sa[60] = 1.3549984f;
      sa[61] = -0.6352273f;
      sa[62] = -0.35101652f;
      sa[63] = 0.707309f;
      sa[64] = 1.5165838f;
      sa[65] = -0.78516126f;
      sa[66] = 0.74605244f;
      sa[67] = 1.6296675f;
      sa[68] = 0.7493465f;
      sa[69] = -1.1261284f;
      sa[70] = -1.5920079f;
      sa[71] = -0.4012704f;
      sa[72] = -1.4052485f;
      sa[73] = 1.0801023f;
      sa[74] = 1.3623136f;
      sa[75] = -0.07557361f;
      sa[76] = 0.66517556f;
      sa[77] = 0.55705124f;
      sa[78] = -1.3794223f;
      sa[79] = 1.0465964f;
      sa[80] = -0.7281032f;
      sa[81] = 0.11371324f;
      sa[82] = 0.8681305f;
      sa[83] = -0.54466957f;
      sa[84] = -1.5434057f;
      sa[85] = -1.2359258f;
      sa[86] = 0.2784569f;
      sa[87] = 1.2286506f;
      sa[88] = -1.7181425f;
      sa[89] = -0.71631694f;
      sa[90] = -1.0793743f;
      sa[91] = 1.4710492f;
      sa[92] = -0.3260581f;
      sa[93] = 0.37796077f;
      sa[94] = -1.587421f;
      sa[95] = -0.201518f;
      sa[96] = -1.0605446f;
      sa[97] = 0.19444972f;
      sa[98] = -0.33966306f;
      sa[99] = -0.12177609f;
      sa[100] = -1.2403793f;
      sa[101] = -0.26847833f;
      sa[102] = 1.114424f;
      sa[103] = 0.061335817f;
      sa[104] = -0.12834711f;
      sa[105] = -0.677959f;
      sa[106] = 1.5398924f;
      sa[107] = 0.9621198f;
      sa[108] = 0.7164923f;
      sa[109] = -0.10815421f;
      sa[110] = 0.68377185f;
      sa[111] = -1.3603809f;
      sa[112] = -1.4919636f;
      sa[113] = 0.42739215f;
      sa[114] = 0.08070758f;
      sa[115] = -0.14525695f;
      sa[116] = 0.8729705f;
      sa[117] = 0.137873f;
      sa[118] = -1.6832514f;
      sa[119] = -0.9943711f;
      sa[120] = -0.25529483f;
      sa[121] = 1.3113277f;
      sa[122] = -0.12646098f;
      sa[123] = 0.53428096f;
      sa[124] = -0.8927605f;
      sa[125] = 0.92512673f;
      sa[126] = -1.2599982f;
      sa[127] = 0.5713093f;
      sa[128] = -0.900019f;
      sa[129] = 0.7708573f;
      sa[130] = -0.56205666f;
      sa[131] = 0.90620214f;
      sa[132] = 0.47909775f;
      sa[133] = 0.548795f;
      sa[134] = 0.6423243f;
      sa[135] = -1.0796345f;
      sa[136] = 0.28629678f;
      sa[137] = -0.5776463f;
      sa[138] = -0.049009565f;
      sa[139] = 1.0320964f;
      sa[140] = -0.48538944f;
      sa[141] = -0.14247808f;
      sa[142] = 0.35964516f;
      sa[143] = -0.76291907f;
      sa[144] = 0.8072439f;
      sa[145] = -0.9890395f;
      sa[146] = 0.07471409f;
      sa[147] = -0.20952588f;
      sa[148] = -0.90997094f;
      sa[149] = 1.0781196f;
      sa[150] = -1.190216f;
      sa[151] = -1.6245973f;
      sa[152] = 1.565438f;
      sa[153] = -0.9187062f;
      sa[154] = 1.3063021f;
      sa[155] = -1.6716157f;
      sa[156] = -1.4093983f;
      sa[157] = -1.2518888f;
      sa[158] = -0.27912423f;
      sa[159] = -0.51647764f;
      sa[160] = 1.1460142f;
      sa[161] = -1.0204686f;
      sa[162] = 1.1401831f;
      sa[163] = -0.9124804f;
      sa[164] = 0.68603295f;
      sa[165] = -0.57719266f;
      sa[166] = 1.4245527f;
      sa[167] = -1.6780305f;
      sa[168] = 1.1451948f;
      sa[169] = -1.5454295f;
      sa[170] = 0.837607f;
      sa[171] = 1.0025036f;
      sa[172] = 1.5601436f;
      sa[173] = 1.4734212f;
      sa[174] = -0.22136724f;
      sa[175] = -0.12723513f;
      sa[176] = -0.8616145f;
      sa[177] = 0.18408437f;
      sa[178] = -1.3527553f;
      sa[179] = -0.5668945f;
      sa[180] = -1.5780964f;
      sa[181] = -1.1664047f;
      sa[182] = 0.46352148f;
      sa[183] = -0.87205285f;
      sa[184] = 1.5404643f;
      sa[185] = 1.4716733f;
      sa[186] = -0.53278106f;
      sa[187] = -1.0458307f;
      sa[188] = -0.54147166f;
      sa[189] = -1.2525584f;
      sa[190] = -1.3900895f;
      sa[191] = -1.3995608f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_32x6_ReLU_06 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_32x6_ReLU_06_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_32x6_ReLU_06_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_32x6_ReLU_06_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_32x6_ReLU_06_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_06_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


