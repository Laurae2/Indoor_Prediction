/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:42:37.964+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_32x6_Tanh_08

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_32x6_Tanh_08 > h2o_nn_32x6_Tanh_08.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_32x6_Tanh_08.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_32x6_Tanh_08", algorithm="deeplearning")
public class h2o_nn_32x6_Tanh_08 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,32,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_32x6_Tanh_08_Activation_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_08_Activation_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_08_Activation_2.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_32x6_Tanh_08_Bias_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_08_Bias_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_08_Bias_2.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_32x6_Tanh_08_Weight_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_08_Weight_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_08_Weight_2.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_32x6_Tanh_08.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_32x6_Tanh_08_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.24528301886792453,0.12264150943396226,0.12264150943396226,0.1320754716981132,0.24528301886792453,0.1320754716981132};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_32x6_Tanh_08() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(7082648278999627140L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_32x6_Tanh_08_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_32x6_Tanh_08_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_08_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_32x6_Tanh_08_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_Tanh_08_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_08_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_32x6_Tanh_08_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_32x6_Tanh_08_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_08_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_32x6_Tanh_08_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_32x6_Tanh_08_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_Tanh_08_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_08_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.006005719674047121;
      sa[1] = 0.07339971407494278;
      sa[2] = -0.046351058252700104;
      sa[3] = -0.24711239932644496;
      sa[4] = -0.08305731085447526;
      sa[5] = 0.04831179190455981;
      sa[6] = 0.07673678321891246;
      sa[7] = 0.020858573029859946;
      sa[8] = 0.0025499089121722384;
      sa[9] = 0.052807113025119784;
      sa[10] = 0.12238712032100975;
      sa[11] = 0.12388912606159884;
      sa[12] = 0.058174861331019484;
      sa[13] = 0.04758156769884957;
      sa[14] = -0.017117838233763668;
      sa[15] = -0.034293231885809086;
      sa[16] = -7.226107391679929E-4;
      sa[17] = 0.12371180624947288;
      sa[18] = 0.006274544843527927;
      sa[19] = 0.06870268899256297;
      sa[20] = 0.10379707873753952;
      sa[21] = -0.02802166309014829;
      sa[22] = -0.04567542363214246;
      sa[23] = 0.027060109116610893;
      sa[24] = -0.06095367830110367;
      sa[25] = 0.06045515366368632;
      sa[26] = -0.00126294817079993;
      sa[27] = 0.10500705045383278;
      sa[28] = -0.0560459609801684;
      sa[29] = 0.13774944756253235;
      sa[30] = -0.048076494425264994;
      sa[31] = 0.12446466194375387;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_32x6_Tanh_08_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_32x6_Tanh_08_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_08_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.03661010194912728;
      sa[1] = -0.16193787432760423;
      sa[2] = -0.06388704398870491;
      sa[3] = 0.13727887836843025;
      sa[4] = -0.18483063391934965;
      sa[5] = -0.1166999063523099;
    }
  }
}
class h2o_nn_32x6_Tanh_08_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_32x6_Tanh_08_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[416];
  static {
    h2o_nn_32x6_Tanh_08_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_08_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.07265439f;
      sa[1] = 0.22873005f;
      sa[2] = 0.17591445f;
      sa[3] = 0.101068616f;
      sa[4] = -0.31867167f;
      sa[5] = -0.13958852f;
      sa[6] = -0.014068478f;
      sa[7] = 0.26344684f;
      sa[8] = 0.15802804f;
      sa[9] = -0.14222862f;
      sa[10] = -0.1463448f;
      sa[11] = -0.09117674f;
      sa[12] = -0.05594149f;
      sa[13] = -0.34404087f;
      sa[14] = -0.1393537f;
      sa[15] = 0.039494652f;
      sa[16] = 0.034671877f;
      sa[17] = -0.035100397f;
      sa[18] = -0.13092414f;
      sa[19] = 0.33302534f;
      sa[20] = 0.27766964f;
      sa[21] = -0.3412722f;
      sa[22] = 0.3265032f;
      sa[23] = -0.4497742f;
      sa[24] = 0.11555901f;
      sa[25] = 0.3724363f;
      sa[26] = -0.23964696f;
      sa[27] = 0.41045228f;
      sa[28] = 0.20055525f;
      sa[29] = -0.13564757f;
      sa[30] = 0.047739338f;
      sa[31] = 0.030571803f;
      sa[32] = 0.22069009f;
      sa[33] = -0.337768f;
      sa[34] = 0.12248408f;
      sa[35] = -0.15954578f;
      sa[36] = 0.4068975f;
      sa[37] = 0.48485714f;
      sa[38] = -0.15039058f;
      sa[39] = 0.19175912f;
      sa[40] = 0.43164653f;
      sa[41] = -0.15683612f;
      sa[42] = -0.09662907f;
      sa[43] = 0.1343284f;
      sa[44] = 0.24734627f;
      sa[45] = -0.4714961f;
      sa[46] = -0.008252357f;
      sa[47] = -0.03496882f;
      sa[48] = 0.21988626f;
      sa[49] = 0.16594206f;
      sa[50] = 0.2744209f;
      sa[51] = -0.27228984f;
      sa[52] = -0.053013198f;
      sa[53] = 0.30924964f;
      sa[54] = 0.17653073f;
      sa[55] = -0.16186853f;
      sa[56] = -0.43533945f;
      sa[57] = -0.17421761f;
      sa[58] = 0.117702164f;
      sa[59] = -0.25968024f;
      sa[60] = -0.3172454f;
      sa[61] = 0.23239438f;
      sa[62] = 0.15990104f;
      sa[63] = 0.079086535f;
      sa[64] = 0.17160673f;
      sa[65] = 0.104381986f;
      sa[66] = -0.22283491f;
      sa[67] = 0.14028455f;
      sa[68] = -0.24892634f;
      sa[69] = -0.07770837f;
      sa[70] = -0.018233813f;
      sa[71] = 0.24224932f;
      sa[72] = -0.1586946f;
      sa[73] = 0.2765653f;
      sa[74] = -0.13535626f;
      sa[75] = -0.055417903f;
      sa[76] = -0.34855232f;
      sa[77] = 0.14565821f;
      sa[78] = -0.09605547f;
      sa[79] = -0.2782113f;
      sa[80] = -0.23442146f;
      sa[81] = -0.13238186f;
      sa[82] = -0.09161387f;
      sa[83] = 0.06979902f;
      sa[84] = 0.13019639f;
      sa[85] = -0.19049911f;
      sa[86] = 0.20346126f;
      sa[87] = 0.26969922f;
      sa[88] = 0.42067373f;
      sa[89] = -0.04343941f;
      sa[90] = 0.004081528f;
      sa[91] = 0.14511076f;
      sa[92] = 0.22721371f;
      sa[93] = -0.15157162f;
      sa[94] = -0.015668178f;
      sa[95] = -0.07635759f;
      sa[96] = 0.024341172f;
      sa[97] = 0.0462174f;
      sa[98] = 0.2871675f;
      sa[99] = -0.15065256f;
      sa[100] = -0.076579414f;
      sa[101] = -0.3032493f;
      sa[102] = -0.32056576f;
      sa[103] = -0.2410837f;
      sa[104] = 0.06292244f;
      sa[105] = -0.31178606f;
      sa[106] = -0.38331443f;
      sa[107] = 0.17538404f;
      sa[108] = 0.24742001f;
      sa[109] = -0.30369008f;
      sa[110] = -0.17210564f;
      sa[111] = 0.21144843f;
      sa[112] = 0.22326015f;
      sa[113] = -0.066193596f;
      sa[114] = 0.084474616f;
      sa[115] = -0.22860715f;
      sa[116] = 0.07164236f;
      sa[117] = -0.05013076f;
      sa[118] = -0.13191526f;
      sa[119] = -0.14692225f;
      sa[120] = 0.16238147f;
      sa[121] = 0.13899155f;
      sa[122] = 0.4700484f;
      sa[123] = 0.33538127f;
      sa[124] = 0.2845138f;
      sa[125] = 0.31084698f;
      sa[126] = -0.20484696f;
      sa[127] = -0.5940148f;
      sa[128] = 0.13979733f;
      sa[129] = -0.048200365f;
      sa[130] = -0.12083931f;
      sa[131] = 0.68030375f;
      sa[132] = 0.28372055f;
      sa[133] = -0.16043065f;
      sa[134] = 0.33049318f;
      sa[135] = -0.3451996f;
      sa[136] = 0.11012547f;
      sa[137] = 0.0012532984f;
      sa[138] = 0.13432693f;
      sa[139] = -0.18114613f;
      sa[140] = -0.0024838108f;
      sa[141] = -0.25318787f;
      sa[142] = 0.17059788f;
      sa[143] = -0.3459324f;
      sa[144] = 0.26383966f;
      sa[145] = -0.12518209f;
      sa[146] = -0.30897284f;
      sa[147] = 0.07180223f;
      sa[148] = 0.2647934f;
      sa[149] = 0.45153832f;
      sa[150] = 0.355563f;
      sa[151] = -0.2604665f;
      sa[152] = 0.035079066f;
      sa[153] = 0.23622541f;
      sa[154] = 0.07438723f;
      sa[155] = -0.011907612f;
      sa[156] = 0.20138374f;
      sa[157] = -0.23684433f;
      sa[158] = 0.1293258f;
      sa[159] = 0.32281494f;
      sa[160] = 0.34781003f;
      sa[161] = 0.016813949f;
      sa[162] = 0.29470295f;
      sa[163] = -0.0721795f;
      sa[164] = 0.26477525f;
      sa[165] = -0.2042267f;
      sa[166] = 0.14826255f;
      sa[167] = 0.028002169f;
      sa[168] = -0.07848825f;
      sa[169] = 0.40098628f;
      sa[170] = -0.05145329f;
      sa[171] = -0.07171165f;
      sa[172] = -0.052515727f;
      sa[173] = -0.21718712f;
      sa[174] = -0.0026865758f;
      sa[175] = -0.08209522f;
      sa[176] = -0.06841846f;
      sa[177] = -0.030389903f;
      sa[178] = -0.039683595f;
      sa[179] = 0.36459917f;
      sa[180] = 0.022378635f;
      sa[181] = -0.3731792f;
      sa[182] = -0.14433683f;
      sa[183] = 0.060992107f;
      sa[184] = 0.33349007f;
      sa[185] = 0.28799483f;
      sa[186] = -0.22571708f;
      sa[187] = 0.0047189277f;
      sa[188] = -0.06683971f;
      sa[189] = 0.28803974f;
      sa[190] = 0.058136493f;
      sa[191] = -0.123950444f;
      sa[192] = -0.014388005f;
      sa[193] = 0.15176481f;
      sa[194] = 0.27803746f;
      sa[195] = 0.34401938f;
      sa[196] = 0.25409862f;
      sa[197] = -0.06203976f;
      sa[198] = 0.026771436f;
      sa[199] = -0.057880685f;
      sa[200] = 0.015143f;
      sa[201] = -0.624923f;
      sa[202] = 0.13670751f;
      sa[203] = -0.047597393f;
      sa[204] = -0.13587612f;
      sa[205] = 0.31159836f;
      sa[206] = 0.5142816f;
      sa[207] = -0.11734241f;
      sa[208] = -0.37018442f;
      sa[209] = -0.25164503f;
      sa[210] = -0.38136473f;
      sa[211] = -0.49442807f;
      sa[212] = 0.01676323f;
      sa[213] = -0.15292385f;
      sa[214] = -0.15618938f;
      sa[215] = 0.053425863f;
      sa[216] = 0.11668073f;
      sa[217] = 0.31109238f;
      sa[218] = -0.5162011f;
      sa[219] = 0.24486727f;
      sa[220] = -0.26500276f;
      sa[221] = 0.056635976f;
      sa[222] = 0.41171944f;
      sa[223] = 0.22305934f;
      sa[224] = 0.28345516f;
      sa[225] = 0.50229335f;
      sa[226] = -0.3622949f;
      sa[227] = 0.8095536f;
      sa[228] = 0.16059905f;
      sa[229] = 0.06002511f;
      sa[230] = 0.19856359f;
      sa[231] = -0.17498757f;
      sa[232] = -0.26381692f;
      sa[233] = -0.080203585f;
      sa[234] = 0.140635f;
      sa[235] = 0.009559824f;
      sa[236] = 0.06531409f;
      sa[237] = -0.30489388f;
      sa[238] = -0.28628358f;
      sa[239] = 0.26652187f;
      sa[240] = -0.07579508f;
      sa[241] = -0.24897717f;
      sa[242] = -0.11878589f;
      sa[243] = -0.19114992f;
      sa[244] = -0.60332036f;
      sa[245] = -0.1826739f;
      sa[246] = -0.50519234f;
      sa[247] = -0.030769536f;
      sa[248] = 0.12272783f;
      sa[249] = 0.35071096f;
      sa[250] = -0.1354615f;
      sa[251] = 0.039783083f;
      sa[252] = -0.466083f;
      sa[253] = -0.26835296f;
      sa[254] = -0.23232682f;
      sa[255] = 0.27751002f;
      sa[256] = -0.31035572f;
      sa[257] = 0.57520807f;
      sa[258] = -0.45552224f;
      sa[259] = 0.19751136f;
      sa[260] = -0.3387283f;
      sa[261] = -0.4418448f;
      sa[262] = -0.071484745f;
      sa[263] = 0.31515232f;
      sa[264] = -0.17117544f;
      sa[265] = -0.01756357f;
      sa[266] = -0.12964f;
      sa[267] = -0.26137382f;
      sa[268] = 0.095260784f;
      sa[269] = -0.2030131f;
      sa[270] = -0.10056576f;
      sa[271] = 0.119590834f;
      sa[272] = -0.20520538f;
      sa[273] = -0.18955533f;
      sa[274] = 0.059683926f;
      sa[275] = -0.011148149f;
      sa[276] = 0.038604893f;
      sa[277] = -0.3350221f;
      sa[278] = -0.08357392f;
      sa[279] = 0.112802595f;
      sa[280] = -0.19853581f;
      sa[281] = 0.3368846f;
      sa[282] = -0.11623808f;
      sa[283] = -0.1703405f;
      sa[284] = -0.09558126f;
      sa[285] = 0.0526431f;
      sa[286] = 0.35707515f;
      sa[287] = 0.19729665f;
      sa[288] = -0.28623793f;
      sa[289] = -0.13465148f;
      sa[290] = 0.10323987f;
      sa[291] = -0.033367965f;
      sa[292] = -0.06571059f;
      sa[293] = -0.10659873f;
      sa[294] = 0.11649806f;
      sa[295] = 0.11994397f;
      sa[296] = 0.49213633f;
      sa[297] = 0.40679574f;
      sa[298] = -0.13207527f;
      sa[299] = -0.00897539f;
      sa[300] = 0.03830946f;
      sa[301] = -0.02502342f;
      sa[302] = 0.15271512f;
      sa[303] = 0.0821668f;
      sa[304] = -0.26431203f;
      sa[305] = -0.2140353f;
      sa[306] = 0.24913119f;
      sa[307] = -0.2071549f;
      sa[308] = 0.18868217f;
      sa[309] = 0.124435f;
      sa[310] = 0.57391834f;
      sa[311] = -0.07166414f;
      sa[312] = -0.21667694f;
      sa[313] = -0.24236481f;
      sa[314] = -0.3081913f;
      sa[315] = -0.015880473f;
      sa[316] = -0.0488092f;
      sa[317] = -0.06433142f;
      sa[318] = 0.058629368f;
      sa[319] = 0.32023922f;
      sa[320] = -6.3099654E-4f;
      sa[321] = 0.10091864f;
      sa[322] = 0.42062294f;
      sa[323] = -0.3526462f;
      sa[324] = 0.43939376f;
      sa[325] = 0.26769614f;
      sa[326] = -0.6404986f;
      sa[327] = 0.070458315f;
      sa[328] = 0.049054906f;
      sa[329] = 0.3072512f;
      sa[330] = -0.33631602f;
      sa[331] = 0.58791894f;
      sa[332] = -0.3079179f;
      sa[333] = 0.124422066f;
      sa[334] = -0.16191454f;
      sa[335] = 0.4596613f;
      sa[336] = -0.23550323f;
      sa[337] = -0.2335448f;
      sa[338] = 0.31612083f;
      sa[339] = -0.38403195f;
      sa[340] = -0.38422024f;
      sa[341] = -0.3634494f;
      sa[342] = 0.13057281f;
      sa[343] = -0.036654927f;
      sa[344] = -0.33609417f;
      sa[345] = 0.24756446f;
      sa[346] = 0.2773491f;
      sa[347] = -0.20104858f;
      sa[348] = 0.3196615f;
      sa[349] = -0.49703777f;
      sa[350] = 0.013516413f;
      sa[351] = 0.10198257f;
      sa[352] = 0.28727037f;
      sa[353] = 0.08836907f;
      sa[354] = 0.09494439f;
      sa[355] = 0.117244825f;
      sa[356] = -0.18332605f;
      sa[357] = 0.41559964f;
      sa[358] = -0.33971518f;
      sa[359] = -0.012370974f;
      sa[360] = 0.16811177f;
      sa[361] = -0.2563492f;
      sa[362] = -0.09470059f;
      sa[363] = -0.12445127f;
      sa[364] = -0.09492696f;
      sa[365] = -0.20802039f;
      sa[366] = 0.005629085f;
      sa[367] = -0.18287402f;
      sa[368] = 0.03514977f;
      sa[369] = 0.19739878f;
      sa[370] = -0.37504065f;
      sa[371] = 0.16734183f;
      sa[372] = -0.015607633f;
      sa[373] = 0.2850737f;
      sa[374] = 0.20227493f;
      sa[375] = -0.17097357f;
      sa[376] = -0.41460735f;
      sa[377] = -0.25433236f;
      sa[378] = 0.50715166f;
      sa[379] = 0.21127771f;
      sa[380] = 0.14057435f;
      sa[381] = 0.16094798f;
      sa[382] = -0.18982331f;
      sa[383] = 0.26219487f;
      sa[384] = -0.14881922f;
      sa[385] = 0.08767008f;
      sa[386] = -0.31562063f;
      sa[387] = -0.2887471f;
      sa[388] = 0.043042336f;
      sa[389] = -0.21212436f;
      sa[390] = -0.07827124f;
      sa[391] = -0.384681f;
      sa[392] = 0.297171f;
      sa[393] = 0.08795243f;
      sa[394] = -0.28444183f;
      sa[395] = 0.4819155f;
      sa[396] = 0.26873627f;
      sa[397] = -0.37102035f;
      sa[398] = 0.13009839f;
      sa[399] = 0.23359193f;
      sa[400] = -0.09699818f;
      sa[401] = 0.23647535f;
      sa[402] = -0.16753675f;
      sa[403] = 0.13327226f;
      sa[404] = 0.44235903f;
      sa[405] = -0.17303844f;
      sa[406] = 0.12802778f;
      sa[407] = 0.38440615f;
      sa[408] = -0.38503605f;
      sa[409] = -0.31722438f;
      sa[410] = -0.064758174f;
      sa[411] = 0.21736094f;
      sa[412] = -0.19049567f;
      sa[413] = 0.11544214f;
      sa[414] = 0.13947786f;
      sa[415] = 0.22506823f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_32x6_Tanh_08_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[192];
  static {
    h2o_nn_32x6_Tanh_08_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_08_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 1.1967516f;
      sa[1] = -0.112004586f;
      sa[2] = -0.5207707f;
      sa[3] = -0.8778348f;
      sa[4] = 0.07770832f;
      sa[5] = 0.21956477f;
      sa[6] = 1.2799553f;
      sa[7] = -0.56891924f;
      sa[8] = -0.98593307f;
      sa[9] = 0.6891638f;
      sa[10] = -0.38754043f;
      sa[11] = 0.43516913f;
      sa[12] = 0.11955109f;
      sa[13] = 0.16761854f;
      sa[14] = -1.2516165f;
      sa[15] = 0.9549645f;
      sa[16] = 1.7517648f;
      sa[17] = -0.5432566f;
      sa[18] = 0.18179281f;
      sa[19] = -0.6441909f;
      sa[20] = 1.2751744f;
      sa[21] = 0.11773032f;
      sa[22] = -1.0262735f;
      sa[23] = 0.67257285f;
      sa[24] = -1.4772686f;
      sa[25] = 0.5349084f;
      sa[26] = -0.19702171f;
      sa[27] = 1.4174118f;
      sa[28] = -1.2972517f;
      sa[29] = -0.5613445f;
      sa[30] = 0.5847074f;
      sa[31] = -0.8374046f;
      sa[32] = -1.2269824f;
      sa[33] = -1.4589624f;
      sa[34] = 0.039280776f;
      sa[35] = 1.4188826f;
      sa[36] = -0.34365544f;
      sa[37] = -0.15787472f;
      sa[38] = 0.14119937f;
      sa[39] = 0.5721549f;
      sa[40] = -0.49909878f;
      sa[41] = -1.3904548f;
      sa[42] = -0.9887875f;
      sa[43] = -1.4229603f;
      sa[44] = 0.05902184f;
      sa[45] = -1.3040279f;
      sa[46] = 1.1752166f;
      sa[47] = 1.6530305f;
      sa[48] = -1.2672037f;
      sa[49] = -1.0267204f;
      sa[50] = 0.2811603f;
      sa[51] = -0.24154936f;
      sa[52] = 0.8604607f;
      sa[53] = 0.73259836f;
      sa[54] = -0.09806784f;
      sa[55] = 1.3848323f;
      sa[56] = -1.0651745f;
      sa[57] = -1.019446f;
      sa[58] = 0.21122253f;
      sa[59] = -0.22630699f;
      sa[60] = 1.3088462f;
      sa[61] = -0.62517977f;
      sa[62] = -0.43349755f;
      sa[63] = 0.82518643f;
      sa[64] = 1.4702815f;
      sa[65] = -0.7118816f;
      sa[66] = 0.7888582f;
      sa[67] = 1.6887835f;
      sa[68] = 0.7196558f;
      sa[69] = -1.1446086f;
      sa[70] = -1.5966681f;
      sa[71] = -0.3538228f;
      sa[72] = -1.3395025f;
      sa[73] = 1.1338979f;
      sa[74] = 1.3577408f;
      sa[75] = -0.010993529f;
      sa[76] = 0.7591796f;
      sa[77] = 0.55268425f;
      sa[78] = -1.2340733f;
      sa[79] = 1.1343668f;
      sa[80] = -0.7063332f;
      sa[81] = 0.2936933f;
      sa[82] = 0.87774247f;
      sa[83] = -0.80405f;
      sa[84] = -1.5652755f;
      sa[85] = -1.2184734f;
      sa[86] = 0.37851915f;
      sa[87] = 1.3023136f;
      sa[88] = -1.6470693f;
      sa[89] = -0.6888832f;
      sa[90] = -1.3983732f;
      sa[91] = 1.6325362f;
      sa[92] = -0.31165564f;
      sa[93] = 0.5113376f;
      sa[94] = -1.4813582f;
      sa[95] = -0.14131644f;
      sa[96] = -1.0198206f;
      sa[97] = 0.2141581f;
      sa[98] = -0.13302378f;
      sa[99] = 0.11821025f;
      sa[100] = -1.0895021f;
      sa[101] = -0.25553596f;
      sa[102] = 1.1633886f;
      sa[103] = 0.119800024f;
      sa[104] = 0.059163004f;
      sa[105] = -0.49750173f;
      sa[106] = 1.7055055f;
      sa[107] = 1.1357846f;
      sa[108] = 0.81692666f;
      sa[109] = -0.09989293f;
      sa[110] = 0.5941142f;
      sa[111] = -0.90742f;
      sa[112] = -1.2487653f;
      sa[113] = 0.40601623f;
      sa[114] = 0.015777301f;
      sa[115] = -0.046488993f;
      sa[116] = 1.0745945f;
      sa[117] = 0.14982498f;
      sa[118] = -1.4379098f;
      sa[119] = -0.880187f;
      sa[120] = -0.20337163f;
      sa[121] = 1.3165578f;
      sa[122] = -0.03382098f;
      sa[123] = 0.6143312f;
      sa[124] = -0.81872874f;
      sa[125] = 0.84770435f;
      sa[126] = -1.1041248f;
      sa[127] = 0.47142532f;
      sa[128] = -0.71807355f;
      sa[129] = 0.8092494f;
      sa[130] = -0.50552243f;
      sa[131] = 0.781913f;
      sa[132] = 0.5238184f;
      sa[133] = 0.6310803f;
      sa[134] = 0.565918f;
      sa[135] = -0.95777225f;
      sa[136] = 0.29680902f;
      sa[137] = -0.49215713f;
      sa[138] = 0.11053069f;
      sa[139] = 1.0365833f;
      sa[140] = -0.56125754f;
      sa[141] = -0.3180615f;
      sa[142] = 0.5420886f;
      sa[143] = -0.77402097f;
      sa[144] = 0.8434095f;
      sa[145] = -0.8639975f;
      sa[146] = 0.08782626f;
      sa[147] = -0.26905203f;
      sa[148] = -0.9798296f;
      sa[149] = 1.1283854f;
      sa[150] = -1.3033684f;
      sa[151] = -1.6212876f;
      sa[152] = 1.6448678f;
      sa[153] = -0.90091544f;
      sa[154] = 1.2805349f;
      sa[155] = -1.5248722f;
      sa[156] = -1.3997552f;
      sa[157] = -1.1334419f;
      sa[158] = -0.37951085f;
      sa[159] = -0.5603244f;
      sa[160] = 1.1523254f;
      sa[161] = -1.0614735f;
      sa[162] = 1.5642076f;
      sa[163] = -0.7222064f;
      sa[164] = 0.75249237f;
      sa[165] = -0.53872806f;
      sa[166] = 1.5348973f;
      sa[167] = -1.7166866f;
      sa[168] = 1.0998818f;
      sa[169] = -1.5717472f;
      sa[170] = 0.9167561f;
      sa[171] = 0.9413636f;
      sa[172] = 1.5632801f;
      sa[173] = 1.4973991f;
      sa[174] = -0.13420816f;
      sa[175] = 0.15340964f;
      sa[176] = -0.8467035f;
      sa[177] = 0.013108522f;
      sa[178] = -1.5372288f;
      sa[179] = -0.20277831f;
      sa[180] = -1.3581114f;
      sa[181] = -1.0257677f;
      sa[182] = 0.6092828f;
      sa[183] = -0.73426616f;
      sa[184] = 1.5442178f;
      sa[185] = 1.397432f;
      sa[186] = -0.4614345f;
      sa[187] = -1.111301f;
      sa[188] = -0.5842751f;
      sa[189] = -0.8354449f;
      sa[190] = -1.414416f;
      sa[191] = -0.8174414f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_32x6_Tanh_08 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_32x6_Tanh_08_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_32x6_Tanh_08_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_32x6_Tanh_08_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_32x6_Tanh_08_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_08_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


