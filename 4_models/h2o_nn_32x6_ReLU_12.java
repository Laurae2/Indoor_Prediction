/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:43:35.353+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_32x6_ReLU_12

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_32x6_ReLU_12 > h2o_nn_32x6_ReLU_12.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_32x6_ReLU_12.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_32x6_ReLU_12", algorithm="deeplearning")
public class h2o_nn_32x6_ReLU_12 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,32,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_32x6_ReLU_12_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_32x6_ReLU_12_Activation_1.VALUES,
      /* Softmax */ h2o_nn_32x6_ReLU_12_Activation_2.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_32x6_ReLU_12_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_32x6_ReLU_12_Bias_1.VALUES,
      /* Softmax */ h2o_nn_32x6_ReLU_12_Bias_2.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_32x6_ReLU_12_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_32x6_ReLU_12_Weight_1.VALUES,
      /* Softmax */ h2o_nn_32x6_ReLU_12_Weight_2.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_32x6_ReLU_12.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_32x6_ReLU_12_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.2864864864864865,0.13513513513513514,0.14594594594594595,0.2864864864864865,0.14594594594594595};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_32x6_ReLU_12() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-9136254143046494592L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_32x6_ReLU_12_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_32x6_ReLU_12_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_12_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_32x6_ReLU_12_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_ReLU_12_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_12_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_32x6_ReLU_12_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_32x6_ReLU_12_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_12_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_32x6_ReLU_12_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_32x6_ReLU_12_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_ReLU_12_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_12_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.5664283008595036;
      sa[1] = 0.4882944619521497;
      sa[2] = 0.508668699585594;
      sa[3] = 0.5364520080902097;
      sa[4] = 0.6614010159687346;
      sa[5] = 0.5208296698078688;
      sa[6] = 0.44705495407118245;
      sa[7] = 0.46251033709002204;
      sa[8] = 0.46070520616254695;
      sa[9] = 0.5508476293196051;
      sa[10] = 0.46110980953474223;
      sa[11] = 0.4615483796487321;
      sa[12] = 0.46852784907553224;
      sa[13] = 0.5065856446570057;
      sa[14] = 0.44171143365737525;
      sa[15] = 0.5164043870190659;
      sa[16] = 0.5555629835012361;
      sa[17] = 0.48347988045941537;
      sa[18] = 0.5341899565262797;
      sa[19] = 0.4070907473343797;
      sa[20] = 0.481065537899654;
      sa[21] = 0.491754442677916;
      sa[22] = 0.5471267281770246;
      sa[23] = 0.5243133099836296;
      sa[24] = 0.47793872462558634;
      sa[25] = 0.42872057920039824;
      sa[26] = 0.49338412246790847;
      sa[27] = 0.4520645083602319;
      sa[28] = 0.49407594469784866;
      sa[29] = 0.5011497986723649;
      sa[30] = 0.5262405162285708;
      sa[31] = 0.5401887942737096;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_32x6_ReLU_12_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_32x6_ReLU_12_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_12_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -7.904358137717676E-4;
      sa[1] = -3.9759140693583625E-5;
      sa[2] = 0.01802433379820685;
      sa[3] = -0.05205308525036133;
      sa[4] = 0.00658923852229633;
    }
  }
}
class h2o_nn_32x6_ReLU_12_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_32x6_ReLU_12_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[416];
  static {
    h2o_nn_32x6_ReLU_12_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_12_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.027742187f;
      sa[1] = 0.27058053f;
      sa[2] = 0.22256374f;
      sa[3] = 0.1475987f;
      sa[4] = -0.26166576f;
      sa[5] = -0.2302217f;
      sa[6] = 0.08179546f;
      sa[7] = 0.26382414f;
      sa[8] = 0.12081104f;
      sa[9] = -0.17440023f;
      sa[10] = -0.25698388f;
      sa[11] = -0.2226517f;
      sa[12] = -0.123858355f;
      sa[13] = -0.31466323f;
      sa[14] = -0.2493778f;
      sa[15] = -0.04848159f;
      sa[16] = 0.0952408f;
      sa[17] = 0.1248616f;
      sa[18] = -0.21607897f;
      sa[19] = 0.21891242f;
      sa[20] = 0.26989684f;
      sa[21] = -0.36576283f;
      sa[22] = 0.3335569f;
      sa[23] = -0.12883338f;
      sa[24] = 0.24857306f;
      sa[25] = 0.32266578f;
      sa[26] = -0.32065687f;
      sa[27] = 0.38291708f;
      sa[28] = 0.32498547f;
      sa[29] = -0.225854f;
      sa[30] = -0.04592157f;
      sa[31] = 0.071031496f;
      sa[32] = 0.26698962f;
      sa[33] = -0.32747585f;
      sa[34] = 0.12860882f;
      sa[35] = -0.18336056f;
      sa[36] = 0.10248798f;
      sa[37] = 0.2673284f;
      sa[38] = -0.094187975f;
      sa[39] = 0.25557196f;
      sa[40] = 0.026661998f;
      sa[41] = -0.04190411f;
      sa[42] = -0.054118603f;
      sa[43] = 0.14506955f;
      sa[44] = 0.1582144f;
      sa[45] = -0.25513592f;
      sa[46] = 0.07816931f;
      sa[47] = 0.06628571f;
      sa[48] = 0.16019067f;
      sa[49] = 0.4600444f;
      sa[50] = 0.1446324f;
      sa[51] = -0.21188504f;
      sa[52] = -0.04312147f;
      sa[53] = 0.18273039f;
      sa[54] = 0.31255054f;
      sa[55] = 0.0809397f;
      sa[56] = -0.1347331f;
      sa[57] = -0.4337792f;
      sa[58] = 0.49443957f;
      sa[59] = -0.19054425f;
      sa[60] = -0.31514037f;
      sa[61] = 0.15519026f;
      sa[62] = 0.21174201f;
      sa[63] = -0.048440274f;
      sa[64] = 0.030869784f;
      sa[65] = 0.16876206f;
      sa[66] = -0.040947866f;
      sa[67] = 0.12945859f;
      sa[68] = -0.15219289f;
      sa[69] = 0.16655241f;
      sa[70] = -0.07884526f;
      sa[71] = 0.30400747f;
      sa[72] = -0.1533737f;
      sa[73] = 0.25161308f;
      sa[74] = -0.155115f;
      sa[75] = 0.1442527f;
      sa[76] = -0.14365536f;
      sa[77] = -0.07397938f;
      sa[78] = -0.09504662f;
      sa[79] = 0.16733703f;
      sa[80] = -0.29683086f;
      sa[81] = -0.22562651f;
      sa[82] = -0.11197798f;
      sa[83] = 0.2201721f;
      sa[84] = -0.12624538f;
      sa[85] = -0.22911456f;
      sa[86] = 0.16158523f;
      sa[87] = 0.36044964f;
      sa[88] = 0.22662106f;
      sa[89] = 0.1436191f;
      sa[90] = -0.08421856f;
      sa[91] = 0.17138231f;
      sa[92] = 0.20531224f;
      sa[93] = -0.21403697f;
      sa[94] = -0.1882022f;
      sa[95] = -0.21719825f;
      sa[96] = 0.14414623f;
      sa[97] = -0.026937922f;
      sa[98] = 0.26357445f;
      sa[99] = -0.104128815f;
      sa[100] = -0.084864266f;
      sa[101] = -0.2843551f;
      sa[102] = -0.23350969f;
      sa[103] = -0.11344196f;
      sa[104] = 0.03218222f;
      sa[105] = -0.19141214f;
      sa[106] = -0.31391025f;
      sa[107] = 0.1680482f;
      sa[108] = 0.20506501f;
      sa[109] = -0.23761347f;
      sa[110] = -0.2183614f;
      sa[111] = 0.18637313f;
      sa[112] = 0.15876447f;
      sa[113] = 0.04045487f;
      sa[114] = -0.08798974f;
      sa[115] = -0.108488485f;
      sa[116] = -0.05922871f;
      sa[117] = -0.06376356f;
      sa[118] = -0.32995784f;
      sa[119] = -0.20712824f;
      sa[120] = 0.21101345f;
      sa[121] = 0.20122153f;
      sa[122] = 0.3369799f;
      sa[123] = 0.4130137f;
      sa[124] = 0.28464058f;
      sa[125] = 0.29428628f;
      sa[126] = -0.3028941f;
      sa[127] = -0.28125185f;
      sa[128] = 0.0316992f;
      sa[129] = 0.02673977f;
      sa[130] = -0.1823662f;
      sa[131] = 0.3561674f;
      sa[132] = 0.18484287f;
      sa[133] = -0.3281641f;
      sa[134] = 0.07208452f;
      sa[135] = -0.28088036f;
      sa[136] = -0.27091506f;
      sa[137] = -0.044834796f;
      sa[138] = 0.11862883f;
      sa[139] = -0.14197439f;
      sa[140] = -0.107521065f;
      sa[141] = -0.3626765f;
      sa[142] = 0.34088314f;
      sa[143] = -0.36298326f;
      sa[144] = 0.28524053f;
      sa[145] = -0.20372537f;
      sa[146] = -0.34931946f;
      sa[147] = 0.1614919f;
      sa[148] = 0.25145596f;
      sa[149] = 0.2577112f;
      sa[150] = 0.328049f;
      sa[151] = -0.31011066f;
      sa[152] = 0.08963597f;
      sa[153] = 0.40354446f;
      sa[154] = 0.19360624f;
      sa[155] = -0.084964156f;
      sa[156] = 0.1091708f;
      sa[157] = -0.18812668f;
      sa[158] = 0.107960716f;
      sa[159] = 0.08833664f;
      sa[160] = 0.042399455f;
      sa[161] = 0.2514778f;
      sa[162] = -0.15931645f;
      sa[163] = -0.11797487f;
      sa[164] = 0.26340166f;
      sa[165] = -0.046533212f;
      sa[166] = -0.1306172f;
      sa[167] = -0.16497484f;
      sa[168] = 0.2171167f;
      sa[169] = 0.32820356f;
      sa[170] = -0.013211057f;
      sa[171] = -0.05896654f;
      sa[172] = -0.099573985f;
      sa[173] = -0.22169499f;
      sa[174] = -0.0119296815f;
      sa[175] = -0.22710198f;
      sa[176] = -0.07522248f;
      sa[177] = -0.07393946f;
      sa[178] = -0.020564262f;
      sa[179] = 0.14610511f;
      sa[180] = -0.16131079f;
      sa[181] = -0.287495f;
      sa[182] = -0.12262124f;
      sa[183] = 0.099712305f;
      sa[184] = 0.32988584f;
      sa[185] = 0.23586147f;
      sa[186] = -0.29694453f;
      sa[187] = 0.0980972f;
      sa[188] = -0.13910285f;
      sa[189] = 0.2923975f;
      sa[190] = 0.08971254f;
      sa[191] = -0.07899248f;
      sa[192] = -0.10551656f;
      sa[193] = 0.2820123f;
      sa[194] = 0.27990112f;
      sa[195] = 0.31156075f;
      sa[196] = 0.36211637f;
      sa[197] = -0.001968114f;
      sa[198] = 0.1048722f;
      sa[199] = -0.045694884f;
      sa[200] = -0.02344342f;
      sa[201] = -0.35968187f;
      sa[202] = 0.14234664f;
      sa[203] = -0.042161535f;
      sa[204] = -0.22599865f;
      sa[205] = 0.15764654f;
      sa[206] = 0.41575965f;
      sa[207] = -0.056208644f;
      sa[208] = -0.32798567f;
      sa[209] = -0.14892127f;
      sa[210] = -0.35730022f;
      sa[211] = -0.377849f;
      sa[212] = 0.18611057f;
      sa[213] = -0.26244026f;
      sa[214] = -0.03900788f;
      sa[215] = 0.07567466f;
      sa[216] = 0.089499645f;
      sa[217] = 0.32263505f;
      sa[218] = -0.17912784f;
      sa[219] = 0.34057954f;
      sa[220] = -0.36579606f;
      sa[221] = -0.0024831113f;
      sa[222] = 0.26398528f;
      sa[223] = 0.06591559f;
      sa[224] = 0.11789126f;
      sa[225] = 0.3125931f;
      sa[226] = -0.263359f;
      sa[227] = 0.39935005f;
      sa[228] = 0.11606485f;
      sa[229] = 0.07895425f;
      sa[230] = 0.27838588f;
      sa[231] = -0.3156774f;
      sa[232] = -0.45128155f;
      sa[233] = 0.17114867f;
      sa[234] = 0.1850871f;
      sa[235] = -0.29052672f;
      sa[236] = 0.0024179714f;
      sa[237] = -0.18061748f;
      sa[238] = -0.13328674f;
      sa[239] = 0.06250863f;
      sa[240] = 0.09462873f;
      sa[241] = -0.23707835f;
      sa[242] = -0.07705893f;
      sa[243] = -0.34211007f;
      sa[244] = -0.28234214f;
      sa[245] = -0.2294358f;
      sa[246] = -0.35890225f;
      sa[247] = -0.04554152f;
      sa[248] = 0.32399163f;
      sa[249] = 0.2695185f;
      sa[250] = -0.24145377f;
      sa[251] = -0.09627068f;
      sa[252] = -0.2975443f;
      sa[253] = -0.5529336f;
      sa[254] = -0.28915682f;
      sa[255] = 0.2346733f;
      sa[256] = -0.20609619f;
      sa[257] = 0.37292883f;
      sa[258] = -0.2779809f;
      sa[259] = 0.12827508f;
      sa[260] = -0.2884543f;
      sa[261] = -0.078517884f;
      sa[262] = -0.19162853f;
      sa[263] = 0.13125728f;
      sa[264] = -0.44386247f;
      sa[265] = 0.21749285f;
      sa[266] = -0.5282667f;
      sa[267] = -0.30172244f;
      sa[268] = 0.124386676f;
      sa[269] = -0.10042674f;
      sa[270] = -0.122319676f;
      sa[271] = 0.2755469f;
      sa[272] = -0.22450764f;
      sa[273] = -0.10899562f;
      sa[274] = 0.11704668f;
      sa[275] = -0.014433653f;
      sa[276] = 0.10855432f;
      sa[277] = -0.22047804f;
      sa[278] = -0.09469627f;
      sa[279] = 0.13588618f;
      sa[280] = -0.1852588f;
      sa[281] = 0.35175157f;
      sa[282] = -0.096781634f;
      sa[283] = -0.007944483f;
      sa[284] = 0.12938282f;
      sa[285] = -0.10796901f;
      sa[286] = 0.31432083f;
      sa[287] = 0.16093963f;
      sa[288] = -0.17766239f;
      sa[289] = -0.118507706f;
      sa[290] = -0.03349407f;
      sa[291] = -0.07097683f;
      sa[292] = 0.1859209f;
      sa[293] = -0.088238165f;
      sa[294] = 0.1162275f;
      sa[295] = 0.073920205f;
      sa[296] = 0.25198907f;
      sa[297] = 0.21111968f;
      sa[298] = -0.15244105f;
      sa[299] = -0.04876858f;
      sa[300] = 0.038631007f;
      sa[301] = -0.02947674f;
      sa[302] = 0.18877397f;
      sa[303] = 0.054623887f;
      sa[304] = -0.29274333f;
      sa[305] = -0.06092774f;
      sa[306] = 0.24181677f;
      sa[307] = -0.19032325f;
      sa[308] = 0.07147156f;
      sa[309] = 0.08680199f;
      sa[310] = 0.41762292f;
      sa[311] = 0.12055921f;
      sa[312] = -0.22270373f;
      sa[313] = -0.24208997f;
      sa[314] = -0.22306675f;
      sa[315] = 0.024543451f;
      sa[316] = 0.0020651775f;
      sa[317] = -0.122596905f;
      sa[318] = 0.1187507f;
      sa[319] = 0.32665083f;
      sa[320] = -0.05555934f;
      sa[321] = 0.15562f;
      sa[322] = 0.31766215f;
      sa[323] = -0.27399155f;
      sa[324] = 0.20205438f;
      sa[325] = 0.29359877f;
      sa[326] = -0.30554897f;
      sa[327] = -0.03742995f;
      sa[328] = -0.18177468f;
      sa[329] = 0.19487672f;
      sa[330] = -0.11312724f;
      sa[331] = -0.013308332f;
      sa[332] = -0.34818438f;
      sa[333] = 0.11349996f;
      sa[334] = -0.030997962f;
      sa[335] = 0.21034756f;
      sa[336] = -0.18410286f;
      sa[337] = -0.13394806f;
      sa[338] = 0.37336028f;
      sa[339] = -0.2898847f;
      sa[340] = -0.37854764f;
      sa[341] = -0.2620438f;
      sa[342] = 0.2738695f;
      sa[343] = -0.101700805f;
      sa[344] = -0.22514075f;
      sa[345] = 0.25861284f;
      sa[346] = 0.26165423f;
      sa[347] = -0.19104706f;
      sa[348] = 0.40728986f;
      sa[349] = -0.30811313f;
      sa[350] = -0.17010102f;
      sa[351] = 0.08618423f;
      sa[352] = 0.27517873f;
      sa[353] = -0.04853647f;
      sa[354] = 0.07136065f;
      sa[355] = 0.066310465f;
      sa[356] = -0.16450807f;
      sa[357] = 0.26837972f;
      sa[358] = -0.3639062f;
      sa[359] = 0.012878586f;
      sa[360] = 0.13136585f;
      sa[361] = -0.11417669f;
      sa[362] = -0.18863732f;
      sa[363] = 0.11783274f;
      sa[364] = -0.099974334f;
      sa[365] = -0.19131455f;
      sa[366] = 0.03916361f;
      sa[367] = -0.24247314f;
      sa[368] = -0.12942046f;
      sa[369] = 0.25962463f;
      sa[370] = -0.28661898f;
      sa[371] = 0.15693927f;
      sa[372] = 0.0115958955f;
      sa[373] = 0.27510595f;
      sa[374] = -0.20990555f;
      sa[375] = -0.27718547f;
      sa[376] = -0.3887245f;
      sa[377] = -0.2597586f;
      sa[378] = 0.36314088f;
      sa[379] = 0.08192708f;
      sa[380] = -0.15092318f;
      sa[381] = -0.15552065f;
      sa[382] = 0.0168365f;
      sa[383] = -0.10606911f;
      sa[384] = -0.18943362f;
      sa[385] = 0.11110117f;
      sa[386] = -0.26962075f;
      sa[387] = -0.25686646f;
      sa[388] = -0.0072390125f;
      sa[389] = 0.07638402f;
      sa[390] = 0.015848503f;
      sa[391] = -0.12344801f;
      sa[392] = 0.2902f;
      sa[393] = 0.16859336f;
      sa[394] = -0.12623167f;
      sa[395] = 0.42030925f;
      sa[396] = 0.27127331f;
      sa[397] = -0.3152154f;
      sa[398] = 0.14177492f;
      sa[399] = 0.23578706f;
      sa[400] = 0.20719613f;
      sa[401] = 0.4536785f;
      sa[402] = -0.34480292f;
      sa[403] = 0.13096966f;
      sa[404] = 0.3444334f;
      sa[405] = -0.23066401f;
      sa[406] = -0.06850358f;
      sa[407] = 0.21918373f;
      sa[408] = -0.19279401f;
      sa[409] = -0.37526202f;
      sa[410] = -0.093744494f;
      sa[411] = 0.24295264f;
      sa[412] = -0.14255528f;
      sa[413] = 0.06996023f;
      sa[414] = 0.15524264f;
      sa[415] = 0.34768054f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_32x6_ReLU_12_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[160];
  static {
    h2o_nn_32x6_ReLU_12_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_12_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 1.2631897f;
      sa[1] = -0.15930268f;
      sa[2] = -0.47730973f;
      sa[3] = -0.8769869f;
      sa[4] = 0.051555894f;
      sa[5] = 0.1933021f;
      sa[6] = 1.2559524f;
      sa[7] = -0.6457207f;
      sa[8] = -0.93607175f;
      sa[9] = 0.6386843f;
      sa[10] = -0.23145188f;
      sa[11] = 0.48895085f;
      sa[12] = 0.18530942f;
      sa[13] = 0.11989357f;
      sa[14] = -1.2276458f;
      sa[15] = 1.1327095f;
      sa[16] = 1.6795104f;
      sa[17] = -0.5231812f;
      sa[18] = 0.07092883f;
      sa[19] = -0.51245403f;
      sa[20] = 1.2304076f;
      sa[21] = 0.030180283f;
      sa[22] = -0.9936541f;
      sa[23] = 0.72672105f;
      sa[24] = -1.3854809f;
      sa[25] = 0.42589492f;
      sa[26] = -0.23408087f;
      sa[27] = 1.4193323f;
      sa[28] = -1.3730239f;
      sa[29] = -0.4367733f;
      sa[30] = 0.49751198f;
      sa[31] = -0.773781f;
      sa[32] = -1.1525238f;
      sa[33] = -1.4927444f;
      sa[34] = 0.04073782f;
      sa[35] = 1.3857104f;
      sa[36] = -0.37257668f;
      sa[37] = -0.0711902f;
      sa[38] = 0.16259906f;
      sa[39] = 0.8221885f;
      sa[40] = -0.74277025f;
      sa[41] = -1.3612106f;
      sa[42] = -1.0353866f;
      sa[43] = -1.3936765f;
      sa[44] = 0.011625674f;
      sa[45] = -1.3332062f;
      sa[46] = 1.2178069f;
      sa[47] = 1.379025f;
      sa[48] = -1.3250333f;
      sa[49] = -1.0328615f;
      sa[50] = 0.39202073f;
      sa[51] = -0.31848362f;
      sa[52] = 0.8132791f;
      sa[53] = 0.89393306f;
      sa[54] = -0.23811826f;
      sa[55] = 1.1468464f;
      sa[56] = -1.0559953f;
      sa[57] = -1.116831f;
      sa[58] = 0.1832118f;
      sa[59] = -0.23260799f;
      sa[60] = 1.3540944f;
      sa[61] = -0.5851287f;
      sa[62] = -0.35644716f;
      sa[63] = 0.7101772f;
      sa[64] = 1.4959933f;
      sa[65] = -0.61825776f;
      sa[66] = 0.5696721f;
      sa[67] = 1.5155644f;
      sa[68] = 0.7968987f;
      sa[69] = -0.9647493f;
      sa[70] = -1.6136124f;
      sa[71] = -0.42635086f;
      sa[72] = -1.2347032f;
      sa[73] = 1.1994486f;
      sa[74] = 1.3514401f;
      sa[75] = -0.1526113f;
      sa[76] = 0.90403825f;
      sa[77] = 0.513366f;
      sa[78] = -1.3140584f;
      sa[79] = 0.92028874f;
      sa[80] = -0.8147643f;
      sa[81] = 0.33986056f;
      sa[82] = 0.83479136f;
      sa[83] = -0.5950047f;
      sa[84] = -1.7120018f;
      sa[85] = -1.2525462f;
      sa[86] = 0.23748165f;
      sa[87] = 1.228564f;
      sa[88] = -1.5082735f;
      sa[89] = -0.47253326f;
      sa[90] = -1.0282365f;
      sa[91] = 1.5936484f;
      sa[92] = -0.34319994f;
      sa[93] = 0.27121773f;
      sa[94] = -1.5896255f;
      sa[95] = -0.23321079f;
      sa[96] = -1.1367767f;
      sa[97] = 0.14125688f;
      sa[98] = -0.10379456f;
      sa[99] = 0.25251466f;
      sa[100] = -1.3075192f;
      sa[101] = -0.44838494f;
      sa[102] = 1.31001f;
      sa[103] = 0.026311316f;
      sa[104] = -0.22606994f;
      sa[105] = -0.61301774f;
      sa[106] = 1.474776f;
      sa[107] = 1.0753369f;
      sa[108] = 0.73966205f;
      sa[109] = 0.06420927f;
      sa[110] = 0.67953897f;
      sa[111] = -0.80712914f;
      sa[112] = -1.2149271f;
      sa[113] = 0.11588577f;
      sa[114] = 0.1712624f;
      sa[115] = -0.29617718f;
      sa[116] = 1.150161f;
      sa[117] = 0.020201948f;
      sa[118] = -1.3399692f;
      sa[119] = -0.8394813f;
      sa[120] = -0.33273968f;
      sa[121] = 1.0344532f;
      sa[122] = -0.1218846f;
      sa[123] = 0.33805117f;
      sa[124] = -0.7250351f;
      sa[125] = 0.7779773f;
      sa[126] = -1.0753852f;
      sa[127] = 0.48580816f;
      sa[128] = -0.91836816f;
      sa[129] = 0.80498904f;
      sa[130] = -0.441223f;
      sa[131] = 0.8795571f;
      sa[132] = 0.4851083f;
      sa[133] = 0.635009f;
      sa[134] = 0.668934f;
      sa[135] = -1.1347524f;
      sa[136] = 0.5391569f;
      sa[137] = -0.56557906f;
      sa[138] = -0.10258324f;
      sa[139] = 1.1593709f;
      sa[140] = -0.44122526f;
      sa[141] = -0.06980619f;
      sa[142] = 0.27713892f;
      sa[143] = -0.79607034f;
      sa[144] = 0.86374176f;
      sa[145] = -0.74927974f;
      sa[146] = 0.01313751f;
      sa[147] = -0.29216105f;
      sa[148] = -0.9498252f;
      sa[149] = 1.0797209f;
      sa[150] = -1.0712034f;
      sa[151] = -1.5242717f;
      sa[152] = 1.6254029f;
      sa[153] = -0.5541352f;
      sa[154] = 1.3453068f;
      sa[155] = -1.516415f;
      sa[156] = -1.4609832f;
      sa[157] = -1.2185916f;
      sa[158] = -0.2180927f;
      sa[159] = -0.58763295f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_32x6_ReLU_12 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_32x6_ReLU_12_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_32x6_ReLU_12_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_32x6_ReLU_12_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_32x6_ReLU_12_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_12_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


