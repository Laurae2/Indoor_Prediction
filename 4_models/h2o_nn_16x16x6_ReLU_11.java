/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:43:24.123+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_11

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_11 > h2o_nn_16x16x6_ReLU_11.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_11.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_11", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_11 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_11_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_11_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_11_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_11_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_11_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_11_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_11_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_11.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_11_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.2548076923076923,0.18269230769230768,0.057692307692307696,0.125,0.2548076923076923,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_11() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-7357177030430999104L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_11_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_16x16x6_ReLU_11_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_11_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_11_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_11_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_11_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_11_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_11_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.5655231510590126;
      sa[1] = 0.7821138308340863;
      sa[2] = 0.41485432719896315;
      sa[3] = 0.5548761924276154;
      sa[4] = 0.5916155632861253;
      sa[5] = 0.6593207053027322;
      sa[6] = 0.35587838362833724;
      sa[7] = 0.595622962706779;
      sa[8] = 0.710404029956958;
      sa[9] = 0.6557661071545479;
      sa[10] = 0.46957687908070084;
      sa[11] = 0.32152297969110577;
      sa[12] = 0.34769483838061105;
      sa[13] = 0.39184701866197735;
      sa[14] = 0.5676178030867488;
      sa[15] = 0.39144304922423095;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_11_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.0934412844412393;
      sa[1] = 1.1511076585762219;
      sa[2] = 0.8546619948397701;
      sa[3] = 0.9878365247281689;
      sa[4] = 0.9231643967189607;
      sa[5] = 0.950105703885998;
      sa[6] = 0.9397782707297461;
      sa[7] = 0.9772327106118952;
      sa[8] = 0.8954335184456779;
      sa[9] = 1.067323877554849;
      sa[10] = 0.8881433774293501;
      sa[11] = 1.2161967130457476;
      sa[12] = 1.0563232881705333;
      sa[13] = 1.0860367811405949;
      sa[14] = 0.9300483297888571;
      sa[15] = 0.992843006153776;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_11_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_ReLU_11_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.13155249243970246;
      sa[1] = 0.03475228742476954;
      sa[2] = -0.04301761219531586;
      sa[3] = -0.029522715951205685;
      sa[4] = 0.07758133155583792;
      sa[5] = -0.1701481711008152;
    }
  }
}
class h2o_nn_16x16x6_ReLU_11_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[208];
  static {
    h2o_nn_16x16x6_ReLU_11_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.16918933f;
      sa[1] = 0.09192037f;
      sa[2] = 0.2922306f;
      sa[3] = 0.24985193f;
      sa[4] = 0.091590434f;
      sa[5] = -0.19756591f;
      sa[6] = -0.21609756f;
      sa[7] = 0.424363f;
      sa[8] = 0.17773733f;
      sa[9] = -0.22494884f;
      sa[10] = -0.029164752f;
      sa[11] = -0.37554303f;
      sa[12] = 0.16570802f;
      sa[13] = -0.2482478f;
      sa[14] = -0.3313148f;
      sa[15] = 0.17873031f;
      sa[16] = 0.033953786f;
      sa[17] = 0.1541035f;
      sa[18] = -0.16050912f;
      sa[19] = 0.13059242f;
      sa[20] = 0.49978778f;
      sa[21] = -0.3021492f;
      sa[22] = 0.44372472f;
      sa[23] = -0.08436606f;
      sa[24] = 0.25966638f;
      sa[25] = 0.51318276f;
      sa[26] = -0.47344515f;
      sa[27] = 0.52512735f;
      sa[28] = 0.28401366f;
      sa[29] = -0.38006583f;
      sa[30] = -0.32752904f;
      sa[31] = 0.18246265f;
      sa[32] = 0.5074907f;
      sa[33] = -0.48260012f;
      sa[34] = 0.12305327f;
      sa[35] = -0.09083433f;
      sa[36] = -0.016299132f;
      sa[37] = 0.5283812f;
      sa[38] = -0.26195654f;
      sa[39] = 0.2176358f;
      sa[40] = -0.025868844f;
      sa[41] = -0.19390152f;
      sa[42] = -0.27998376f;
      sa[43] = -0.12877193f;
      sa[44] = 0.38644814f;
      sa[45] = -0.5005032f;
      sa[46] = -0.005603089f;
      sa[47] = -0.030727934f;
      sa[48] = 0.35531637f;
      sa[49] = 0.36257032f;
      sa[50] = 0.3298616f;
      sa[51] = -0.4909991f;
      sa[52] = -0.12129184f;
      sa[53] = 0.326273f;
      sa[54] = 0.29224086f;
      sa[55] = -0.07141544f;
      sa[56] = -0.38967547f;
      sa[57] = -0.37397268f;
      sa[58] = 0.5500714f;
      sa[59] = -0.27189225f;
      sa[60] = -0.36687493f;
      sa[61] = 0.27134058f;
      sa[62] = -0.14663154f;
      sa[63] = 0.054496475f;
      sa[64] = 0.08114314f;
      sa[65] = 0.23933378f;
      sa[66] = 0.2451626f;
      sa[67] = 0.38411018f;
      sa[68] = -0.0783654f;
      sa[69] = 0.2061499f;
      sa[70] = -0.08449622f;
      sa[71] = 0.28414413f;
      sa[72] = -0.1651822f;
      sa[73] = 0.4134157f;
      sa[74] = -0.26035818f;
      sa[75] = -0.088714436f;
      sa[76] = -0.259369f;
      sa[77] = -0.18208157f;
      sa[78] = -0.14836663f;
      sa[79] = 0.3828672f;
      sa[80] = -0.21047235f;
      sa[81] = -0.17664443f;
      sa[82] = -0.18977565f;
      sa[83] = 0.29884815f;
      sa[84] = -0.10631601f;
      sa[85] = -0.30391315f;
      sa[86] = 0.24323271f;
      sa[87] = 0.32861215f;
      sa[88] = 0.08316813f;
      sa[89] = 0.23304234f;
      sa[90] = -0.25753468f;
      sa[91] = 0.12844539f;
      sa[92] = -0.04330897f;
      sa[93] = -0.19412103f;
      sa[94] = -0.7223905f;
      sa[95] = -0.5905397f;
      sa[96] = 0.05343344f;
      sa[97] = 0.073094234f;
      sa[98] = 0.53687334f;
      sa[99] = 0.099074766f;
      sa[100] = -0.16162688f;
      sa[101] = -0.47615242f;
      sa[102] = -0.34204674f;
      sa[103] = -0.039850146f;
      sa[104] = 0.2527877f;
      sa[105] = -0.0656791f;
      sa[106] = -0.034738593f;
      sa[107] = 0.31932184f;
      sa[108] = 0.39865398f;
      sa[109] = 0.012590762f;
      sa[110] = -0.440925f;
      sa[111] = 0.11046896f;
      sa[112] = 0.14987807f;
      sa[113] = 0.30354077f;
      sa[114] = -0.17310983f;
      sa[115] = 0.06373159f;
      sa[116] = -0.38836282f;
      sa[117] = 0.006659793f;
      sa[118] = -0.6835633f;
      sa[119] = -0.25603217f;
      sa[120] = 0.24071324f;
      sa[121] = 0.24749808f;
      sa[122] = 0.47700438f;
      sa[123] = 0.43898585f;
      sa[124] = 0.4644257f;
      sa[125] = 0.4300114f;
      sa[126] = -0.36761743f;
      sa[127] = -0.08660642f;
      sa[128] = 9.616668E-4f;
      sa[129] = 0.41279715f;
      sa[130] = -0.31673753f;
      sa[131] = 0.5781022f;
      sa[132] = 0.1497027f;
      sa[133] = -0.42284355f;
      sa[134] = 0.036626287f;
      sa[135] = -0.470126f;
      sa[136] = -0.16421096f;
      sa[137] = -0.026628489f;
      sa[138] = 0.22063813f;
      sa[139] = -0.26759467f;
      sa[140] = -0.36594594f;
      sa[141] = -0.11330952f;
      sa[142] = 0.13590789f;
      sa[143] = -0.49386114f;
      sa[144] = 0.44012007f;
      sa[145] = -0.3130046f;
      sa[146] = -0.3717697f;
      sa[147] = 0.2378421f;
      sa[148] = 0.10946614f;
      sa[149] = 0.3364927f;
      sa[150] = 0.43386918f;
      sa[151] = -0.38120532f;
      sa[152] = -0.007457115f;
      sa[153] = 0.32440928f;
      sa[154] = 0.36192954f;
      sa[155] = -0.26333767f;
      sa[156] = 0.072006345f;
      sa[157] = -0.3098303f;
      sa[158] = -0.02671045f;
      sa[159] = 0.008852736f;
      sa[160] = -0.1920623f;
      sa[161] = 0.113278754f;
      sa[162] = 0.005464778f;
      sa[163] = -0.08144359f;
      sa[164] = 0.3340761f;
      sa[165] = -0.13720097f;
      sa[166] = -0.20509848f;
      sa[167] = -0.19115126f;
      sa[168] = 0.35395402f;
      sa[169] = 0.44213757f;
      sa[170] = -0.13565664f;
      sa[171] = -0.19736847f;
      sa[172] = -0.08518961f;
      sa[173] = -0.050407927f;
      sa[174] = 0.04602576f;
      sa[175] = -0.16620125f;
      sa[176] = -0.13927443f;
      sa[177] = -0.19436048f;
      sa[178] = 0.057590127f;
      sa[179] = 0.41638383f;
      sa[180] = -0.055760194f;
      sa[181] = -0.35285124f;
      sa[182] = -0.14129224f;
      sa[183] = 0.22135319f;
      sa[184] = 0.52902806f;
      sa[185] = 0.3229554f;
      sa[186] = -0.2513507f;
      sa[187] = 0.07040232f;
      sa[188] = -0.42597187f;
      sa[189] = 0.36179626f;
      sa[190] = 0.14626662f;
      sa[191] = -0.17812203f;
      sa[192] = -0.6827203f;
      sa[193] = 0.38727993f;
      sa[194] = -0.10623226f;
      sa[195] = 0.257915f;
      sa[196] = 0.36746022f;
      sa[197] = -0.14882106f;
      sa[198] = 0.07108407f;
      sa[199] = -0.32634908f;
      sa[200] = 0.16759694f;
      sa[201] = -0.64263266f;
      sa[202] = 0.1207552f;
      sa[203] = -0.144202f;
      sa[204] = -0.18993185f;
      sa[205] = 0.34869254f;
      sa[206] = 0.31257817f;
      sa[207] = 0.15295926f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_11_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_11_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.5124517f;
      sa[1] = 0.15997931f;
      sa[2] = -0.3198269f;
      sa[3] = -0.38037452f;
      sa[4] = 0.09877787f;
      sa[5] = 0.16674758f;
      sa[6] = 0.16294754f;
      sa[7] = -0.06546574f;
      sa[8] = -0.32889092f;
      sa[9] = 0.3843307f;
      sa[10] = -9.6831017E-4f;
      sa[11] = 0.07423022f;
      sa[12] = 0.21055892f;
      sa[13] = -0.037617955f;
      sa[14] = -0.39255726f;
      sa[15] = 0.30464825f;
      sa[16] = 0.5905059f;
      sa[17] = -0.06109453f;
      sa[18] = -0.031317297f;
      sa[19] = -0.13736399f;
      sa[20] = 0.32339275f;
      sa[21] = 0.11191049f;
      sa[22] = -0.3320272f;
      sa[23] = 0.34255612f;
      sa[24] = -0.083913825f;
      sa[25] = 0.17951414f;
      sa[26] = 0.05304521f;
      sa[27] = 0.36558193f;
      sa[28] = -0.331666f;
      sa[29] = -0.08877144f;
      sa[30] = 0.33527392f;
      sa[31] = -0.1309256f;
      sa[32] = -0.38929734f;
      sa[33] = -0.511097f;
      sa[34] = -0.069238484f;
      sa[35] = 0.30062822f;
      sa[36] = -0.12106441f;
      sa[37] = -0.06624778f;
      sa[38] = -0.050530776f;
      sa[39] = 0.16345195f;
      sa[40] = -0.25045636f;
      sa[41] = -0.46710193f;
      sa[42] = -0.32000604f;
      sa[43] = -0.455203f;
      sa[44] = -0.07102137f;
      sa[45] = -0.40893027f;
      sa[46] = 0.2735718f;
      sa[47] = 0.2933738f;
      sa[48] = -0.27428654f;
      sa[49] = -0.24394722f;
      sa[50] = 0.20238687f;
      sa[51] = -0.18894199f;
      sa[52] = 0.44281104f;
      sa[53] = 0.29291373f;
      sa[54] = -0.11855864f;
      sa[55] = 0.4366323f;
      sa[56] = -0.3091597f;
      sa[57] = -0.30769086f;
      sa[58] = 0.13536038f;
      sa[59] = -0.0206711f;
      sa[60] = 0.32863036f;
      sa[61] = -0.303324f;
      sa[62] = 2.1141345E-4f;
      sa[63] = 0.084066704f;
      sa[64] = 0.2706922f;
      sa[65] = -0.20694377f;
      sa[66] = 0.17728345f;
      sa[67] = 0.40192777f;
      sa[68] = 0.20988967f;
      sa[69] = -0.31598482f;
      sa[70] = -0.41965917f;
      sa[71] = -0.1528149f;
      sa[72] = -0.4463922f;
      sa[73] = 0.2694679f;
      sa[74] = 0.3119854f;
      sa[75] = -0.042364385f;
      sa[76] = 0.186639f;
      sa[77] = 0.11196531f;
      sa[78] = -0.44333008f;
      sa[79] = 0.18598677f;
      sa[80] = -0.23717205f;
      sa[81] = 0.04239506f;
      sa[82] = 0.19670032f;
      sa[83] = -0.15777978f;
      sa[84] = -0.4696821f;
      sa[85] = -0.39858526f;
      sa[86] = 0.03722692f;
      sa[87] = 0.27668163f;
      sa[88] = -0.43175662f;
      sa[89] = -0.17382243f;
      sa[90] = -0.34598032f;
      sa[91] = 0.41444066f;
      sa[92] = -0.1063862f;
      sa[93] = 0.08561198f;
      sa[94] = -0.4688546f;
      sa[95] = 0.009510504f;
      sa[96] = -0.21630466f;
      sa[97] = -0.0057228873f;
      sa[98] = -0.111422665f;
      sa[99] = -0.15608236f;
      sa[100] = -0.29380828f;
      sa[101] = -0.066901706f;
      sa[102] = 0.1616699f;
      sa[103] = 0.03136208f;
      sa[104] = -0.13312954f;
      sa[105] = -0.17195421f;
      sa[106] = 0.44448224f;
      sa[107] = 0.26319388f;
      sa[108] = 0.17869909f;
      sa[109] = -0.09076647f;
      sa[110] = 0.13225117f;
      sa[111] = -0.37848893f;
      sa[112] = -0.28774503f;
      sa[113] = 0.031971265f;
      sa[114] = 0.07954305f;
      sa[115] = -0.12774968f;
      sa[116] = 0.48756954f;
      sa[117] = 0.06831995f;
      sa[118] = -0.36833262f;
      sa[119] = -0.19353971f;
      sa[120] = -0.12188399f;
      sa[121] = 0.22039051f;
      sa[122] = -0.018068125f;
      sa[123] = 0.091614045f;
      sa[124] = -0.24182355f;
      sa[125] = 0.1830837f;
      sa[126] = -0.31940633f;
      sa[127] = 0.059999578f;
      sa[128] = -0.39778355f;
      sa[129] = 0.07746151f;
      sa[130] = 0.1592629f;
      sa[131] = 0.29396015f;
      sa[132] = 0.14076257f;
      sa[133] = 0.065014794f;
      sa[134] = 0.296409f;
      sa[135] = -0.3357f;
      sa[136] = 0.1704397f;
      sa[137] = -0.42211637f;
      sa[138] = -0.024512671f;
      sa[139] = 0.38252598f;
      sa[140] = -0.29347822f;
      sa[141] = -0.046738103f;
      sa[142] = 0.23566736f;
      sa[143] = -0.24119058f;
      sa[144] = 0.3079046f;
      sa[145] = -0.27040336f;
      sa[146] = 0.095724806f;
      sa[147] = 0.06520262f;
      sa[148] = -0.37461713f;
      sa[149] = 0.21477935f;
      sa[150] = -0.16581519f;
      sa[151] = -0.4703869f;
      sa[152] = 0.5456731f;
      sa[153] = -0.26460978f;
      sa[154] = 0.36266783f;
      sa[155] = -0.36224014f;
      sa[156] = -0.37353668f;
      sa[157] = -0.21986713f;
      sa[158] = 0.049587082f;
      sa[159] = -0.0663127f;
      sa[160] = 0.2804573f;
      sa[161] = -0.27665776f;
      sa[162] = 0.5740658f;
      sa[163] = -0.3524233f;
      sa[164] = 0.2822299f;
      sa[165] = -0.14247355f;
      sa[166] = 0.30296507f;
      sa[167] = -0.43052083f;
      sa[168] = 0.18063438f;
      sa[169] = -0.45596066f;
      sa[170] = 0.20651852f;
      sa[171] = 0.31113473f;
      sa[172] = 0.3297618f;
      sa[173] = 0.2827565f;
      sa[174] = -0.120042294f;
      sa[175] = -0.2760406f;
      sa[176] = -0.055996787f;
      sa[177] = 0.3193189f;
      sa[178] = -0.21561037f;
      sa[179] = -0.006861385f;
      sa[180] = -0.2900138f;
      sa[181] = -0.12615064f;
      sa[182] = 0.19178286f;
      sa[183] = -0.08757138f;
      sa[184] = 0.4032901f;
      sa[185] = 0.55884504f;
      sa[186] = -0.020321025f;
      sa[187] = -0.22967716f;
      sa[188] = 0.053496506f;
      sa[189] = -0.20945688f;
      sa[190] = -0.298024f;
      sa[191] = -0.15784569f;
      sa[192] = -0.1156595f;
      sa[193] = 0.15654951f;
      sa[194] = -0.15781231f;
      sa[195] = -0.03593175f;
      sa[196] = 0.12835366f;
      sa[197] = -0.2271666f;
      sa[198] = 0.22184065f;
      sa[199] = 0.442446f;
      sa[200] = 0.08492742f;
      sa[201] = 0.24556363f;
      sa[202] = 0.15595074f;
      sa[203] = -0.36590338f;
      sa[204] = 0.13441107f;
      sa[205] = 0.46448594f;
      sa[206] = -0.03405914f;
      sa[207] = 0.26588684f;
      sa[208] = -0.077808216f;
      sa[209] = 0.31228128f;
      sa[210] = -0.16156358f;
      sa[211] = -0.3195796f;
      sa[212] = -0.2176019f;
      sa[213] = 0.11247982f;
      sa[214] = -0.3854827f;
      sa[215] = -0.041692827f;
      sa[216] = 0.09009569f;
      sa[217] = 0.4850313f;
      sa[218] = 0.0074667316f;
      sa[219] = 0.09667235f;
      sa[220] = 0.23317733f;
      sa[221] = -0.010657699f;
      sa[222] = -0.43280396f;
      sa[223] = -0.3312604f;
      sa[224] = 0.24656245f;
      sa[225] = 0.014281387f;
      sa[226] = -0.2509823f;
      sa[227] = 0.020965965f;
      sa[228] = -0.20507933f;
      sa[229] = -0.27507254f;
      sa[230] = -0.35734242f;
      sa[231] = -0.3537613f;
      sa[232] = 0.34750482f;
      sa[233] = -0.1653928f;
      sa[234] = -0.3689256f;
      sa[235] = 0.024634343f;
      sa[236] = -0.36016393f;
      sa[237] = 0.4631187f;
      sa[238] = -0.12704588f;
      sa[239] = -0.050280422f;
      sa[240] = -0.19890393f;
      sa[241] = -0.47453156f;
      sa[242] = -0.31642276f;
      sa[243] = 0.47188085f;
      sa[244] = -0.016126992f;
      sa[245] = 0.24797535f;
      sa[246] = 0.22942604f;
      sa[247] = -0.5024763f;
      sa[248] = -0.025707664f;
      sa[249] = -0.09170714f;
      sa[250] = 0.13910659f;
      sa[251] = 0.4158472f;
      sa[252] = 0.13336797f;
      sa[253] = -0.14824815f;
      sa[254] = 0.34452543f;
      sa[255] = 0.26572916f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_11_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_ReLU_11_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.04140365f;
      sa[1] = -1.6528106f;
      sa[2] = -1.5734434f;
      sa[3] = 1.2793573f;
      sa[4] = 0.31526673f;
      sa[5] = -0.20246992f;
      sa[6] = -1.6403629f;
      sa[7] = 1.3955992f;
      sa[8] = 1.7722825f;
      sa[9] = -0.12594351f;
      sa[10] = 1.6083798f;
      sa[11] = 0.9301724f;
      sa[12] = 1.6777004f;
      sa[13] = -0.82384425f;
      sa[14] = -1.97559f;
      sa[15] = -0.6922967f;
      sa[16] = 0.7314121f;
      sa[17] = -0.77126414f;
      sa[18] = -1.4493054f;
      sa[19] = -0.9329708f;
      sa[20] = -1.8746142f;
      sa[21] = 0.32124573f;
      sa[22] = -1.9316748f;
      sa[23] = -0.6745097f;
      sa[24] = -0.4988592f;
      sa[25] = 1.8804632f;
      sa[26] = -0.3151202f;
      sa[27] = 1.254341f;
      sa[28] = 1.220108f;
      sa[29] = -0.808521f;
      sa[30] = 0.22906578f;
      sa[31] = 0.1891438f;
      sa[32] = 0.2045853f;
      sa[33] = 0.1756067f;
      sa[34] = -0.5670254f;
      sa[35] = 0.9469253f;
      sa[36] = 0.4279083f;
      sa[37] = -1.3234656f;
      sa[38] = 0.54249525f;
      sa[39] = -0.38623402f;
      sa[40] = 0.25639296f;
      sa[41] = -0.6494359f;
      sa[42] = 0.5371962f;
      sa[43] = -0.3646699f;
      sa[44] = 0.8927248f;
      sa[45] = -2.630943f;
      sa[46] = -2.0418901f;
      sa[47] = 0.024660315f;
      sa[48] = 1.6433573f;
      sa[49] = -0.21815583f;
      sa[50] = -0.5796006f;
      sa[51] = 1.7677239f;
      sa[52] = -1.6668973f;
      sa[53] = 0.8977425f;
      sa[54] = 1.720587f;
      sa[55] = 1.0964503f;
      sa[56] = -0.7198289f;
      sa[57] = -0.09990967f;
      sa[58] = 0.9283813f;
      sa[59] = 0.790961f;
      sa[60] = -1.3825812f;
      sa[61] = 1.0065166f;
      sa[62] = -0.49399683f;
      sa[63] = -0.94410455f;
      sa[64] = 1.0102682f;
      sa[65] = -0.8730047f;
      sa[66] = -1.8024782f;
      sa[67] = -0.06170933f;
      sa[68] = 0.93627584f;
      sa[69] = -1.3426538f;
      sa[70] = -1.5607386f;
      sa[71] = 0.008494325f;
      sa[72] = -1.061356f;
      sa[73] = -1.2094293f;
      sa[74] = -1.1484661f;
      sa[75] = 1.4190862f;
      sa[76] = 1.9425513f;
      sa[77] = -0.43797258f;
      sa[78] = -1.4757315f;
      sa[79] = -0.38998008f;
      sa[80] = 0.5200325f;
      sa[81] = -1.8612878f;
      sa[82] = -0.25544634f;
      sa[83] = -1.4945543f;
      sa[84] = 1.524571f;
      sa[85] = 1.0987282f;
      sa[86] = -2.0084722f;
      sa[87] = 1.0762298f;
      sa[88] = -1.6352696f;
      sa[89] = -1.1966395f;
      sa[90] = 0.17336833f;
      sa[91] = 0.02090279f;
      sa[92] = 1.2205058f;
      sa[93] = 1.8327353f;
      sa[94] = 1.5504272f;
      sa[95] = 0.5424106f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_11 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_11_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_11_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_11_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_ReLU_11_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_11_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


