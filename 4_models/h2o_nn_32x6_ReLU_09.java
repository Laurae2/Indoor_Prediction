/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:42:50.872+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_32x6_ReLU_09

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_32x6_ReLU_09 > h2o_nn_32x6_ReLU_09.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_32x6_ReLU_09.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_32x6_ReLU_09", algorithm="deeplearning")
public class h2o_nn_32x6_ReLU_09 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,32,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_32x6_ReLU_09_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_32x6_ReLU_09_Activation_1.VALUES,
      /* Softmax */ h2o_nn_32x6_ReLU_09_Activation_2.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_32x6_ReLU_09_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_32x6_ReLU_09_Bias_1.VALUES,
      /* Softmax */ h2o_nn_32x6_ReLU_09_Bias_2.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_32x6_ReLU_09_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_32x6_ReLU_09_Weight_1.VALUES,
      /* Softmax */ h2o_nn_32x6_ReLU_09_Weight_2.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_32x6_ReLU_09.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_32x6_ReLU_09_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25961538461538464,0.11538461538461539,0.11538461538461539,0.125,0.25961538461538464,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_32x6_ReLU_09() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-381278982168807584L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_32x6_ReLU_09_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_32x6_ReLU_09_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_09_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_32x6_ReLU_09_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_ReLU_09_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_09_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_32x6_ReLU_09_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_32x6_ReLU_09_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_09_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_32x6_ReLU_09_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_32x6_ReLU_09_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_ReLU_09_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_09_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.5020892349326193;
      sa[1] = 0.5178798131243191;
      sa[2] = 0.33248228141059577;
      sa[3] = 0.492500542713147;
      sa[4] = 0.5369699456575852;
      sa[5] = 0.5288713732935345;
      sa[6] = 0.5330995987330622;
      sa[7] = 0.4765373414348539;
      sa[8] = 0.4816296733738027;
      sa[9] = 0.5272000028514116;
      sa[10] = 0.5076040354042891;
      sa[11] = 0.48456673656183025;
      sa[12] = 0.46693119764478136;
      sa[13] = 0.4708826811309242;
      sa[14] = 0.478824864401467;
      sa[15] = 0.5501203865563769;
      sa[16] = 0.5480202885592698;
      sa[17] = 0.4349465125325134;
      sa[18] = 0.565137536751476;
      sa[19] = 0.4592892490912894;
      sa[20] = 0.44866696581797355;
      sa[21] = 0.5220354877332555;
      sa[22] = 0.47011809868508697;
      sa[23] = 0.4680716171274384;
      sa[24] = 0.5001905708177596;
      sa[25] = 0.4788863769489443;
      sa[26] = 0.5122943992348232;
      sa[27] = 0.4811772246416259;
      sa[28] = 0.45190821355628624;
      sa[29] = 0.5111177113302008;
      sa[30] = 0.559256121683012;
      sa[31] = 0.6221177060790317;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_32x6_ReLU_09_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_32x6_ReLU_09_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_09_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.015453532012450744;
      sa[1] = -0.02499434589385497;
      sa[2] = -0.02006609299135941;
      sa[3] = -0.04805064068759064;
      sa[4] = 0.0055319245072803945;
      sa[5] = -0.0659438720202858;
    }
  }
}
class h2o_nn_32x6_ReLU_09_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_32x6_ReLU_09_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[416];
  static {
    h2o_nn_32x6_ReLU_09_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_09_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.02957988f;
      sa[1] = 0.22706491f;
      sa[2] = 0.13094626f;
      sa[3] = 0.119227625f;
      sa[4] = -0.25417754f;
      sa[5] = -0.21158971f;
      sa[6] = -0.055349812f;
      sa[7] = 0.30353847f;
      sa[8] = 0.12434764f;
      sa[9] = -0.11706808f;
      sa[10] = -0.021325976f;
      sa[11] = -0.06848792f;
      sa[12] = -0.10729938f;
      sa[13] = -0.37379718f;
      sa[14] = -0.13731201f;
      sa[15] = -0.027097736f;
      sa[16] = 0.047874823f;
      sa[17] = -0.04418067f;
      sa[18] = -0.21986648f;
      sa[19] = 0.14425676f;
      sa[20] = 0.23161608f;
      sa[21] = -0.37995273f;
      sa[22] = 0.3148771f;
      sa[23] = -0.27213228f;
      sa[24] = 0.19267729f;
      sa[25] = 0.36870524f;
      sa[26] = -0.36960822f;
      sa[27] = 0.43019497f;
      sa[28] = 0.26708508f;
      sa[29] = -0.24352081f;
      sa[30] = -0.14849862f;
      sa[31] = 0.086244866f;
      sa[32] = 0.19330437f;
      sa[33] = -0.34696075f;
      sa[34] = 0.1139075f;
      sa[35] = -0.19467884f;
      sa[36] = 0.1528024f;
      sa[37] = 0.4248307f;
      sa[38] = -0.20210393f;
      sa[39] = 0.29405606f;
      sa[40] = 0.26786295f;
      sa[41] = 0.07641868f;
      sa[42] = -0.12670298f;
      sa[43] = -0.0034641847f;
      sa[44] = 0.2684032f;
      sa[45] = -0.5335827f;
      sa[46] = 0.07721664f;
      sa[47] = 0.1523703f;
      sa[48] = 0.12810494f;
      sa[49] = -0.111662164f;
      sa[50] = 0.16679879f;
      sa[51] = -0.26018208f;
      sa[52] = -0.10260537f;
      sa[53] = 0.23727688f;
      sa[54] = 0.21495974f;
      sa[55] = -0.10803283f;
      sa[56] = -0.4108189f;
      sa[57] = -0.19896601f;
      sa[58] = 0.12860928f;
      sa[59] = -0.20372324f;
      sa[60] = -0.33451307f;
      sa[61] = 0.3420828f;
      sa[62] = 0.23341681f;
      sa[63] = 0.08876953f;
      sa[64] = 0.13659948f;
      sa[65] = 0.120074175f;
      sa[66] = 0.007999296f;
      sa[67] = 0.1452853f;
      sa[68] = -0.17105919f;
      sa[69] = 0.12286998f;
      sa[70] = -0.030592136f;
      sa[71] = 0.28349355f;
      sa[72] = -0.20891428f;
      sa[73] = 0.21338129f;
      sa[74] = -0.1474621f;
      sa[75] = 0.020095367f;
      sa[76] = -0.28190088f;
      sa[77] = 0.059933342f;
      sa[78] = -0.08303874f;
      sa[79] = -0.013347f;
      sa[80] = -0.29946434f;
      sa[81] = -0.12782739f;
      sa[82] = 0.034326285f;
      sa[83] = 0.17622799f;
      sa[84] = 0.09098679f;
      sa[85] = -0.22928794f;
      sa[86] = 0.13960083f;
      sa[87] = 0.3906498f;
      sa[88] = 0.3990226f;
      sa[89] = -0.043571092f;
      sa[90] = -0.026394589f;
      sa[91] = 0.20731154f;
      sa[92] = 0.2824844f;
      sa[93] = -0.14711592f;
      sa[94] = -0.13589974f;
      sa[95] = -0.094856866f;
      sa[96] = 0.09265171f;
      sa[97] = 0.09410731f;
      sa[98] = 0.27253485f;
      sa[99] = -0.07047974f;
      sa[100] = -0.18353593f;
      sa[101] = -0.48957884f;
      sa[102] = -0.28890708f;
      sa[103] = -0.18547921f;
      sa[104] = 0.008722302f;
      sa[105] = -0.27961177f;
      sa[106] = -0.3083223f;
      sa[107] = 0.20635f;
      sa[108] = 0.22763532f;
      sa[109] = -0.23453413f;
      sa[110] = -0.14306824f;
      sa[111] = 0.18340194f;
      sa[112] = 0.1353733f;
      sa[113] = 0.0701224f;
      sa[114] = 0.06836288f;
      sa[115] = -0.16938466f;
      sa[116] = 0.0021539791f;
      sa[117] = -0.08572562f;
      sa[118] = -0.15786341f;
      sa[119] = -0.23815115f;
      sa[120] = 0.09746012f;
      sa[121] = 0.005337752f;
      sa[122] = 0.34790918f;
      sa[123] = 0.2210169f;
      sa[124] = 0.26531506f;
      sa[125] = 0.29651356f;
      sa[126] = -0.29212868f;
      sa[127] = -0.36181405f;
      sa[128] = 0.23298566f;
      sa[129] = -0.04526079f;
      sa[130] = -0.15271144f;
      sa[131] = 0.3413807f;
      sa[132] = 0.18933442f;
      sa[133] = -0.25526693f;
      sa[134] = 0.06154542f;
      sa[135] = -0.41994002f;
      sa[136] = -0.15171677f;
      sa[137] = -9.9886034E-5f;
      sa[138] = 0.15200458f;
      sa[139] = -0.19468807f;
      sa[140] = 0.019816412f;
      sa[141] = -0.20903574f;
      sa[142] = 0.19158114f;
      sa[143] = -0.4072852f;
      sa[144] = 0.2533517f;
      sa[145] = -0.22838171f;
      sa[146] = -0.31426215f;
      sa[147] = 0.022029482f;
      sa[148] = 0.20414814f;
      sa[149] = 0.32805857f;
      sa[150] = 0.3105856f;
      sa[151] = -0.33695605f;
      sa[152] = 0.08374586f;
      sa[153] = 0.47088578f;
      sa[154] = 0.09427624f;
      sa[155] = -0.043989565f;
      sa[156] = 0.16488089f;
      sa[157] = -0.28198177f;
      sa[158] = 0.074178904f;
      sa[159] = 0.1888975f;
      sa[160] = 0.18893448f;
      sa[161] = 0.13793167f;
      sa[162] = 0.0064040828f;
      sa[163] = -0.057862006f;
      sa[164] = 0.27971822f;
      sa[165] = -0.06503171f;
      sa[166] = 0.17914496f;
      sa[167] = -0.039637987f;
      sa[168] = 0.10475447f;
      sa[169] = 0.28660756f;
      sa[170] = -0.09000843f;
      sa[171] = -0.1412991f;
      sa[172] = -0.03490663f;
      sa[173] = -0.30922544f;
      sa[174] = -0.07582448f;
      sa[175] = -0.17583777f;
      sa[176] = -0.047507253f;
      sa[177] = -0.0968033f;
      sa[178] = 0.0078109126f;
      sa[179] = 0.49429762f;
      sa[180] = 0.021504259f;
      sa[181] = -0.35115805f;
      sa[182] = -0.1005669f;
      sa[183] = 0.040588476f;
      sa[184] = 0.4151726f;
      sa[185] = 0.32283723f;
      sa[186] = -0.16512871f;
      sa[187] = 0.07706738f;
      sa[188] = 0.035589352f;
      sa[189] = 0.28942224f;
      sa[190] = 0.11232881f;
      sa[191] = -0.15526517f;
      sa[192] = -0.19330823f;
      sa[193] = 0.06695694f;
      sa[194] = 0.33570093f;
      sa[195] = 0.363122f;
      sa[196] = 0.3425278f;
      sa[197] = -0.01384974f;
      sa[198] = 0.06712031f;
      sa[199] = 0.030484632f;
      sa[200] = 0.058632437f;
      sa[201] = -0.42965233f;
      sa[202] = 0.18623652f;
      sa[203] = -0.016711114f;
      sa[204] = -0.14869203f;
      sa[205] = 0.17092343f;
      sa[206] = 0.44503638f;
      sa[207] = -0.13397574f;
      sa[208] = -0.36729854f;
      sa[209] = -0.10621217f;
      sa[210] = -0.4050975f;
      sa[211] = -0.45093593f;
      sa[212] = 0.09275387f;
      sa[213] = -0.22355953f;
      sa[214] = -0.23604599f;
      sa[215] = 0.031408112f;
      sa[216] = 0.052421216f;
      sa[217] = 0.31876236f;
      sa[218] = -0.15867288f;
      sa[219] = 0.28335404f;
      sa[220] = -0.24954543f;
      sa[221] = 0.0035039831f;
      sa[222] = 0.22226402f;
      sa[223] = 0.03583782f;
      sa[224] = 0.19478609f;
      sa[225] = 0.37297586f;
      sa[226] = -0.37160826f;
      sa[227] = 0.6112166f;
      sa[228] = 0.14410357f;
      sa[229] = 0.08240222f;
      sa[230] = 0.24616253f;
      sa[231] = -0.10516648f;
      sa[232] = -0.29750705f;
      sa[233] = 0.06221276f;
      sa[234] = 0.19730468f;
      sa[235] = -0.1036855f;
      sa[236] = 0.06557682f;
      sa[237] = -0.3829382f;
      sa[238] = -0.5036155f;
      sa[239] = 0.114938594f;
      sa[240] = -0.10305929f;
      sa[241] = -0.25139165f;
      sa[242] = -0.0077886693f;
      sa[243] = -0.33142853f;
      sa[244] = -0.5427692f;
      sa[245] = -0.15384378f;
      sa[246] = -0.4454093f;
      sa[247] = -0.06894217f;
      sa[248] = 0.25025198f;
      sa[249] = 0.32298183f;
      sa[250] = -0.14285767f;
      sa[251] = -0.07035698f;
      sa[252] = -0.35337782f;
      sa[253] = -0.27810237f;
      sa[254] = -0.3118677f;
      sa[255] = 0.21558951f;
      sa[256] = -0.2644336f;
      sa[257] = 0.37999848f;
      sa[258] = -0.5037477f;
      sa[259] = 0.12060517f;
      sa[260] = -0.29277086f;
      sa[261] = -0.1321887f;
      sa[262] = -0.18730907f;
      sa[263] = 0.25660902f;
      sa[264] = -0.075570546f;
      sa[265] = 0.09456702f;
      sa[266] = -0.23507556f;
      sa[267] = -0.36894274f;
      sa[268] = 0.06276687f;
      sa[269] = -0.20015962f;
      sa[270] = -0.09233681f;
      sa[271] = 0.19947633f;
      sa[272] = -0.28108817f;
      sa[273] = -0.14275423f;
      sa[274] = 0.1541468f;
      sa[275] = 0.028614767f;
      sa[276] = 0.06866903f;
      sa[277] = -0.2812889f;
      sa[278] = -0.04002009f;
      sa[279] = 0.15959404f;
      sa[280] = -0.23386955f;
      sa[281] = 0.33186537f;
      sa[282] = -0.10149015f;
      sa[283] = -0.1940092f;
      sa[284] = -0.022864291f;
      sa[285] = -0.02019043f;
      sa[286] = 0.35016996f;
      sa[287] = 0.11621341f;
      sa[288] = -0.21137324f;
      sa[289] = -0.121284366f;
      sa[290] = -0.0085655f;
      sa[291] = -0.023584628f;
      sa[292] = 0.098036036f;
      sa[293] = -0.036313925f;
      sa[294] = 0.14140259f;
      sa[295] = 0.117759444f;
      sa[296] = 0.36106747f;
      sa[297] = 0.37736768f;
      sa[298] = -0.19032939f;
      sa[299] = -0.026009694f;
      sa[300] = 0.06853213f;
      sa[301] = -0.05236853f;
      sa[302] = 0.17744958f;
      sa[303] = 0.08550976f;
      sa[304] = -0.26347256f;
      sa[305] = -0.098447755f;
      sa[306] = 0.25653592f;
      sa[307] = -0.17981763f;
      sa[308] = 0.07981139f;
      sa[309] = 0.04266024f;
      sa[310] = 0.48448834f;
      sa[311] = 0.10901444f;
      sa[312] = -0.25504348f;
      sa[313] = -0.27592972f;
      sa[314] = -0.20045516f;
      sa[315] = 0.0109010665f;
      sa[316] = -0.06505687f;
      sa[317] = -0.06779213f;
      sa[318] = 0.08104966f;
      sa[319] = 0.3137843f;
      sa[320] = -0.0673388f;
      sa[321] = 0.20173301f;
      sa[322] = 0.4329704f;
      sa[323] = -0.3034505f;
      sa[324] = 0.267437f;
      sa[325] = 0.30906287f;
      sa[326] = -0.4887022f;
      sa[327] = -0.094355814f;
      sa[328] = 9.834471E-4f;
      sa[329] = 0.33278227f;
      sa[330] = -0.32120514f;
      sa[331] = 0.31344742f;
      sa[332] = -0.31440035f;
      sa[333] = 0.07772335f;
      sa[334] = -0.09540544f;
      sa[335] = 0.55579674f;
      sa[336] = -0.2357393f;
      sa[337] = -0.2179664f;
      sa[338] = 0.3088611f;
      sa[339] = -0.23603655f;
      sa[340] = -0.34270254f;
      sa[341] = -0.3227672f;
      sa[342] = 0.15207067f;
      sa[343] = -0.03460506f;
      sa[344] = -0.30903858f;
      sa[345] = 0.21038152f;
      sa[346] = 0.23996948f;
      sa[347] = -0.17842521f;
      sa[348] = 0.22401617f;
      sa[349] = -0.40831548f;
      sa[350] = -0.1238166f;
      sa[351] = 0.12137736f;
      sa[352] = 0.30433503f;
      sa[353] = -0.070981055f;
      sa[354] = 0.07070764f;
      sa[355] = 0.12245823f;
      sa[356] = -0.22860165f;
      sa[357] = 0.32036358f;
      sa[358] = -0.34502122f;
      sa[359] = 0.023431178f;
      sa[360] = 0.09460721f;
      sa[361] = -0.13820353f;
      sa[362] = -0.11753778f;
      sa[363] = 0.02290697f;
      sa[364] = -0.045697805f;
      sa[365] = -0.22434717f;
      sa[366] = 0.07089328f;
      sa[367] = -0.22512744f;
      sa[368] = 0.07347674f;
      sa[369] = 0.27016684f;
      sa[370] = -0.2460031f;
      sa[371] = 0.18321036f;
      sa[372] = 0.040807474f;
      sa[373] = 0.2438179f;
      sa[374] = -0.21389803f;
      sa[375] = -0.23899293f;
      sa[376] = -0.4229151f;
      sa[377] = -0.23938632f;
      sa[378] = 0.408345f;
      sa[379] = 0.10962595f;
      sa[380] = -0.064279646f;
      sa[381] = -0.08919927f;
      sa[382] = -0.16965431f;
      sa[383] = 0.16667087f;
      sa[384] = -0.16537136f;
      sa[385] = 0.13657442f;
      sa[386] = -0.39105323f;
      sa[387] = -0.2961485f;
      sa[388] = 0.08122724f;
      sa[389] = -0.08535697f;
      sa[390] = -0.014309434f;
      sa[391] = -0.099841684f;
      sa[392] = 0.27344492f;
      sa[393] = 0.14069149f;
      sa[394] = -0.13919428f;
      sa[395] = 0.48365176f;
      sa[396] = 0.2652652f;
      sa[397] = -0.3706247f;
      sa[398] = 0.09265136f;
      sa[399] = 0.23463649f;
      sa[400] = 0.08373429f;
      sa[401] = 0.29123718f;
      sa[402] = -0.15301238f;
      sa[403] = 0.20312345f;
      sa[404] = 0.3965068f;
      sa[405] = -0.1375042f;
      sa[406] = -0.024180906f;
      sa[407] = 0.2777151f;
      sa[408] = -0.32964474f;
      sa[409] = -0.23107365f;
      sa[410] = -0.07222978f;
      sa[411] = 0.31692687f;
      sa[412] = -0.3281478f;
      sa[413] = -0.2797876f;
      sa[414] = 0.11098344f;
      sa[415] = 0.23674573f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_32x6_ReLU_09_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[192];
  static {
    h2o_nn_32x6_ReLU_09_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_09_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 1.1457162f;
      sa[1] = -0.1792538f;
      sa[2] = -0.44698843f;
      sa[3] = -0.839639f;
      sa[4] = 0.096617766f;
      sa[5] = 0.17057341f;
      sa[6] = 1.2683147f;
      sa[7] = -0.6241854f;
      sa[8] = -0.92500746f;
      sa[9] = 0.64366996f;
      sa[10] = -0.32780275f;
      sa[11] = 0.52630717f;
      sa[12] = 0.17286067f;
      sa[13] = 0.16993625f;
      sa[14] = -1.2787411f;
      sa[15] = 1.1023451f;
      sa[16] = 1.6542628f;
      sa[17] = -0.682855f;
      sa[18] = 0.11316538f;
      sa[19] = -0.569233f;
      sa[20] = 1.1998867f;
      sa[21] = 0.015738234f;
      sa[22] = -0.9301669f;
      sa[23] = 0.6441289f;
      sa[24] = -1.3500855f;
      sa[25] = 0.45942128f;
      sa[26] = -0.19152045f;
      sa[27] = 1.2804421f;
      sa[28] = -1.3319393f;
      sa[29] = -0.4466742f;
      sa[30] = 0.4960291f;
      sa[31] = -0.9089427f;
      sa[32] = -1.1630034f;
      sa[33] = -1.5246421f;
      sa[34] = 0.009305184f;
      sa[35] = 1.3715547f;
      sa[36] = -0.58005357f;
      sa[37] = -0.07725139f;
      sa[38] = 0.09758398f;
      sa[39] = 0.7976675f;
      sa[40] = -0.73677284f;
      sa[41] = -1.2680705f;
      sa[42] = -1.0481833f;
      sa[43] = -1.418224f;
      sa[44] = 0.04592095f;
      sa[45] = -1.347284f;
      sa[46] = 1.1817567f;
      sa[47] = 1.3625747f;
      sa[48] = -1.3226935f;
      sa[49] = -0.96622264f;
      sa[50] = 0.37230518f;
      sa[51] = -0.3847848f;
      sa[52] = 0.80111384f;
      sa[53] = 0.82940924f;
      sa[54] = -0.26931176f;
      sa[55] = 1.0986565f;
      sa[56] = -1.1524957f;
      sa[57] = -1.105065f;
      sa[58] = 0.1639671f;
      sa[59] = -0.21274017f;
      sa[60] = 1.3366084f;
      sa[61] = -0.57908595f;
      sa[62] = -0.3666992f;
      sa[63] = 0.6913771f;
      sa[64] = 1.4631177f;
      sa[65] = -0.6899781f;
      sa[66] = 0.66398007f;
      sa[67] = 1.6015459f;
      sa[68] = 0.69188327f;
      sa[69] = -1.0591542f;
      sa[70] = -1.5353131f;
      sa[71] = -0.41896245f;
      sa[72] = -1.2573335f;
      sa[73] = 1.1114451f;
      sa[74] = 1.3261441f;
      sa[75] = -0.09834906f;
      sa[76] = 0.83337295f;
      sa[77] = 0.5386641f;
      sa[78] = -1.269071f;
      sa[79] = 1.0197043f;
      sa[80] = -0.7354306f;
      sa[81] = 0.20022115f;
      sa[82] = 0.8360418f;
      sa[83] = -0.58760923f;
      sa[84] = -1.524654f;
      sa[85] = -1.2449232f;
      sa[86] = 0.27814004f;
      sa[87] = 1.2366532f;
      sa[88] = -1.6034734f;
      sa[89] = -0.53872126f;
      sa[90] = -1.0514883f;
      sa[91] = 1.4638275f;
      sa[92] = -0.31226912f;
      sa[93] = 0.32462558f;
      sa[94] = -1.5360371f;
      sa[95] = -0.19500189f;
      sa[96] = -1.0641643f;
      sa[97] = 0.19057713f;
      sa[98] = -0.19820881f;
      sa[99] = 0.10992139f;
      sa[100] = -1.1834272f;
      sa[101] = -0.30821598f;
      sa[102] = 1.1894995f;
      sa[103] = 0.015924498f;
      sa[104] = -0.15139472f;
      sa[105] = -0.5806534f;
      sa[106] = 1.4649507f;
      sa[107] = 1.0189115f;
      sa[108] = 0.7020232f;
      sa[109] = 0.018948209f;
      sa[110] = 0.6524333f;
      sa[111] = -0.95061487f;
      sa[112] = -1.2468241f;
      sa[113] = 0.26862922f;
      sa[114] = 0.12671205f;
      sa[115] = -0.23443875f;
      sa[116] = 1.0329536f;
      sa[117] = 0.10651555f;
      sa[118] = -1.4172691f;
      sa[119] = -0.8259593f;
      sa[120] = -0.27592877f;
      sa[121] = 1.1839684f;
      sa[122] = -0.09271641f;
      sa[123] = 0.41649765f;
      sa[124] = -0.8118363f;
      sa[125] = 0.7663013f;
      sa[126] = -1.0994408f;
      sa[127] = 0.4991227f;
      sa[128] = -0.8772081f;
      sa[129] = 0.77765554f;
      sa[130] = -0.4499156f;
      sa[131] = 0.862355f;
      sa[132] = 0.47129437f;
      sa[133] = 0.5774413f;
      sa[134] = 0.67460287f;
      sa[135] = -1.0579035f;
      sa[136] = 0.3913384f;
      sa[137] = -0.5835875f;
      sa[138] = -0.056414273f;
      sa[139] = 1.0862035f;
      sa[140] = -0.43159083f;
      sa[141] = -0.11010066f;
      sa[142] = 0.3219372f;
      sa[143] = -0.7788566f;
      sa[144] = 0.8271002f;
      sa[145] = -0.7932433f;
      sa[146] = 0.057109643f;
      sa[147] = -0.2638915f;
      sa[148] = -0.9028089f;
      sa[149] = 1.0691135f;
      sa[150] = -1.127073f;
      sa[151] = -1.5566703f;
      sa[152] = 1.5765541f;
      sa[153] = -0.7131084f;
      sa[154] = 1.2903669f;
      sa[155] = -1.5212414f;
      sa[156] = -1.3865488f;
      sa[157] = -1.1234635f;
      sa[158] = -0.2606427f;
      sa[159] = -0.5676215f;
      sa[160] = 1.2063963f;
      sa[161] = -1.0451381f;
      sa[162] = 1.393456f;
      sa[163] = -0.81362176f;
      sa[164] = 0.6890075f;
      sa[165] = -0.5664023f;
      sa[166] = 1.3759588f;
      sa[167] = -1.566683f;
      sa[168] = 1.0608685f;
      sa[169] = -1.497433f;
      sa[170] = 0.966254f;
      sa[171] = 0.9504854f;
      sa[172] = 1.4935817f;
      sa[173] = 1.4364443f;
      sa[174] = -0.20349973f;
      sa[175] = -0.06953772f;
      sa[176] = -0.8739521f;
      sa[177] = 0.12199273f;
      sa[178] = -1.2326736f;
      sa[179] = -0.402448f;
      sa[180] = -1.4874018f;
      sa[181] = -1.085999f;
      sa[182] = 0.38826996f;
      sa[183] = -0.94844234f;
      sa[184] = 1.4898804f;
      sa[185] = 1.3443798f;
      sa[186] = -0.51583457f;
      sa[187] = -1.0376272f;
      sa[188] = -0.5490834f;
      sa[189] = -1.0180475f;
      sa[190] = -1.4333276f;
      sa[191] = -1.139687f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_32x6_ReLU_09 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_32x6_ReLU_09_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_32x6_ReLU_09_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_32x6_ReLU_09_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_32x6_ReLU_09_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_09_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


