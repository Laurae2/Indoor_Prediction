/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:41:45.648+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_04

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_04 > h2o_nn_16x16x6_Tanh_04.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_04.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_04", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_04 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,16,16,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_04_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_04_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_04_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_04_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_04_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_04_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_04_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_04_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_04_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_04_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_04_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_04_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_04.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_04_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.24528301886792453,0.12264150943396226,0.12264150943396226,0.1320754716981132,0.24528301886792453,0.1320754716981132};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_04() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-6033036804546941212L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_04_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_16x16x6_Tanh_04_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_04_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_04_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_04_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_04_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_04_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_04_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_04_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_04_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_04_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_04_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_04_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_04_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_04_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_04_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.01004186302180705;
      sa[1] = 0.050886930458487085;
      sa[2] = -0.050157934370828;
      sa[3] = -0.09172264987078341;
      sa[4] = 0.016472890868453577;
      sa[5] = 0.08731810736891041;
      sa[6] = -0.07913830831157058;
      sa[7] = -0.23937471692955706;
      sa[8] = 0.05929867699242054;
      sa[9] = 0.014954557299208308;
      sa[10] = -0.09375583114935246;
      sa[11] = 0.09869966796184464;
      sa[12] = -0.033309888618835305;
      sa[13] = -0.11435500871151563;
      sa[14] = -0.15148441713962096;
      sa[15] = -0.0262227130264098;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_04_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_04_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_04_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.048278677044333;
      sa[1] = 0.10024899400281612;
      sa[2] = -0.02924601513843845;
      sa[3] = 0.07701143475495412;
      sa[4] = -0.08186647193796083;
      sa[5] = 0.04515897844729497;
      sa[6] = -0.007269265130235445;
      sa[7] = 0.1140703206457163;
      sa[8] = 9.976855903283495E-4;
      sa[9] = 0.04159858115563174;
      sa[10] = 0.07295233439988459;
      sa[11] = 0.16491989186957018;
      sa[12] = -0.09230059895236466;
      sa[13] = 0.11998183350582906;
      sa[14] = -0.040282506420325256;
      sa[15] = -0.06075463865319163;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_04_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_16x16x6_Tanh_04_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_04_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0019964473020590524;
      sa[1] = -0.04051986044351702;
      sa[2] = -0.20103243019679393;
      sa[3] = 0.06121149294376309;
      sa[4] = 0.016901542033247074;
      sa[5] = -0.19190021201262356;
    }
  }
}
class h2o_nn_16x16x6_Tanh_04_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_04_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[208];
  static {
    h2o_nn_16x16x6_Tanh_04_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_04_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.18152422f;
      sa[1] = 0.48401824f;
      sa[2] = 0.21863875f;
      sa[3] = 0.14577359f;
      sa[4] = -0.074193835f;
      sa[5] = -0.24964136f;
      sa[6] = -0.28691295f;
      sa[7] = 0.40295753f;
      sa[8] = 0.2345482f;
      sa[9] = -0.23272955f;
      sa[10] = 0.030472256f;
      sa[11] = -0.24760027f;
      sa[12] = 0.19312683f;
      sa[13] = -0.33540124f;
      sa[14] = -0.61436325f;
      sa[15] = -0.058102254f;
      sa[16] = -0.07511788f;
      sa[17] = -0.10695883f;
      sa[18] = -0.2062118f;
      sa[19] = 0.044543855f;
      sa[20] = 0.32942975f;
      sa[21] = -0.37754285f;
      sa[22] = 0.43263558f;
      sa[23] = -0.1637951f;
      sa[24] = 0.36221984f;
      sa[25] = 0.40772492f;
      sa[26] = -0.50848097f;
      sa[27] = 0.43876317f;
      sa[28] = 0.3931374f;
      sa[29] = -0.21956675f;
      sa[30] = -0.38533148f;
      sa[31] = 0.2081217f;
      sa[32] = 0.602364f;
      sa[33] = -0.48646992f;
      sa[34] = 0.08729367f;
      sa[35] = -0.13678947f;
      sa[36] = -0.21588498f;
      sa[37] = 0.4165637f;
      sa[38] = -0.36134908f;
      sa[39] = 0.28502318f;
      sa[40] = 0.033938408f;
      sa[41] = -0.23338923f;
      sa[42] = -0.36819315f;
      sa[43] = -0.16741396f;
      sa[44] = 0.46280038f;
      sa[45] = -0.5426854f;
      sa[46] = -0.011447575f;
      sa[47] = 0.038976908f;
      sa[48] = 0.34957603f;
      sa[49] = 0.43886068f;
      sa[50] = 0.34946862f;
      sa[51] = -0.41232374f;
      sa[52] = -0.15589868f;
      sa[53] = 0.38418278f;
      sa[54] = 0.30237776f;
      sa[55] = -0.06606633f;
      sa[56] = -0.40518707f;
      sa[57] = -0.297574f;
      sa[58] = 0.41146505f;
      sa[59] = -0.2955854f;
      sa[60] = -0.41566464f;
      sa[61] = 0.30112433f;
      sa[62] = -0.10106627f;
      sa[63] = 0.06706675f;
      sa[64] = 0.06665096f;
      sa[65] = 0.14919731f;
      sa[66] = 0.2591449f;
      sa[67] = 0.411335f;
      sa[68] = 0.2386395f;
      sa[69] = 0.42060417f;
      sa[70] = -0.25027484f;
      sa[71] = 0.5646356f;
      sa[72] = -0.14600855f;
      sa[73] = 0.2800722f;
      sa[74] = -0.2644645f;
      sa[75] = -0.077524975f;
      sa[76] = -0.26989195f;
      sa[77] = -0.30265394f;
      sa[78] = -0.11803921f;
      sa[79] = 0.32208332f;
      sa[80] = -0.25858033f;
      sa[81] = -0.18823233f;
      sa[82] = -0.07003057f;
      sa[83] = 0.28203997f;
      sa[84] = -0.2797133f;
      sa[85] = -0.25769132f;
      sa[86] = 0.2127534f;
      sa[87] = 0.4370951f;
      sa[88] = 0.12118685f;
      sa[89] = 0.09921803f;
      sa[90] = -0.2759568f;
      sa[91] = 0.021771956f;
      sa[92] = 0.33797914f;
      sa[93] = -0.34395525f;
      sa[94] = -0.37070727f;
      sa[95] = -0.4695844f;
      sa[96] = 0.3511799f;
      sa[97] = 0.1087467f;
      sa[98] = 0.2619328f;
      sa[99] = -0.18169637f;
      sa[100] = -0.009961695f;
      sa[101] = -0.66204745f;
      sa[102] = -0.5297745f;
      sa[103] = -0.08796986f;
      sa[104] = 0.05080636f;
      sa[105] = -0.36106566f;
      sa[106] = -0.22365814f;
      sa[107] = 0.14316484f;
      sa[108] = 0.24993478f;
      sa[109] = -0.30191177f;
      sa[110] = -0.4564819f;
      sa[111] = 0.22855693f;
      sa[112] = 0.2163542f;
      sa[113] = 0.15880859f;
      sa[114] = -0.4115081f;
      sa[115] = 0.20611288f;
      sa[116] = -0.5106824f;
      sa[117] = -0.0058406666f;
      sa[118] = -0.56227684f;
      sa[119] = -0.35603106f;
      sa[120] = 0.031429138f;
      sa[121] = 0.08983002f;
      sa[122] = 0.51344126f;
      sa[123] = 0.36174875f;
      sa[124] = 0.38142976f;
      sa[125] = 0.43772578f;
      sa[126] = -0.3792967f;
      sa[127] = -0.10039106f;
      sa[128] = 0.07951011f;
      sa[129] = 0.39398947f;
      sa[130] = -0.25712535f;
      sa[131] = 0.820155f;
      sa[132] = 0.2844543f;
      sa[133] = -0.505705f;
      sa[134] = 0.09525783f;
      sa[135] = -0.20443574f;
      sa[136] = -0.4260033f;
      sa[137] = -0.018624498f;
      sa[138] = 0.14251663f;
      sa[139] = -0.08385158f;
      sa[140] = -0.54158187f;
      sa[141] = -0.1672956f;
      sa[142] = 0.10395276f;
      sa[143] = -0.40841362f;
      sa[144] = 0.60680085f;
      sa[145] = -0.14106739f;
      sa[146] = -0.0843641f;
      sa[147] = 0.47226763f;
      sa[148] = 0.08625468f;
      sa[149] = 0.5134226f;
      sa[150] = 0.46385273f;
      sa[151] = -0.38467857f;
      sa[152] = -0.027010553f;
      sa[153] = 0.39452523f;
      sa[154] = 0.29142222f;
      sa[155] = -0.2917358f;
      sa[156] = 0.10105134f;
      sa[157] = -0.25947806f;
      sa[158] = 0.13106506f;
      sa[159] = 0.055440277f;
      sa[160] = -0.06723965f;
      sa[161] = 0.3706531f;
      sa[162] = -0.029326316f;
      sa[163] = -0.14887547f;
      sa[164] = 0.32932743f;
      sa[165] = -0.0568602f;
      sa[166] = -0.5088119f;
      sa[167] = -0.1840272f;
      sa[168] = 0.20494153f;
      sa[169] = 0.39810133f;
      sa[170] = -0.23286916f;
      sa[171] = -0.17504933f;
      sa[172] = -0.20404844f;
      sa[173] = -0.46651363f;
      sa[174] = 1.373074E-4f;
      sa[175] = -0.26581943f;
      sa[176] = -0.16737738f;
      sa[177] = -0.0803865f;
      sa[178] = -0.037063513f;
      sa[179] = 0.27034172f;
      sa[180] = 0.036883436f;
      sa[181] = -0.4463442f;
      sa[182] = -0.15500702f;
      sa[183] = 0.48671818f;
      sa[184] = 0.42045987f;
      sa[185] = 0.26780388f;
      sa[186] = -0.2457165f;
      sa[187] = 0.16324152f;
      sa[188] = -0.32658556f;
      sa[189] = 0.32763138f;
      sa[190] = 0.046266213f;
      sa[191] = -0.013664608f;
      sa[192] = -0.3742303f;
      sa[193] = 0.49302405f;
      sa[194] = 0.03918147f;
      sa[195] = 0.4482746f;
      sa[196] = 0.4994135f;
      sa[197] = -0.18116362f;
      sa[198] = 0.02246491f;
      sa[199] = -0.032616656f;
      sa[200] = 0.044953376f;
      sa[201] = -0.52633226f;
      sa[202] = 0.19012272f;
      sa[203] = -0.013131042f;
      sa[204] = -0.26714754f;
      sa[205] = 0.56222093f;
      sa[206] = 0.38894528f;
      sa[207] = 0.2938198f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_04_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_04_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_04_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.55121446f;
      sa[1] = -0.098324865f;
      sa[2] = -0.37701893f;
      sa[3] = -0.4786457f;
      sa[4] = 0.06427057f;
      sa[5] = 0.24593471f;
      sa[6] = 0.104208544f;
      sa[7] = -0.15265502f;
      sa[8] = -0.5460114f;
      sa[9] = 0.32190323f;
      sa[10] = 0.043537874f;
      sa[11] = 0.04947166f;
      sa[12] = 0.13592452f;
      sa[13] = -0.20466891f;
      sa[14] = -0.5986068f;
      sa[15] = 0.30145225f;
      sa[16] = 0.59073174f;
      sa[17] = -0.31425357f;
      sa[18] = 0.0030182074f;
      sa[19] = -0.18840533f;
      sa[20] = 0.31077302f;
      sa[21] = 0.1612107f;
      sa[22] = -0.24747342f;
      sa[23] = 0.274976f;
      sa[24] = -0.15664023f;
      sa[25] = -0.022375084f;
      sa[26] = 0.22442369f;
      sa[27] = 0.52861786f;
      sa[28] = -0.4301604f;
      sa[29] = -0.19656536f;
      sa[30] = 0.21307531f;
      sa[31] = -0.10421112f;
      sa[32] = -0.2254668f;
      sa[33] = -0.49065763f;
      sa[34] = 0.02321204f;
      sa[35] = 0.23525874f;
      sa[36] = 0.05901177f;
      sa[37] = 0.35826135f;
      sa[38] = -0.047610324f;
      sa[39] = -0.040639423f;
      sa[40] = -0.17706047f;
      sa[41] = -0.42541355f;
      sa[42] = -0.3140246f;
      sa[43] = -0.19996764f;
      sa[44] = -0.15977685f;
      sa[45] = -0.4906998f;
      sa[46] = 0.27792934f;
      sa[47] = 0.49043489f;
      sa[48] = -0.33273488f;
      sa[49] = -0.30441958f;
      sa[50] = 0.17378955f;
      sa[51] = -0.19927892f;
      sa[52] = 0.293082f;
      sa[53] = 0.3718481f;
      sa[54] = -0.1618406f;
      sa[55] = 0.5256339f;
      sa[56] = -0.18660934f;
      sa[57] = -0.25897488f;
      sa[58] = 0.056965042f;
      sa[59] = -0.11531084f;
      sa[60] = 0.41422603f;
      sa[61] = -0.20920298f;
      sa[62] = -0.03057826f;
      sa[63] = -0.077617325f;
      sa[64] = 0.2893173f;
      sa[65] = -0.15461111f;
      sa[66] = 0.29279816f;
      sa[67] = 0.48687005f;
      sa[68] = 0.24521029f;
      sa[69] = -0.3454949f;
      sa[70] = -0.3305794f;
      sa[71] = -0.079769395f;
      sa[72] = -0.51537555f;
      sa[73] = 0.33946374f;
      sa[74] = 0.24794471f;
      sa[75] = 0.033881858f;
      sa[76] = 0.20114525f;
      sa[77] = 0.2333323f;
      sa[78] = -0.34627742f;
      sa[79] = 0.2565511f;
      sa[80] = -0.19345316f;
      sa[81] = 0.14659873f;
      sa[82] = 0.13437173f;
      sa[83] = -0.29000178f;
      sa[84] = -0.32350847f;
      sa[85] = -0.06562288f;
      sa[86] = -0.13936995f;
      sa[87] = 0.048502598f;
      sa[88] = -0.36979237f;
      sa[89] = -0.0735563f;
      sa[90] = -0.49548396f;
      sa[91] = 0.41295218f;
      sa[92] = -0.13514586f;
      sa[93] = -0.028840289f;
      sa[94] = -0.5867111f;
      sa[95] = -0.074753225f;
      sa[96] = -0.1615186f;
      sa[97] = -0.06237669f;
      sa[98] = -0.040878974f;
      sa[99] = -0.09958823f;
      sa[100] = -0.20347564f;
      sa[101] = 0.12316896f;
      sa[102] = 0.23338237f;
      sa[103] = 0.067697294f;
      sa[104] = -0.05935063f;
      sa[105] = -0.1577743f;
      sa[106] = 0.5225855f;
      sa[107] = 0.36815155f;
      sa[108] = 0.17200239f;
      sa[109] = -0.14946319f;
      sa[110] = 0.1462497f;
      sa[111] = -0.27373466f;
      sa[112] = -0.38492835f;
      sa[113] = 0.13210496f;
      sa[114] = 0.13729097f;
      sa[115] = -0.20807697f;
      sa[116] = 0.41659075f;
      sa[117] = 0.2928389f;
      sa[118] = -0.5431483f;
      sa[119] = -0.20295988f;
      sa[120] = -0.07427616f;
      sa[121] = 0.41783613f;
      sa[122] = -0.3920341f;
      sa[123] = 0.023518104f;
      sa[124] = -0.19674961f;
      sa[125] = 0.21279775f;
      sa[126] = -0.39883086f;
      sa[127] = -0.18568285f;
      sa[128] = -0.42595002f;
      sa[129] = 0.26398253f;
      sa[130] = 0.1276264f;
      sa[131] = 0.3241899f;
      sa[132] = 0.118991114f;
      sa[133] = 0.07665512f;
      sa[134] = 0.28272796f;
      sa[135] = -0.12646742f;
      sa[136] = 0.37635064f;
      sa[137] = -0.21419153f;
      sa[138] = -0.084787495f;
      sa[139] = 0.31667313f;
      sa[140] = -0.19277169f;
      sa[141] = 0.08112709f;
      sa[142] = 0.25819188f;
      sa[143] = -0.45228276f;
      sa[144] = 0.18144178f;
      sa[145] = -0.14531907f;
      sa[146] = 0.024270622f;
      sa[147] = 0.057611145f;
      sa[148] = -0.30850777f;
      sa[149] = 0.17351775f;
      sa[150] = -0.1568136f;
      sa[151] = -0.7049163f;
      sa[152] = 0.8277931f;
      sa[153] = -0.2443744f;
      sa[154] = 0.35273355f;
      sa[155] = -0.3453016f;
      sa[156] = -0.40479338f;
      sa[157] = -0.23499979f;
      sa[158] = 0.19066872f;
      sa[159] = -0.049421366f;
      sa[160] = 0.2618187f;
      sa[161] = -0.25549614f;
      sa[162] = 0.55704737f;
      sa[163] = -0.20858738f;
      sa[164] = 0.2619547f;
      sa[165] = 0.005526688f;
      sa[166] = 0.33475485f;
      sa[167] = -0.38899013f;
      sa[168] = 0.61311984f;
      sa[169] = -0.4642423f;
      sa[170] = 0.14417666f;
      sa[171] = 0.26099673f;
      sa[172] = 0.339993f;
      sa[173] = 0.4574388f;
      sa[174] = 0.07025848f;
      sa[175] = -0.2416877f;
      sa[176] = -0.29658222f;
      sa[177] = 0.14569417f;
      sa[178] = -0.4070503f;
      sa[179] = -0.05771998f;
      sa[180] = -0.48433444f;
      sa[181] = -0.45300293f;
      sa[182] = 0.017434958f;
      sa[183] = -0.044009224f;
      sa[184] = 0.27927816f;
      sa[185] = 0.4858325f;
      sa[186] = -0.2797175f;
      sa[187] = -0.65771854f;
      sa[188] = 0.15039092f;
      sa[189] = -0.14081094f;
      sa[190] = -0.50549847f;
      sa[191] = -0.6098286f;
      sa[192] = -0.20847078f;
      sa[193] = 0.19470434f;
      sa[194] = -0.19321433f;
      sa[195] = -0.022652162f;
      sa[196] = 0.07797424f;
      sa[197] = -0.44706333f;
      sa[198] = 0.20283802f;
      sa[199] = 0.44288692f;
      sa[200] = 0.003460963f;
      sa[201] = 0.21451633f;
      sa[202] = 0.07119536f;
      sa[203] = -0.40391433f;
      sa[204] = 0.13250615f;
      sa[205] = 0.56780547f;
      sa[206] = -0.026208203f;
      sa[207] = 0.18903074f;
      sa[208] = -0.14789164f;
      sa[209] = 0.2256937f;
      sa[210] = -0.18579563f;
      sa[211] = -0.46160534f;
      sa[212] = -0.22363213f;
      sa[213] = 0.31642735f;
      sa[214] = -0.5508217f;
      sa[215] = -0.2754413f;
      sa[216] = -0.02656047f;
      sa[217] = 0.4495173f;
      sa[218] = -0.11451164f;
      sa[219] = 0.07792743f;
      sa[220] = 0.11579793f;
      sa[221] = -0.16377605f;
      sa[222] = -0.5246357f;
      sa[223] = -0.3759588f;
      sa[224] = 0.3365576f;
      sa[225] = 0.12143389f;
      sa[226] = -0.2268296f;
      sa[227] = -0.03233828f;
      sa[228] = -0.08997363f;
      sa[229] = -0.06288951f;
      sa[230] = -0.38822109f;
      sa[231] = -0.6137447f;
      sa[232] = 0.22854148f;
      sa[233] = -0.12413772f;
      sa[234] = -0.24986695f;
      sa[235] = 0.105214246f;
      sa[236] = -0.45546678f;
      sa[237] = 0.29760078f;
      sa[238] = -0.065635115f;
      sa[239] = 0.1847649f;
      sa[240] = -0.12828557f;
      sa[241] = -0.41596392f;
      sa[242] = -0.26686883f;
      sa[243] = 0.47771987f;
      sa[244] = 0.13379699f;
      sa[245] = 0.29682606f;
      sa[246] = 0.38380444f;
      sa[247] = -0.7112935f;
      sa[248] = -0.17206693f;
      sa[249] = -0.2609153f;
      sa[250] = 0.22974862f;
      sa[251] = 0.6133887f;
      sa[252] = 0.057345465f;
      sa[253] = -0.282903f;
      sa[254] = 0.41942814f;
      sa[255] = 0.62132114f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_04_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    h2o_nn_16x16x6_Tanh_04_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_04_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -6.1294355E-4f;
      sa[1] = -1.6153615f;
      sa[2] = -1.6204717f;
      sa[3] = 1.2934288f;
      sa[4] = 0.25064817f;
      sa[5] = -0.146985f;
      sa[6] = -1.6300969f;
      sa[7] = 1.5512897f;
      sa[8] = 1.9181099f;
      sa[9] = 0.11859865f;
      sa[10] = 1.7150422f;
      sa[11] = 1.6085905f;
      sa[12] = 1.9217786f;
      sa[13] = -0.58192813f;
      sa[14] = -1.9214059f;
      sa[15] = -1.0110483f;
      sa[16] = 0.5482109f;
      sa[17] = -0.89350516f;
      sa[18] = -1.3740411f;
      sa[19] = -1.1717403f;
      sa[20] = -1.819869f;
      sa[21] = 0.20567448f;
      sa[22] = -1.8919909f;
      sa[23] = -0.86493087f;
      sa[24] = -0.41302165f;
      sa[25] = 1.9010043f;
      sa[26] = -0.24946691f;
      sa[27] = 1.1760836f;
      sa[28] = 1.1656109f;
      sa[29] = -0.9499036f;
      sa[30] = 0.30206844f;
      sa[31] = 0.38052133f;
      sa[32] = 0.34370062f;
      sa[33] = 0.4449061f;
      sa[34] = -0.44087574f;
      sa[35] = 0.92159384f;
      sa[36] = 0.42306554f;
      sa[37] = -1.3948853f;
      sa[38] = 0.7292171f;
      sa[39] = -0.40868488f;
      sa[40] = 0.441685f;
      sa[41] = -0.63960725f;
      sa[42] = 0.6968031f;
      sa[43] = -0.6450006f;
      sa[44] = 0.70574784f;
      sa[45] = -2.1914637f;
      sa[46] = -2.0320957f;
      sa[47] = 0.47779506f;
      sa[48] = 1.8755858f;
      sa[49] = 0.09495056f;
      sa[50] = -0.6151842f;
      sa[51] = 1.9056484f;
      sa[52] = -1.8202758f;
      sa[53] = 0.92827994f;
      sa[54] = 1.6824855f;
      sa[55] = 1.209337f;
      sa[56] = -0.66875875f;
      sa[57] = 0.025772214f;
      sa[58] = 0.90297544f;
      sa[59] = 0.9256015f;
      sa[60] = -1.4172399f;
      sa[61] = 1.1007248f;
      sa[62] = -0.43691403f;
      sa[63] = -0.974877f;
      sa[64] = 1.2393754f;
      sa[65] = -0.96204025f;
      sa[66] = -1.7686223f;
      sa[67] = -0.011324174f;
      sa[68] = 1.1663564f;
      sa[69] = -1.2638907f;
      sa[70] = -1.5874672f;
      sa[71] = -0.14388186f;
      sa[72] = -1.232647f;
      sa[73] = -1.5539455f;
      sa[74] = -1.4234389f;
      sa[75] = 1.367894f;
      sa[76] = 2.0286348f;
      sa[77] = -0.42888075f;
      sa[78] = -1.6105068f;
      sa[79] = -0.6418546f;
      sa[80] = 0.8197406f;
      sa[81] = -1.559213f;
      sa[82] = -0.16692632f;
      sa[83] = -1.490144f;
      sa[84] = 1.5882324f;
      sa[85] = 1.2099906f;
      sa[86] = -2.0557318f;
      sa[87] = 1.5064973f;
      sa[88] = -1.4239057f;
      sa[89] = -0.8815749f;
      sa[90] = 0.1625434f;
      sa[91] = 0.19982897f;
      sa[92] = 1.205483f;
      sa[93] = 2.0124836f;
      sa[94] = 1.7661756f;
      sa[95] = 0.92276204f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_04 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_04_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_04_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_04_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_16x16x6_Tanh_04_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_04_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


