/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:41:10.298+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_01

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_01 > h2o_nn_16x16x6_Tanh_01.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_01.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_01", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_01 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_01_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_01_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_01_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_01_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_01_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_01_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_01_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_01_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_01_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_01_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_01_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_01_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_01.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_01_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25,0.25,0.125,0.25,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_01() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(910911010234707456L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_01_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_16x16x6_Tanh_01_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_01_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_01_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_01_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_01_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_01_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_01_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_01_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_01_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_01_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.09273820849039516;
      sa[1] = 0.04938618906984681;
      sa[2] = 0.0738243487057772;
      sa[3] = -0.031598047584645614;
      sa[4] = 0.04694424179178885;
      sa[5] = 0.07303874185863193;
      sa[6] = 0.062333813914481145;
      sa[7] = -0.04728994814947612;
      sa[8] = -0.03371730295931647;
      sa[9] = -0.023239453685697378;
      sa[10] = -0.03365310514613305;
      sa[11] = 0.03313651824908478;
      sa[12] = -0.0017499847400214447;
      sa[13] = 0.07390707853638823;
      sa[14] = -0.014509868135481411;
      sa[15] = -0.01445917351033461;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_01_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_01_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.01695564453993949;
      sa[1] = -0.07482494088285208;
      sa[2] = -0.034314894827730674;
      sa[3] = 0.08129209161280997;
      sa[4] = -0.0326891468367548;
      sa[5] = 0.07473222790904804;
      sa[6] = 0.011338026509824206;
      sa[7] = 0.12756136266404344;
      sa[8] = 0.03449416472656059;
      sa[9] = -0.011412746880267758;
      sa[10] = 0.1901188551344881;
      sa[11] = 0.15449697862960102;
      sa[12] = 0.005839509277207595;
      sa[13] = 0.06329665342518487;
      sa[14] = -0.16919022345456328;
      sa[15] = -0.07991063321500923;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_01_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_01_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.07492663697972769;
      sa[1] = -0.06702288413680037;
      sa[2] = -0.07780458756581443;
      sa[3] = 0.00739423813949574;
      sa[4] = -0.10337962270751086;
    }
  }
}
class h2o_nn_16x16x6_Tanh_01_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_01_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[208];
  static {
    h2o_nn_16x16x6_Tanh_01_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.03386137f;
      sa[1] = 0.3255838f;
      sa[2] = 0.19412215f;
      sa[3] = 0.30670595f;
      sa[4] = -0.0023402823f;
      sa[5] = -0.23809995f;
      sa[6] = -0.15722679f;
      sa[7] = 0.35501757f;
      sa[8] = 0.1352098f;
      sa[9] = -0.21023966f;
      sa[10] = -0.114475965f;
      sa[11] = -0.31960514f;
      sa[12] = 0.11483747f;
      sa[13] = -0.36515036f;
      sa[14] = -0.24506532f;
      sa[15] = 0.03238518f;
      sa[16] = 0.14710209f;
      sa[17] = 0.036652196f;
      sa[18] = -0.32492876f;
      sa[19] = 0.27643052f;
      sa[20] = 0.34193742f;
      sa[21] = -0.43474066f;
      sa[22] = 0.34334168f;
      sa[23] = -0.2002078f;
      sa[24] = 0.40701842f;
      sa[25] = 0.22899145f;
      sa[26] = -0.3495145f;
      sa[27] = 0.43205893f;
      sa[28] = 0.48457882f;
      sa[29] = -0.56259704f;
      sa[30] = -0.5213988f;
      sa[31] = 0.27588338f;
      sa[32] = 0.51436114f;
      sa[33] = -0.41334805f;
      sa[34] = 0.3056353f;
      sa[35] = -0.12880424f;
      sa[36] = -0.24348949f;
      sa[37] = 0.44342226f;
      sa[38] = -0.006367991f;
      sa[39] = 0.3854039f;
      sa[40] = 0.11382926f;
      sa[41] = -0.11872036f;
      sa[42] = -0.17577146f;
      sa[43] = 0.3703091f;
      sa[44] = 0.3112759f;
      sa[45] = -0.27444717f;
      sa[46] = 0.037900057f;
      sa[47] = 0.055208404f;
      sa[48] = 0.35121122f;
      sa[49] = 0.44760776f;
      sa[50] = 0.27599713f;
      sa[51] = -0.34745112f;
      sa[52] = 0.0078123584f;
      sa[53] = 0.38660485f;
      sa[54] = 0.3733088f;
      sa[55] = -0.025642507f;
      sa[56] = -0.10406528f;
      sa[57] = -0.39748722f;
      sa[58] = 0.4907464f;
      sa[59] = -0.25663725f;
      sa[60] = -0.3217501f;
      sa[61] = 0.3024775f;
      sa[62] = 0.00734498f;
      sa[63] = 0.044713333f;
      sa[64] = 0.18438081f;
      sa[65] = 0.08624351f;
      sa[66] = -0.1945957f;
      sa[67] = 0.14053036f;
      sa[68] = -0.2010589f;
      sa[69] = 0.57721025f;
      sa[70] = -0.3053846f;
      sa[71] = 0.79619986f;
      sa[72] = -0.0040602665f;
      sa[73] = 0.48271462f;
      sa[74] = -0.4045726f;
      sa[75] = 0.15764038f;
      sa[76] = -0.5377814f;
      sa[77] = 0.20443822f;
      sa[78] = -0.038399346f;
      sa[79] = 0.1915414f;
      sa[80] = -0.31359228f;
      sa[81] = -0.086748876f;
      sa[82] = 0.060067378f;
      sa[83] = 0.06604665f;
      sa[84] = -0.046217434f;
      sa[85] = -0.27939308f;
      sa[86] = 0.20997445f;
      sa[87] = 0.37578422f;
      sa[88] = 0.3319131f;
      sa[89] = 7.8006834E-4f;
      sa[90] = -0.08329093f;
      sa[91] = 0.112245746f;
      sa[92] = 0.007996654f;
      sa[93] = -0.31994018f;
      sa[94] = -0.40770915f;
      sa[95] = -0.35208425f;
      sa[96] = 0.14510602f;
      sa[97] = 0.46968174f;
      sa[98] = 0.4535582f;
      sa[99] = -0.013704395f;
      sa[100] = -0.19286405f;
      sa[101] = -0.29132897f;
      sa[102] = -0.45944095f;
      sa[103] = 0.034582224f;
      sa[104] = 0.012364238f;
      sa[105] = -0.106764644f;
      sa[106] = -0.34563762f;
      sa[107] = 0.37132472f;
      sa[108] = 0.2532374f;
      sa[109] = -0.27608517f;
      sa[110] = -0.49020642f;
      sa[111] = 0.101679444f;
      sa[112] = 0.058315527f;
      sa[113] = 0.13802342f;
      sa[114] = 0.016351717f;
      sa[115] = -0.044304032f;
      sa[116] = -0.43820646f;
      sa[117] = 0.005250527f;
      sa[118] = -0.417036f;
      sa[119] = -0.3013288f;
      sa[120] = 0.33572584f;
      sa[121] = 0.5790987f;
      sa[122] = 0.34782428f;
      sa[123] = 0.45375285f;
      sa[124] = 0.41798767f;
      sa[125] = 0.39043608f;
      sa[126] = -0.4116236f;
      sa[127] = -0.15598145f;
      sa[128] = 0.061676204f;
      sa[129] = 0.17504966f;
      sa[130] = 0.03853312f;
      sa[131] = 0.62975407f;
      sa[132] = 0.3370753f;
      sa[133] = -0.5234002f;
      sa[134] = 0.3497627f;
      sa[135] = -0.23476681f;
      sa[136] = -0.20718431f;
      sa[137] = -0.018867731f;
      sa[138] = 0.31021413f;
      sa[139] = -0.06435088f;
      sa[140] = -0.6177838f;
      sa[141] = 0.015652042f;
      sa[142] = 0.4161695f;
      sa[143] = -0.42716008f;
      sa[144] = 0.35547328f;
      sa[145] = -0.18521006f;
      sa[146] = -0.5084861f;
      sa[147] = 0.18318787f;
      sa[148] = 0.21511826f;
      sa[149] = 0.40213192f;
      sa[150] = 0.5075663f;
      sa[151] = -0.2861551f;
      sa[152] = -0.025263375f;
      sa[153] = 0.30290803f;
      sa[154] = 0.30704373f;
      sa[155] = -0.1494157f;
      sa[156] = 0.22274579f;
      sa[157] = -0.29585996f;
      sa[158] = 0.13816527f;
      sa[159] = -0.07564742f;
      sa[160] = 0.0124421725f;
      sa[161] = 0.28725037f;
      sa[162] = -0.064114355f;
      sa[163] = -0.00900899f;
      sa[164] = 0.45915315f;
      sa[165] = -0.08058516f;
      sa[166] = -0.3377097f;
      sa[167] = -0.119061254f;
      sa[168] = 0.31554332f;
      sa[169] = 0.6781479f;
      sa[170] = 0.13357946f;
      sa[171] = -0.013708906f;
      sa[172] = 0.19434394f;
      sa[173] = -0.12865442f;
      sa[174] = 0.049095444f;
      sa[175] = -0.37711272f;
      sa[176] = -0.25259948f;
      sa[177] = -0.21066374f;
      sa[178] = 0.106584325f;
      sa[179] = 0.26785618f;
      sa[180] = -0.02255663f;
      sa[181] = -0.52004766f;
      sa[182] = -0.2303185f;
      sa[183] = 0.049482573f;
      sa[184] = 0.40992826f;
      sa[185] = 0.18237126f;
      sa[186] = -0.36709955f;
      sa[187] = 0.12249523f;
      sa[188] = -0.06974929f;
      sa[189] = 0.37845314f;
      sa[190] = 0.10275337f;
      sa[191] = -0.06149941f;
      sa[192] = -0.35583743f;
      sa[193] = 0.31055963f;
      sa[194] = 0.21931887f;
      sa[195] = 0.4938027f;
      sa[196] = 0.40980616f;
      sa[197] = -0.0765191f;
      sa[198] = 0.15939595f;
      sa[199] = 0.21126607f;
      sa[200] = -0.019215766f;
      sa[201] = -0.43152636f;
      sa[202] = 0.18746555f;
      sa[203] = -0.05385353f;
      sa[204] = -0.213787f;
      sa[205] = 0.45639384f;
      sa[206] = 0.32912555f;
      sa[207] = 0.16908067f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_01_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_01_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.32873005f;
      sa[1] = -0.09052903f;
      sa[2] = -0.31637034f;
      sa[3] = -0.2975227f;
      sa[4] = -0.009674256f;
      sa[5] = 0.15651873f;
      sa[6] = 0.24356523f;
      sa[7] = -0.098067604f;
      sa[8] = -0.28087637f;
      sa[9] = 0.2596291f;
      sa[10] = -0.37916315f;
      sa[11] = 0.061566133f;
      sa[12] = 0.09009525f;
      sa[13] = 0.013265513f;
      sa[14] = -0.49400285f;
      sa[15] = 0.2605482f;
      sa[16] = 0.4283478f;
      sa[17] = -0.023267968f;
      sa[18] = -0.07872952f;
      sa[19] = -0.2135785f;
      sa[20] = 0.2725838f;
      sa[21] = 0.31823644f;
      sa[22] = -0.47023302f;
      sa[23] = 0.360538f;
      sa[24] = -0.44060296f;
      sa[25] = 0.32486454f;
      sa[26] = -0.021275738f;
      sa[27] = 0.3888723f;
      sa[28] = -0.2797309f;
      sa[29] = -0.34173504f;
      sa[30] = 0.07642835f;
      sa[31] = -0.29282436f;
      sa[32] = -0.27726904f;
      sa[33] = -0.2139481f;
      sa[34] = 0.04034583f;
      sa[35] = 0.18478118f;
      sa[36] = -0.06489191f;
      sa[37] = 0.046880435f;
      sa[38] = -0.1897775f;
      sa[39] = 0.56163776f;
      sa[40] = -0.35375655f;
      sa[41] = -0.25539994f;
      sa[42] = -0.17792755f;
      sa[43] = -0.45498556f;
      sa[44] = 0.08929978f;
      sa[45] = -0.5957099f;
      sa[46] = 0.43028203f;
      sa[47] = 0.18978648f;
      sa[48] = -0.33445045f;
      sa[49] = -0.18817286f;
      sa[50] = 0.30884022f;
      sa[51] = -0.18734461f;
      sa[52] = 0.28571337f;
      sa[53] = 0.25744796f;
      sa[54] = -0.15715799f;
      sa[55] = 0.5500855f;
      sa[56] = -0.44315338f;
      sa[57] = -0.26296642f;
      sa[58] = 0.19198982f;
      sa[59] = -0.045677543f;
      sa[60] = 0.40999436f;
      sa[61] = -0.25595838f;
      sa[62] = 0.10336965f;
      sa[63] = 0.015041222f;
      sa[64] = 0.3432387f;
      sa[65] = -0.11516732f;
      sa[66] = 0.24863386f;
      sa[67] = 0.45030937f;
      sa[68] = 0.23089087f;
      sa[69] = -0.14070849f;
      sa[70] = -0.33513284f;
      sa[71] = -0.079619415f;
      sa[72] = -0.4246043f;
      sa[73] = 0.36121237f;
      sa[74] = 0.55096817f;
      sa[75] = 0.16645198f;
      sa[76] = 0.196941f;
      sa[77] = 0.07691646f;
      sa[78] = -0.38131627f;
      sa[79] = 0.23269469f;
      sa[80] = -0.14752018f;
      sa[81] = 0.043720115f;
      sa[82] = 0.2909234f;
      sa[83] = -0.1966658f;
      sa[84] = -0.4100564f;
      sa[85] = -0.49370152f;
      sa[86] = 0.004449463f;
      sa[87] = 0.3778382f;
      sa[88] = -0.4315687f;
      sa[89] = -0.21237049f;
      sa[90] = -0.30878204f;
      sa[91] = 0.30022338f;
      sa[92] = -0.07100592f;
      sa[93] = 0.14350015f;
      sa[94] = -0.26390758f;
      sa[95] = -0.07961634f;
      sa[96] = -0.2717976f;
      sa[97] = 0.2146297f;
      sa[98] = 0.014066704f;
      sa[99] = -0.13104796f;
      sa[100] = -0.2981252f;
      sa[101] = -0.0171287f;
      sa[102] = 0.15675488f;
      sa[103] = 0.3347917f;
      sa[104] = -0.26103824f;
      sa[105] = -0.033155397f;
      sa[106] = 0.39692837f;
      sa[107] = 0.2404624f;
      sa[108] = 0.28352025f;
      sa[109] = -0.17838423f;
      sa[110] = 0.25656253f;
      sa[111] = -0.35625833f;
      sa[112] = -0.24964596f;
      sa[113] = 0.056944974f;
      sa[114] = 0.40968457f;
      sa[115] = -0.13554338f;
      sa[116] = 0.41187045f;
      sa[117] = -0.06748068f;
      sa[118] = -0.41889185f;
      sa[119] = -0.06732333f;
      sa[120] = -0.3105909f;
      sa[121] = 0.2493891f;
      sa[122] = 0.047965314f;
      sa[123] = 0.10262821f;
      sa[124] = -0.2203787f;
      sa[125] = 0.18781863f;
      sa[126] = -0.042250134f;
      sa[127] = -0.0035358686f;
      sa[128] = -0.10337823f;
      sa[129] = 0.28586718f;
      sa[130] = 0.31918234f;
      sa[131] = 0.21370603f;
      sa[132] = 0.21009137f;
      sa[133] = -0.20811823f;
      sa[134] = 0.1944264f;
      sa[135] = -0.22101194f;
      sa[136] = 0.018308148f;
      sa[137] = -0.28507534f;
      sa[138] = 0.2895327f;
      sa[139] = 0.32744354f;
      sa[140] = -0.1517876f;
      sa[141] = -0.03842058f;
      sa[142] = 0.42421222f;
      sa[143] = -0.33278525f;
      sa[144] = 0.33224744f;
      sa[145] = -0.28687167f;
      sa[146] = 0.18002857f;
      sa[147] = 0.010846618f;
      sa[148] = -0.31848323f;
      sa[149] = -0.42564836f;
      sa[150] = -0.18608826f;
      sa[151] = -0.7178713f;
      sa[152] = 0.6612488f;
      sa[153] = -0.4644532f;
      sa[154] = 0.44789097f;
      sa[155] = -0.5481039f;
      sa[156] = -0.41907364f;
      sa[157] = -0.10686148f;
      sa[158] = 0.27012634f;
      sa[159] = 0.13943322f;
      sa[160] = 0.40823266f;
      sa[161] = -0.20954913f;
      sa[162] = 0.6708168f;
      sa[163] = -0.3150038f;
      sa[164] = 0.23746215f;
      sa[165] = -0.26661554f;
      sa[166] = 0.25727385f;
      sa[167] = -0.13803267f;
      sa[168] = 0.13239157f;
      sa[169] = -0.42764437f;
      sa[170] = 0.47581753f;
      sa[171] = 0.085871406f;
      sa[172] = 0.5029762f;
      sa[173] = 0.30922893f;
      sa[174] = 0.2065157f;
      sa[175] = -0.18627645f;
      sa[176] = -0.2927634f;
      sa[177] = -0.059785724f;
      sa[178] = -0.26705974f;
      sa[179] = 0.002584985f;
      sa[180] = -0.36600882f;
      sa[181] = -0.44344795f;
      sa[182] = 0.23004524f;
      sa[183] = -0.34913307f;
      sa[184] = 0.41923147f;
      sa[185] = 0.15270719f;
      sa[186] = -0.34778094f;
      sa[187] = -0.27904958f;
      sa[188] = -0.16999389f;
      sa[189] = 0.0022112846f;
      sa[190] = -0.44475123f;
      sa[191] = -0.1776678f;
      sa[192] = -0.07802059f;
      sa[193] = 0.054598324f;
      sa[194] = -0.2801077f;
      sa[195] = -0.10687065f;
      sa[196] = 0.119619675f;
      sa[197] = -0.24370138f;
      sa[198] = 0.15132476f;
      sa[199] = 0.2889591f;
      sa[200] = 0.09417526f;
      sa[201] = 0.18616241f;
      sa[202] = 0.24592602f;
      sa[203] = -0.32594684f;
      sa[204] = 0.08919058f;
      sa[205] = 0.4603711f;
      sa[206] = -0.16650409f;
      sa[207] = 0.24314769f;
      sa[208] = -0.17620638f;
      sa[209] = 0.1209093f;
      sa[210] = -0.13410453f;
      sa[211] = -0.31223807f;
      sa[212] = -0.3463406f;
      sa[213] = -0.029364085f;
      sa[214] = -0.36929423f;
      sa[215] = 0.021609938f;
      sa[216] = 0.037587933f;
      sa[217] = 0.3556852f;
      sa[218] = -0.11247182f;
      sa[219] = 0.027520208f;
      sa[220] = 0.18486772f;
      sa[221] = -0.0031945799f;
      sa[222] = -0.25876862f;
      sa[223] = -0.41824463f;
      sa[224] = 0.29741946f;
      sa[225] = 0.030748965f;
      sa[226] = -0.18466534f;
      sa[227] = 0.07138665f;
      sa[228] = -0.16278547f;
      sa[229] = -0.55196446f;
      sa[230] = -0.24347831f;
      sa[231] = -0.21806453f;
      sa[232] = 0.58871555f;
      sa[233] = -0.2515858f;
      sa[234] = -0.3303652f;
      sa[235] = -0.03917016f;
      sa[236] = -0.40453902f;
      sa[237] = 0.51195955f;
      sa[238] = 0.17872258f;
      sa[239] = 0.084226914f;
      sa[240] = -0.12214309f;
      sa[241] = -0.4042661f;
      sa[242] = -0.48713994f;
      sa[243] = 0.42538652f;
      sa[244] = 0.09671625f;
      sa[245] = 0.33674118f;
      sa[246] = 0.25769368f;
      sa[247] = -0.48091835f;
      sa[248] = 0.076210365f;
      sa[249] = -0.008817729f;
      sa[250] = 0.29382962f;
      sa[251] = 0.42150027f;
      sa[252] = 0.20928402f;
      sa[253] = -0.28267792f;
      sa[254] = 0.28005952f;
      sa[255] = 0.32709622f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_01_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_Tanh_01_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.23268484f;
      sa[1] = -1.6851338f;
      sa[2] = -1.5352167f;
      sa[3] = 1.3831463f;
      sa[4] = 0.629065f;
      sa[5] = -0.025039604f;
      sa[6] = -1.504725f;
      sa[7] = 1.5550607f;
      sa[8] = 2.1454904f;
      sa[9] = 0.31550407f;
      sa[10] = 1.8647887f;
      sa[11] = 1.2840898f;
      sa[12] = 1.8042126f;
      sa[13] = -0.76247984f;
      sa[14] = -1.8521738f;
      sa[15] = -0.7296197f;
      sa[16] = 0.66772026f;
      sa[17] = -0.9691494f;
      sa[18] = -1.5250969f;
      sa[19] = -1.2623816f;
      sa[20] = -1.9021108f;
      sa[21] = 0.28953797f;
      sa[22] = -2.1218328f;
      sa[23] = -0.8118241f;
      sa[24] = -0.5030232f;
      sa[25] = 2.1294193f;
      sa[26] = -0.21131362f;
      sa[27] = 1.4175475f;
      sa[28] = 1.3879554f;
      sa[29] = -0.8773038f;
      sa[30] = 0.33940986f;
      sa[31] = 0.22828777f;
      sa[32] = 0.50657034f;
      sa[33] = 0.49759775f;
      sa[34] = -0.6765711f;
      sa[35] = 1.1535549f;
      sa[36] = 0.6127675f;
      sa[37] = -1.4429659f;
      sa[38] = 0.64365864f;
      sa[39] = -0.17201416f;
      sa[40] = 0.17959411f;
      sa[41] = -0.74474716f;
      sa[42] = 0.46551955f;
      sa[43] = -0.088391826f;
      sa[44] = 0.99692285f;
      sa[45] = -1.9049823f;
      sa[46] = -2.4983108f;
      sa[47] = 0.071676485f;
      sa[48] = 1.6632336f;
      sa[49] = -0.12636244f;
      sa[50] = -0.44993034f;
      sa[51] = 1.9800166f;
      sa[52] = -1.7953126f;
      sa[53] = 0.9933397f;
      sa[54] = 1.7898688f;
      sa[55] = 1.1530861f;
      sa[56] = -0.675102f;
      sa[57] = -0.10234398f;
      sa[58] = 0.99934745f;
      sa[59] = 0.8525369f;
      sa[60] = -1.4054159f;
      sa[61] = 1.0063347f;
      sa[62] = -0.42558748f;
      sa[63] = -1.0161848f;
      sa[64] = 1.2779461f;
      sa[65] = -0.9207191f;
      sa[66] = -1.8054959f;
      sa[67] = -0.17279781f;
      sa[68] = 0.7987786f;
      sa[69] = -1.4160691f;
      sa[70] = -1.8718339f;
      sa[71] = -0.007691161f;
      sa[72] = -1.0433906f;
      sa[73] = -1.4378222f;
      sa[74] = -1.3464471f;
      sa[75] = 1.4081738f;
      sa[76] = 1.8512362f;
      sa[77] = -0.59956634f;
      sa[78] = -1.4834622f;
      sa[79] = -0.17228252f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_01 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_01_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_01_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_01_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_Tanh_01_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_01_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


