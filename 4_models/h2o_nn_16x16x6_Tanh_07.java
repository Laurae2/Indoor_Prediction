/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:42:27.488+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_07

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_07 > h2o_nn_16x16x6_Tanh_07.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_07.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_07", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_07 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_07_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_07_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_07_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_07_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_07_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_07_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_07_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_07_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_07_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_07_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_07_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_07_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_07.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_07_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25,0.25,0.125,0.25,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_07() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-3820138920416388288L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_07_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_16x16x6_Tanh_07_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_07_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_07_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_07_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_07_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_07_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_07_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_07_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_07_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_07_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.0713232086885208;
      sa[1] = 0.014930263274652312;
      sa[2] = 0.08594272394560852;
      sa[3] = -0.03963251294022943;
      sa[4] = 0.03137562449481656;
      sa[5] = 0.08597064706966688;
      sa[6] = 0.03088874792817584;
      sa[7] = -0.0365775366945912;
      sa[8] = -0.0435599740721796;
      sa[9] = -0.026454467333388833;
      sa[10] = 0.020253329204468967;
      sa[11] = 0.01892968424775289;
      sa[12] = 0.03264119379072588;
      sa[13] = 0.019724759661845566;
      sa[14] = -0.01010927462368273;
      sa[15] = -0.02255064339080162;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_07_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_07_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.0185221289547163;
      sa[1] = -0.029063737379550383;
      sa[2] = 0.010683529823712512;
      sa[3] = 0.08529137602862794;
      sa[4] = -0.015528896060707507;
      sa[5] = 0.05730951312969675;
      sa[6] = 0.01082737859870759;
      sa[7] = 0.10078548876534853;
      sa[8] = 0.06922138833281685;
      sa[9] = 0.02888048095196869;
      sa[10] = 0.18987766798012143;
      sa[11] = 0.06208847352783546;
      sa[12] = -0.004045161098764541;
      sa[13] = 0.055303210013576784;
      sa[14] = -0.10429184201223196;
      sa[15] = -0.07097592665989652;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_07_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_07_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.06604234743876188;
      sa[1] = -0.06366110204757146;
      sa[2] = -0.04166089165999967;
      sa[3] = 0.01048998494505376;
      sa[4] = -0.10169693077011577;
    }
  }
}
class h2o_nn_16x16x6_Tanh_07_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_07_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[208];
  static {
    h2o_nn_16x16x6_Tanh_07_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.042986974f;
      sa[1] = 0.3515986f;
      sa[2] = 0.20925845f;
      sa[3] = 0.2714079f;
      sa[4] = -0.10277292f;
      sa[5] = -0.26499125f;
      sa[6] = -0.11616383f;
      sa[7] = 0.34562433f;
      sa[8] = 0.14757374f;
      sa[9] = -0.23922482f;
      sa[10] = -0.14252529f;
      sa[11] = -0.29950282f;
      sa[12] = 0.09546435f;
      sa[13] = -0.36738625f;
      sa[14] = -0.23737587f;
      sa[15] = 0.016977722f;
      sa[16] = 0.14721882f;
      sa[17] = 0.121868886f;
      sa[18] = -0.2977939f;
      sa[19] = 0.22343646f;
      sa[20] = 0.34397653f;
      sa[21] = -0.443333f;
      sa[22] = 0.38350978f;
      sa[23] = -0.19543199f;
      sa[24] = 0.41694602f;
      sa[25] = 0.22094394f;
      sa[26] = -0.3703324f;
      sa[27] = 0.45045727f;
      sa[28] = 0.42001483f;
      sa[29] = -0.46787024f;
      sa[30] = -0.3996792f;
      sa[31] = 0.24434842f;
      sa[32] = 0.38424945f;
      sa[33] = -0.40503126f;
      sa[34] = 0.22072898f;
      sa[35] = -0.11502657f;
      sa[36] = -0.08216127f;
      sa[37] = 0.4553715f;
      sa[38] = -0.06324595f;
      sa[39] = 0.29703638f;
      sa[40] = 0.051798247f;
      sa[41] = -0.13314706f;
      sa[42] = -0.22515811f;
      sa[43] = 0.23150128f;
      sa[44] = 0.31612232f;
      sa[45] = -0.295264f;
      sa[46] = 0.0336493f;
      sa[47] = 0.038226876f;
      sa[48] = 0.31836754f;
      sa[49] = 0.4621491f;
      sa[50] = 0.3015727f;
      sa[51] = -0.40970147f;
      sa[52] = -0.055793498f;
      sa[53] = 0.3483406f;
      sa[54] = 0.33320296f;
      sa[55] = -0.019841943f;
      sa[56] = -0.15691133f;
      sa[57] = -0.4396943f;
      sa[58] = 0.4588265f;
      sa[59] = -0.2717009f;
      sa[60] = -0.37778616f;
      sa[61] = 0.24555418f;
      sa[62] = 0.11257554f;
      sa[63] = 0.026283642f;
      sa[64] = 0.1951007f;
      sa[65] = 0.15008117f;
      sa[66] = -0.12035912f;
      sa[67] = 0.1565355f;
      sa[68] = -0.17640948f;
      sa[69] = 0.4243486f;
      sa[70] = -0.32173955f;
      sa[71] = 0.6477074f;
      sa[72] = -0.06814829f;
      sa[73] = 0.40683424f;
      sa[74] = -0.3958367f;
      sa[75] = 0.08634027f;
      sa[76] = -0.48781267f;
      sa[77] = 0.10897993f;
      sa[78] = -0.08052759f;
      sa[79] = 0.20426477f;
      sa[80] = -0.31485453f;
      sa[81] = -0.14094077f;
      sa[82] = -0.001665892f;
      sa[83] = 0.11016633f;
      sa[84] = -0.020766173f;
      sa[85] = -0.25289023f;
      sa[86] = 0.22889821f;
      sa[87] = 0.35915875f;
      sa[88] = 0.29983112f;
      sa[89] = 0.05255661f;
      sa[90] = -0.107065775f;
      sa[91] = 0.16733712f;
      sa[92] = 0.03787572f;
      sa[93] = -0.3276596f;
      sa[94] = -0.3060408f;
      sa[95] = -0.288187f;
      sa[96] = 0.1110983f;
      sa[97] = 0.3429734f;
      sa[98] = 0.39428294f;
      sa[99] = -0.08593373f;
      sa[100] = -0.16557808f;
      sa[101] = -0.24710196f;
      sa[102] = -0.53304285f;
      sa[103] = 0.027740758f;
      sa[104] = 6.6051574E-4f;
      sa[105] = -0.09876245f;
      sa[106] = -0.33249342f;
      sa[107] = 0.24664985f;
      sa[108] = 0.20721723f;
      sa[109] = -0.26141998f;
      sa[110] = -0.4312014f;
      sa[111] = 0.15619247f;
      sa[112] = 0.118392825f;
      sa[113] = 0.12333864f;
      sa[114] = -0.1093293f;
      sa[115] = 0.019813761f;
      sa[116] = -0.45447144f;
      sa[117] = -0.009491915f;
      sa[118] = -0.4082559f;
      sa[119] = -0.28239727f;
      sa[120] = 0.29017985f;
      sa[121] = 0.44298777f;
      sa[122] = 0.4110295f;
      sa[123] = 0.4015563f;
      sa[124] = 0.3957965f;
      sa[125] = 0.3956603f;
      sa[126] = -0.40491095f;
      sa[127] = -0.19705026f;
      sa[128] = 0.087460995f;
      sa[129] = 0.1908034f;
      sa[130] = -0.0907812f;
      sa[131] = 0.529885f;
      sa[132] = 0.28078604f;
      sa[133] = -0.49958828f;
      sa[134] = 0.22930114f;
      sa[135] = -0.32481825f;
      sa[136] = -0.29191452f;
      sa[137] = -0.016624233f;
      sa[138] = 0.23349169f;
      sa[139] = -0.120506555f;
      sa[140] = -0.4340639f;
      sa[141] = -0.07423918f;
      sa[142] = 0.329252f;
      sa[143] = -0.41646835f;
      sa[144] = 0.38275236f;
      sa[145] = -0.20319621f;
      sa[146] = -0.41792384f;
      sa[147] = 0.22332574f;
      sa[148] = 0.21003835f;
      sa[149] = 0.34086898f;
      sa[150] = 0.46230695f;
      sa[151] = -0.33057892f;
      sa[152] = -0.0021099586f;
      sa[153] = 0.33236033f;
      sa[154] = 0.31039482f;
      sa[155] = -0.1843418f;
      sa[156] = 0.2286203f;
      sa[157] = -0.32701743f;
      sa[158] = 0.1392502f;
      sa[159] = 0.034053613f;
      sa[160] = 0.041036777f;
      sa[161] = 0.27567855f;
      sa[162] = -0.116447635f;
      sa[163] = -0.049082924f;
      sa[164] = 0.41325283f;
      sa[165] = -0.07975066f;
      sa[166] = -0.23742157f;
      sa[167] = -0.14298877f;
      sa[168] = 0.3204426f;
      sa[169] = 0.53719544f;
      sa[170] = 0.09821175f;
      sa[171] = -0.016305905f;
      sa[172] = -0.0027526873f;
      sa[173] = -0.17643596f;
      sa[174] = 0.07892303f;
      sa[175] = -0.39536345f;
      sa[176] = -0.15764923f;
      sa[177] = -0.12790847f;
      sa[178] = 0.06297093f;
      sa[179] = 0.2518144f;
      sa[180] = 0.015193503f;
      sa[181] = -0.50043553f;
      sa[182] = -0.21692495f;
      sa[183] = 0.05601222f;
      sa[184] = 0.4009596f;
      sa[185] = 0.24262035f;
      sa[186] = -0.35624263f;
      sa[187] = 0.090400614f;
      sa[188] = -0.05097045f;
      sa[189] = 0.34875464f;
      sa[190] = 0.07979763f;
      sa[191] = -0.08037927f;
      sa[192] = -0.29839182f;
      sa[193] = 0.28297234f;
      sa[194] = 0.17052193f;
      sa[195] = 0.4250532f;
      sa[196] = 0.38775817f;
      sa[197] = -0.06578349f;
      sa[198] = 0.1332047f;
      sa[199] = 0.0897577f;
      sa[200] = -0.004158556f;
      sa[201] = -0.3979531f;
      sa[202] = 0.18558401f;
      sa[203] = -0.048551306f;
      sa[204] = -0.26642093f;
      sa[205] = 0.43901348f;
      sa[206] = 0.32957843f;
      sa[207] = 0.20549713f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_07_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_07_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.35557127f;
      sa[1] = -0.05467941f;
      sa[2] = -0.2601035f;
      sa[3] = -0.3036188f;
      sa[4] = 0.039669108f;
      sa[5] = 0.1224657f;
      sa[6] = 0.2554192f;
      sa[7] = -0.11896915f;
      sa[8] = -0.31443655f;
      sa[9] = 0.23957892f;
      sa[10] = -0.17653862f;
      sa[11] = 0.026220415f;
      sa[12] = 0.11724655f;
      sa[13] = -0.011430067f;
      sa[14] = -0.3973981f;
      sa[15] = 0.26130942f;
      sa[16] = 0.49293187f;
      sa[17] = -0.054291252f;
      sa[18] = -0.07660256f;
      sa[19] = -0.23464265f;
      sa[20] = 0.30940965f;
      sa[21] = 0.18505462f;
      sa[22] = -0.44192526f;
      sa[23] = 0.3131705f;
      sa[24] = -0.38936028f;
      sa[25] = 0.2513627f;
      sa[26] = -0.018713761f;
      sa[27] = 0.34415898f;
      sa[28] = -0.30288416f;
      sa[29] = -0.24640417f;
      sa[30] = 0.07013721f;
      sa[31] = -0.27555877f;
      sa[32] = -0.24782152f;
      sa[33] = -0.26128393f;
      sa[34] = -0.015693352f;
      sa[35] = 0.2030533f;
      sa[36] = -0.04613466f;
      sa[37] = 0.038844075f;
      sa[38] = -0.121108614f;
      sa[39] = 0.4533454f;
      sa[40] = -0.26321027f;
      sa[41] = -0.27090877f;
      sa[42] = -0.21618743f;
      sa[43] = -0.50724936f;
      sa[44] = 0.066591956f;
      sa[45] = -0.5220146f;
      sa[46] = 0.37263647f;
      sa[47] = 0.22631899f;
      sa[48] = -0.30317643f;
      sa[49] = -0.19181772f;
      sa[50] = 0.18559326f;
      sa[51] = -0.18396573f;
      sa[52] = 0.26388294f;
      sa[53] = 0.2687686f;
      sa[54] = -0.15487468f;
      sa[55] = 0.46254128f;
      sa[56] = -0.36587843f;
      sa[57] = -0.24724707f;
      sa[58] = 0.11621717f;
      sa[59] = -0.11391172f;
      sa[60] = 0.3925846f;
      sa[61] = -0.24101971f;
      sa[62] = 0.017178586f;
      sa[63] = 0.077584065f;
      sa[64] = 0.33406404f;
      sa[65] = -0.14088634f;
      sa[66] = 0.22282986f;
      sa[67] = 0.44193995f;
      sa[68] = 0.21804145f;
      sa[69] = -0.18497308f;
      sa[70] = -0.36277694f;
      sa[71] = -0.10155345f;
      sa[72] = -0.41928905f;
      sa[73] = 0.3408301f;
      sa[74] = 0.42436463f;
      sa[75] = 0.13485421f;
      sa[76] = 0.19841969f;
      sa[77] = 0.09450707f;
      sa[78] = -0.4029745f;
      sa[79] = 0.24103585f;
      sa[80] = -0.1501009f;
      sa[81] = 0.055009026f;
      sa[82] = 0.24538182f;
      sa[83] = -0.17083867f;
      sa[84] = -0.43286481f;
      sa[85] = -0.43605298f;
      sa[86] = 0.041552424f;
      sa[87] = 0.3524938f;
      sa[88] = -0.37611875f;
      sa[89] = -0.17451973f;
      sa[90] = -0.2935179f;
      sa[91] = 0.31046495f;
      sa[92] = -0.06965431f;
      sa[93] = 0.12733625f;
      sa[94] = -0.30319792f;
      sa[95] = -0.06318175f;
      sa[96] = -0.23882882f;
      sa[97] = 0.17296301f;
      sa[98] = -0.048560333f;
      sa[99] = -0.10704292f;
      sa[100] = -0.28043237f;
      sa[101] = -0.03919461f;
      sa[102] = 0.2162243f;
      sa[103] = 0.22728497f;
      sa[104] = -0.15370548f;
      sa[105] = -0.055698026f;
      sa[106] = 0.4026484f;
      sa[107] = 0.19877331f;
      sa[108] = 0.25842318f;
      sa[109] = -0.115217045f;
      sa[110] = 0.21795432f;
      sa[111] = -0.3214807f;
      sa[112] = -0.2533648f;
      sa[113] = 0.06562414f;
      sa[114] = 0.24247897f;
      sa[115] = -0.11479478f;
      sa[116] = 0.36692503f;
      sa[117] = -0.031661667f;
      sa[118] = -0.38466707f;
      sa[119] = -0.13138671f;
      sa[120] = -0.22003895f;
      sa[121] = 0.28646478f;
      sa[122] = 0.014275566f;
      sa[123] = 0.07338982f;
      sa[124] = -0.21786933f;
      sa[125] = 0.19157653f;
      sa[126] = -0.10237163f;
      sa[127] = 0.052743636f;
      sa[128] = -0.14129658f;
      sa[129] = 0.2568042f;
      sa[130] = 0.1609205f;
      sa[131] = 0.24281365f;
      sa[132] = 0.14422047f;
      sa[133] = -0.11599503f;
      sa[134] = 0.20133889f;
      sa[135] = -0.26859412f;
      sa[136] = 0.10906645f;
      sa[137] = -0.24261953f;
      sa[138] = 0.13494791f;
      sa[139] = 0.34887132f;
      sa[140] = -0.2125981f;
      sa[141] = -0.0038843714f;
      sa[142] = 0.32503808f;
      sa[143] = -0.26048055f;
      sa[144] = 0.3229542f;
      sa[145] = -0.24101768f;
      sa[146] = 0.119978994f;
      sa[147] = -0.009828651f;
      sa[148] = -0.2673877f;
      sa[149] = -0.15778355f;
      sa[150] = -0.19915001f;
      sa[151] = -0.58189684f;
      sa[152] = 0.5888902f;
      sa[153] = -0.34140274f;
      sa[154] = 0.38815734f;
      sa[155] = -0.4815632f;
      sa[156] = -0.41016734f;
      sa[157] = -0.16889991f;
      sa[158] = 0.14913975f;
      sa[159] = 0.035825092f;
      sa[160] = 0.41706488f;
      sa[161] = -0.19614139f;
      sa[162] = 0.5716457f;
      sa[163] = -0.2843245f;
      sa[164] = 0.22669408f;
      sa[165] = -0.23146117f;
      sa[166] = 0.2909915f;
      sa[167] = -0.23796204f;
      sa[168] = 0.22609542f;
      sa[169] = -0.4045803f;
      sa[170] = 0.42168102f;
      sa[171] = 0.11935473f;
      sa[172] = 0.43178344f;
      sa[173] = 0.34381267f;
      sa[174] = 0.12538268f;
      sa[175] = -0.11668657f;
      sa[176] = -0.34181854f;
      sa[177] = -0.031699136f;
      sa[178] = -0.22283666f;
      sa[179] = 0.028562067f;
      sa[180] = -0.3849298f;
      sa[181] = -0.4216744f;
      sa[182] = 0.22471932f;
      sa[183] = -0.33850652f;
      sa[184] = 0.40421727f;
      sa[185] = 0.1779005f;
      sa[186] = -0.24189854f;
      sa[187] = -0.24555233f;
      sa[188] = -0.15928225f;
      sa[189] = -0.045984183f;
      sa[190] = -0.37314945f;
      sa[191] = -0.17595343f;
      sa[192] = -0.09880948f;
      sa[193] = 0.06905225f;
      sa[194] = -0.25343534f;
      sa[195] = -0.13681152f;
      sa[196] = 0.1195594f;
      sa[197] = -0.2367896f;
      sa[198] = 0.1004285f;
      sa[199] = 0.33606714f;
      sa[200] = 0.024889443f;
      sa[201] = 0.19576058f;
      sa[202] = 0.19489516f;
      sa[203] = -0.300222f;
      sa[204] = 0.09381845f;
      sa[205] = 0.42895105f;
      sa[206] = -0.16421817f;
      sa[207] = 0.2167945f;
      sa[208] = -0.18291269f;
      sa[209] = 0.14542668f;
      sa[210] = -0.12268962f;
      sa[211] = -0.28546557f;
      sa[212] = -0.3497351f;
      sa[213] = -0.0016256113f;
      sa[214] = -0.35059223f;
      sa[215] = -0.014701375f;
      sa[216] = 0.06262467f;
      sa[217] = 0.3597403f;
      sa[218] = -0.03439607f;
      sa[219] = 0.0418218f;
      sa[220] = 0.19849192f;
      sa[221] = -0.023602566f;
      sa[222] = -0.23885868f;
      sa[223] = -0.37569556f;
      sa[224] = 0.28435147f;
      sa[225] = 0.025334805f;
      sa[226] = -0.13727304f;
      sa[227] = 0.08148038f;
      sa[228] = -0.14351736f;
      sa[229] = -0.41626096f;
      sa[230] = -0.22493559f;
      sa[231] = -0.16976258f;
      sa[232] = 0.51215845f;
      sa[233] = -0.23281664f;
      sa[234] = -0.2389184f;
      sa[235] = -0.01655104f;
      sa[236] = -0.3531584f;
      sa[237] = 0.48419267f;
      sa[238] = 0.16230196f;
      sa[239] = 0.019372595f;
      sa[240] = -0.13458729f;
      sa[241] = -0.40736586f;
      sa[242] = -0.3629716f;
      sa[243] = 0.40208465f;
      sa[244] = 0.14167668f;
      sa[245] = 0.30357885f;
      sa[246] = 0.22318974f;
      sa[247] = -0.41218683f;
      sa[248] = -0.032440823f;
      sa[249] = -0.031321328f;
      sa[250] = 0.2608311f;
      sa[251] = 0.4623022f;
      sa[252] = 0.18596742f;
      sa[253] = -0.28948712f;
      sa[254] = 0.3092393f;
      sa[255] = 0.2659449f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_07_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_Tanh_07_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.07025457f;
      sa[1] = -1.6042742f;
      sa[2] = -1.5550345f;
      sa[3] = 1.3253711f;
      sa[4] = 0.5420737f;
      sa[5] = -0.10245293f;
      sa[6] = -1.5711669f;
      sa[7] = 1.4985182f;
      sa[8] = 2.0070333f;
      sa[9] = 0.24805568f;
      sa[10] = 1.7804352f;
      sa[11] = 1.3542091f;
      sa[12] = 1.8151292f;
      sa[13] = -0.6997125f;
      sa[14] = -1.8520709f;
      sa[15] = -0.6744583f;
      sa[16] = 0.6863858f;
      sa[17] = -0.90002346f;
      sa[18] = -1.4914534f;
      sa[19] = -1.1302761f;
      sa[20] = -1.8853308f;
      sa[21] = 0.31158718f;
      sa[22] = -2.0337813f;
      sa[23] = -0.7213453f;
      sa[24] = -0.5152543f;
      sa[25] = 1.9814893f;
      sa[26] = -0.24104705f;
      sa[27] = 1.330804f;
      sa[28] = 1.2718573f;
      sa[29] = -0.84507895f;
      sa[30] = 0.2696314f;
      sa[31] = 0.19603188f;
      sa[32] = 0.52816695f;
      sa[33] = 0.4803271f;
      sa[34] = -0.6773403f;
      sa[35] = 1.1132421f;
      sa[36] = 0.56692255f;
      sa[37] = -1.3945286f;
      sa[38] = 0.59850454f;
      sa[39] = -0.16741341f;
      sa[40] = 0.14435813f;
      sa[41] = -0.7110478f;
      sa[42] = 0.46905673f;
      sa[43] = -0.05554814f;
      sa[44] = 1.0419372f;
      sa[45] = -1.9086885f;
      sa[46] = -2.3314655f;
      sa[47] = 0.017311461f;
      sa[48] = 1.657058f;
      sa[49] = -0.16803461f;
      sa[50] = -0.47822216f;
      sa[51] = 1.8945382f;
      sa[52] = -1.7633324f;
      sa[53] = 0.9159404f;
      sa[54] = 1.7829816f;
      sa[55] = 1.1074734f;
      sa[56] = -0.6385027f;
      sa[57] = -0.04178227f;
      sa[58] = 1.0089931f;
      sa[59] = 0.87534904f;
      sa[60] = -1.326886f;
      sa[61] = 0.9833245f;
      sa[62] = -0.42050955f;
      sa[63] = -0.9502955f;
      sa[64] = 1.0966954f;
      sa[65] = -0.9928915f;
      sa[66] = -1.7746322f;
      sa[67] = -0.0958926f;
      sa[68] = 0.8441122f;
      sa[69] = -1.3250676f;
      sa[70] = -1.7291783f;
      sa[71] = 0.037897985f;
      sa[72] = -0.97356385f;
      sa[73] = -1.362463f;
      sa[74] = -1.2199235f;
      sa[75] = 1.3215264f;
      sa[76] = 1.7917626f;
      sa[77] = -0.6179414f;
      sa[78] = -1.470455f;
      sa[79] = -0.19686149f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_07 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_07_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_07_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_07_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_Tanh_07_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_07_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


