/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:41:54.076+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_32x6_ReLU_05

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_32x6_ReLU_05 > h2o_nn_32x6_ReLU_05.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_32x6_ReLU_05.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_32x6_ReLU_05", algorithm="deeplearning")
public class h2o_nn_32x6_ReLU_05 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,32,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_32x6_ReLU_05_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_32x6_ReLU_05_Activation_1.VALUES,
      /* Softmax */ h2o_nn_32x6_ReLU_05_Activation_2.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_32x6_ReLU_05_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_32x6_ReLU_05_Bias_1.VALUES,
      /* Softmax */ h2o_nn_32x6_ReLU_05_Bias_2.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_32x6_ReLU_05_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_32x6_ReLU_05_Weight_1.VALUES,
      /* Softmax */ h2o_nn_32x6_ReLU_05_Weight_2.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_32x6_ReLU_05.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_32x6_ReLU_05_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.29347826086956524,0.13043478260869565,0.14130434782608695,0.29347826086956524,0.14130434782608695};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_32x6_ReLU_05() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-4772040205104447520L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_32x6_ReLU_05_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_32x6_ReLU_05_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_05_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_32x6_ReLU_05_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_ReLU_05_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_05_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_32x6_ReLU_05_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_32x6_ReLU_05_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_05_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_32x6_ReLU_05_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_32x6_ReLU_05_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_ReLU_05_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_05_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.5347000576964742;
      sa[1] = 0.48787693776064556;
      sa[2] = 0.5155922476359288;
      sa[3] = 0.500234108776993;
      sa[4] = 0.5872198945464225;
      sa[5] = 0.5521612079401577;
      sa[6] = 0.47114477742531785;
      sa[7] = 0.4590631533733933;
      sa[8] = 0.46790813237331363;
      sa[9] = 0.528366142125572;
      sa[10] = 0.46275176284971165;
      sa[11] = 0.4650530024559528;
      sa[12] = 0.4386661914976611;
      sa[13] = 0.4898948882056842;
      sa[14] = 0.4698405051018708;
      sa[15] = 0.5381256344319382;
      sa[16] = 0.5761434536428091;
      sa[17] = 0.4335952677290078;
      sa[18] = 0.504342382052576;
      sa[19] = 0.4526285603004781;
      sa[20] = 0.5166182930057316;
      sa[21] = 0.5074153167387414;
      sa[22] = 0.5370999923395613;
      sa[23] = 0.47670418224716765;
      sa[24] = 0.46995461274560346;
      sa[25] = 0.4383475843438474;
      sa[26] = 0.5001608897848903;
      sa[27] = 0.48772582905617795;
      sa[28] = 0.4972324903867933;
      sa[29] = 0.49323624529457366;
      sa[30] = 0.5742825191074842;
      sa[31] = 0.5711438259932137;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_32x6_ReLU_05_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_32x6_ReLU_05_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_05_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.010713716823853095;
      sa[1] = 0.004895950802507666;
      sa[2] = 0.006403993477565823;
      sa[3] = -0.054561499046312904;
      sa[4] = 0.003780508041333311;
    }
  }
}
class h2o_nn_32x6_ReLU_05_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_32x6_ReLU_05_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[416];
  static {
    h2o_nn_32x6_ReLU_05_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_05_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.05841354f;
      sa[1] = 0.30341607f;
      sa[2] = 0.18795404f;
      sa[3] = 0.13426624f;
      sa[4] = -0.24512355f;
      sa[5] = -0.2230504f;
      sa[6] = 0.049409054f;
      sa[7] = 0.26227254f;
      sa[8] = 0.13800442f;
      sa[9] = -0.19001295f;
      sa[10] = -0.25417027f;
      sa[11] = -0.20829865f;
      sa[12] = -0.013446163f;
      sa[13] = -0.3312251f;
      sa[14] = -0.26077095f;
      sa[15] = -0.052416015f;
      sa[16] = 0.122291416f;
      sa[17] = 0.039070398f;
      sa[18] = -0.22323193f;
      sa[19] = 0.21608153f;
      sa[20] = 0.27250507f;
      sa[21] = -0.3818086f;
      sa[22] = 0.36665562f;
      sa[23] = -0.10465787f;
      sa[24] = 0.24807191f;
      sa[25] = 0.30205134f;
      sa[26] = -0.3091596f;
      sa[27] = 0.36219087f;
      sa[28] = 0.3361477f;
      sa[29] = -0.2331805f;
      sa[30] = -0.1065933f;
      sa[31] = 0.061318535f;
      sa[32] = 0.33483627f;
      sa[33] = -0.30452406f;
      sa[34] = 0.1814869f;
      sa[35] = -0.151982f;
      sa[36] = 0.019129116f;
      sa[37] = 0.25750932f;
      sa[38] = -0.08451519f;
      sa[39] = 0.24739356f;
      sa[40] = -0.0066519026f;
      sa[41] = -0.030027533f;
      sa[42] = -0.040688917f;
      sa[43] = 0.18486968f;
      sa[44] = 0.19747141f;
      sa[45] = -0.20046778f;
      sa[46] = 0.086290605f;
      sa[47] = 0.08810562f;
      sa[48] = 0.20274663f;
      sa[49] = 0.32788575f;
      sa[50] = 0.13698953f;
      sa[51] = -0.26855263f;
      sa[52] = -0.042698804f;
      sa[53] = 0.20623204f;
      sa[54] = 0.26453453f;
      sa[55] = 0.06014466f;
      sa[56] = -0.13623388f;
      sa[57] = -0.4023371f;
      sa[58] = 0.44768065f;
      sa[59] = -0.19006373f;
      sa[60] = -0.31502727f;
      sa[61] = 0.17653294f;
      sa[62] = 0.2144403f;
      sa[63] = -0.02761474f;
      sa[64] = 0.092076614f;
      sa[65] = 0.16383842f;
      sa[66] = -0.026413357f;
      sa[67] = 0.13294774f;
      sa[68] = -0.14006197f;
      sa[69] = 0.21783577f;
      sa[70] = -0.036578186f;
      sa[71] = 0.27268505f;
      sa[72] = -0.11977029f;
      sa[73] = 0.23726577f;
      sa[74] = -0.14714153f;
      sa[75] = 0.20040713f;
      sa[76] = -0.14954694f;
      sa[77] = -0.110360965f;
      sa[78] = -0.11397712f;
      sa[79] = 0.17972243f;
      sa[80] = -0.29186144f;
      sa[81] = -0.2106959f;
      sa[82] = -0.13338558f;
      sa[83] = 0.23631775f;
      sa[84] = -0.15882376f;
      sa[85] = -0.24231581f;
      sa[86] = 0.14149876f;
      sa[87] = 0.3714685f;
      sa[88] = 0.3062971f;
      sa[89] = 0.1113223f;
      sa[90] = -0.1094256f;
      sa[91] = 0.175027f;
      sa[92] = 0.21638279f;
      sa[93] = -0.1804184f;
      sa[94] = -0.21319866f;
      sa[95] = -0.17434028f;
      sa[96] = 0.15793511f;
      sa[97] = -0.030902136f;
      sa[98] = 0.26634717f;
      sa[99] = -0.082828775f;
      sa[100] = -0.09264297f;
      sa[101] = -0.31788126f;
      sa[102] = -0.24607955f;
      sa[103] = -0.10186485f;
      sa[104] = 0.0022673158f;
      sa[105] = -0.20911849f;
      sa[106] = -0.301741f;
      sa[107] = 0.1933145f;
      sa[108] = 0.20554893f;
      sa[109] = -0.24795014f;
      sa[110] = -0.20139477f;
      sa[111] = 0.19372757f;
      sa[112] = 0.13842334f;
      sa[113] = 0.05947571f;
      sa[114] = -0.04317279f;
      sa[115] = -0.122659974f;
      sa[116] = -0.13031775f;
      sa[117] = -0.045365173f;
      sa[118] = -0.3010759f;
      sa[119] = -0.24479683f;
      sa[120] = 0.21160364f;
      sa[121] = 0.1801384f;
      sa[122] = 0.3322779f;
      sa[123] = 0.3973712f;
      sa[124] = 0.27260536f;
      sa[125] = 0.29178926f;
      sa[126] = -0.3074003f;
      sa[127] = -0.2515233f;
      sa[128] = 0.08380362f;
      sa[129] = 0.11274057f;
      sa[130] = -0.17586504f;
      sa[131] = 0.34500676f;
      sa[132] = 0.1764376f;
      sa[133] = -0.31865028f;
      sa[134] = 6.609495E-4f;
      sa[135] = -0.28356922f;
      sa[136] = -0.2814707f;
      sa[137] = -0.0474233f;
      sa[138] = 0.11943762f;
      sa[139] = -0.118965864f;
      sa[140] = -0.07739189f;
      sa[141] = -0.3800022f;
      sa[142] = 0.3218374f;
      sa[143] = -0.36416107f;
      sa[144] = 0.27885494f;
      sa[145] = -0.21271357f;
      sa[146] = -0.3247334f;
      sa[147] = 0.08961996f;
      sa[148] = 0.23912339f;
      sa[149] = 0.24797943f;
      sa[150] = 0.32534027f;
      sa[151] = -0.32761744f;
      sa[152] = 0.11848313f;
      sa[153] = 0.40470698f;
      sa[154] = 0.22286293f;
      sa[155] = -0.12731542f;
      sa[156] = 0.105353594f;
      sa[157] = -0.17468514f;
      sa[158] = 0.09114279f;
      sa[159] = 0.064819954f;
      sa[160] = -0.08028018f;
      sa[161] = 0.2244549f;
      sa[162] = -0.18116069f;
      sa[163] = -0.14154842f;
      sa[164] = 0.25520948f;
      sa[165] = -0.086742856f;
      sa[166] = -0.1228447f;
      sa[167] = -0.18665805f;
      sa[168] = 0.24662665f;
      sa[169] = 0.3229391f;
      sa[170] = -0.007869096f;
      sa[171] = -0.07924392f;
      sa[172] = -0.10100812f;
      sa[173] = -0.32455832f;
      sa[174] = -0.02607332f;
      sa[175] = -0.22031532f;
      sa[176] = -0.08844724f;
      sa[177] = -0.09008469f;
      sa[178] = -0.010466541f;
      sa[179] = 0.17464285f;
      sa[180] = -0.19122887f;
      sa[181] = -0.2899335f;
      sa[182] = -0.14644985f;
      sa[183] = 0.06492074f;
      sa[184] = 0.35956562f;
      sa[185] = 0.24251838f;
      sa[186] = -0.28063768f;
      sa[187] = 0.10246802f;
      sa[188] = -0.12454719f;
      sa[189] = 0.30141142f;
      sa[190] = 0.09430044f;
      sa[191] = -0.06538118f;
      sa[192] = -0.14259253f;
      sa[193] = 0.24649894f;
      sa[194] = 0.1809084f;
      sa[195] = 0.34080416f;
      sa[196] = 0.3680039f;
      sa[197] = -0.009284751f;
      sa[198] = 0.07787095f;
      sa[199] = -0.00960851f;
      sa[200] = -4.2967743E-4f;
      sa[201] = -0.35594139f;
      sa[202] = 0.15428288f;
      sa[203] = -0.017548086f;
      sa[204] = -0.23407154f;
      sa[205] = 0.16509984f;
      sa[206] = 0.36720207f;
      sa[207] = 0.03357155f;
      sa[208] = -0.31758618f;
      sa[209] = -0.15718947f;
      sa[210] = -0.38545355f;
      sa[211] = -0.37937754f;
      sa[212] = 0.15621303f;
      sa[213] = -0.27531472f;
      sa[214] = -0.0380722f;
      sa[215] = 0.080354765f;
      sa[216] = 0.062258363f;
      sa[217] = 0.26352325f;
      sa[218] = -0.11500366f;
      sa[219] = 0.3627904f;
      sa[220] = -0.36156532f;
      sa[221] = -0.014901944f;
      sa[222] = 0.27011222f;
      sa[223] = 0.042945188f;
      sa[224] = 0.10531757f;
      sa[225] = 0.22394155f;
      sa[226] = -0.28310543f;
      sa[227] = 0.4014076f;
      sa[228] = 0.099072665f;
      sa[229] = 0.068686694f;
      sa[230] = 0.26641852f;
      sa[231] = -0.29322308f;
      sa[232] = -0.46146798f;
      sa[233] = 0.19314311f;
      sa[234] = 0.20436709f;
      sa[235] = -0.29562703f;
      sa[236] = 0.0029921103f;
      sa[237] = -0.20062657f;
      sa[238] = -0.15626718f;
      sa[239] = 0.002405541f;
      sa[240] = 0.120880686f;
      sa[241] = -0.23689206f;
      sa[242] = -0.041258376f;
      sa[243] = -0.345801f;
      sa[244] = -0.36188665f;
      sa[245] = -0.19744511f;
      sa[246] = -0.33313623f;
      sa[247] = -0.06869689f;
      sa[248] = 0.3045102f;
      sa[249] = 0.31086206f;
      sa[250] = -0.23186064f;
      sa[251] = -0.10399278f;
      sa[252] = -0.3040205f;
      sa[253] = -0.45327437f;
      sa[254] = -0.28754872f;
      sa[255] = 0.22257052f;
      sa[256] = -0.20146379f;
      sa[257] = 0.3969764f;
      sa[258] = -0.2974176f;
      sa[259] = -0.051492993f;
      sa[260] = -0.2936097f;
      sa[261] = -0.08588845f;
      sa[262] = -0.1610152f;
      sa[263] = 0.18116002f;
      sa[264] = -0.28362748f;
      sa[265] = 0.20262419f;
      sa[266] = -0.5297238f;
      sa[267] = -0.3050688f;
      sa[268] = 0.12277323f;
      sa[269] = -0.14024071f;
      sa[270] = -0.1565251f;
      sa[271] = 0.27048358f;
      sa[272] = -0.15703437f;
      sa[273] = -0.101954594f;
      sa[274] = 0.101083346f;
      sa[275] = 0.013192743f;
      sa[276] = 0.12846836f;
      sa[277] = -0.15139893f;
      sa[278] = -0.064117394f;
      sa[279] = 0.14358945f;
      sa[280] = -0.15702882f;
      sa[281] = 0.35586238f;
      sa[282] = -0.08517032f;
      sa[283] = 0.006881924f;
      sa[284] = 0.09297622f;
      sa[285] = -0.115814075f;
      sa[286] = 0.31904653f;
      sa[287] = 0.15864727f;
      sa[288] = -0.1780305f;
      sa[289] = -0.13341221f;
      sa[290] = -0.0036335487f;
      sa[291] = -0.078655064f;
      sa[292] = 0.20626536f;
      sa[293] = -0.08218589f;
      sa[294] = 0.13885835f;
      sa[295] = 0.05530692f;
      sa[296] = 0.21138442f;
      sa[297] = 0.21369867f;
      sa[298] = -0.106084324f;
      sa[299] = -0.0388164f;
      sa[300] = 0.06445883f;
      sa[301] = -0.047590517f;
      sa[302] = 0.17320657f;
      sa[303] = 0.09152081f;
      sa[304] = -0.2866144f;
      sa[305] = -0.064419635f;
      sa[306] = 0.22654241f;
      sa[307] = -0.18222913f;
      sa[308] = 0.03972893f;
      sa[309] = 0.063160546f;
      sa[310] = 0.4453363f;
      sa[311] = 0.19956756f;
      sa[312] = -0.24629001f;
      sa[313] = -0.2630065f;
      sa[314] = -0.21843006f;
      sa[315] = 0.05445962f;
      sa[316] = 0.014304268f;
      sa[317] = -0.12188984f;
      sa[318] = 0.15696865f;
      sa[319] = 0.34283966f;
      sa[320] = -0.07260727f;
      sa[321] = 0.17961653f;
      sa[322] = 0.37233728f;
      sa[323] = -0.29566348f;
      sa[324] = 0.18861538f;
      sa[325] = 0.2852202f;
      sa[326] = -0.2921525f;
      sa[327] = -0.024550535f;
      sa[328] = -0.18492529f;
      sa[329] = 0.109946184f;
      sa[330] = -0.1267171f;
      sa[331] = -0.03957386f;
      sa[332] = -0.3473623f;
      sa[333] = 0.111293375f;
      sa[334] = -0.03979372f;
      sa[335] = 0.27257517f;
      sa[336] = -0.17328504f;
      sa[337] = -0.14854062f;
      sa[338] = 0.34585527f;
      sa[339] = -0.2857026f;
      sa[340] = -0.36403427f;
      sa[341] = -0.23575364f;
      sa[342] = 0.2940838f;
      sa[343] = -0.09083754f;
      sa[344] = -0.20500432f;
      sa[345] = 0.27754006f;
      sa[346] = 0.2501325f;
      sa[347] = -0.17200525f;
      sa[348] = 0.47144818f;
      sa[349] = -0.3384625f;
      sa[350] = -0.19181585f;
      sa[351] = 0.11003616f;
      sa[352] = 0.28451994f;
      sa[353] = -0.059092257f;
      sa[354] = 0.029325355f;
      sa[355] = 0.018018229f;
      sa[356] = -0.16060838f;
      sa[357] = 0.25131398f;
      sa[358] = -0.37749022f;
      sa[359] = 0.01904073f;
      sa[360] = 0.119487174f;
      sa[361] = -0.12868492f;
      sa[362] = -0.1433709f;
      sa[363] = 0.13402465f;
      sa[364] = -0.104817495f;
      sa[365] = -0.17619549f;
      sa[366] = 0.061702143f;
      sa[367] = -0.2591156f;
      sa[368] = -0.058353376f;
      sa[369] = 0.2604601f;
      sa[370] = -0.27394846f;
      sa[371] = 0.15829208f;
      sa[372] = 0.030872673f;
      sa[373] = 0.283126f;
      sa[374] = -0.22009754f;
      sa[375] = -0.30232888f;
      sa[376] = -0.3657338f;
      sa[377] = -0.27490887f;
      sa[378] = 0.37073246f;
      sa[379] = 0.080966026f;
      sa[380] = -0.17817517f;
      sa[381] = -0.24381529f;
      sa[382] = 0.011274725f;
      sa[383] = -0.12500297f;
      sa[384] = -0.20415619f;
      sa[385] = 0.11091808f;
      sa[386] = -0.2756444f;
      sa[387] = -0.24753943f;
      sa[388] = 0.012644974f;
      sa[389] = 0.11330007f;
      sa[390] = 0.021715142f;
      sa[391] = -0.10031883f;
      sa[392] = 0.27697578f;
      sa[393] = 0.14782721f;
      sa[394] = -0.110898346f;
      sa[395] = 0.4326349f;
      sa[396] = 0.21270666f;
      sa[397] = -0.30410865f;
      sa[398] = 0.12549287f;
      sa[399] = 0.19636968f;
      sa[400] = 0.2067337f;
      sa[401] = 0.4835968f;
      sa[402] = -0.31052202f;
      sa[403] = 0.123924814f;
      sa[404] = 0.33157843f;
      sa[405] = -0.2080165f;
      sa[406] = -0.08598038f;
      sa[407] = 0.19164243f;
      sa[408] = -0.19244552f;
      sa[409] = -0.4064172f;
      sa[410] = -0.08320759f;
      sa[411] = 0.27670884f;
      sa[412] = -0.15477285f;
      sa[413] = -0.0022268135f;
      sa[414] = 0.12236084f;
      sa[415] = 0.35675037f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_32x6_ReLU_05_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[160];
  static {
    h2o_nn_32x6_ReLU_05_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_05_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 1.2040145f;
      sa[1] = -0.1701799f;
      sa[2] = -0.46188936f;
      sa[3] = -0.8565163f;
      sa[4] = 0.053281862f;
      sa[5] = 0.19500639f;
      sa[6] = 1.2688227f;
      sa[7] = -0.63419133f;
      sa[8] = -0.91642076f;
      sa[9] = 0.6127694f;
      sa[10] = -0.2818678f;
      sa[11] = 0.52260196f;
      sa[12] = 0.17208068f;
      sa[13] = 0.15007f;
      sa[14] = -1.2279491f;
      sa[15] = 1.1479477f;
      sa[16] = 1.7123659f;
      sa[17] = -0.5402265f;
      sa[18] = 0.07790119f;
      sa[19] = -0.48433262f;
      sa[20] = 1.237785f;
      sa[21] = 0.036640152f;
      sa[22] = -0.97827154f;
      sa[23] = 0.72989464f;
      sa[24] = -1.3959539f;
      sa[25] = 0.4406198f;
      sa[26] = -0.22057974f;
      sa[27] = 1.4397327f;
      sa[28] = -1.3644491f;
      sa[29] = -0.42967892f;
      sa[30] = 0.5001074f;
      sa[31] = -0.8108434f;
      sa[32] = -1.1412865f;
      sa[33] = -1.508231f;
      sa[34] = 0.042763937f;
      sa[35] = 1.3826371f;
      sa[36] = -0.39963663f;
      sa[37] = -0.05276211f;
      sa[38] = 0.14825776f;
      sa[39] = 0.83415926f;
      sa[40] = -0.74150145f;
      sa[41] = -1.3411514f;
      sa[42] = -1.0304545f;
      sa[43] = -1.4016409f;
      sa[44] = 0.01457678f;
      sa[45] = -1.3354155f;
      sa[46] = 1.2267448f;
      sa[47] = 1.3726516f;
      sa[48] = -1.3248504f;
      sa[49] = -1.009281f;
      sa[50] = 0.40444106f;
      sa[51] = -0.31777686f;
      sa[52] = 0.82394f;
      sa[53] = 0.90104085f;
      sa[54] = -0.246479f;
      sa[55] = 1.1293668f;
      sa[56] = -1.1041915f;
      sa[57] = -1.1173525f;
      sa[58] = 0.18316624f;
      sa[59] = -0.21780397f;
      sa[60] = 1.3598346f;
      sa[61] = -0.57785046f;
      sa[62] = -0.3549725f;
      sa[63] = 0.7088437f;
      sa[64] = 1.4906744f;
      sa[65] = -0.6266932f;
      sa[66] = 0.58770996f;
      sa[67] = 1.5266324f;
      sa[68] = 0.76580113f;
      sa[69] = -0.9710009f;
      sa[70] = -1.5745434f;
      sa[71] = -0.42959598f;
      sa[72] = -1.2480764f;
      sa[73] = 1.190495f;
      sa[74] = 1.3515613f;
      sa[75] = -0.19366322f;
      sa[76] = 0.905404f;
      sa[77] = 0.5053185f;
      sa[78] = -1.2955034f;
      sa[79] = 0.94002014f;
      sa[80] = -0.82170284f;
      sa[81] = 0.31048f;
      sa[82] = 0.8345363f;
      sa[83] = -0.59266716f;
      sa[84] = -1.6619266f;
      sa[85] = -1.2611184f;
      sa[86] = 0.2457779f;
      sa[87] = 1.2368437f;
      sa[88] = -1.5176444f;
      sa[89] = -0.47931832f;
      sa[90] = -1.0322016f;
      sa[91] = 1.5786295f;
      sa[92] = -0.33550128f;
      sa[93] = 0.27185446f;
      sa[94] = -1.5755997f;
      sa[95] = -0.21968882f;
      sa[96] = -1.1337571f;
      sa[97] = 0.16118813f;
      sa[98] = -0.109777614f;
      sa[99] = 0.26154009f;
      sa[100] = -1.2686738f;
      sa[101] = -0.46083486f;
      sa[102] = 1.3130525f;
      sa[103] = 0.015542036f;
      sa[104] = -0.24424583f;
      sa[105] = -0.5900309f;
      sa[106] = 1.4714223f;
      sa[107] = 1.0899516f;
      sa[108] = 0.74348253f;
      sa[109] = 0.056226563f;
      sa[110] = 0.6739924f;
      sa[111] = -0.7892288f;
      sa[112] = -1.2304825f;
      sa[113] = 0.12934235f;
      sa[114] = 0.15105347f;
      sa[115] = -0.30668288f;
      sa[116] = 1.1452456f;
      sa[117] = -0.0027218098f;
      sa[118] = -1.3396474f;
      sa[119] = -0.8017078f;
      sa[120] = -0.32636806f;
      sa[121] = 1.0283729f;
      sa[122] = -0.14407264f;
      sa[123] = 0.34460196f;
      sa[124] = -0.7336757f;
      sa[125] = 0.7789884f;
      sa[126] = -1.0435323f;
      sa[127] = 0.49614882f;
      sa[128] = -0.9240199f;
      sa[129] = 0.8519496f;
      sa[130] = -0.4978565f;
      sa[131] = 0.8356238f;
      sa[132] = 0.5360204f;
      sa[133] = 0.6486188f;
      sa[134] = 0.641423f;
      sa[135] = -1.1798047f;
      sa[136] = 0.539582f;
      sa[137] = -0.5478143f;
      sa[138] = -0.12357621f;
      sa[139] = 1.1303306f;
      sa[140] = -0.43306056f;
      sa[141] = -0.11157134f;
      sa[142] = 0.26142812f;
      sa[143] = -0.81370896f;
      sa[144] = 0.8615097f;
      sa[145] = -0.7096152f;
      sa[146] = -0.02888669f;
      sa[147] = -0.32398126f;
      sa[148] = -0.978992f;
      sa[149] = 1.0728505f;
      sa[150] = -1.0855019f;
      sa[151] = -1.4930297f;
      sa[152] = 1.6579189f;
      sa[153] = -0.550087f;
      sa[154] = 1.3533112f;
      sa[155] = -1.49745f;
      sa[156] = -1.4935036f;
      sa[157] = -1.3026204f;
      sa[158] = -0.23162353f;
      sa[159] = -0.5878264f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_32x6_ReLU_05 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_32x6_ReLU_05_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_32x6_ReLU_05_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_32x6_ReLU_05_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_32x6_ReLU_05_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_ReLU_05_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


