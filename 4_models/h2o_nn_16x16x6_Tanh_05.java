/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:41:58.330+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_Tanh_05

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_Tanh_05 > h2o_nn_16x16x6_Tanh_05.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_Tanh_05.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_Tanh_05", algorithm="deeplearning")
public class h2o_nn_16x16x6_Tanh_05 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_05_Activation_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Activation_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_05_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_05_Bias_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Bias_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_05_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_Tanh_05_Weight_0.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Weight_1.VALUES,
      /* Tanh */ h2o_nn_16x16x6_Tanh_05_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_Tanh_05_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_Tanh_05.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_16x16x6_Tanh_05_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.29347826086956524,0.13043478260869565,0.14130434782608695,0.29347826086956524,0.14130434782608695};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_Tanh_05() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(1523296179630894432L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_Tanh_05_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_16x16x6_Tanh_05_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_05_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_05_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_16x16x6_Tanh_05_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_05_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_Tanh_05_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_05_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_Tanh_05_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_05_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_05_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -1.6729804951577895E-5;
      sa[1] = 0.028155484422850936;
      sa[2] = 0.041042463956102414;
      sa[3] = -0.06731324493654894;
      sa[4] = 0.06465758703562442;
      sa[5] = -0.042887118203902536;
      sa[6] = 0.026360796562212227;
      sa[7] = -0.0917907166170683;
      sa[8] = -0.002819825754727894;
      sa[9] = -0.02052396675439881;
      sa[10] = 0.006037394271151695;
      sa[11] = -0.03950521429007318;
      sa[12] = 0.020484691646928826;
      sa[13] = 0.02744772449658314;
      sa[14] = -0.05222876701526449;
      sa[15] = -4.0787009130225727E-4;
    }
  }
}
// Neuron bias values for Tanh layer
class h2o_nn_16x16x6_Tanh_05_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_Tanh_05_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.013383005726367699;
      sa[1] = -0.03348226082797912;
      sa[2] = -0.0661077722406725;
      sa[3] = 0.0011706313471838122;
      sa[4] = 0.0017799141034768326;
      sa[5] = 0.005819732647529927;
      sa[6] = -0.04650424806699344;
      sa[7] = 0.03896927346982226;
      sa[8] = 5.991888317489246E-4;
      sa[9] = 0.022006957438400532;
      sa[10] = 0.09357226125967855;
      sa[11] = 0.05347526291500544;
      sa[12] = 0.05145784495925898;
      sa[13] = -0.03448300060398737;
      sa[14] = -0.03170761764428654;
      sa[15] = 0.00990002414701077;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_Tanh_05_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_Tanh_05_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.04795397764687268;
      sa[1] = -0.01192395102359621;
      sa[2] = -0.02538473781867888;
      sa[3] = -0.04645301892883869;
      sa[4] = -0.08279845230992254;
    }
  }
}
class h2o_nn_16x16x6_Tanh_05_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_16x16x6_Tanh_05_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[208];
  static {
    h2o_nn_16x16x6_Tanh_05_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.14927168f;
      sa[1] = 0.36238715f;
      sa[2] = 0.3132662f;
      sa[3] = 0.28857788f;
      sa[4] = -0.11347512f;
      sa[5] = -0.2870495f;
      sa[6] = 0.0038979019f;
      sa[7] = 0.39601162f;
      sa[8] = 0.23686025f;
      sa[9] = -0.27050063f;
      sa[10] = -0.2537799f;
      sa[11] = -0.30097464f;
      sa[12] = 0.10027812f;
      sa[13] = -0.29648498f;
      sa[14] = -0.36998525f;
      sa[15] = 0.0020245383f;
      sa[16] = 0.10118746f;
      sa[17] = 0.39504904f;
      sa[18] = -0.25883934f;
      sa[19] = 0.20084237f;
      sa[20] = 0.41469714f;
      sa[21] = -0.435569f;
      sa[22] = 0.41558686f;
      sa[23] = -0.02890544f;
      sa[24] = 0.4844885f;
      sa[25] = 0.17191546f;
      sa[26] = -0.46534684f;
      sa[27] = 0.47207892f;
      sa[28] = 0.29556587f;
      sa[29] = -0.46887118f;
      sa[30] = -0.4047688f;
      sa[31] = 0.24203265f;
      sa[32] = 0.24197976f;
      sa[33] = -0.4590402f;
      sa[34] = 0.11951506f;
      sa[35] = -0.112752706f;
      sa[36] = 0.06821045f;
      sa[37] = 0.4028718f;
      sa[38] = -0.13967398f;
      sa[39] = 0.24264644f;
      sa[40] = 0.022648128f;
      sa[41] = -0.16546878f;
      sa[42] = -0.17019191f;
      sa[43] = 0.12148648f;
      sa[44] = 0.26872623f;
      sa[45] = -0.15554504f;
      sa[46] = 0.02064851f;
      sa[47] = -0.01341928f;
      sa[48] = 0.2968518f;
      sa[49] = 0.5307292f;
      sa[50] = 0.3182654f;
      sa[51] = -0.50983006f;
      sa[52] = -0.10883683f;
      sa[53] = 0.2763105f;
      sa[54] = 0.27456734f;
      sa[55] = 0.048360642f;
      sa[56] = -0.22715937f;
      sa[57] = -0.5057302f;
      sa[58] = 0.5826058f;
      sa[59] = -0.26918793f;
      sa[60] = -0.43436965f;
      sa[61] = 0.24189182f;
      sa[62] = 0.20446873f;
      sa[63] = -0.030630132f;
      sa[64] = 0.12347842f;
      sa[65] = 0.21439569f;
      sa[66] = 0.05195153f;
      sa[67] = 0.2709799f;
      sa[68] = 0.21424764f;
      sa[69] = 0.49075958f;
      sa[70] = -0.54491377f;
      sa[71] = 0.9011568f;
      sa[72] = -0.17459065f;
      sa[73] = 0.34734738f;
      sa[74] = -0.33129498f;
      sa[75] = -0.075528234f;
      sa[76] = -0.48170504f;
      sa[77] = -0.14332253f;
      sa[78] = -0.12677537f;
      sa[79] = 0.25629297f;
      sa[80] = -0.32120377f;
      sa[81] = -0.19738398f;
      sa[82] = -0.17202039f;
      sa[83] = 0.15855229f;
      sa[84] = -0.058215596f;
      sa[85] = -0.2768681f;
      sa[86] = 0.23059034f;
      sa[87] = 0.35174018f;
      sa[88] = 0.19895345f;
      sa[89] = 0.048422307f;
      sa[90] = -0.11580949f;
      sa[91] = 0.15215354f;
      sa[92] = 0.09818986f;
      sa[93] = -0.3556991f;
      sa[94] = -0.16071512f;
      sa[95] = -0.3601658f;
      sa[96] = 0.09150243f;
      sa[97] = 0.22577028f;
      sa[98] = 0.2830342f;
      sa[99] = -0.18330553f;
      sa[100] = -0.08368048f;
      sa[101] = -0.16152035f;
      sa[102] = -0.5085507f;
      sa[103] = 0.016697958f;
      sa[104] = 0.06613439f;
      sa[105] = -0.06405459f;
      sa[106] = -0.29371372f;
      sa[107] = 0.09256296f;
      sa[108] = 0.35843349f;
      sa[109] = -0.20146549f;
      sa[110] = -0.38169244f;
      sa[111] = 0.23429422f;
      sa[112] = 0.20843068f;
      sa[113] = 0.07173995f;
      sa[114] = -0.27802676f;
      sa[115] = 0.089862056f;
      sa[116] = -0.51978254f;
      sa[117] = 0.006222492f;
      sa[118] = -0.44831592f;
      sa[119] = -0.2733811f;
      sa[120] = 0.33949208f;
      sa[121] = 0.4648133f;
      sa[122] = 0.40416187f;
      sa[123] = 0.45919505f;
      sa[124] = 0.42880234f;
      sa[125] = 0.39338756f;
      sa[126] = -0.37786296f;
      sa[127] = -0.070507735f;
      sa[128] = 0.14778589f;
      sa[129] = 0.18892825f;
      sa[130] = -0.26427773f;
      sa[131] = 0.50871867f;
      sa[132] = 0.21073757f;
      sa[133] = -0.40897638f;
      sa[134] = 0.0056985384f;
      sa[135] = -0.41332483f;
      sa[136] = -0.24751492f;
      sa[137] = -0.09115321f;
      sa[138] = 0.13717301f;
      sa[139] = -0.18966702f;
      sa[140] = -0.25155294f;
      sa[141] = -0.27556568f;
      sa[142] = 0.2667833f;
      sa[143] = -0.46507162f;
      sa[144] = 0.4334834f;
      sa[145] = -0.24468227f;
      sa[146] = -0.40054923f;
      sa[147] = 0.14687787f;
      sa[148] = 0.25159532f;
      sa[149] = 0.2548444f;
      sa[150] = 0.36987203f;
      sa[151] = -0.39745665f;
      sa[152] = 0.036856145f;
      sa[153] = 0.3571759f;
      sa[154] = 0.2830194f;
      sa[155] = -0.18082687f;
      sa[156] = 0.14058538f;
      sa[157] = -0.34923744f;
      sa[158] = 0.08357964f;
      sa[159] = 0.1276849f;
      sa[160] = 8.7918126E-4f;
      sa[161] = 0.26164645f;
      sa[162] = -0.17165595f;
      sa[163] = -0.12528424f;
      sa[164] = 0.32217625f;
      sa[165] = -0.037174873f;
      sa[166] = -0.045266222f;
      sa[167] = -0.22136149f;
      sa[168] = 0.32919845f;
      sa[169] = 0.43707234f;
      sa[170] = -0.001443992f;
      sa[171] = -0.13469827f;
      sa[172] = -0.123842895f;
      sa[173] = -0.19776554f;
      sa[174] = -0.067443654f;
      sa[175] = -0.23553357f;
      sa[176] = -0.06766172f;
      sa[177] = -0.15439865f;
      sa[178] = -0.033730518f;
      sa[179] = 0.31851238f;
      sa[180] = 0.1525519f;
      sa[181] = -0.56558543f;
      sa[182] = -0.1699448f;
      sa[183] = 0.25909448f;
      sa[184] = 0.5363878f;
      sa[185] = 0.33267242f;
      sa[186] = -0.3611237f;
      sa[187] = 0.08818226f;
      sa[188] = -0.058893777f;
      sa[189] = 0.30692008f;
      sa[190] = 0.13562857f;
      sa[191] = -0.11639439f;
      sa[192] = -0.49961048f;
      sa[193] = 0.24092488f;
      sa[194] = 0.18379134f;
      sa[195] = 0.3853304f;
      sa[196] = 0.327888f;
      sa[197] = -0.07291116f;
      sa[198] = 0.19610283f;
      sa[199] = -0.017783977f;
      sa[200] = -0.056228645f;
      sa[201] = -0.24393393f;
      sa[202] = 0.20525043f;
      sa[203] = -0.052857935f;
      sa[204] = -0.2935119f;
      sa[205] = 0.5151894f;
      sa[206] = 0.31927842f;
      sa[207] = 0.20619605f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class h2o_nn_16x16x6_Tanh_05_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_Tanh_05_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.38715982f;
      sa[1] = -0.06346922f;
      sa[2] = -0.2518648f;
      sa[3] = -0.33279264f;
      sa[4] = 0.026087066f;
      sa[5] = -0.04187762f;
      sa[6] = 0.28815895f;
      sa[7] = -0.14203437f;
      sa[8] = -0.3859497f;
      sa[9] = 0.25393933f;
      sa[10] = 0.023233294f;
      sa[11] = 0.010194679f;
      sa[12] = 0.17392997f;
      sa[13] = -0.0953909f;
      sa[14] = -0.32237822f;
      sa[15] = 0.3526692f;
      sa[16] = 0.5911985f;
      sa[17] = -0.179781f;
      sa[18] = -0.0942979f;
      sa[19] = -0.30664957f;
      sa[20] = 0.3877541f;
      sa[21] = 0.19283092f;
      sa[22] = -0.39027935f;
      sa[23] = 0.3078338f;
      sa[24] = -0.45803043f;
      sa[25] = 0.19681925f;
      sa[26] = 0.056386843f;
      sa[27] = 0.28279343f;
      sa[28] = -0.2949934f;
      sa[29] = -0.27515143f;
      sa[30] = 0.15303619f;
      sa[31] = -0.2155967f;
      sa[32] = -0.10549279f;
      sa[33] = -0.48755607f;
      sa[34] = -0.054427054f;
      sa[35] = 0.18468265f;
      sa[36] = -0.01179003f;
      sa[37] = 0.055352952f;
      sa[38] = -0.06055431f;
      sa[39] = 0.35293624f;
      sa[40] = -0.31741855f;
      sa[41] = -0.35703087f;
      sa[42] = -0.12699656f;
      sa[43] = -0.48130643f;
      sa[44] = 0.05883686f;
      sa[45] = -0.53203535f;
      sa[46] = 0.43188095f;
      sa[47] = 0.34402287f;
      sa[48] = -0.2910108f;
      sa[49] = -0.33625263f;
      sa[50] = 0.115930185f;
      sa[51] = -0.16675566f;
      sa[52] = 0.24952817f;
      sa[53] = 0.20698741f;
      sa[54] = -0.065074876f;
      sa[55] = 0.44098544f;
      sa[56] = -0.35410354f;
      sa[57] = -0.42392516f;
      sa[58] = 0.1295478f;
      sa[59] = -0.089347005f;
      sa[60] = 0.37139085f;
      sa[61] = -0.21092637f;
      sa[62] = -0.05054062f;
      sa[63] = 0.13047212f;
      sa[64] = 0.32925573f;
      sa[65] = -0.06814301f;
      sa[66] = 0.1606187f;
      sa[67] = 0.45104107f;
      sa[68] = 0.2802259f;
      sa[69] = -0.05002311f;
      sa[70] = -0.39008424f;
      sa[71] = -0.123268664f;
      sa[72] = -0.30080324f;
      sa[73] = 0.29596248f;
      sa[74] = 0.2772431f;
      sa[75] = 0.031863492f;
      sa[76] = 0.17642751f;
      sa[77] = 0.17923704f;
      sa[78] = -0.5815554f;
      sa[79] = 0.2004375f;
      sa[80] = -0.20329589f;
      sa[81] = -0.009863813f;
      sa[82] = 0.2745109f;
      sa[83] = -0.13314621f;
      sa[84] = -0.654178f;
      sa[85] = -0.7726898f;
      sa[86] = 0.14395839f;
      sa[87] = 0.35185036f;
      sa[88] = -0.44214305f;
      sa[89] = -0.2663713f;
      sa[90] = -0.2188892f;
      sa[91] = 0.40115425f;
      sa[92] = -0.05568154f;
      sa[93] = 0.08882159f;
      sa[94] = -0.10174791f;
      sa[95] = 0.00587775f;
      sa[96] = -0.14689668f;
      sa[97] = -0.014776311f;
      sa[98] = -0.1060138f;
      sa[99] = -0.106645696f;
      sa[100] = -0.2673812f;
      sa[101] = -0.061472323f;
      sa[102] = 0.277357f;
      sa[103] = 0.112862065f;
      sa[104] = -0.17892174f;
      sa[105] = -0.14309904f;
      sa[106] = 0.52987635f;
      sa[107] = 0.2203643f;
      sa[108] = 0.24904995f;
      sa[109] = -0.12934597f;
      sa[110] = 0.23902875f;
      sa[111] = -0.21131718f;
      sa[112] = -0.38603872f;
      sa[113] = -0.0067000203f;
      sa[114] = 0.16901204f;
      sa[115] = -0.033652972f;
      sa[116] = 0.31411225f;
      sa[117] = -0.22309805f;
      sa[118] = -0.23592916f;
      sa[119] = -0.10491492f;
      sa[120] = -0.13360083f;
      sa[121] = 0.09714081f;
      sa[122] = -0.012856821f;
      sa[123] = 0.14476158f;
      sa[124] = -0.22799242f;
      sa[125] = 0.25781557f;
      sa[126] = -0.21701466f;
      sa[127] = 0.1309475f;
      sa[128] = -0.27861515f;
      sa[129] = 0.18014522f;
      sa[130] = 0.049010366f;
      sa[131] = 0.30848008f;
      sa[132] = 0.11617796f;
      sa[133] = 0.12582788f;
      sa[134] = 0.25176492f;
      sa[135] = -0.2393415f;
      sa[136] = 0.27614304f;
      sa[137] = -0.3133478f;
      sa[138] = -0.06241928f;
      sa[139] = 0.4641364f;
      sa[140] = -0.43957195f;
      sa[141] = 0.12907606f;
      sa[142] = 0.13625127f;
      sa[143] = -0.26186094f;
      sa[144] = 0.2776597f;
      sa[145] = -0.28809282f;
      sa[146] = 0.17197436f;
      sa[147] = -0.0058214674f;
      sa[148] = -0.3137886f;
      sa[149] = 0.14766471f;
      sa[150] = -0.2367007f;
      sa[151] = -0.46552277f;
      sa[152] = 0.510459f;
      sa[153] = -0.17029354f;
      sa[154] = 0.39859283f;
      sa[155] = -0.37341222f;
      sa[156] = -0.37107778f;
      sa[157] = -0.21750177f;
      sa[158] = 0.14559588f;
      sa[159] = -0.14438719f;
      sa[160] = 0.41703278f;
      sa[161] = -0.43915653f;
      sa[162] = 0.53084815f;
      sa[163] = -0.22263016f;
      sa[164] = 0.18082117f;
      sa[165] = -0.2894525f;
      sa[166] = 0.42174903f;
      sa[167] = -0.2497459f;
      sa[168] = 0.27044708f;
      sa[169] = -0.6085921f;
      sa[170] = 0.3867694f;
      sa[171] = 0.24197066f;
      sa[172] = 0.37864882f;
      sa[173] = 0.45437795f;
      sa[174] = 0.10581954f;
      sa[175] = -0.094551034f;
      sa[176] = -0.42533776f;
      sa[177] = 0.11812868f;
      sa[178] = -0.18177171f;
      sa[179] = 0.120289914f;
      sa[180] = -0.51509124f;
      sa[181] = -0.5053973f;
      sa[182] = 0.2277061f;
      sa[183] = -0.3714241f;
      sa[184] = 0.47849688f;
      sa[185] = 0.27079305f;
      sa[186] = -0.27888855f;
      sa[187] = -0.16511212f;
      sa[188] = -0.1676016f;
      sa[189] = -0.034746997f;
      sa[190] = -0.41656512f;
      sa[191] = -0.20303354f;
      sa[192] = -0.14600332f;
      sa[193] = 0.16337204f;
      sa[194] = -0.22737056f;
      sa[195] = -0.124724686f;
      sa[196] = 0.14053106f;
      sa[197] = -0.12047055f;
      sa[198] = 0.058931123f;
      sa[199] = 0.3585776f;
      sa[200] = 0.08934522f;
      sa[201] = 0.23183376f;
      sa[202] = 0.04664858f;
      sa[203] = -0.3177028f;
      sa[204] = 0.07241276f;
      sa[205] = 0.48953053f;
      sa[206] = -0.26597553f;
      sa[207] = 0.11868381f;
      sa[208] = -0.2448964f;
      sa[209] = 0.15152875f;
      sa[210] = -0.10676968f;
      sa[211] = -0.2816269f;
      sa[212] = -0.4158628f;
      sa[213] = -0.36459413f;
      sa[214] = -0.24128714f;
      sa[215] = -0.046365984f;
      sa[216] = 0.0578447f;
      sa[217] = 0.27077743f;
      sa[218] = 0.08750836f;
      sa[219] = 0.072523326f;
      sa[220] = 0.20840362f;
      sa[221] = -0.101723835f;
      sa[222] = -0.18316743f;
      sa[223] = -0.2423891f;
      sa[224] = 0.28527448f;
      sa[225] = 0.027961563f;
      sa[226] = -0.042982273f;
      sa[227] = 0.059456013f;
      sa[228] = -0.20650242f;
      sa[229] = -0.4594256f;
      sa[230] = -0.2504736f;
      sa[231] = -0.17015503f;
      sa[232] = 0.3619734f;
      sa[233] = -0.09554597f;
      sa[234] = -0.08736474f;
      sa[235] = 0.009499979f;
      sa[236] = -0.28072187f;
      sa[237] = 0.36766744f;
      sa[238] = 0.27845863f;
      sa[239] = -2.75714E-4f;
      sa[240] = -0.043041367f;
      sa[241] = -0.36842796f;
      sa[242] = -0.31146213f;
      sa[243] = 0.34562802f;
      sa[244] = 0.19841233f;
      sa[245] = 0.56563264f;
      sa[246] = 0.06512652f;
      sa[247] = -0.37691626f;
      sa[248] = -0.12648799f;
      sa[249] = 0.15222971f;
      sa[250] = 0.20434596f;
      sa[251] = 0.4137853f;
      sa[252] = 0.20079297f;
      sa[253] = -0.3240255f;
      sa[254] = 0.3935415f;
      sa[255] = 0.11849161f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_16x16x6_Tanh_05_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_Tanh_05_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.0012468625f;
      sa[1] = -1.635206f;
      sa[2] = -1.6228333f;
      sa[3] = 1.1465396f;
      sa[4] = 0.37708566f;
      sa[5] = -0.12119704f;
      sa[6] = -1.628189f;
      sa[7] = 1.6050525f;
      sa[8] = 2.0268097f;
      sa[9] = 0.15291046f;
      sa[10] = 1.9475772f;
      sa[11] = 1.614656f;
      sa[12] = 1.8322319f;
      sa[13] = -0.6962966f;
      sa[14] = -1.7642568f;
      sa[15] = -0.858389f;
      sa[16] = 0.69818324f;
      sa[17] = -0.8276748f;
      sa[18] = -1.5344319f;
      sa[19] = -1.002912f;
      sa[20] = -1.8721527f;
      sa[21] = 0.33154026f;
      sa[22] = -1.9759334f;
      sa[23] = -0.64032626f;
      sa[24] = -0.43283024f;
      sa[25] = 1.9475263f;
      sa[26] = -0.27759007f;
      sa[27] = 1.2395264f;
      sa[28] = 1.0961384f;
      sa[29] = -0.7267367f;
      sa[30] = 0.24233381f;
      sa[31] = 0.15604131f;
      sa[32] = 0.62583107f;
      sa[33] = 0.6932924f;
      sa[34] = -0.68360204f;
      sa[35] = 1.1155499f;
      sa[36] = 0.5294778f;
      sa[37] = -1.6083806f;
      sa[38] = 0.42056456f;
      sa[39] = -0.24389091f;
      sa[40] = 0.1654239f;
      sa[41] = -0.55271703f;
      sa[42] = 0.4306097f;
      sa[43] = -0.21872139f;
      sa[44] = 1.0450048f;
      sa[45] = -1.9965556f;
      sa[46] = -2.16378f;
      sa[47] = 0.053208534f;
      sa[48] = 1.7626864f;
      sa[49] = -0.18999209f;
      sa[50] = -0.37048754f;
      sa[51] = 1.8826432f;
      sa[52] = -1.6710379f;
      sa[53] = 0.9727284f;
      sa[54] = 1.8797137f;
      sa[55] = 1.0366898f;
      sa[56] = -0.65084773f;
      sa[57] = -0.05245044f;
      sa[58] = 1.0781796f;
      sa[59] = 0.70278484f;
      sa[60] = -1.3531166f;
      sa[61] = 1.0108695f;
      sa[62] = -0.46679285f;
      sa[63] = -0.86568487f;
      sa[64] = 1.0295427f;
      sa[65] = -1.0705781f;
      sa[66] = -1.8391186f;
      sa[67] = -0.18999988f;
      sa[68] = 0.8761598f;
      sa[69] = -1.3899993f;
      sa[70] = -1.7782743f;
      sa[71] = 0.09105584f;
      sa[72] = -0.9530874f;
      sa[73] = -1.5872062f;
      sa[74] = -1.278041f;
      sa[75] = 1.3886527f;
      sa[76] = 1.8644606f;
      sa[77] = -0.5759131f;
      sa[78] = -1.489202f;
      sa[79] = -0.28976932f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_Tanh_05 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_16x16x6_Tanh_05_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_Tanh_05_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_Tanh_05_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_Tanh_05_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_Tanh_05_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


