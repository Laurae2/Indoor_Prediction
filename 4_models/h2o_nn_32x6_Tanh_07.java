/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:42:24.060+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_32x6_Tanh_07

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_32x6_Tanh_07 > h2o_nn_32x6_Tanh_07.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_32x6_Tanh_07.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_32x6_Tanh_07", algorithm="deeplearning")
public class h2o_nn_32x6_Tanh_07 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,32,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_32x6_Tanh_07_Activation_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_07_Activation_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_07_Activation_2.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_32x6_Tanh_07_Bias_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_07_Bias_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_07_Bias_2.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_32x6_Tanh_07_Weight_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_07_Weight_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_07_Weight_2.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_32x6_Tanh_07.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_32x6_Tanh_07_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.25,0.25,0.125,0.25,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_32x6_Tanh_07() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-5048089530821518784L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_32x6_Tanh_07_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_32x6_Tanh_07_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_07_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_32x6_Tanh_07_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_Tanh_07_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_07_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_32x6_Tanh_07_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_32x6_Tanh_07_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_07_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_32x6_Tanh_07_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_32x6_Tanh_07_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_Tanh_07_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_07_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.01418124679134308;
      sa[1] = 0.025218062467498394;
      sa[2] = -0.028721326784859235;
      sa[3] = -0.1686676884901487;
      sa[4] = -0.06199413551564685;
      sa[5] = -0.024170349751650895;
      sa[6] = 0.05594599093666343;
      sa[7] = 0.07021360622611761;
      sa[8] = -0.04718698245633688;
      sa[9] = 0.030521185115512776;
      sa[10] = 0.036366229462513895;
      sa[11] = 0.0587270264059146;
      sa[12] = 0.057405757573131766;
      sa[13] = 0.039575471860588914;
      sa[14] = -0.009449676178290414;
      sa[15] = 0.05687377063325691;
      sa[16] = -0.03919471481011529;
      sa[17] = 0.014648127500350662;
      sa[18] = -0.03225358635026697;
      sa[19] = -0.011020785384107341;
      sa[20] = 0.1275036155900886;
      sa[21] = -0.027965843556134507;
      sa[22] = -0.06457844235442074;
      sa[23] = 0.03416618091855837;
      sa[24] = -0.0982569147048492;
      sa[25] = 0.1581461741961895;
      sa[26] = -0.10453375155515794;
      sa[27] = 0.08589839082307774;
      sa[28] = -0.0706355508096003;
      sa[29] = 0.1112874219037737;
      sa[30] = -0.013248256253857765;
      sa[31] = 0.046263583970243896;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_32x6_Tanh_07_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_32x6_Tanh_07_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_07_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.13226209371996955;
      sa[1] = -0.04200317915235652;
      sa[2] = -0.05909234207703844;
      sa[3] = 0.10045266192995056;
      sa[4] = -0.15103924102521443;
    }
  }
}
class h2o_nn_32x6_Tanh_07_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_32x6_Tanh_07_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[416];
  static {
    h2o_nn_32x6_Tanh_07_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_07_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.09963486f;
      sa[1] = 0.37359986f;
      sa[2] = 0.2588557f;
      sa[3] = 0.10369158f;
      sa[4] = -0.2241087f;
      sa[5] = -0.1443775f;
      sa[6] = -0.06938957f;
      sa[7] = 0.29702085f;
      sa[8] = 0.20242715f;
      sa[9] = -0.15263188f;
      sa[10] = -0.2711031f;
      sa[11] = -0.12676235f;
      sa[12] = 0.08193482f;
      sa[13] = -0.27000275f;
      sa[14] = -0.28934866f;
      sa[15] = -0.020357845f;
      sa[16] = 0.077400245f;
      sa[17] = 0.015960252f;
      sa[18] = -0.2264647f;
      sa[19] = 0.4111815f;
      sa[20] = 0.30000454f;
      sa[21] = -0.34351537f;
      sa[22] = 0.30672598f;
      sa[23] = -0.0802754f;
      sa[24] = 0.21648611f;
      sa[25] = 0.33519435f;
      sa[26] = -0.36994335f;
      sa[27] = 0.25810748f;
      sa[28] = 0.26030886f;
      sa[29] = -0.32351264f;
      sa[30] = -0.024126006f;
      sa[31] = 0.08926751f;
      sa[32] = 0.28552154f;
      sa[33] = -0.30265373f;
      sa[34] = 0.14705901f;
      sa[35] = -0.17546897f;
      sa[36] = 0.17625956f;
      sa[37] = 0.25994012f;
      sa[38] = -0.023882573f;
      sa[39] = 0.12664606f;
      sa[40] = -0.10369572f;
      sa[41] = -0.18725422f;
      sa[42] = -0.07696371f;
      sa[43] = 0.21774928f;
      sa[44] = 0.16589968f;
      sa[45] = -0.33691216f;
      sa[46] = 0.047964826f;
      sa[47] = -0.0098526515f;
      sa[48] = 0.16741998f;
      sa[49] = 0.68872327f;
      sa[50] = 0.06437753f;
      sa[51] = -0.2704489f;
      sa[52] = -0.07395142f;
      sa[53] = 0.3273437f;
      sa[54] = 0.25013888f;
      sa[55] = -0.0010867647f;
      sa[56] = -0.11758845f;
      sa[57] = -0.3365419f;
      sa[58] = 0.24376193f;
      sa[59] = -0.24847804f;
      sa[60] = -0.33114916f;
      sa[61] = 0.20267221f;
      sa[62] = 0.18605912f;
      sa[63] = 0.011058088f;
      sa[64] = 0.13593337f;
      sa[65] = 0.1711465f;
      sa[66] = 0.10754647f;
      sa[67] = 0.15579174f;
      sa[68] = -0.08581352f;
      sa[69] = 0.14023615f;
      sa[70] = -0.10639754f;
      sa[71] = 0.2683617f;
      sa[72] = -0.21055959f;
      sa[73] = 0.20759454f;
      sa[74] = -0.1503044f;
      sa[75] = 0.116805136f;
      sa[76] = -0.17811269f;
      sa[77] = -0.15413055f;
      sa[78] = -0.028280817f;
      sa[79] = 0.18379244f;
      sa[80] = -0.23253657f;
      sa[81] = -0.14279753f;
      sa[82] = -0.20508443f;
      sa[83] = 0.1850103f;
      sa[84] = 0.023981452f;
      sa[85] = -0.2280562f;
      sa[86] = 0.16796136f;
      sa[87] = 0.35574782f;
      sa[88] = 0.21393207f;
      sa[89] = 0.12401835f;
      sa[90] = -0.21030274f;
      sa[91] = 0.11166732f;
      sa[92] = 0.08946094f;
      sa[93] = -0.2438789f;
      sa[94] = -0.008252657f;
      sa[95] = -0.22180109f;
      sa[96] = 0.04371599f;
      sa[97] = 0.0072112787f;
      sa[98] = 0.27660096f;
      sa[99] = -0.14485489f;
      sa[100] = -0.11992716f;
      sa[101] = -0.248818f;
      sa[102] = -0.31597662f;
      sa[103] = -0.14380798f;
      sa[104] = -0.016822062f;
      sa[105] = -0.24748923f;
      sa[106] = -0.33370176f;
      sa[107] = 0.19386274f;
      sa[108] = 0.18706658f;
      sa[109] = -0.28634772f;
      sa[110] = -0.15603678f;
      sa[111] = 0.16267945f;
      sa[112] = 0.1021128f;
      sa[113] = 0.020005673f;
      sa[114] = 0.012907837f;
      sa[115] = -0.22350329f;
      sa[116] = -0.20125058f;
      sa[117] = 0.015289034f;
      sa[118] = -0.26630428f;
      sa[119] = -0.1687449f;
      sa[120] = 0.156587f;
      sa[121] = 0.22371909f;
      sa[122] = 0.38420865f;
      sa[123] = 0.4006484f;
      sa[124] = 0.34120452f;
      sa[125] = 0.3988987f;
      sa[126] = -0.29476288f;
      sa[127] = -0.30555847f;
      sa[128] = 0.16045024f;
      sa[129] = 0.22029477f;
      sa[130] = -0.15641773f;
      sa[131] = 0.22919938f;
      sa[132] = 0.1946369f;
      sa[133] = -0.42710888f;
      sa[134] = 0.058005188f;
      sa[135] = -0.31122664f;
      sa[136] = -0.095958725f;
      sa[137] = 0.053653833f;
      sa[138] = 0.19733731f;
      sa[139] = -0.18626198f;
      sa[140] = -0.10516933f;
      sa[141] = -0.24868207f;
      sa[142] = 0.4093305f;
      sa[143] = -0.29262096f;
      sa[144] = 0.20514916f;
      sa[145] = -0.15545234f;
      sa[146] = -0.38199005f;
      sa[147] = 0.07179299f;
      sa[148] = 0.25350472f;
      sa[149] = 0.5460327f;
      sa[150] = 0.38373893f;
      sa[151] = -0.2462762f;
      sa[152] = 0.05665373f;
      sa[153] = 0.32052234f;
      sa[154] = 0.17891352f;
      sa[155] = -0.058019433f;
      sa[156] = 0.15251002f;
      sa[157] = -0.28057522f;
      sa[158] = 0.12715937f;
      sa[159] = 0.0553796f;
      sa[160] = 0.061102234f;
      sa[161] = 0.2162033f;
      sa[162] = -0.099335596f;
      sa[163] = -0.029354783f;
      sa[164] = 0.33043817f;
      sa[165] = -0.09708717f;
      sa[166] = -0.12887426f;
      sa[167] = -0.11952205f;
      sa[168] = 0.2921877f;
      sa[169] = 0.39107642f;
      sa[170] = -0.0069256485f;
      sa[171] = -0.0074312733f;
      sa[172] = -0.2123706f;
      sa[173] = -0.2750479f;
      sa[174] = 0.010694119f;
      sa[175] = -0.0980211f;
      sa[176] = -0.003634499f;
      sa[177] = 0.031009078f;
      sa[178] = -0.023378175f;
      sa[179] = 0.065324165f;
      sa[180] = -0.056032076f;
      sa[181] = -0.211026f;
      sa[182] = -0.19394301f;
      sa[183] = -0.019693118f;
      sa[184] = 0.286147f;
      sa[185] = 0.2941025f;
      sa[186] = -0.31669742f;
      sa[187] = 0.03343201f;
      sa[188] = -0.0373375f;
      sa[189] = 0.25420815f;
      sa[190] = -0.014356446f;
      sa[191] = -0.08983065f;
      sa[192] = -0.090839386f;
      sa[193] = 0.17368726f;
      sa[194] = 0.080403596f;
      sa[195] = 0.3612914f;
      sa[196] = 0.49042207f;
      sa[197] = 0.034438502f;
      sa[198] = 0.09579151f;
      sa[199] = 0.0022571017f;
      sa[200] = 0.05178121f;
      sa[201] = -0.62511474f;
      sa[202] = 0.13142298f;
      sa[203] = -0.0032234676f;
      sa[204] = -0.15063408f;
      sa[205] = 0.14789614f;
      sa[206] = 0.40062547f;
      sa[207] = 0.0059458665f;
      sa[208] = -0.272878f;
      sa[209] = -7.9003925E-4f;
      sa[210] = -0.2917943f;
      sa[211] = -0.40462255f;
      sa[212] = 0.15183003f;
      sa[213] = -0.2338485f;
      sa[214] = -0.1097957f;
      sa[215] = 0.020038405f;
      sa[216] = 0.10758647f;
      sa[217] = 0.29700434f;
      sa[218] = -0.23970017f;
      sa[219] = 0.36722523f;
      sa[220] = -0.2945026f;
      sa[221] = 0.006356542f;
      sa[222] = 0.1571303f;
      sa[223] = 0.06577878f;
      sa[224] = 0.027549455f;
      sa[225] = 0.2711852f;
      sa[226] = -0.27534908f;
      sa[227] = 0.54901606f;
      sa[228] = 0.19307725f;
      sa[229] = 0.15066189f;
      sa[230] = 0.22106764f;
      sa[231] = -0.34255078f;
      sa[232] = -0.3143115f;
      sa[233] = 0.23145485f;
      sa[234] = 0.13742882f;
      sa[235] = -0.39839044f;
      sa[236] = -0.06583926f;
      sa[237] = -0.26697847f;
      sa[238] = -0.11854022f;
      sa[239] = 0.08300574f;
      sa[240] = 0.06362002f;
      sa[241] = -0.21585956f;
      sa[242] = -0.066737264f;
      sa[243] = -0.3424067f;
      sa[244] = -0.20175228f;
      sa[245] = -0.22657984f;
      sa[246] = -0.23477161f;
      sa[247] = -0.063375555f;
      sa[248] = 0.29329178f;
      sa[249] = 0.2808747f;
      sa[250] = -0.15651293f;
      sa[251] = -0.059965726f;
      sa[252] = -0.34617338f;
      sa[253] = -0.44624388f;
      sa[254] = -0.33156627f;
      sa[255] = 0.17199513f;
      sa[256] = -0.1852532f;
      sa[257] = 0.4040733f;
      sa[258] = -0.36701143f;
      sa[259] = -0.17358968f;
      sa[260] = -0.2346254f;
      sa[261] = -0.07860961f;
      sa[262] = -0.10732416f;
      sa[263] = 0.296782f;
      sa[264] = -0.4010163f;
      sa[265] = 0.16064125f;
      sa[266] = -0.4067446f;
      sa[267] = -0.30934957f;
      sa[268] = 0.10487138f;
      sa[269] = -0.09748798f;
      sa[270] = -0.17314981f;
      sa[271] = 0.312874f;
      sa[272] = -0.33603498f;
      sa[273] = -0.15425697f;
      sa[274] = 0.17000075f;
      sa[275] = -0.03005409f;
      sa[276] = 0.16147096f;
      sa[277] = -0.2906842f;
      sa[278] = -0.109946094f;
      sa[279] = 0.090274096f;
      sa[280] = -0.2542157f;
      sa[281] = 0.2661558f;
      sa[282] = -0.07719463f;
      sa[283] = 0.0045923796f;
      sa[284] = 0.04578928f;
      sa[285] = -0.26584217f;
      sa[286] = 0.25459644f;
      sa[287] = 0.18330349f;
      sa[288] = -0.23674709f;
      sa[289] = -0.18204296f;
      sa[290] = 0.07419417f;
      sa[291] = -0.030398699f;
      sa[292] = 0.0053126756f;
      sa[293] = -0.10164244f;
      sa[294] = 0.11177581f;
      sa[295] = 0.09081386f;
      sa[296] = 0.32072008f;
      sa[297] = 0.23530157f;
      sa[298] = -0.06129558f;
      sa[299] = -0.025038032f;
      sa[300] = 0.17275092f;
      sa[301] = -0.010054915f;
      sa[302] = 0.1775146f;
      sa[303] = 0.10398744f;
      sa[304] = -0.23267427f;
      sa[305] = -0.25116396f;
      sa[306] = 0.24290666f;
      sa[307] = -0.14995198f;
      sa[308] = 0.114037625f;
      sa[309] = 0.013048821f;
      sa[310] = 0.4894952f;
      sa[311] = 0.22133188f;
      sa[312] = -0.29976264f;
      sa[313] = -0.25551575f;
      sa[314] = -0.2722296f;
      sa[315] = 0.034054212f;
      sa[316] = -0.01987228f;
      sa[317] = -0.14994034f;
      sa[318] = 0.17030434f;
      sa[319] = 0.2941701f;
      sa[320] = -0.12696171f;
      sa[321] = 0.12574188f;
      sa[322] = 0.40070271f;
      sa[323] = -0.32688332f;
      sa[324] = 0.113586016f;
      sa[325] = 0.39196795f;
      sa[326] = -0.38856846f;
      sa[327] = 0.072059646f;
      sa[328] = -0.222202f;
      sa[329] = 0.110340476f;
      sa[330] = -0.1179291f;
      sa[331] = 0.21484183f;
      sa[332] = -0.2493028f;
      sa[333] = 0.22258902f;
      sa[334] = -0.06460601f;
      sa[335] = 0.15907374f;
      sa[336] = -0.18808395f;
      sa[337] = -0.097301535f;
      sa[338] = 0.28058738f;
      sa[339] = -0.21816549f;
      sa[340] = -0.4196619f;
      sa[341] = -0.2250304f;
      sa[342] = 0.20057203f;
      sa[343] = -0.109253645f;
      sa[344] = -0.29386666f;
      sa[345] = 0.18610193f;
      sa[346] = 0.16884568f;
      sa[347] = -0.19431488f;
      sa[348] = 0.42239112f;
      sa[349] = -0.36450124f;
      sa[350] = -0.33189744f;
      sa[351] = 0.18155782f;
      sa[352] = 0.27799258f;
      sa[353] = 0.030271454f;
      sa[354] = 0.0016540465f;
      sa[355] = 0.04428238f;
      sa[356] = -0.12698403f;
      sa[357] = 0.29635444f;
      sa[358] = -0.2975358f;
      sa[359] = 0.12876318f;
      sa[360] = 0.15719974f;
      sa[361] = -0.19968292f;
      sa[362] = -0.052657746f;
      sa[363] = 0.23545036f;
      sa[364] = -0.20510727f;
      sa[365] = -0.2641537f;
      sa[366] = -0.038690176f;
      sa[367] = -0.14963003f;
      sa[368] = -0.0037744013f;
      sa[369] = 0.22966786f;
      sa[370] = -0.42887866f;
      sa[371] = 0.11321298f;
      sa[372] = -0.08598508f;
      sa[373] = 0.27671623f;
      sa[374] = -0.10461308f;
      sa[375] = -0.35012817f;
      sa[376] = -0.43146396f;
      sa[377] = -0.23135296f;
      sa[378] = 0.25770703f;
      sa[379] = 0.11092122f;
      sa[380] = -0.17055348f;
      sa[381] = -0.15566073f;
      sa[382] = -0.06593071f;
      sa[383] = 0.02256658f;
      sa[384] = -0.107752524f;
      sa[385] = 0.16884056f;
      sa[386] = -0.32631892f;
      sa[387] = -0.2860422f;
      sa[388] = 0.04831375f;
      sa[389] = 0.12654631f;
      sa[390] = 0.046551526f;
      sa[391] = 0.027826315f;
      sa[392] = 0.34103227f;
      sa[393] = 0.24609613f;
      sa[394] = -0.194484f;
      sa[395] = 0.4304426f;
      sa[396] = 0.22914055f;
      sa[397] = -0.38596407f;
      sa[398] = 0.11458948f;
      sa[399] = 0.2220258f;
      sa[400] = 0.14237429f;
      sa[401] = 0.4226389f;
      sa[402] = -0.31051302f;
      sa[403] = 0.051717658f;
      sa[404] = 0.22328359f;
      sa[405] = -0.32062927f;
      sa[406] = 0.14716817f;
      sa[407] = 0.25798368f;
      sa[408] = -0.40487483f;
      sa[409] = -0.2818671f;
      sa[410] = -0.091443755f;
      sa[411] = 0.16947508f;
      sa[412] = -0.27171627f;
      sa[413] = 0.13887292f;
      sa[414] = 0.11516145f;
      sa[415] = 0.31758702f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_32x6_Tanh_07_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[160];
  static {
    h2o_nn_32x6_Tanh_07_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_07_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 1.348773f;
      sa[1] = -0.2473128f;
      sa[2] = -0.31350186f;
      sa[3] = -0.8448861f;
      sa[4] = 0.09157947f;
      sa[5] = 0.12712602f;
      sa[6] = 1.4471891f;
      sa[7] = -0.5887737f;
      sa[8] = -1.1692517f;
      sa[9] = 0.5139259f;
      sa[10] = -0.08886344f;
      sa[11] = 0.51542157f;
      sa[12] = 0.08785351f;
      sa[13] = 0.201385f;
      sa[14] = -1.1457547f;
      sa[15] = 1.2859927f;
      sa[16] = 1.8333306f;
      sa[17] = -0.6004794f;
      sa[18] = 0.04558978f;
      sa[19] = -0.44428053f;
      sa[20] = 1.3264132f;
      sa[21] = 0.22553352f;
      sa[22] = -0.86350435f;
      sa[23] = 0.729748f;
      sa[24] = -1.5631238f;
      sa[25] = 0.24005988f;
      sa[26] = -0.5552761f;
      sa[27] = 1.48583f;
      sa[28] = -1.310328f;
      sa[29] = -0.30537966f;
      sa[30] = 0.5874495f;
      sa[31] = -0.8106448f;
      sa[32] = -1.1396923f;
      sa[33] = -1.5726532f;
      sa[34] = -0.09654453f;
      sa[35] = 1.468765f;
      sa[36] = -0.39198512f;
      sa[37] = -0.18621227f;
      sa[38] = 0.16420251f;
      sa[39] = 0.743844f;
      sa[40] = -0.47162575f;
      sa[41] = -1.5633006f;
      sa[42] = -1.0934579f;
      sa[43] = -1.5961391f;
      sa[44] = -0.023311874f;
      sa[45] = -1.2890304f;
      sa[46] = 1.1826303f;
      sa[47] = 1.6133825f;
      sa[48] = -1.2696891f;
      sa[49] = -1.2179756f;
      sa[50] = 0.31295004f;
      sa[51] = -0.11182574f;
      sa[52] = 1.0759752f;
      sa[53] = 0.89206f;
      sa[54] = -0.30771208f;
      sa[55] = 1.2337964f;
      sa[56] = -1.0778288f;
      sa[57] = -1.1413596f;
      sa[58] = 0.30528185f;
      sa[59] = -0.25963414f;
      sa[60] = 1.4025809f;
      sa[61] = -0.6294864f;
      sa[62] = -0.3956483f;
      sa[63] = 0.836969f;
      sa[64] = 1.4350635f;
      sa[65] = -0.5905604f;
      sa[66] = 0.61625606f;
      sa[67] = 1.5708979f;
      sa[68] = 0.72807753f;
      sa[69] = -0.8468084f;
      sa[70] = -1.6286725f;
      sa[71] = -0.45836136f;
      sa[72] = -1.2450434f;
      sa[73] = 1.2482079f;
      sa[74] = 1.4006205f;
      sa[75] = -0.057382394f;
      sa[76] = 0.9074882f;
      sa[77] = 0.4361954f;
      sa[78] = -1.3384244f;
      sa[79] = 0.92404073f;
      sa[80] = -0.7806236f;
      sa[81] = 0.32458577f;
      sa[82] = 0.7940431f;
      sa[83] = -0.5930745f;
      sa[84] = -1.6766217f;
      sa[85] = -1.309334f;
      sa[86] = 0.26261812f;
      sa[87] = 1.2631862f;
      sa[88] = -1.4815875f;
      sa[89] = -0.44203654f;
      sa[90] = -1.0280706f;
      sa[91] = 1.5574515f;
      sa[92] = -0.3524793f;
      sa[93] = 0.27469754f;
      sa[94] = -1.6249018f;
      sa[95] = -0.139681f;
      sa[96] = -1.1176354f;
      sa[97] = 0.35677832f;
      sa[98] = -0.09677225f;
      sa[99] = 0.17293659f;
      sa[100] = -1.2016772f;
      sa[101] = -0.35757217f;
      sa[102] = 1.2216014f;
      sa[103] = 0.10803816f;
      sa[104] = -0.23007974f;
      sa[105] = -0.43564296f;
      sa[106] = 1.3714906f;
      sa[107] = 1.1553257f;
      sa[108] = 0.79420424f;
      sa[109] = 0.021746423f;
      sa[110] = 0.70164216f;
      sa[111] = -0.9405601f;
      sa[112] = -1.1778972f;
      sa[113] = 0.24545062f;
      sa[114] = 0.34402454f;
      sa[115] = -0.5017939f;
      sa[116] = 1.1404071f;
      sa[117] = 0.074194424f;
      sa[118] = -1.4809796f;
      sa[119] = -0.89399934f;
      sa[120] = -0.25720468f;
      sa[121] = 1.1406059f;
      sa[122] = -0.097806826f;
      sa[123] = 0.41759416f;
      sa[124] = -0.7500564f;
      sa[125] = 0.7541135f;
      sa[126] = -0.9505512f;
      sa[127] = 0.33597526f;
      sa[128] = -1.0914432f;
      sa[129] = 0.75610435f;
      sa[130] = -0.38611966f;
      sa[131] = 0.96390814f;
      sa[132] = 0.48450392f;
      sa[133] = 0.617828f;
      sa[134] = 0.7043555f;
      sa[135] = -1.1410279f;
      sa[136] = 0.5873086f;
      sa[137] = -0.61717826f;
      sa[138] = -0.12586327f;
      sa[139] = 1.1897805f;
      sa[140] = -0.47673157f;
      sa[141] = -0.041610427f;
      sa[142] = 0.22390732f;
      sa[143] = -0.78169096f;
      sa[144] = 0.90015924f;
      sa[145] = -0.78321856f;
      sa[146] = -0.0045944513f;
      sa[147] = -0.22995125f;
      sa[148] = -0.85503346f;
      sa[149] = 1.1006662f;
      sa[150] = -0.98889834f;
      sa[151] = -1.5321378f;
      sa[152] = 1.6289253f;
      sa[153] = -0.57551575f;
      sa[154] = 1.3554755f;
      sa[155] = -1.5478876f;
      sa[156] = -1.4301455f;
      sa[157] = -1.1404073f;
      sa[158] = -0.22987987f;
      sa[159] = -0.532963f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_32x6_Tanh_07 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_32x6_Tanh_07_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_32x6_Tanh_07_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_32x6_Tanh_07_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_32x6_Tanh_07_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_07_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


