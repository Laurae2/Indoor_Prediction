/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:43:22.468+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_32x6_Tanh_11

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_32x6_Tanh_11 > h2o_nn_32x6_Tanh_11.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_32x6_Tanh_11.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_32x6_Tanh_11", algorithm="deeplearning")
public class h2o_nn_32x6_Tanh_11 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 6; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,32,6};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_32x6_Tanh_11_Activation_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_11_Activation_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_11_Activation_2.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_32x6_Tanh_11_Bias_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_11_Bias_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_11_Bias_2.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_32x6_Tanh_11_Weight_0.VALUES,
      /* Tanh */ h2o_nn_32x6_Tanh_11_Weight_1.VALUES,
      /* Softmax */ h2o_nn_32x6_Tanh_11_Weight_2.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_32x6_Tanh_11.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 6;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_32x6_Tanh_11_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.2548076923076923,0.18269230769230768,0.057692307692307696,0.125,0.2548076923076923,0.125};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_32x6_Tanh_11() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(7653471634993171872L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1 - 2 / (1 + Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_32x6_Tanh_11_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_32x6_Tanh_11_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_11_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Tanh layer
class h2o_nn_32x6_Tanh_11_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_Tanh_11_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_11_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_32x6_Tanh_11_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_32x6_Tanh_11_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_11_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_32x6_Tanh_11_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Tanh layer
class h2o_nn_32x6_Tanh_11_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[32];
  static {
    h2o_nn_32x6_Tanh_11_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_11_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.003671914644183537;
      sa[1] = 0.09853244352258862;
      sa[2] = -0.16234332004941496;
      sa[3] = -0.27943451550039666;
      sa[4] = -0.03675273383658236;
      sa[5] = 0.025420881446194577;
      sa[6] = 0.1013557026055858;
      sa[7] = 6.736055409538067E-4;
      sa[8] = -0.05558270581202654;
      sa[9] = 0.15007810602637078;
      sa[10] = 0.011452147111019047;
      sa[11] = 0.1102663407811996;
      sa[12] = -0.029205836813446608;
      sa[13] = 0.00511900153854696;
      sa[14] = -0.019269011511109067;
      sa[15] = 0.010816312085597236;
      sa[16] = 0.08390761889943084;
      sa[17] = 0.030047390320202108;
      sa[18] = -0.01674642059362184;
      sa[19] = -0.0337009163619548;
      sa[20] = 0.10910513810843904;
      sa[21] = 0.023938535167413892;
      sa[22] = -0.06852782432627724;
      sa[23] = 0.023792949894529864;
      sa[24] = -0.062071469883100826;
      sa[25] = 0.07856625272881462;
      sa[26] = 0.018470459057253554;
      sa[27] = 0.0762223470589407;
      sa[28] = -0.14287459876260564;
      sa[29] = 0.07195404901419254;
      sa[30] = 0.04187034222031317;
      sa[31] = 0.06810467218939521;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_32x6_Tanh_11_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[6];
  static {
    h2o_nn_32x6_Tanh_11_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_11_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.13483285212147944;
      sa[1] = -0.17041887089710261;
      sa[2] = -0.09778052711427458;
      sa[3] = 0.05447655837161965;
      sa[4] = -0.059012229995900715;
      sa[5] = -0.13489785580241886;
    }
  }
}
class h2o_nn_32x6_Tanh_11_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class h2o_nn_32x6_Tanh_11_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[416];
  static {
    h2o_nn_32x6_Tanh_11_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_11_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.002371809f;
      sa[1] = 0.3046108f;
      sa[2] = 0.09094985f;
      sa[3] = 0.116340354f;
      sa[4] = -0.36639377f;
      sa[5] = -0.1444415f;
      sa[6] = -0.09016141f;
      sa[7] = 0.23762928f;
      sa[8] = 0.08347284f;
      sa[9] = -0.084886126f;
      sa[10] = -0.11338269f;
      sa[11] = -0.07807942f;
      sa[12] = -0.069686845f;
      sa[13] = -0.32268927f;
      sa[14] = -0.13685675f;
      sa[15] = 0.060265746f;
      sa[16] = -0.01276294f;
      sa[17] = -0.07635866f;
      sa[18] = -0.26017156f;
      sa[19] = 0.30279142f;
      sa[20] = 0.31831914f;
      sa[21] = -0.25126642f;
      sa[22] = 0.27033216f;
      sa[23] = -0.29477468f;
      sa[24] = 0.23880368f;
      sa[25] = 0.47193068f;
      sa[26] = -0.38742277f;
      sa[27] = 0.26780713f;
      sa[28] = 0.1162876f;
      sa[29] = -0.24601492f;
      sa[30] = -0.07079532f;
      sa[31] = 0.11376135f;
      sa[32] = 0.22821468f;
      sa[33] = -0.36666855f;
      sa[34] = 0.029761005f;
      sa[35] = -0.113346264f;
      sa[36] = 0.19343f;
      sa[37] = 0.41834152f;
      sa[38] = -0.26983184f;
      sa[39] = 0.12750208f;
      sa[40] = 0.123511f;
      sa[41] = -0.036754448f;
      sa[42] = -0.07794118f;
      sa[43] = 0.010529759f;
      sa[44] = 0.15836768f;
      sa[45] = -0.72940534f;
      sa[46] = 0.07705325f;
      sa[47] = 0.10254672f;
      sa[48] = 0.05736596f;
      sa[49] = 0.086761415f;
      sa[50] = 0.280567f;
      sa[51] = -0.42140025f;
      sa[52] = -0.12121288f;
      sa[53] = 0.20174801f;
      sa[54] = 0.18336931f;
      sa[55] = -0.013475857f;
      sa[56] = -0.40507057f;
      sa[57] = -0.21504493f;
      sa[58] = 0.19040394f;
      sa[59] = -0.25126272f;
      sa[60] = -0.38261938f;
      sa[61] = 0.26825082f;
      sa[62] = 0.187127f;
      sa[63] = 0.043988533f;
      sa[64] = 0.083240315f;
      sa[65] = 0.1534387f;
      sa[66] = 0.1314075f;
      sa[67] = 0.24333487f;
      sa[68] = -0.15712507f;
      sa[69] = 0.10849714f;
      sa[70] = -0.03412866f;
      sa[71] = 0.3053139f;
      sa[72] = -0.1801643f;
      sa[73] = 0.25043693f;
      sa[74] = -0.18699272f;
      sa[75] = 0.014553007f;
      sa[76] = -0.26006693f;
      sa[77] = 0.08477835f;
      sa[78] = -0.014855349f;
      sa[79] = 0.2478188f;
      sa[80] = -0.21288294f;
      sa[81] = -0.12153384f;
      sa[82] = 0.061150577f;
      sa[83] = 0.18030018f;
      sa[84] = 0.1431524f;
      sa[85] = -0.1980792f;
      sa[86] = 0.1782746f;
      sa[87] = 0.42754564f;
      sa[88] = 0.47031176f;
      sa[89] = 0.005685545f;
      sa[90] = -0.03378025f;
      sa[91] = 0.19740945f;
      sa[92] = 0.2359492f;
      sa[93] = -0.118168265f;
      sa[94] = -0.14841878f;
      sa[95] = -3.1556966E-4f;
      sa[96] = 0.06266103f;
      sa[97] = -0.0096961055f;
      sa[98] = 0.27211106f;
      sa[99] = -0.06185094f;
      sa[100] = -0.13737965f;
      sa[101] = -0.32382852f;
      sa[102] = -0.3309875f;
      sa[103] = -0.19105397f;
      sa[104] = 0.018835774f;
      sa[105] = -0.34003857f;
      sa[106] = -0.36373433f;
      sa[107] = 0.24550956f;
      sa[108] = 0.32445556f;
      sa[109] = -0.23904875f;
      sa[110] = -0.0844034f;
      sa[111] = 0.2155766f;
      sa[112] = 0.11431341f;
      sa[113] = 0.041433837f;
      sa[114] = 0.023586808f;
      sa[115] = -0.20493764f;
      sa[116] = 0.005526514f;
      sa[117] = -0.042608798f;
      sa[118] = -0.11901662f;
      sa[119] = -0.14163698f;
      sa[120] = 0.04203821f;
      sa[121] = -0.042691536f;
      sa[122] = 0.37388152f;
      sa[123] = 0.30387416f;
      sa[124] = 0.30787393f;
      sa[125] = 0.4130838f;
      sa[126] = -0.2893377f;
      sa[127] = -0.52444065f;
      sa[128] = 0.21327871f;
      sa[129] = 0.009129123f;
      sa[130] = -0.19919564f;
      sa[131] = 0.2651533f;
      sa[132] = 0.0947772f;
      sa[133] = -0.3389704f;
      sa[134] = 0.03516125f;
      sa[135] = -0.42069894f;
      sa[136] = -0.09302175f;
      sa[137] = 0.01003882f;
      sa[138] = 0.1779756f;
      sa[139] = -0.1861904f;
      sa[140] = -0.014347004f;
      sa[141] = -0.29891607f;
      sa[142] = 0.25677168f;
      sa[143] = -0.35064378f;
      sa[144] = 0.27720395f;
      sa[145] = -0.16539243f;
      sa[146] = -0.42347598f;
      sa[147] = -0.050252136f;
      sa[148] = 0.21664889f;
      sa[149] = 0.46344352f;
      sa[150] = 0.3948177f;
      sa[151] = -0.24052764f;
      sa[152] = 0.066825755f;
      sa[153] = 0.36877096f;
      sa[154] = 0.10902442f;
      sa[155] = 0.01155012f;
      sa[156] = 0.14660826f;
      sa[157] = -0.30925795f;
      sa[158] = -0.015744505f;
      sa[159] = 0.22457676f;
      sa[160] = 0.24079926f;
      sa[161] = 0.15529251f;
      sa[162] = -0.09825442f;
      sa[163] = -0.07613564f;
      sa[164] = 0.23995063f;
      sa[165] = -0.040464643f;
      sa[166] = 0.0158213f;
      sa[167] = -0.085881844f;
      sa[168] = 0.08007905f;
      sa[169] = 0.3111418f;
      sa[170] = -0.054003466f;
      sa[171] = -0.22679059f;
      sa[172] = -0.07963923f;
      sa[173] = -0.31864783f;
      sa[174] = -0.028585354f;
      sa[175] = -0.17180386f;
      sa[176] = -0.07924701f;
      sa[177] = -0.11924549f;
      sa[178] = 0.04842634f;
      sa[179] = 0.2405755f;
      sa[180] = -0.007082554f;
      sa[181] = -0.37349114f;
      sa[182] = -0.09463269f;
      sa[183] = -0.0092629f;
      sa[184] = 0.44521475f;
      sa[185] = 0.33727515f;
      sa[186] = -0.1312535f;
      sa[187] = 0.045942556f;
      sa[188] = -0.018527253f;
      sa[189] = 0.32324228f;
      sa[190] = 0.095487066f;
      sa[191] = -0.13360193f;
      sa[192] = -0.04476897f;
      sa[193] = 0.13667327f;
      sa[194] = 0.23974237f;
      sa[195] = 0.3446598f;
      sa[196] = 0.38712388f;
      sa[197] = -0.045599043f;
      sa[198] = 0.11421825f;
      sa[199] = 0.0631467f;
      sa[200] = 0.11888026f;
      sa[201] = -0.581107f;
      sa[202] = 0.08631011f;
      sa[203] = -0.10412982f;
      sa[204] = -0.11409747f;
      sa[205] = 0.22523634f;
      sa[206] = 0.42806554f;
      sa[207] = -0.131826f;
      sa[208] = -0.31624985f;
      sa[209] = 0.019598844f;
      sa[210] = -0.30619663f;
      sa[211] = -0.52128994f;
      sa[212] = -0.072910056f;
      sa[213] = -0.18118758f;
      sa[214] = -0.13258217f;
      sa[215] = 0.037321355f;
      sa[216] = 0.10209637f;
      sa[217] = 0.298882f;
      sa[218] = -0.33117276f;
      sa[219] = 0.35210025f;
      sa[220] = -0.2771895f;
      sa[221] = 0.0017022499f;
      sa[222] = 0.14812298f;
      sa[223] = 0.0019647304f;
      sa[224] = 0.14225142f;
      sa[225] = 0.36791122f;
      sa[226] = -0.460753f;
      sa[227] = 0.655947f;
      sa[228] = 0.17664878f;
      sa[229] = 0.1368524f;
      sa[230] = 0.22734898f;
      sa[231] = -0.12600893f;
      sa[232] = -0.3860692f;
      sa[233] = 0.09023609f;
      sa[234] = 0.1508714f;
      sa[235] = -0.2536623f;
      sa[236] = 0.022011483f;
      sa[237] = -0.37526184f;
      sa[238] = -0.4316461f;
      sa[239] = 0.07022099f;
      sa[240] = -0.032274492f;
      sa[241] = -0.25560713f;
      sa[242] = -0.040303167f;
      sa[243] = -0.32251406f;
      sa[244] = -0.36441275f;
      sa[245] = -0.14570637f;
      sa[246] = -0.402161f;
      sa[247] = -0.009481006f;
      sa[248] = 0.11096286f;
      sa[249] = 0.34937218f;
      sa[250] = -0.074128516f;
      sa[251] = 0.099831395f;
      sa[252] = -0.39062274f;
      sa[253] = -0.24193469f;
      sa[254] = -0.18524492f;
      sa[255] = 0.25205818f;
      sa[256] = -0.2732248f;
      sa[257] = 0.5100611f;
      sa[258] = -0.45301706f;
      sa[259] = 0.025820468f;
      sa[260] = -0.17500177f;
      sa[261] = 0.033464264f;
      sa[262] = -0.029325005f;
      sa[263] = 0.30043486f;
      sa[264] = -0.06269127f;
      sa[265] = 0.06614344f;
      sa[266] = -0.28495216f;
      sa[267] = -0.27796036f;
      sa[268] = 0.17580046f;
      sa[269] = -0.15656677f;
      sa[270] = -0.11744171f;
      sa[271] = 0.18778501f;
      sa[272] = -0.14434014f;
      sa[273] = -0.10164307f;
      sa[274] = 0.18862113f;
      sa[275] = 0.18721569f;
      sa[276] = 0.0861498f;
      sa[277] = -0.25008276f;
      sa[278] = -0.06526312f;
      sa[279] = 0.1651308f;
      sa[280] = -0.17653339f;
      sa[281] = 0.39689898f;
      sa[282] = -0.13166958f;
      sa[283] = -0.120961055f;
      sa[284] = -0.020434687f;
      sa[285] = 0.0155728115f;
      sa[286] = 0.26221514f;
      sa[287] = 0.03882085f;
      sa[288] = -0.3490312f;
      sa[289] = -0.12934135f;
      sa[290] = -0.0029880344f;
      sa[291] = 0.033367198f;
      sa[292] = 0.04490425f;
      sa[293] = -0.1368806f;
      sa[294] = 0.036875498f;
      sa[295] = 0.1429801f;
      sa[296] = 0.37927002f;
      sa[297] = 0.31204227f;
      sa[298] = -0.20686273f;
      sa[299] = -0.020097101f;
      sa[300] = 0.12507467f;
      sa[301] = -0.058000907f;
      sa[302] = 0.14896762f;
      sa[303] = 0.08579049f;
      sa[304] = -0.21678303f;
      sa[305] = -0.3032996f;
      sa[306] = 0.16685942f;
      sa[307] = -0.22132315f;
      sa[308] = 0.15473942f;
      sa[309] = 0.05423031f;
      sa[310] = 0.4986119f;
      sa[311] = -0.030686796f;
      sa[312] = -0.26988056f;
      sa[313] = -0.41653314f;
      sa[314] = -0.23638219f;
      sa[315] = 0.017786281f;
      sa[316] = -0.051154356f;
      sa[317] = -0.08178499f;
      sa[318] = 0.17660473f;
      sa[319] = 0.3369935f;
      sa[320] = -0.0817677f;
      sa[321] = 0.1499744f;
      sa[322] = 0.41772908f;
      sa[323] = -0.31660217f;
      sa[324] = 0.343131f;
      sa[325] = 0.3602478f;
      sa[326] = -0.40071943f;
      sa[327] = -0.039175782f;
      sa[328] = -0.007182633f;
      sa[329] = 0.4685286f;
      sa[330] = -0.36817378f;
      sa[331] = 0.38457847f;
      sa[332] = -0.27693868f;
      sa[333] = 0.15896374f;
      sa[334] = -0.07752982f;
      sa[335] = 0.47743538f;
      sa[336] = -0.27322623f;
      sa[337] = -0.08461513f;
      sa[338] = 0.35474804f;
      sa[339] = -0.3015079f;
      sa[340] = -0.2562321f;
      sa[341] = -0.29727805f;
      sa[342] = 0.179583f;
      sa[343] = -0.056542844f;
      sa[344] = -0.22696461f;
      sa[345] = 0.28280762f;
      sa[346] = 0.29383907f;
      sa[347] = -0.22370315f;
      sa[348] = 0.34414083f;
      sa[349] = -0.42998677f;
      sa[350] = -0.067922845f;
      sa[351] = 0.11631322f;
      sa[352] = 0.49581322f;
      sa[353] = -0.021319447f;
      sa[354] = 0.02112367f;
      sa[355] = 0.04103673f;
      sa[356] = -0.21626282f;
      sa[357] = 0.25794715f;
      sa[358] = -0.35836497f;
      sa[359] = 0.0615279f;
      sa[360] = 0.14737543f;
      sa[361] = -0.23347141f;
      sa[362] = -0.07950291f;
      sa[363] = -0.06727952f;
      sa[364] = -0.11873874f;
      sa[365] = -0.29657993f;
      sa[366] = -0.037784003f;
      sa[367] = 0.124273114f;
      sa[368] = 0.18620242f;
      sa[369] = 0.25161633f;
      sa[370] = -0.3674972f;
      sa[371] = 0.11219656f;
      sa[372] = -0.08487658f;
      sa[373] = 0.3046598f;
      sa[374] = -0.03737282f;
      sa[375] = -0.29654914f;
      sa[376] = -0.518843f;
      sa[377] = -0.24407746f;
      sa[378] = 0.44359577f;
      sa[379] = 0.09487889f;
      sa[380] = -0.120349795f;
      sa[381] = -0.098294616f;
      sa[382] = -0.22677577f;
      sa[383] = 0.06348982f;
      sa[384] = -0.16056421f;
      sa[385] = 0.15271387f;
      sa[386] = -0.35873985f;
      sa[387] = -0.3093216f;
      sa[388] = 0.07283789f;
      sa[389] = -0.04632248f;
      sa[390] = 0.029114861f;
      sa[391] = 0.08292173f;
      sa[392] = 0.43833917f;
      sa[393] = 0.07173212f;
      sa[394] = -0.15357846f;
      sa[395] = 0.50777334f;
      sa[396] = 0.2671675f;
      sa[397] = -0.4225593f;
      sa[398] = 0.12237587f;
      sa[399] = 0.20007539f;
      sa[400] = 0.1276276f;
      sa[401] = 0.34674242f;
      sa[402] = -0.12503658f;
      sa[403] = 0.14850217f;
      sa[404] = 0.33830932f;
      sa[405] = -0.16676214f;
      sa[406] = -0.032390844f;
      sa[407] = 0.45602602f;
      sa[408] = -0.36422095f;
      sa[409] = -0.3119378f;
      sa[410] = -0.09188829f;
      sa[411] = 0.27560726f;
      sa[412] = -0.26895383f;
      sa[413] = 0.025931455f;
      sa[414] = 0.08211388f;
      sa[415] = 0.30425704f;
    }
  }
}
// Neuron weights connecting Tanh and Softmax layer
class h2o_nn_32x6_Tanh_11_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[192];
  static {
    h2o_nn_32x6_Tanh_11_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_11_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 1.1949701f;
      sa[1] = -0.24569145f;
      sa[2] = -0.10971589f;
      sa[3] = -0.73564786f;
      sa[4] = 0.117747635f;
      sa[5] = 0.14150392f;
      sa[6] = 1.3705733f;
      sa[7] = -0.51924825f;
      sa[8] = -1.1522212f;
      sa[9] = 0.48579296f;
      sa[10] = -0.24515356f;
      sa[11] = 0.7692893f;
      sa[12] = -0.22993699f;
      sa[13] = 0.24029167f;
      sa[14] = -1.235852f;
      sa[15] = 1.1210369f;
      sa[16] = 1.9021312f;
      sa[17] = -0.54912895f;
      sa[18] = 0.14359498f;
      sa[19] = -0.588421f;
      sa[20] = 1.1764044f;
      sa[21] = 0.23031443f;
      sa[22] = -0.7744309f;
      sa[23] = 0.7029701f;
      sa[24] = -1.5011175f;
      sa[25] = 0.080148675f;
      sa[26] = -0.5513074f;
      sa[27] = 1.5004241f;
      sa[28] = -1.3245233f;
      sa[29] = -0.32705784f;
      sa[30] = 0.68023366f;
      sa[31] = -0.72129f;
      sa[32] = -1.1667929f;
      sa[33] = -1.6055831f;
      sa[34] = -0.093119726f;
      sa[35] = 1.461193f;
      sa[36] = -0.41553754f;
      sa[37] = -0.20542984f;
      sa[38] = 0.06717022f;
      sa[39] = 0.70200974f;
      sa[40] = -0.5530513f;
      sa[41] = -1.3837559f;
      sa[42] = -1.0546178f;
      sa[43] = -1.5329766f;
      sa[44] = 0.17979667f;
      sa[45] = -1.2681075f;
      sa[46] = 1.1460565f;
      sa[47] = 1.4623944f;
      sa[48] = -1.3634659f;
      sa[49] = -1.0612513f;
      sa[50] = 0.26378813f;
      sa[51] = -0.2783522f;
      sa[52] = 0.96926f;
      sa[53] = 0.6800533f;
      sa[54] = -0.330103f;
      sa[55] = 1.2043287f;
      sa[56] = -1.1782068f;
      sa[57] = -0.9570687f;
      sa[58] = 0.24537227f;
      sa[59] = -0.2255289f;
      sa[60] = 1.4018394f;
      sa[61] = -0.6416104f;
      sa[62] = -0.38828543f;
      sa[63] = 0.7373948f;
      sa[64] = 1.4470414f;
      sa[65] = -0.65070677f;
      sa[66] = 0.7374692f;
      sa[67] = 1.6313367f;
      sa[68] = 0.7014675f;
      sa[69] = -1.054323f;
      sa[70] = -1.5309373f;
      sa[71] = -0.39577124f;
      sa[72] = -1.1967981f;
      sa[73] = 1.1056005f;
      sa[74] = 1.2928243f;
      sa[75] = -0.07393621f;
      sa[76] = 0.734803f;
      sa[77] = 0.584889f;
      sa[78] = -1.2879204f;
      sa[79] = 1.005071f;
      sa[80] = -0.6487337f;
      sa[81] = 0.18540503f;
      sa[82] = 0.91339684f;
      sa[83] = -0.583934f;
      sa[84] = -1.4946309f;
      sa[85] = -1.1231306f;
      sa[86] = 0.33451855f;
      sa[87] = 1.2327367f;
      sa[88] = -1.6252861f;
      sa[89] = -0.5274992f;
      sa[90] = -1.031885f;
      sa[91] = 1.4768162f;
      sa[92] = -0.29297835f;
      sa[93] = 0.38504115f;
      sa[94] = -1.5253637f;
      sa[95] = -0.23441163f;
      sa[96] = -0.98483634f;
      sa[97] = 0.25576505f;
      sa[98] = -0.112311535f;
      sa[99] = 0.16778973f;
      sa[100] = -1.1471775f;
      sa[101] = -0.19062664f;
      sa[102] = 1.2110685f;
      sa[103] = 0.05397802f;
      sa[104] = -0.059928488f;
      sa[105] = -0.528209f;
      sa[106] = 1.5608648f;
      sa[107] = 1.1149509f;
      sa[108] = 0.71610826f;
      sa[109] = -0.038408544f;
      sa[110] = 0.6951559f;
      sa[111] = -0.86219466f;
      sa[112] = -1.2007463f;
      sa[113] = 0.32113996f;
      sa[114] = 0.0864035f;
      sa[115] = -0.21019572f;
      sa[116] = 1.0729109f;
      sa[117] = 0.14955771f;
      sa[118] = -1.3733721f;
      sa[119] = -0.8060679f;
      sa[120] = -0.19981733f;
      sa[121] = 1.249402f;
      sa[122] = -0.05955963f;
      sa[123] = 0.44424638f;
      sa[124] = -0.8105097f;
      sa[125] = 0.78275216f;
      sa[126] = -1.1010822f;
      sa[127] = 0.5325566f;
      sa[128] = -0.65676916f;
      sa[129] = 0.92055994f;
      sa[130] = -0.42324635f;
      sa[131] = 0.7520968f;
      sa[132] = 0.47342098f;
      sa[133] = 0.5730788f;
      sa[134] = 0.4908672f;
      sa[135] = -1.0487398f;
      sa[136] = 0.39353353f;
      sa[137] = -0.393323f;
      sa[138] = 0.013899825f;
      sa[139] = 1.1006889f;
      sa[140] = -0.37944698f;
      sa[141] = -0.2614736f;
      sa[142] = 0.45675716f;
      sa[143] = -0.806012f;
      sa[144] = 0.8679009f;
      sa[145] = -0.80317783f;
      sa[146] = 0.09194092f;
      sa[147] = -0.32832727f;
      sa[148] = -0.8662508f;
      sa[149] = 1.0929955f;
      sa[150] = -1.2454627f;
      sa[151] = -1.5723243f;
      sa[152] = 1.6090628f;
      sa[153] = -0.75142777f;
      sa[154] = 1.2593831f;
      sa[155] = -1.5301492f;
      sa[156] = -1.4392644f;
      sa[157] = -1.070889f;
      sa[158] = -0.28072596f;
      sa[159] = -0.59794986f;
      sa[160] = 1.0712435f;
      sa[161] = -1.0432488f;
      sa[162] = 1.4724177f;
      sa[163] = -0.713672f;
      sa[164] = 0.7413931f;
      sa[165] = -0.5782334f;
      sa[166] = 1.5204899f;
      sa[167] = -1.5549864f;
      sa[168] = 1.1653495f;
      sa[169] = -1.5413723f;
      sa[170] = 0.94843554f;
      sa[171] = 0.9347269f;
      sa[172] = 1.5586884f;
      sa[173] = 1.4998388f;
      sa[174] = -0.24510588f;
      sa[175] = -0.0020851316f;
      sa[176] = -0.84769607f;
      sa[177] = 0.11072962f;
      sa[178] = -1.2111226f;
      sa[179] = -0.30578303f;
      sa[180] = -1.3923684f;
      sa[181] = -1.0363585f;
      sa[182] = 0.53912884f;
      sa[183] = -0.8317867f;
      sa[184] = 1.57576f;
      sa[185] = 1.3432453f;
      sa[186] = -0.48352912f;
      sa[187] = -1.0517412f;
      sa[188] = -0.45833907f;
      sa[189] = -0.89510375f;
      sa[190] = -1.39914f;
      sa[191] = -1.0103954f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_32x6_Tanh_11 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_32x6_Tanh_11_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_32x6_Tanh_11_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_32x6_Tanh_11_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    h2o_nn_32x6_Tanh_11_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_32x6_Tanh_11_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
    }
  }
}


