/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-12-26T14:43:38.863+01:00
  3.10.0.8
  
  Standalone prediction code with sample test data for DeepLearningModel named h2o_nn_16x16x6_ReLU_12

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/h2o_nn_16x16x6_ReLU_12 > h2o_nn_16x16x6_ReLU_12.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m h2o_nn_16x16x6_ReLU_12.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="h2o_nn_16x16x6_ReLU_12", algorithm="deeplearning")
public class h2o_nn_16x16x6_ReLU_12 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 5; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[13];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = null;
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {13,16,16,5};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_12_Activation_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Activation_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Activation_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_12_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_12_Bias_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Bias_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Bias_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_12_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ h2o_nn_16x16x6_ReLU_12_Weight_0.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Weight_1.VALUES,
      /* Rectifier */ h2o_nn_16x16x6_ReLU_12_Weight_2.VALUES,
      /* Softmax */ h2o_nn_16x16x6_ReLU_12_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_h2o_nn_16x16x6_ReLU_12.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* X5 */ null,
    /* X12 */ null,
    /* X15 */ null,
    /* X17 */ null,
    /* X18 */ null,
    /* X19 */ null,
    /* X20 */ null,
    /* X21 */ null,
    /* X23 */ null,
    /* X27 */ null,
    /* X28 */ null,
    /* X34 */ null,
    /* X35 */ null,
    /* Label */ h2o_nn_16x16x6_ReLU_12_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.2864864864864865,0.13513513513513514,0.14594594594594595,0.2864864864864865,0.14594594594594595};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public h2o_nn_16x16x6_ReLU_12() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(5353567770497259584L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : data[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// Neuron activation values for Input layer
class h2o_nn_16x16x6_ReLU_12_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[13];
  static {
    h2o_nn_16x16x6_ReLU_12_Activation_0_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_12_Activation_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_12_Activation_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class h2o_nn_16x16x6_ReLU_12_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_12_Activation_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class h2o_nn_16x16x6_ReLU_12_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_12_Bias_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.6312635626025017;
      sa[1] = 0.6533590732997305;
      sa[2] = 0.5381930743014459;
      sa[3] = 0.49444436829290306;
      sa[4] = 0.6000576131447954;
      sa[5] = 0.4158927200291441;
      sa[6] = 0.44235466033350407;
      sa[7] = 0.7615749389044464;
      sa[8] = 0.5292577458456311;
      sa[9] = 0.6623892538770617;
      sa[10] = 0.3452769511448352;
      sa[11] = 0.27474906591420317;
      sa[12] = 0.4105839875457482;
      sa[13] = 0.46228177643510315;
      sa[14] = 0.5487622381098575;
      sa[15] = 0.4664852959861855;
    }
  }
}
// Neuron bias values for Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    h2o_nn_16x16x6_ReLU_12_Bias_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.1160055707799106;
      sa[1] = 1.0083443067249747;
      sa[2] = 0.9548456752759799;
      sa[3] = 0.9696436511607823;
      sa[4] = 0.9697868500727241;
      sa[5] = 1.0493189971335364;
      sa[6] = 0.9310962945774363;
      sa[7] = 0.894611259338831;
      sa[8] = 0.8936761491260928;
      sa[9] = 0.9949552087616739;
      sa[10] = 0.8887759624343542;
      sa[11] = 1.0474511241516158;
      sa[12] = 1.024459538147863;
      sa[13] = 0.9963726649468047;
      sa[14] = 1.0771405614336123;
      sa[15] = 1.0945328048484533;
    }
  }
}
// Neuron bias values for Softmax layer
class h2o_nn_16x16x6_ReLU_12_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    h2o_nn_16x16x6_ReLU_12_Bias_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.08076600931411315;
      sa[1] = 0.025347264085890667;
      sa[2] = -0.02700870964132284;
      sa[3] = -0.022667180973259704;
      sa[4] = 0.0390760915153728;
    }
  }
}
class h2o_nn_16x16x6_ReLU_12_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[208];
  static {
    h2o_nn_16x16x6_ReLU_12_Weight_1_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.2637166f;
      sa[1] = 0.29229566f;
      sa[2] = 0.35867724f;
      sa[3] = 0.35156253f;
      sa[4] = -0.033008184f;
      sa[5] = -0.37942094f;
      sa[6] = -0.04843234f;
      sa[7] = 0.4517942f;
      sa[8] = 0.25988504f;
      sa[9] = -0.2685339f;
      sa[10] = -0.05058279f;
      sa[11] = -0.36045915f;
      sa[12] = 0.14844844f;
      sa[13] = -0.116812155f;
      sa[14] = -0.37749353f;
      sa[15] = 0.062083088f;
      sa[16] = 0.061213445f;
      sa[17] = 0.31580335f;
      sa[18] = -0.24761881f;
      sa[19] = 0.057478745f;
      sa[20] = 0.43318912f;
      sa[21] = -0.34257057f;
      sa[22] = 0.4512957f;
      sa[23] = 0.06503101f;
      sa[24] = 0.600557f;
      sa[25] = 0.257905f;
      sa[26] = -0.4912321f;
      sa[27] = 0.40563112f;
      sa[28] = 0.3040323f;
      sa[29] = -0.5028433f;
      sa[30] = -0.4116498f;
      sa[31] = 0.27443725f;
      sa[32] = 0.29495683f;
      sa[33] = -0.46000832f;
      sa[34] = 0.11824855f;
      sa[35] = -0.11689683f;
      sa[36] = 0.03298414f;
      sa[37] = 0.33280095f;
      sa[38] = -0.16305128f;
      sa[39] = 0.28616685f;
      sa[40] = -0.0710334f;
      sa[41] = -0.117836684f;
      sa[42] = -0.13845466f;
      sa[43] = 0.10194251f;
      sa[44] = 0.18472438f;
      sa[45] = -0.1304849f;
      sa[46] = 0.020773808f;
      sa[47] = -0.0026319786f;
      sa[48] = 0.28290966f;
      sa[49] = 0.6789432f;
      sa[50] = 0.33507344f;
      sa[51] = -0.59263885f;
      sa[52] = -0.10680557f;
      sa[53] = 0.2553934f;
      sa[54] = 0.33273426f;
      sa[55] = 0.106286965f;
      sa[56] = -0.18521646f;
      sa[57] = -0.5195694f;
      sa[58] = 0.65904456f;
      sa[59] = -0.24481113f;
      sa[60] = -0.41784358f;
      sa[61] = 0.25496966f;
      sa[62] = 0.10139788f;
      sa[63] = -0.002654378f;
      sa[64] = -0.0065997387f;
      sa[65] = 0.13779992f;
      sa[66] = 0.07254102f;
      sa[67] = 0.22084045f;
      sa[68] = 0.15881756f;
      sa[69] = 0.44542122f;
      sa[70] = -0.46545005f;
      sa[71] = 0.7073564f;
      sa[72] = -0.20459767f;
      sa[73] = 0.24342059f;
      sa[74] = -0.2940147f;
      sa[75] = 0.054575738f;
      sa[76] = -0.47558302f;
      sa[77] = -0.16021281f;
      sa[78] = -0.15357846f;
      sa[79] = 0.3443157f;
      sa[80] = -0.28182027f;
      sa[81] = -0.1641658f;
      sa[82] = -0.05118183f;
      sa[83] = 0.20630528f;
      sa[84] = -0.12560762f;
      sa[85] = -0.2862493f;
      sa[86] = 0.22694325f;
      sa[87] = 0.32421434f;
      sa[88] = 0.20271982f;
      sa[89] = 0.048833992f;
      sa[90] = -0.08840862f;
      sa[91] = 0.34926057f;
      sa[92] = 0.07413363f;
      sa[93] = -0.17582497f;
      sa[94] = -0.17895603f;
      sa[95] = -0.01837491f;
      sa[96] = 0.14403069f;
      sa[97] = 0.07772412f;
      sa[98] = 0.44996747f;
      sa[99] = -0.020383112f;
      sa[100] = -0.10720799f;
      sa[101] = -0.0904489f;
      sa[102] = -0.51551193f;
      sa[103] = 0.14013909f;
      sa[104] = 0.11329214f;
      sa[105] = -0.1545586f;
      sa[106] = -0.30439898f;
      sa[107] = 0.12253473f;
      sa[108] = 0.28522503f;
      sa[109] = -0.25508878f;
      sa[110] = -0.4718993f;
      sa[111] = 0.24601163f;
      sa[112] = 0.22892472f;
      sa[113] = 0.12162919f;
      sa[114] = -0.19150154f;
      sa[115] = 0.11734133f;
      sa[116] = -0.55808574f;
      sa[117] = 0.17335063f;
      sa[118] = -0.5700533f;
      sa[119] = -0.21371554f;
      sa[120] = 0.33855817f;
      sa[121] = 0.6401991f;
      sa[122] = 0.35719395f;
      sa[123] = 0.4856592f;
      sa[124] = 0.47072846f;
      sa[125] = 0.47573712f;
      sa[126] = -0.3667519f;
      sa[127] = -0.06921353f;
      sa[128] = 0.14349592f;
      sa[129] = 0.2722632f;
      sa[130] = -0.27376214f;
      sa[131] = 0.4669819f;
      sa[132] = 0.20431831f;
      sa[133] = -0.3159529f;
      sa[134] = 0.20870039f;
      sa[135] = -0.4617361f;
      sa[136] = -0.23898648f;
      sa[137] = -0.082872964f;
      sa[138] = 0.09739369f;
      sa[139] = -0.22834012f;
      sa[140] = -0.23337868f;
      sa[141] = -0.3366145f;
      sa[142] = 0.2663406f;
      sa[143] = -0.53670126f;
      sa[144] = 0.4502842f;
      sa[145] = -0.27030948f;
      sa[146] = -0.36650082f;
      sa[147] = 0.25333923f;
      sa[148] = 0.24011558f;
      sa[149] = 0.31321833f;
      sa[150] = 0.33450785f;
      sa[151] = -0.44861117f;
      sa[152] = 0.0026167203f;
      sa[153] = 0.33071786f;
      sa[154] = 0.31545043f;
      sa[155] = -0.17397824f;
      sa[156] = 0.100348026f;
      sa[157] = -0.29393587f;
      sa[158] = 0.084264964f;
      sa[159] = 0.14304775f;
      sa[160] = 0.051825024f;
      sa[161] = 0.25655952f;
      sa[162] = -0.14035423f;
      sa[163] = -0.16034988f;
      sa[164] = 0.29200363f;
      sa[165] = -0.10254995f;
      sa[166] = -0.16832405f;
      sa[167] = -0.37351596f;
      sa[168] = 0.31377065f;
      sa[169] = 0.45069918f;
      sa[170] = -0.022168614f;
      sa[171] = -0.090385854f;
      sa[172] = -0.15918706f;
      sa[173] = -0.23205034f;
      sa[174] = 0.028750146f;
      sa[175] = -0.27657965f;
      sa[176] = -0.12424177f;
      sa[177] = -0.10566068f;
      sa[178] = 0.018478578f;
      sa[179] = 0.41538048f;
      sa[180] = 0.24189883f;
      sa[181] = -0.67600274f;
      sa[182] = -0.116288625f;
      sa[183] = 0.1560244f;
      sa[184] = 0.51083153f;
      sa[185] = 0.3768162f;
      sa[186] = -0.2610499f;
      sa[187] = 0.053463522f;
      sa[188] = -0.056336142f;
      sa[189] = 0.3753769f;
      sa[190] = 0.11667644f;
      sa[191] = -0.10346954f;
      sa[192] = -0.34039038f;
      sa[193] = 0.25300112f;
      sa[194] = 0.13696311f;
      sa[195] = 0.41584754f;
      sa[196] = 0.314447f;
      sa[197] = -0.043391526f;
      sa[198] = 0.2555481f;
      sa[199] = 0.052846834f;
      sa[200] = -0.16243486f;
      sa[201] = -0.24740568f;
      sa[202] = 0.20300083f;
      sa[203] = -0.05848208f;
      sa[204] = -0.37069303f;
      sa[205] = 0.61582655f;
      sa[206] = 0.36535466f;
      sa[207] = 0.15404426f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class h2o_nn_16x16x6_ReLU_12_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    h2o_nn_16x16x6_ReLU_12_Weight_2_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.48386642f;
      sa[1] = 0.015530799f;
      sa[2] = -0.2674714f;
      sa[3] = -0.3063165f;
      sa[4] = 0.004937085f;
      sa[5] = 0.041524556f;
      sa[6] = 0.35777017f;
      sa[7] = -0.082160145f;
      sa[8] = -0.3637553f;
      sa[9] = 0.31767422f;
      sa[10] = 0.043385025f;
      sa[11] = -0.028686369f;
      sa[12] = 0.2719905f;
      sa[13] = -0.027491152f;
      sa[14] = -0.2986121f;
      sa[15] = 0.46134245f;
      sa[16] = 0.53953665f;
      sa[17] = -0.17937964f;
      sa[18] = -0.21129169f;
      sa[19] = -0.39589307f;
      sa[20] = 0.41385219f;
      sa[21] = 0.111707814f;
      sa[22] = -0.41366246f;
      sa[23] = 0.2691906f;
      sa[24] = -0.39779207f;
      sa[25] = 0.18703736f;
      sa[26] = 0.01928449f;
      sa[27] = 0.23601806f;
      sa[28] = -0.30456564f;
      sa[29] = -0.31288254f;
      sa[30] = 0.077947006f;
      sa[31] = -0.2351341f;
      sa[32] = -0.19967125f;
      sa[33] = -0.5738752f;
      sa[34] = -0.085516304f;
      sa[35] = 0.11087318f;
      sa[36] = -0.06339267f;
      sa[37] = 0.010062453f;
      sa[38] = -0.06408178f;
      sa[39] = 0.30818766f;
      sa[40] = -0.28908867f;
      sa[41] = -0.38803154f;
      sa[42] = -0.16952683f;
      sa[43] = -0.54715157f;
      sa[44] = 0.051413696f;
      sa[45] = -0.5206439f;
      sa[46] = 0.32433695f;
      sa[47] = 0.25045434f;
      sa[48] = -0.353501f;
      sa[49] = -0.33559173f;
      sa[50] = 0.1252286f;
      sa[51] = -0.13085507f;
      sa[52] = 0.1903335f;
      sa[53] = 0.18278736f;
      sa[54] = -0.092224024f;
      sa[55] = 0.32385045f;
      sa[56] = -0.28058785f;
      sa[57] = -0.36859927f;
      sa[58] = 0.06625713f;
      sa[59] = -0.11224497f;
      sa[60] = 0.33559728f;
      sa[61] = -0.17051055f;
      sa[62] = -0.07802521f;
      sa[63] = 0.10069009f;
      sa[64] = 0.35885394f;
      sa[65] = -0.13505358f;
      sa[66] = 0.15411288f;
      sa[67] = 0.39437345f;
      sa[68] = 0.32425305f;
      sa[69] = -0.078813925f;
      sa[70] = -0.45398492f;
      sa[71] = -0.13998367f;
      sa[72] = -0.3775092f;
      sa[73] = 0.35084927f;
      sa[74] = 0.30093396f;
      sa[75] = 0.013725582f;
      sa[76] = 0.18578488f;
      sa[77] = 0.09878286f;
      sa[78] = -0.40954602f;
      sa[79] = 0.20345753f;
      sa[80] = -0.17856765f;
      sa[81] = 0.015306107f;
      sa[82] = 0.394492f;
      sa[83] = -0.122645296f;
      sa[84] = -0.613288f;
      sa[85] = -0.5679761f;
      sa[86] = 0.14818506f;
      sa[87] = 0.4096542f;
      sa[88] = -0.4014882f;
      sa[89] = -0.19610153f;
      sa[90] = -0.20040435f;
      sa[91] = 0.36450934f;
      sa[92] = -0.018889641f;
      sa[93] = 0.14676115f;
      sa[94] = -0.28413755f;
      sa[95] = -0.0047487793f;
      sa[96] = -0.22186789f;
      sa[97] = -0.13541533f;
      sa[98] = -0.13159709f;
      sa[99] = -0.15400164f;
      sa[100] = -0.30993858f;
      sa[101] = -0.08831239f;
      sa[102] = 0.22764035f;
      sa[103] = 0.059888557f;
      sa[104] = -0.18066178f;
      sa[105] = -0.20244779f;
      sa[106] = 0.48442551f;
      sa[107] = 0.10796286f;
      sa[108] = 0.24883595f;
      sa[109] = -0.13586682f;
      sa[110] = 0.14926255f;
      sa[111] = -0.34040314f;
      sa[112] = -0.3879202f;
      sa[113] = -0.067357905f;
      sa[114] = 0.10819755f;
      sa[115] = -0.11856041f;
      sa[116] = 0.26478457f;
      sa[117] = -0.062905885f;
      sa[118] = -0.37789056f;
      sa[119] = -0.25964984f;
      sa[120] = -0.14929506f;
      sa[121] = 0.12518062f;
      sa[122] = -0.059001837f;
      sa[123] = 0.0652512f;
      sa[124] = -0.2786568f;
      sa[125] = 0.1786855f;
      sa[126] = -0.29425222f;
      sa[127] = 0.016455173f;
      sa[128] = -0.34278673f;
      sa[129] = 0.11042552f;
      sa[130] = 0.010679234f;
      sa[131] = 0.22382897f;
      sa[132] = 0.04738871f;
      sa[133] = 0.06951809f;
      sa[134] = 0.14750567f;
      sa[135] = -0.3587805f;
      sa[136] = 0.135869f;
      sa[137] = -0.35208008f;
      sa[138] = -0.08631294f;
      sa[139] = 0.35672462f;
      sa[140] = -0.24978514f;
      sa[141] = -0.0047592698f;
      sa[142] = 0.06521585f;
      sa[143] = -0.3319158f;
      sa[144] = 0.26392755f;
      sa[145] = -0.19617398f;
      sa[146] = 0.028673587f;
      sa[147] = -0.021070212f;
      sa[148] = -0.30517343f;
      sa[149] = 0.19498667f;
      sa[150] = -0.2803771f;
      sa[151] = -0.44942772f;
      sa[152] = 0.4843402f;
      sa[153] = -0.23218814f;
      sa[154] = 0.37229824f;
      sa[155] = -0.42304987f;
      sa[156] = -0.3958205f;
      sa[157] = -0.24203858f;
      sa[158] = -0.025820404f;
      sa[159] = -0.10719061f;
      sa[160] = 0.29783133f;
      sa[161] = -0.40355673f;
      sa[162] = 0.4920858f;
      sa[163] = -0.28858352f;
      sa[164] = 0.13505328f;
      sa[165] = -0.23071502f;
      sa[166] = 0.31921962f;
      sa[167] = -0.41963798f;
      sa[168] = 0.23132601f;
      sa[169] = -0.5233249f;
      sa[170] = 0.30141994f;
      sa[171] = 0.20531914f;
      sa[172] = 0.31959867f;
      sa[173] = 0.35606855f;
      sa[174] = -0.03798564f;
      sa[175] = -0.14284496f;
      sa[176] = -0.25210652f;
      sa[177] = 0.11950216f;
      sa[178] = -0.09154575f;
      sa[179] = 0.18473488f;
      sa[180] = -0.42116386f;
      sa[181] = -0.30683962f;
      sa[182] = 0.2288795f;
      sa[183] = -0.26555142f;
      sa[184] = 0.41075146f;
      sa[185] = 0.33932042f;
      sa[186] = -0.16480951f;
      sa[187] = -0.19099264f;
      sa[188] = -0.11274737f;
      sa[189] = -0.053180754f;
      sa[190] = -0.33756348f;
      sa[191] = -0.16170374f;
      sa[192] = -0.10519003f;
      sa[193] = 0.23081087f;
      sa[194] = -0.2037733f;
      sa[195] = -0.09010204f;
      sa[196] = 0.21068005f;
      sa[197] = -0.12606783f;
      sa[198] = 0.057913166f;
      sa[199] = 0.36905015f;
      sa[200] = 0.0917609f;
      sa[201] = 0.29322556f;
      sa[202] = 0.087252386f;
      sa[203] = -0.26216584f;
      sa[204] = 0.067503184f;
      sa[205] = 0.46171242f;
      sa[206] = -0.1536164f;
      sa[207] = 0.18797591f;
      sa[208] = -0.23784551f;
      sa[209] = 0.11973051f;
      sa[210] = -0.07454452f;
      sa[211] = -0.2963475f;
      sa[212] = -0.49286267f;
      sa[213] = -0.1630122f;
      sa[214] = -0.25532266f;
      sa[215] = -0.011458843f;
      sa[216] = -0.05173597f;
      sa[217] = 0.29649967f;
      sa[218] = 0.07819177f;
      sa[219] = -0.048686918f;
      sa[220] = 0.2509989f;
      sa[221] = -0.073303774f;
      sa[222] = -0.23440847f;
      sa[223] = -0.23472917f;
      sa[224] = 0.31393066f;
      sa[225] = 0.14634266f;
      sa[226] = -0.03005368f;
      sa[227] = 0.1343064f;
      sa[228] = -0.20600821f;
      sa[229] = -0.3319851f;
      sa[230] = -0.16278419f;
      sa[231] = -0.08720179f;
      sa[232] = 0.46847057f;
      sa[233] = -0.09678185f;
      sa[234] = -0.10335058f;
      sa[235] = 0.057203677f;
      sa[236] = -0.28606513f;
      sa[237] = 0.4745633f;
      sa[238] = 0.21114662f;
      sa[239] = 0.04718881f;
      sa[240] = -0.04033587f;
      sa[241] = -0.2714495f;
      sa[242] = -0.30017474f;
      sa[243] = 0.41243568f;
      sa[244] = 0.26806554f;
      sa[245] = 0.4214566f;
      sa[246] = 0.1959727f;
      sa[247] = -0.31305042f;
      sa[248] = -0.11180154f;
      sa[249] = 0.11827904f;
      sa[250] = 0.24542205f;
      sa[251] = 0.49093044f;
      sa[252] = 0.2424737f;
      sa[253] = -0.28280985f;
      sa[254] = 0.43292105f;
      sa[255] = 0.2701633f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class h2o_nn_16x16x6_ReLU_12_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    h2o_nn_16x16x6_ReLU_12_Weight_3_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.033286612f;
      sa[1] = -1.6450278f;
      sa[2] = -1.6317602f;
      sa[3] = 1.2515168f;
      sa[4] = 0.356553f;
      sa[5] = -0.10826071f;
      sa[6] = -1.6968949f;
      sa[7] = 1.5070596f;
      sa[8] = 1.8285221f;
      sa[9] = 0.16071902f;
      sa[10] = 1.6427232f;
      sa[11] = 1.386871f;
      sa[12] = 1.814791f;
      sa[13] = -0.7146324f;
      sa[14] = -1.9652964f;
      sa[15] = -0.78255725f;
      sa[16] = 0.7649455f;
      sa[17] = -0.811957f;
      sa[18] = -1.5326625f;
      sa[19] = -0.91412055f;
      sa[20] = -1.9228481f;
      sa[21] = 0.32817763f;
      sa[22] = -1.9845964f;
      sa[23] = -0.6042847f;
      sa[24] = -0.53386295f;
      sa[25] = 1.895935f;
      sa[26] = -0.3150088f;
      sa[27] = 1.2724813f;
      sa[28] = 1.2474525f;
      sa[29] = -0.75445133f;
      sa[30] = 0.22292423f;
      sa[31] = 0.16243772f;
      sa[32] = 0.48892844f;
      sa[33] = 0.36417672f;
      sa[34] = -0.7511574f;
      sa[35] = 1.0513982f;
      sa[36] = 0.5450739f;
      sa[37] = -2.089934f;
      sa[38] = 0.5101195f;
      sa[39] = -0.22275704f;
      sa[40] = 0.13136059f;
      sa[41] = -0.6782145f;
      sa[42] = 0.47061542f;
      sa[43] = -0.1984627f;
      sa[44] = 1.0042346f;
      sa[45] = -2.008654f;
      sa[46] = -2.1820579f;
      sa[47] = 0.01432432f;
      sa[48] = 1.6534206f;
      sa[49] = -0.23999138f;
      sa[50] = -0.41369104f;
      sa[51] = 1.8361825f;
      sa[52] = -1.7250029f;
      sa[53] = 1.052555f;
      sa[54] = 1.8424828f;
      sa[55] = 0.98134506f;
      sa[56] = -0.68748033f;
      sa[57] = -0.10049685f;
      sa[58] = 1.0514314f;
      sa[59] = 0.67790616f;
      sa[60] = -1.4045358f;
      sa[61] = 0.9797844f;
      sa[62] = -0.4932996f;
      sa[63] = -0.87132066f;
      sa[64] = 0.9724344f;
      sa[65] = -0.95730865f;
      sa[66] = -1.7563602f;
      sa[67] = -0.13171048f;
      sa[68] = 0.9234631f;
      sa[69] = -1.327063f;
      sa[70] = -1.6703796f;
      sa[71] = 0.013033065f;
      sa[72] = -0.99669755f;
      sa[73] = -1.2408383f;
      sa[74] = -1.1367748f;
      sa[75] = 1.3161212f;
      sa[76] = 1.9145033f;
      sa[77] = -0.57445437f;
      sa[78] = -1.415498f;
      sa[79] = -0.33441612f;
    }
  }
}
// The class representing training column names
class NamesHolder_h2o_nn_16x16x6_ReLU_12 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_h2o_nn_16x16x6_ReLU_12_0.fill(VALUES);
  }
  static final class NamesHolder_h2o_nn_16x16x6_ReLU_12_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "X5";
      sa[1] = "X12";
      sa[2] = "X15";
      sa[3] = "X17";
      sa[4] = "X18";
      sa[5] = "X19";
      sa[6] = "X20";
      sa[7] = "X21";
      sa[8] = "X23";
      sa[9] = "X27";
      sa[10] = "X28";
      sa[11] = "X34";
      sa[12] = "X35";
    }
  }
}
// The class representing column Label
class h2o_nn_16x16x6_ReLU_12_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    h2o_nn_16x16x6_ReLU_12_ColInfo_13_0.fill(VALUES);
  }
  static final class h2o_nn_16x16x6_ReLU_12_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "4";
      sa[3] = "5";
      sa[4] = "6";
    }
  }
}


